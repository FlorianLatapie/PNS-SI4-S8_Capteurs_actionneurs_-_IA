
TP2.elf:     file format elf32-littlenios2
TP2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001cdc8 memsz 0x0001cdc8 flags r-x
    LOAD off    0x0001dde8 vaddr 0x0401cde8 paddr 0x0401e990 align 2**12
         filesz 0x00001ba8 memsz 0x00001ba8 flags rw-
    LOAD off    0x00020538 vaddr 0x04020538 paddr 0x04020538 align 2**12
         filesz 0x00000000 memsz 0x000094dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c6f0  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b4  0401c934  0401c934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba8  0401cde8  0401e990  0001dde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000094dc  04020538  04020538  00020538  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04029a14  04029a14  0001f990  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08002000  08002000  0001f990  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f990  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011d0  00000000  00000000  0001f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003227d  00000000  00000000  00020b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c093  00000000  00000000  00052e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fce5  00000000  00000000  0005ee98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000372c  00000000  00000000  0006eb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004e45  00000000  00000000  000722ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ce8f  00000000  00000000  000770f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00093f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ba0  00000000  00000000  00093fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0009ad3d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0009ad43  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009ad46  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009ad47  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0009ad48  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0009ad51  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0009ad5a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000005  00000000  00000000  0009ad63  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  0009ad68  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00073258  00000000  00000000  0009ada3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401c934 l    d  .rodata	00000000 .rodata
0401cde8 l    d  .rwdata	00000000 .rwdata
04020538 l    d  .bss	00000000 .bss
04029a14 l    d  .sdram	00000000 .sdram
08002000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TP2_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
04000768 l     F .text	000000f4 handle_button_interrupts
0400085c l     F .text	00000070 init_button_pio
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401cad2 l     O .rodata	00000010 zeroes.4389
0401cae2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0401caf2 l     O .rodata	00000010 zeroes.4404
04005ad4 l     F .text	000000bc __sbprintf
0401cb02 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04005ce4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04007814 l     F .text	00000008 __fp_unlock
04007828 l     F .text	0000019c __sinit.part.1
040079c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0401cde8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0401d22c l     O .rwdata	00000020 lc_ctype_charset
0401d20c l     O .rwdata	00000020 lc_message_charset
0401d24c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0401cb34 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401cc68 l     O .rodata	00000010 blanks.4332
0401cc58 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0400c1cc l     F .text	000000fc __sprint_r.part.0
0401cc88 l     O .rodata	00000010 blanks.4348
0401cc78 l     O .rodata	00000010 zeroes.4349
0400d758 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
040111b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040112c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040112ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04011558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04011638 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04011724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
040118f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401e908 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04011c50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0401e90c l     O .rwdata	00000004 lockid
040205a0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0401e910 l     O .rwdata	00000004 lockid
040205a8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
04013680 l     F .text	00000048 OS_InitMisc
040136c8 l     F .text	0000006c OS_InitRdyList
04013834 l     F .text	000000e4 OS_InitTCBList
040135a0 l     F .text	000000e0 OS_InitEventList
04013734 l     F .text	00000080 OS_InitTaskIdle
040137b4 l     F .text	00000080 OS_InitTaskStat
04013aa4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
040157b4 l     F .text	000000f4 OS_FlagTaskRdy
04015574 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401a320 l     F .text	00000034 alt_dev_reg
0401d834 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401a698 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0401a93c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401b118 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401b4d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401b94c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0401ba8c l     F .text	0000003c alt_get_errno
0401bac8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04020608 g     O .bss	00000004 alt_instruction_exception_handler
0400a404 g     F .text	00000074 _mprec_log10
0401e95e g     O .rwdata	00000002 OSTaskNameSize
0400a4f0 g     F .text	0000008c __any_on
0400dcf4 g     F .text	00000054 _isatty_r
0401cb40 g     O .rodata	00000028 __mprec_tinytens
04011834 g     F .text	000000bc alt_main
0400143c g     F .text	000000c0 _puts_r
04029914 g     O .bss	00000100 alt_irq
0400dd48 g     F .text	00000060 _lseek_r
04016a9c g     F .text	000000cc OS_MemInit
0401e990 g       *ABS*	00000000 __flash_rwdata_start
0401a2c0 g     F .text	00000060 OSTimeSet
0400fdec g     F .text	00000088 .hidden __eqdf2
040122f4 g     F .text	00000610 OSEventPendMulti
04029a14 g       *ABS*	00000000 __alt_heap_start
0401c0d4 g     F .text	00000024 OSTaskCreateHook
04020634 g     O .bss	00002000 task1_stk
0401e8c8 g     O .rwdata	00000004 sdram
04001400 g     F .text	0000003c printf
0401e936 g     O .rwdata	00000002 OSMboxEn
0401295c g     F .text	0000004c OSIntEnter
0400df60 g     F .text	0000009c _wcrtomb_r
0400ac80 g     F .text	0000005c __sseek
04007b64 g     F .text	00000010 __sinit
0400de08 g     F .text	00000140 __swbuf_r
04020550 g     O .bss	00000004 averageTime
0401e946 g     O .rwdata	00000002 OSQEn
0400862c g     F .text	0000007c _setlocale_r
040079cc g     F .text	00000068 __sfmoreglue
04011fc8 g     F .text	000000cc __malloc_unlock
0401c13c g     F .text	00000020 OSTaskStatHook
040205b0 g     O .bss	00000001 OSLockNesting
0401e984 g     O .rwdata	00000002 OSDataSize
040205b1 g     O .bss	00000001 OSRunning
040092fc g     F .text	0000015c memmove
04020544 g     O .bss	00000004 totalTime
0401c17c g     F .text	00000020 OSInitHookBegin
0401e97c g     O .rwdata	00000002 OSTmrSize
04007b4c g     F .text	00000018 _cleanup
04020554 g     O .bss	00000004 mailBox1_2
04009580 g     F .text	000000a8 _Balloc
0401e8d0 g     O .rwdata	00000004 timer
04000e78 g     F .text	00000070 .hidden __fixsfsi
04022634 g     O .bss	00000050 msgQueueTbl
040205b4 g     O .bss	00000004 OSIdleCtr
0400fe74 g     F .text	000000dc .hidden __gtdf2
0401e8b8 g     O .rwdata	00000004 jtag_uart
0401be84 g     F .text	00000024 altera_nios2_gen2_irq_init
0401bf54 g       .text	00000000 OSStartTsk
04013dd4 g     F .text	000002d4 OS_TCBInit
04000000 g     F .entry	0000001c __reset
04020558 g     O .bss	00000004 edge_capture
0401e982 g     O .rwdata	00000002 OSTmrWheelTblSize
04022684 g     O .bss	0000006c tasks
0401e8a0 g     O .rwdata	00000004 hex0
04000020 g       *ABS*	00000000 __flash_exceptions_start
0401e922 g     O .rwdata	00000002 OSEventSize
040205b8 g     O .bss	00000001 OSPrioHighRdy
0400dc98 g     F .text	0000005c _fstat_r
0401c0f8 g     F .text	00000024 OSTaskDelHook
04020588 g     O .bss	00000004 errno
0402055c g     O .bss	00000004 msgQueue_trigger
0400abfc g     F .text	00000008 __seofread
0401bf34 g       .text	00000000 OSStartHighRdy
04018d68 g     F .text	000001e4 OSTaskCreateExt
0400af90 g     F .text	0000123c ___svfiprintf_internal_r
040150bc g     F .text	00000060 OSFlagPendGetFlagsRdy
0401e962 g     O .rwdata	00000002 OSTaskStatStkSize
04014238 g     F .text	00000308 OSFlagAccept
040170d4 g     F .text	000000b8 OSQFlush
04016b68 g     F .text	00000140 OSQAccept
04020598 g     O .bss	00000004 alt_argv
040268a0 g       *ABS*	00000000 _gp
04011b3c g     F .text	00000114 usleep
04000338 g     F .text	0000010c convertTo7segments
04018bbc g     F .text	000001ac OSTaskCreate
040186cc g     F .text	000004f0 OSTaskChangePrio
04000544 g     F .text	00000098 displayNothing
040205ac g     O .bss	00000004 alt_heapsem
040140a8 g     F .text	00000190 OSDebugInit
04018f4c g     F .text	00000344 OSTaskDel
0401d6b4 g     O .rwdata	00000180 alt_fd_list
040266f0 g     O .bss	00000370 OSFlagTbl
0400060c g     F .text	00000090 displayBinaryNumber
04000444 g     F .text	00000100 displayDecimalNumber
0400069c g     F .text	00000030 ledOff
04013380 g     F .text	000000b8 OS_EventTaskRemove
0401c200 g     F .text	00000090 alt_find_dev
040091b4 g     F .text	00000148 memcpy
0401e94c g     O .rwdata	00000002 OSRdyTblSize
0400781c g     F .text	0000000c _cleanup_r
040110d8 g     F .text	000000dc .hidden __floatsidf
0401ba10 g     F .text	0000007c alt_io_redirect
0400ff50 g     F .text	000000f4 .hidden __ltdf2
0401c934 g       *ABS*	00000000 __DTOR_END__
040014fc g     F .text	00000014 puts
0401c504 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04012094 g     F .text	00000120 OSEventNameGet
0401e930 g     O .rwdata	00000002 OSFlagMax
0400aae0 g     F .text	00000074 __fpclassifyd
0400a360 g     F .text	000000a4 __ratio
040129a8 g     F .text	000000f8 OSIntExit
0400d73c g     F .text	0000001c __vfiprintf_internal
0401e96a g     O .rwdata	00000002 OSTCBSize
040205b9 g     O .bss	00000001 OSPrioCur
0401ab98 g     F .text	000002bc altera_avalon_jtag_uart_read
040013d0 g     F .text	00000030 _printf_r
08002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04000dbc g     F .text	00000064 .hidden __udivsi3
04011594 g     F .text	000000a4 isatty
0401e950 g     O .rwdata	00000002 OSStkWidth
0401cb90 g     O .rodata	000000c8 __mprec_tens
0401e944 g     O .rwdata	00000002 OSPtrSize
040086a8 g     F .text	0000000c __locale_charset
0401e924 g     O .rwdata	00000002 OSEventTblSize
0401bea8 g       .text	00000000 OSCtxSw
0401c474 g     F .text	00000090 alt_icache_flush
04020584 g     O .bss	00000004 __malloc_top_pad
040205bc g     O .bss	00000004 OSTCBList
0402058c g     O .bss	00000004 alt_fd_list_lock
0401e8dc g     O .rwdata	00000004 __mb_cur_max
040086d8 g     F .text	0000000c _localeconv_r
0400998c g     F .text	0000003c __i2b
04007fe8 g     F .text	000004bc __sfvwrite_r
04026a60 g     O .bss	00000c30 OSMemTbl
040205c0 g     O .bss	00000001 OSTickStepState
0400ab54 g     F .text	00000054 _sbrk_r
0401e948 g     O .rwdata	00000002 OSQMax
04027690 g     O .bss	00000800 OSTaskStatStk
040166d8 g     F .text	000000f0 OSMemNameGet
0401e928 g     O .rwdata	00000002 OSFlagEn
0400dda8 g     F .text	00000060 _read_r
0401e96e g     O .rwdata	00000002 OSTimeTickHookEn
040158a8 g     F .text	000000a4 OS_FlagUnlink
04017584 g     F .text	00000168 OSQPost
0401e8fc g     O .rwdata	00000004 alt_max_fd
0401396c g     F .text	00000068 OS_MemCopy
040139d4 g     F .text	000000d0 OS_Sched
0400d98c g     F .text	000000f0 _fclose_r
040165e8 g     F .text	000000f0 OSMemGet
04016304 g     F .text	00000110 OSMboxQuery
04019578 g     F .text	000001b4 OSTaskNameSet
040077e4 g     F .text	00000030 fflush
04020580 g     O .bss	00000004 __malloc_max_sbrked_mem
040205c4 g     O .bss	00000004 OSCtxSwCtr
0401c15c g     F .text	00000020 OSTimeTickHook
040113d8 g     F .text	00000180 alt_irq_register
0401e932 g     O .rwdata	00000002 OSFlagNameSize
040010b4 g     F .text	00000110 .hidden __extendsfdf2
04013438 g     F .text	00000100 OS_EventTaskRemoveMulti
0400ec58 g     F .text	000008ac .hidden __adddf3
04013230 g     F .text	00000150 OS_EventTaskWaitMulti
0400a108 g     F .text	0000010c __b2d
0401e94a g     O .rwdata	00000002 OSQSize
0400e720 g     F .text	00000538 .hidden __umoddi3
04011760 g     F .text	000000d4 lseek
04018034 g     F .text	0000020c OSSemPend
0401e8d4 g     O .rwdata	00000004 _global_impure_ptr
0400a57c g     F .text	00000564 _realloc_r
0401e934 g     O .rwdata	00000002 OSLowestPrio
04029a14 g       *ABS*	00000000 __bss_end
0401b85c g     F .text	000000f0 alt_iic_isr_register
0401c1dc g     F .text	00000024 OSTCBInitHook
0401e97a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0401bd7c g     F .text	00000108 alt_tick
04016098 g     F .text	00000110 OSMboxPost
0400e1a8 g     F .text	00000578 .hidden __udivdi3
0400dbf4 g     F .text	00000024 _fputwc_r
0401e91c g     O .rwdata	00000002 OSEventEn
0401cb68 g     O .rodata	00000028 __mprec_bigtens
04009770 g     F .text	00000104 __s2b
0401e976 g     O .rwdata	00000002 OSTmrCfgNameSize
0400100c g     F .text	000000a8 .hidden __floatunsidf
04009e48 g     F .text	00000060 __mcmp
04007b84 g     F .text	00000018 __fp_lock_all
0401b810 g     F .text	0000004c alt_ic_irq_enabled
040156d4 g     F .text	000000e0 OS_FlagInit
0401bce0 g     F .text	0000009c alt_alarm_stop
0401e958 g     O .rwdata	00000002 OSTaskIdleStkSize
04020590 g     O .bss	00000004 alt_irq_active
04017c6c g     F .text	000000b0 OSSemAccept
040168dc g     F .text	000000d8 OSMemPut
04016414 g     F .text	000001d4 OSMemCreate
040205c8 g     O .bss	00000004 OSIdleCtrMax
040000fc g     F .exceptions	000000d4 alt_irq_handler
0401d68c g     O .rwdata	00000028 alt_dev_null
0401e96c g     O .rwdata	00000002 OSTicksPerSec
0401e8a8 g     O .rwdata	00000004 hex2
04000290 g     F .text	000000a8 divideNumberIntoArray
0401bea8 g       .text	00000000 OSIntCtxSw
0401b490 g     F .text	00000048 alt_dcache_flush_all
04009874 g     F .text	00000068 __hi0bits
04011058 g     F .text	00000080 .hidden __fixdfsi
040205cc g     O .bss	00000004 OSTCBFreeList
0401e990 g       *ABS*	00000000 __ram_rwdata_end
04018240 g     F .text	0000016c OSSemPendAbort
0401e8f4 g     O .rwdata	00000008 alt_dev_list
04011c8c g     F .text	000000f8 write
0401e970 g     O .rwdata	00000002 OSVersionNbr
0401cde8 g       *ABS*	00000000 __ram_rodata_end
04011328 g     F .text	000000b0 fstat
0400ff50 g     F .text	000000f4 .hidden __ledf2
0401e918 g     O .rwdata	00000004 OSEndiannessTest
04009bc0 g     F .text	00000140 __pow5mult
0400c2e0 g     F .text	0000145c ___vfiprintf_internal_r
04020578 g     O .bss	00000004 __nlocale_changed
04000e20 g     F .text	00000058 .hidden __umodsi3
04020560 g     O .bss	00000004 OSTmrCtr
0401e92a g     O .rwdata	00000002 OSFlagGrpSize
04029a14 g       *ABS*	00000000 end
0401e8c0 g     O .rwdata	00000004 leds
0401a550 g     F .text	00000148 altera_avalon_jtag_uart_init
04013c3c g     F .text	000000cc OS_TaskStat
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0401e8cc g     O .rwdata	00000004 switches
04020564 g     O .bss	00000004 taskStartTimestamp
0401e8a4 g     O .rwdata	00000004 hex1
0401c934 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401b190 g     F .text	0000007c alt_avalon_timer_sc_init
0400136c g     F .text	00000064 .hidden __clzsi2
0401ae54 g     F .text	000002c4 altera_avalon_jtag_uart_write
04007b74 g     F .text	00000004 __sfp_lock_acquire
040090d0 g     F .text	000000e4 memchr
04013918 g     F .text	00000054 OS_MemClr
040038c0 g     F .text	000021f8 ___vfprintf_internal_r
0401bf78 g     F .text	0000015c OSTaskStkInit
04000a70 g     F .text	00000098 task1
0400158c g     F .text	00000058 _sprintf_r
04007cd8 g     F .text	00000310 _free_r
040086b4 g     F .text	00000010 __locale_mb_cur_max
04012f88 g     F .text	00000198 OS_EventTaskRdy
0401c780 g     F .text	00000180 __call_exitprocs
040205d0 g     O .bss	00000001 OSCPUUsage
04020574 g     O .bss	00000004 __mlocale_changed
0401e8e0 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04000b08 g     F .text	00000034 task2
04020600 g     O .bss	00000004 _alt_tick_rate
0401718c g     F .text	0000028c OSQPend
04019e38 g     F .text	00000104 OSTimeDly
04001528 g     F .text	00000064 rand
04009d00 g     F .text	00000148 __lshift
04020604 g     O .bss	00000004 _alt_nticks
040008cc g     F .text	000001a4 play
0401192c g     F .text	000000fc read
0401a38c g     F .text	00000060 alt_sys_init
04000ee8 g     F .text	00000124 .hidden __floatsisf
0400adc0 g     F .text	000001d0 __ssprint_r
0401c668 g     F .text	00000118 __register_exitproc
040205d1 g     O .bss	00000001 OSTaskCtr
04019f3c g     F .text	00000154 OSTimeDlyHMSM
040099c8 g     F .text	000001f8 __multiply
0401aa40 g     F .text	00000068 altera_avalon_jtag_uart_close
0401e8b4 g     O .rwdata	00000004 hex5
0401cde8 g       *ABS*	00000000 __ram_rwdata_start
0401c934 g       *ABS*	00000000 __ram_rodata_start
0402060c g     O .bss	00000028 __malloc_current_mallinfo
0401e91e g     O .rwdata	00000002 OSEventMax
0400a214 g     F .text	0000014c __d2b
040183ac g     F .text	00000110 OSSemPost
04012b2c g     F .text	000000dc OSSchedUnlock
0401a3ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401c398 g     F .text	000000dc alt_get_fd
040205d4 g     O .bss	00000004 OSMemFreeList
04012c78 g     F .text	000000b0 OSStatInit
0401b338 g     F .text	00000158 alt_busy_sleep
040154b0 g     F .text	000000c4 OSFlagQuery
0401e954 g     O .rwdata	00000002 OSTaskCreateExtEn
0400d874 g     F .text	00000054 _close_r
0401e8c4 g     O .rwdata	00000004 onchip_memory2_0
0401c5ec g     F .text	0000007c memcmp
04012f68 g     F .text	00000020 OS_Dummy
0401a4ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04029a14 g       *ABS*	00000000 __alt_stack_base
0401a4fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04005b90 g     F .text	00000154 __swsetup_r
04027e90 g     O .bss	000001e0 OSQTbl
0400f504 g     F .text	000008e8 .hidden __divdf3
04007a34 g     F .text	00000118 __sfp
0400a478 g     F .text	00000078 __copybits
0401d284 g     O .rwdata	00000408 __malloc_av_
04007b80 g     F .text	00000004 __sinit_lock_release
040205d8 g     O .bss	00000004 OSTCBHighRdy
04010044 g     F .text	00000718 .hidden __muldf3
0400aba8 g     F .text	00000054 __sread
040205dc g     O .bss	00000004 OSQFreeList
0401c290 g     F .text	00000108 alt_find_file
0401b514 g     F .text	000000a4 alt_dev_llist_insert
04011ea8 g     F .text	00000120 __malloc_lock
04011a8c g     F .text	000000b0 sbrk
040016e8 g     F .text	000021d8 ___svfprintf_internal_r
040121b4 g     F .text	00000140 OSEventNameSet
04007788 g     F .text	0000005c _fflush_r
0400d8c8 g     F .text	000000c4 _calloc_r
040205e0 g     O .bss	00000001 OSRdyGrp
04020538 g       *ABS*	00000000 __bss_start
04009458 g     F .text	00000128 memset
04000b98 g     F .text	0000012c main
0402059c g     O .bss	00000004 alt_envp
0402057c g     O .bss	00000004 __malloc_max_total_mem
0401a44c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400df48 g     F .text	00000018 __swbuf
04001510 g     F .text	00000018 srand
0401ccb4 g     O .rodata	00000100 OSUnMapTbl
0401e94e g     O .rwdata	00000002 OSSemEn
0401511c g     F .text	00000394 OSFlagPost
0400acdc g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400da7c g     F .text	00000014 fclose
04013120 g     F .text	00000110 OS_EventTaskWait
040226f0 g     O .bss	00002000 task2_stk
040011c4 g     F .text	000001a8 .hidden __truncdfsf2
04013d08 g     F .text	000000cc OS_TaskStatStkChk
04019290 g     F .text	00000150 OSTaskDelReq
04005ee4 g     F .text	00001688 _dtoa_r
040088c4 g     F .text	0000080c _malloc_r
0400e0bc g     F .text	00000030 __ascii_wctomb
04020548 g     O .bss	00000004 time
0401e900 g     O .rwdata	00000004 alt_errno
04012c08 g     F .text	00000070 OSStart
040246f0 g     O .bss	00002000 task3_stk
04011e48 g     F .text	00000060 __env_unlock
0401e8bc g     O .rwdata	00000004 key
040084a4 g     F .text	000000c4 _fwalk
0401972c g     F .text	000001d4 OSTaskResume
040169b4 g     F .text	000000e8 OSMemQuery
0401e960 g     O .rwdata	00000002 OSTaskStatEn
0401e93a g     O .rwdata	00000002 OSMemMax
040176ec g     F .text	00000170 OSQPostFront
04000cc4 g     F .text	00000084 .hidden __divsi3
040205e1 g     O .bss	00000003 OSRdyTbl
0401e914 g     O .rwdata	00000002 OSDebugEn
04007bb4 g     F .text	00000124 _malloc_trim_r
0401c934 g       *ABS*	00000000 __CTOR_END__
0401e92c g     O .rwdata	00000002 OSFlagNodeSize
0401e974 g     O .rwdata	00000002 OSTmrCfgMax
0400ace4 g     F .text	000000dc strcmp
04016ca8 g     F .text	000001ac OSQCreate
040193e0 g     F .text	00000198 OSTaskNameGet
0401c934 g       *ABS*	00000000 __flash_rodata_start
0401785c g     F .text	0000020c OSQPostOpt
04012d28 g     F .text	00000220 OSTimeTick
0401e95c g     O .rwdata	00000002 OSTaskMax
0401c934 g       *ABS*	00000000 __DTOR_LIST__
04017d1c g     F .text	000000d8 OSSemCreate
0401e980 g     O .rwdata	00000002 OSTmrWheelSize
04020568 g     O .bss	00000004 mailBox3_1
0400fdec g     F .text	00000088 .hidden __nedf2
0401e956 g     O .rwdata	00000002 OSTaskDelEn
0401e8ac g     O .rwdata	00000004 hex3
040184bc g     F .text	00000110 OSSemQuery
04016e54 g     F .text	00000280 OSQDel
04017418 g     F .text	0000016c OSQPendAbort
0401a354 g     F .text	00000038 alt_irq_init
04011a28 g     F .text	00000064 alt_release_fd
040015e4 g     F .text	0000006c sprintf
0401c98c g     O .rodata	00000100 .hidden __clz_tab
04020570 g     O .bss	00000004 _PathLocale
0401c5a0 g     F .text	00000014 atexit
0400d814 g     F .text	00000060 _write_r
0402056c g     O .bss	00000004 msgQueue
04012aa0 g     F .text	0000008c OSSchedLock
040086e4 g     F .text	00000018 setlocale
04000700 g     F .text	00000034 oddLedsOn
04014540 g     F .text	00000108 OSFlagCreate
0401e8d8 g     O .rwdata	00000004 _impure_ptr
04020594 g     O .bss	00000004 alt_argc
0400756c g     F .text	0000021c __sflush_r
0401b618 g     F .text	00000060 _do_dtors
040086d0 g     F .text	00000008 __locale_cjk_lang
0402053c g     O .bss	00000004 stopGame
0401e926 g     O .rwdata	00000002 OSEventMultiEn
04014648 g     F .text	00000248 OSFlagDel
040205e4 g     O .bss	00000004 OSEventFreeList
04015f2c g     F .text	0000016c OSMboxPendAbort
04000020 g       .exceptions	00000000 alt_irq_entry
0402054c g     O .bss	00000004 triggerAverage1_3
0400a0a4 g     F .text	00000064 __ulp
04014b04 g     F .text	000005b8 OSFlagPend
0401e972 g     O .rwdata	00000002 OSTmrEn
04007b9c g     F .text	00000018 __fp_unlock_all
0401e8ec g     O .rwdata	00000008 alt_fs_list
04013b18 g     F .text	00000074 OS_StrCopy
0401e93c g     O .rwdata	00000002 OSMemNameSize
0401c19c g     F .text	00000020 OSInitHookEnd
04000020 g       *ABS*	00000000 __ram_exceptions_start
0401e968 g     O .rwdata	00000002 OSTCBPrioTblMax
040086fc g     F .text	0000000c localeconv
0401e964 g     O .rwdata	00000002 OSTaskStatStkChkEn
040159e4 g     F .text	000000d4 OSMboxCreate
0401b6ac g     F .text	00000050 alt_ic_isr_register
0401e938 g     O .rwdata	00000002 OSMemEn
0401e942 g     O .rwdata	00000002 OSMutexEn
04000734 g     F .text	00000034 evenLedsOn
0401e990 g       *ABS*	00000000 _edata
04029a14 g       *ABS*	00000000 _end
040205e8 g     O .bss	00000001 OSIntNesting
0400da90 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
0401aaa8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0401a090 g     F .text	000001d4 OSTimeDlyResume
040149b8 g     F .text	0000014c OSFlagNameSet
04015cf8 g     F .text	00000234 OSMboxPend
04019900 g     F .text	000001c0 OSTaskStkChk
0401b784 g     F .text	0000008c alt_ic_irq_disable
0401e93e g     O .rwdata	00000002 OSMemSize
0400ac04 g     F .text	0000007c __swrite
0401e8e4 g     O .rwdata	00000004 __malloc_trim_threshold
040086c4 g     F .text	0000000c __locale_msgcharset
040205ec g     O .bss	00000004 OSTCBCur
0401c5b4 g     F .text	00000038 exit
04020540 g     O .bss	00000004 nbTry
0401e940 g     O .rwdata	00000002 OSMemTblSize
04008568 g     F .text	000000c4 _fwalk_reent
040006cc g     F .text	00000034 ledOn
04009ea8 g     F .text	000001fc __mdiff
04000d48 g     F .text	00000074 .hidden __modsi3
0401594c g     F .text	00000098 OSMboxAccept
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04007b78 g     F .text	00000004 __sfp_lock_release
04012904 g     F .text	00000058 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
04019ca4 g     F .text	00000124 OSTaskQuery
04017bc4 g     F .text	000000a8 OS_QInit
04013b8c g     F .text	00000054 OS_StrLen
040167c8 g     F .text	00000114 OSMemNameSet
0401e95a g     O .rwdata	00000002 OSTaskProfileEn
040205f0 g     O .bss	00000004 OSTime
04028070 g     O .bss	00000800 OSTaskIdleStk
0401c900 g     F .text	00000034 _exit
040161a8 g     F .text	0000015c OSMboxPostOpt
0401b20c g     F .text	0000012c alt_alarm_start
04014890 g     F .text	00000128 OSFlagNameGet
0401a264 g     F .text	0000005c OSTimeGet
0400e148 g     F .text	00000060 .hidden __muldi3
04008708 g     F .text	000001bc __smakebuf_r
04001650 g     F .text	00000098 strlen
0401c11c g     F .text	00000020 OSTaskSwHook
0401bb8c g     F .text	00000154 open
0401e8b0 g     O .rwdata	00000004 hex4
04028870 g     O .bss	00000b40 OSEventTbl
0400fe74 g     F .text	000000dc .hidden __gedf2
040293b0 g     O .bss	00000510 OSTCBTbl
040185cc g     F .text	00000100 OSSemSet
04020538 g     O .bss	00000004 wantToPlayAGame
0401e8e8 g     O .rwdata	00000004 __wctomb
0400c2c8 g     F .text	00000018 __sprint_r
0401b678 g     F .text	00000034 alt_icache_flush_all
0401e904 g     O .rwdata	00000004 alt_priority_mask
04017df4 g     F .text	00000240 OSSemDel
040205f4 g     O .bss	00000004 OSFlagFreeList
04000b3c g     F .text	0000005c task3
0401b6fc g     F .text	00000088 alt_ic_irq_enable
0401e920 g     O .rwdata	00000002 OSEventNameSize
04015ab8 g     F .text	00000240 OSMboxDel
04005ab8 g     F .text	0000001c __vfprintf_internal
040205f8 g     O .bss	00000001 OSStatRdy
040298c0 g     O .bss	00000054 OSTCBPrioTbl
0400e0ec g     F .text	0000005c _wctomb_r
04011d84 g     F .text	000000c4 __env_lock
0401e966 g     O .rwdata	00000002 OSTaskSwHookEn
0401075c g     F .text	000008fc .hidden __subdf3
040098dc g     F .text	000000b0 __lo0bits
0401e988 g     O .rwdata	00000008 alt_alarm_list
0401e92e g     O .rwdata	00000002 OSFlagWidth
0401b5b8 g     F .text	00000060 _do_ctors
0400dffc g     F .text	000000c0 wcrtomb
040111f0 g     F .text	000000d0 close
040205a4 g     O .bss	00000004 alt_envsem
040205fc g     O .bss	00000004 OSIdleCtrRun
04012f48 g     F .text	00000020 OSVersion
0401e978 g     O .rwdata	00000002 OSTmrCfgWheelSize
040116a0 g     F .text	00000084 alt_load
04019dc8 g     F .text	00000070 OS_TaskStkClr
0401e952 g     O .rwdata	00000002 OSTaskCreateEn
04013538 g     F .text	00000068 OS_EventWaitListInit
0400dc18 g     F .text	00000080 fputwc
0401c1bc g     F .text	00000020 OSTaskIdleHook
040005dc g     F .text	00000030 display0
04007b7c g     F .text	00000004 __sinit_lock_acquire
04009650 g     F .text	00000120 __multadd
04019ac0 g     F .text	000001e4 OSTaskSuspend
04009628 g     F .text	00000028 _Bfree
04013be0 g     F .text	0000005c OS_TaskIdle
0401e97e g     O .rwdata	00000002 OSTmrTblSize
04017a68 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory2_0+0xfbffe004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	401295c0 	call	401295c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10a64504 	addi	r2,r2,-26348
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10a64504 	addi	r2,r2,-26348
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffe12c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffe120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	40129a80 	call	40129a8 <OSIntExit>
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a75a17 	ldw	r2,-25240(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a75a17 	ldw	r2,-25240(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory2_0+0xfbffe248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 4000260:	d69a2814 	ori	gp,gp,26784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000268:	10814e14 	ori	r2,r2,1336

    movhi r3, %hi(__bss_end)
 400026c:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 4000270:	18e68514 	ori	r3,r3,39444

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory2_0+0xfbffe278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40116a00 	call	40116a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40118340 	call	4011834 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory2_0+0xfbffe28c>

04000290 <divideNumberIntoArray>:

volatile bool triggerAverage1_3=false;

// util methods 
void divideNumberIntoArray(int number, int *array)
{
 4000290:	defff904 	addi	sp,sp,-28
 4000294:	dfc00615 	stw	ra,24(sp)
 4000298:	df000515 	stw	fp,20(sp)
 400029c:	dc000415 	stw	r16,16(sp)
 40002a0:	df000504 	addi	fp,sp,20
 40002a4:	e13ffd15 	stw	r4,-12(fp)
 40002a8:	e17ffe15 	stw	r5,-8(fp)
	int i = 0;
 40002ac:	e03ffb15 	stw	zero,-20(fp)
	int arrayLength = 6;
 40002b0:	00800184 	movi	r2,6
 40002b4:	e0bffc15 	stw	r2,-16(fp)
	while (number > 0)
 40002b8:	00001606 	br	4000314 <divideNumberIntoArray+0x84>
	{
		array[arrayLength - 1 - i] = number % 10;
 40002bc:	e0bffc17 	ldw	r2,-16(fp)
 40002c0:	10ffffc4 	addi	r3,r2,-1
 40002c4:	e0bffb17 	ldw	r2,-20(fp)
 40002c8:	1885c83a 	sub	r2,r3,r2
 40002cc:	1085883a 	add	r2,r2,r2
 40002d0:	1085883a 	add	r2,r2,r2
 40002d4:	1007883a 	mov	r3,r2
 40002d8:	e0bffe17 	ldw	r2,-8(fp)
 40002dc:	10e1883a 	add	r16,r2,r3
 40002e0:	e0bffd17 	ldw	r2,-12(fp)
 40002e4:	01400284 	movi	r5,10
 40002e8:	1009883a 	mov	r4,r2
 40002ec:	4000d480 	call	4000d48 <__modsi3>
 40002f0:	80800015 	stw	r2,0(r16)
		number = number / 10;
 40002f4:	e0bffd17 	ldw	r2,-12(fp)
 40002f8:	01400284 	movi	r5,10
 40002fc:	1009883a 	mov	r4,r2
 4000300:	4000cc40 	call	4000cc4 <__divsi3>
 4000304:	e0bffd15 	stw	r2,-12(fp)
		i++;
 4000308:	e0bffb17 	ldw	r2,-20(fp)
 400030c:	10800044 	addi	r2,r2,1
 4000310:	e0bffb15 	stw	r2,-20(fp)
// util methods 
void divideNumberIntoArray(int number, int *array)
{
	int i = 0;
	int arrayLength = 6;
	while (number > 0)
 4000314:	e0bffd17 	ldw	r2,-12(fp)
 4000318:	00bfe816 	blt	zero,r2,40002bc <__alt_mem_onchip_memory2_0+0xfbffe2bc>
	{
		array[arrayLength - 1 - i] = number % 10;
		number = number / 10;
		i++;
	}
}
 400031c:	0001883a 	nop
 4000320:	e6ffff04 	addi	sp,fp,-4
 4000324:	dfc00217 	ldw	ra,8(sp)
 4000328:	df000117 	ldw	fp,4(sp)
 400032c:	dc000017 	ldw	r16,0(sp)
 4000330:	dec00304 	addi	sp,sp,12
 4000334:	f800283a 	ret

04000338 <convertTo7segments>:

int convertTo7segments(int input)
{
 4000338:	defffe04 	addi	sp,sp,-8
 400033c:	df000115 	stw	fp,4(sp)
 4000340:	df000104 	addi	fp,sp,4
 4000344:	e13fff15 	stw	r4,-4(fp)
	switch (input)
 4000348:	e0bfff17 	ldw	r2,-4(fp)
 400034c:	10800428 	cmpgeui	r2,r2,16
 4000350:	1000371e 	bne	r2,zero,4000430 <convertTo7segments+0xf8>
 4000354:	e0bfff17 	ldw	r2,-4(fp)
 4000358:	100690ba 	slli	r3,r2,2
 400035c:	00810034 	movhi	r2,1024
 4000360:	1080dc04 	addi	r2,r2,880
 4000364:	1885883a 	add	r2,r3,r2
 4000368:	10800017 	ldw	r2,0(r2)
 400036c:	1000683a 	jmp	r2
 4000370:	040003b0 	cmpltui	r16,zero,14
 4000374:	040003b8 	rdprs	r16,zero,14
 4000378:	040003c0 	call	40003c <OSCtxSw_SWITCH_PC+0x3ffffc>
 400037c:	040003c8 	cmpgei	r16,zero,15
 4000380:	040003d0 	cmplti	r16,zero,15
 4000384:	040003d8 	cmpnei	r16,zero,15
 4000388:	040003e0 	cmpeqi	r16,zero,15
 400038c:	040003e8 	cmpgeui	r16,zero,15
 4000390:	040003f0 	cmpltui	r16,zero,15
 4000394:	040003f8 	rdprs	r16,zero,15
 4000398:	04000400 	call	400040 <OSCtxSw_SWITCH_PC+0x400000>
 400039c:	04000408 	cmpgei	r16,zero,16
 40003a0:	04000410 	cmplti	r16,zero,16
 40003a4:	04000418 	cmpnei	r16,zero,16
 40003a8:	04000420 	cmpeqi	r16,zero,16
 40003ac:	04000428 	cmpgeui	r16,zero,16
	{
	case 0:
		return 0b1000000;
 40003b0:	00801004 	movi	r2,64
 40003b4:	00001f06 	br	4000434 <convertTo7segments+0xfc>
	case 1:
		return 0b1111001;
 40003b8:	00801e44 	movi	r2,121
 40003bc:	00001d06 	br	4000434 <convertTo7segments+0xfc>
	case 2:
		return 0b0100100;
 40003c0:	00800904 	movi	r2,36
 40003c4:	00001b06 	br	4000434 <convertTo7segments+0xfc>
	case 3:
		return 0b0110000;
 40003c8:	00800c04 	movi	r2,48
 40003cc:	00001906 	br	4000434 <convertTo7segments+0xfc>
	case 4:
		return 0b0011001;
 40003d0:	00800644 	movi	r2,25
 40003d4:	00001706 	br	4000434 <convertTo7segments+0xfc>
	case 5:
		return 0b0010010;
 40003d8:	00800484 	movi	r2,18
 40003dc:	00001506 	br	4000434 <convertTo7segments+0xfc>
	case 6:
		return 0b0000010;
 40003e0:	00800084 	movi	r2,2
 40003e4:	00001306 	br	4000434 <convertTo7segments+0xfc>
	case 7:
		return 0b1111000;
 40003e8:	00801e04 	movi	r2,120
 40003ec:	00001106 	br	4000434 <convertTo7segments+0xfc>
	case 8:
		return 0b0000000;
 40003f0:	0005883a 	mov	r2,zero
 40003f4:	00000f06 	br	4000434 <convertTo7segments+0xfc>
	case 9:
		return 0b0010000;
 40003f8:	00800404 	movi	r2,16
 40003fc:	00000d06 	br	4000434 <convertTo7segments+0xfc>
	case 10:
		return 0b0001000;
 4000400:	00800204 	movi	r2,8
 4000404:	00000b06 	br	4000434 <convertTo7segments+0xfc>
	case 11:
		return 0b0000011;
 4000408:	008000c4 	movi	r2,3
 400040c:	00000906 	br	4000434 <convertTo7segments+0xfc>
	case 12:
		return 0b1000110;
 4000410:	00801184 	movi	r2,70
 4000414:	00000706 	br	4000434 <convertTo7segments+0xfc>
	case 13:
		return 0b0100001;
 4000418:	00800844 	movi	r2,33
 400041c:	00000506 	br	4000434 <convertTo7segments+0xfc>
	case 14:
		return 0b0000110;
 4000420:	00800184 	movi	r2,6
 4000424:	00000306 	br	4000434 <convertTo7segments+0xfc>
	case 15:
		return 0b0001110;
 4000428:	00800384 	movi	r2,14
 400042c:	00000106 	br	4000434 <convertTo7segments+0xfc>
	default:
		return 0x00;
 4000430:	0005883a 	mov	r2,zero
	}
}
 4000434:	e037883a 	mov	sp,fp
 4000438:	df000017 	ldw	fp,0(sp)
 400043c:	dec00104 	addi	sp,sp,4
 4000440:	f800283a 	ret

04000444 <displayDecimalNumber>:

void displayDecimalNumber(int number)
{
 4000444:	defff604 	addi	sp,sp,-40
 4000448:	dfc00915 	stw	ra,36(sp)
 400044c:	df000815 	stw	fp,32(sp)
 4000450:	dc000715 	stw	r16,28(sp)
 4000454:	df000804 	addi	fp,sp,32
 4000458:	e13ffe15 	stw	r4,-8(fp)
	int array[6] = {0, 0, 0, 0, 0, 0};
 400045c:	e03ff815 	stw	zero,-32(fp)
 4000460:	e03ff915 	stw	zero,-28(fp)
 4000464:	e03ffa15 	stw	zero,-24(fp)
 4000468:	e03ffb15 	stw	zero,-20(fp)
 400046c:	e03ffc15 	stw	zero,-16(fp)
 4000470:	e03ffd15 	stw	zero,-12(fp)
	divideNumberIntoArray(number, array);
 4000474:	e17ff804 	addi	r5,fp,-32
 4000478:	e13ffe17 	ldw	r4,-8(fp)
 400047c:	40002900 	call	4000290 <divideNumberIntoArray>
	IOWR_ALTERA_AVALON_PIO_DATA(hex0, convertTo7segments(array[5]));
 4000480:	00820034 	movhi	r2,2048
 4000484:	10942004 	addi	r2,r2,20608
 4000488:	1021883a 	mov	r16,r2
 400048c:	e0bffd17 	ldw	r2,-12(fp)
 4000490:	1009883a 	mov	r4,r2
 4000494:	40003380 	call	4000338 <convertTo7segments>
 4000498:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_PIO_DATA(hex1, convertTo7segments(array[4]));
 400049c:	00820034 	movhi	r2,2048
 40004a0:	10941c04 	addi	r2,r2,20592
 40004a4:	1021883a 	mov	r16,r2
 40004a8:	e0bffc17 	ldw	r2,-16(fp)
 40004ac:	1009883a 	mov	r4,r2
 40004b0:	40003380 	call	4000338 <convertTo7segments>
 40004b4:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_PIO_DATA(hex2, convertTo7segments(array[3]));
 40004b8:	00820034 	movhi	r2,2048
 40004bc:	10940804 	addi	r2,r2,20512
 40004c0:	1021883a 	mov	r16,r2
 40004c4:	e0bffb17 	ldw	r2,-20(fp)
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	40003380 	call	4000338 <convertTo7segments>
 40004d0:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_PIO_DATA(hex3, convertTo7segments(array[2]));
 40004d4:	00820034 	movhi	r2,2048
 40004d8:	10941004 	addi	r2,r2,20544
 40004dc:	1021883a 	mov	r16,r2
 40004e0:	e0bffa17 	ldw	r2,-24(fp)
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	40003380 	call	4000338 <convertTo7segments>
 40004ec:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_PIO_DATA(hex4, convertTo7segments(array[1]));
 40004f0:	00820034 	movhi	r2,2048
 40004f4:	10941404 	addi	r2,r2,20560
 40004f8:	1021883a 	mov	r16,r2
 40004fc:	e0bff917 	ldw	r2,-28(fp)
 4000500:	1009883a 	mov	r4,r2
 4000504:	40003380 	call	4000338 <convertTo7segments>
 4000508:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_PIO_DATA(hex5, convertTo7segments(array[0]));
 400050c:	00820034 	movhi	r2,2048
 4000510:	10941804 	addi	r2,r2,20576
 4000514:	1021883a 	mov	r16,r2
 4000518:	e0bff817 	ldw	r2,-32(fp)
 400051c:	1009883a 	mov	r4,r2
 4000520:	40003380 	call	4000338 <convertTo7segments>
 4000524:	80800035 	stwio	r2,0(r16)
}
 4000528:	0001883a 	nop
 400052c:	e6ffff04 	addi	sp,fp,-4
 4000530:	dfc00217 	ldw	ra,8(sp)
 4000534:	df000117 	ldw	fp,4(sp)
 4000538:	dc000017 	ldw	r16,0(sp)
 400053c:	dec00304 	addi	sp,sp,12
 4000540:	f800283a 	ret

04000544 <displayNothing>:

// 7 segments display methods 
void displayNothing()
{
 4000544:	deffff04 	addi	sp,sp,-4
 4000548:	df000015 	stw	fp,0(sp)
 400054c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(hex0, 0b1111111);
 4000550:	00820034 	movhi	r2,2048
 4000554:	10942004 	addi	r2,r2,20608
 4000558:	1007883a 	mov	r3,r2
 400055c:	00801fc4 	movi	r2,127
 4000560:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(hex1, 0b1111111);
 4000564:	00820034 	movhi	r2,2048
 4000568:	10941c04 	addi	r2,r2,20592
 400056c:	1007883a 	mov	r3,r2
 4000570:	00801fc4 	movi	r2,127
 4000574:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(hex2, 0b1111111);
 4000578:	00820034 	movhi	r2,2048
 400057c:	10940804 	addi	r2,r2,20512
 4000580:	1007883a 	mov	r3,r2
 4000584:	00801fc4 	movi	r2,127
 4000588:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(hex3, 0b1111111);
 400058c:	00820034 	movhi	r2,2048
 4000590:	10941004 	addi	r2,r2,20544
 4000594:	1007883a 	mov	r3,r2
 4000598:	00801fc4 	movi	r2,127
 400059c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(hex4, 0b1111111);
 40005a0:	00820034 	movhi	r2,2048
 40005a4:	10941404 	addi	r2,r2,20560
 40005a8:	1007883a 	mov	r3,r2
 40005ac:	00801fc4 	movi	r2,127
 40005b0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(hex5, 0b1111111);
 40005b4:	00820034 	movhi	r2,2048
 40005b8:	10941804 	addi	r2,r2,20576
 40005bc:	1007883a 	mov	r3,r2
 40005c0:	00801fc4 	movi	r2,127
 40005c4:	18800035 	stwio	r2,0(r3)
}
 40005c8:	0001883a 	nop
 40005cc:	e037883a 	mov	sp,fp
 40005d0:	df000017 	ldw	fp,0(sp)
 40005d4:	dec00104 	addi	sp,sp,4
 40005d8:	f800283a 	ret

040005dc <display0>:

void display0(){
 40005dc:	defffe04 	addi	sp,sp,-8
 40005e0:	dfc00115 	stw	ra,4(sp)
 40005e4:	df000015 	stw	fp,0(sp)
 40005e8:	d839883a 	mov	fp,sp
	displayDecimalNumber(0);
 40005ec:	0009883a 	mov	r4,zero
 40005f0:	40004440 	call	4000444 <displayDecimalNumber>
}
 40005f4:	0001883a 	nop
 40005f8:	e037883a 	mov	sp,fp
 40005fc:	dfc00117 	ldw	ra,4(sp)
 4000600:	df000017 	ldw	fp,0(sp)
 4000604:	dec00204 	addi	sp,sp,8
 4000608:	f800283a 	ret

0400060c <displayBinaryNumber>:

void displayBinaryNumber(int number)
{
 400060c:	defffd04 	addi	sp,sp,-12
 4000610:	dfc00215 	stw	ra,8(sp)
 4000614:	df000115 	stw	fp,4(sp)
 4000618:	df000104 	addi	fp,sp,4
 400061c:	e13fff15 	stw	r4,-4(fp)
	switch (number)
 4000620:	e0bfff17 	ldw	r2,-4(fp)
 4000624:	10c002e0 	cmpeqi	r3,r2,11
 4000628:	1800101e 	bne	r3,zero,400066c <displayBinaryNumber+0x60>
 400062c:	10c00308 	cmpgei	r3,r2,12
 4000630:	1800031e 	bne	r3,zero,4000640 <displayBinaryNumber+0x34>
 4000634:	108001e0 	cmpeqi	r2,r2,7
 4000638:	10000f1e 	bne	r2,zero,4000678 <displayBinaryNumber+0x6c>
		break;
	case 7:
		displayDecimalNumber(1);
		break;
	default:
		break;
 400063c:	00001106 	br	4000684 <displayBinaryNumber+0x78>
	displayDecimalNumber(0);
}

void displayBinaryNumber(int number)
{
	switch (number)
 4000640:	10c00360 	cmpeqi	r3,r2,13
 4000644:	1800061e 	bne	r3,zero,4000660 <displayBinaryNumber+0x54>
 4000648:	108003a0 	cmpeqi	r2,r2,14
 400064c:	1000011e 	bne	r2,zero,4000654 <displayBinaryNumber+0x48>
		break;
	case 7:
		displayDecimalNumber(1);
		break;
	default:
		break;
 4000650:	00000c06 	br	4000684 <displayBinaryNumber+0x78>
void displayBinaryNumber(int number)
{
	switch (number)
	{
	case 14:
		displayDecimalNumber(4);
 4000654:	01000104 	movi	r4,4
 4000658:	40004440 	call	4000444 <displayDecimalNumber>
		break;
 400065c:	00000906 	br	4000684 <displayBinaryNumber+0x78>
	case 13:
		displayDecimalNumber(3);
 4000660:	010000c4 	movi	r4,3
 4000664:	40004440 	call	4000444 <displayDecimalNumber>
		break;
 4000668:	00000606 	br	4000684 <displayBinaryNumber+0x78>
	case 11:
		displayDecimalNumber(2);
 400066c:	01000084 	movi	r4,2
 4000670:	40004440 	call	4000444 <displayDecimalNumber>
		break;
 4000674:	00000306 	br	4000684 <displayBinaryNumber+0x78>
	case 7:
		displayDecimalNumber(1);
 4000678:	01000044 	movi	r4,1
 400067c:	40004440 	call	4000444 <displayDecimalNumber>
		break;
 4000680:	0001883a 	nop
	default:
		break;
	}
}
 4000684:	0001883a 	nop
 4000688:	e037883a 	mov	sp,fp
 400068c:	dfc00117 	ldw	ra,4(sp)
 4000690:	df000017 	ldw	fp,0(sp)
 4000694:	dec00204 	addi	sp,sp,8
 4000698:	f800283a 	ret

0400069c <ledOff>:


// leds
void ledOff()
{
 400069c:	deffff04 	addi	sp,sp,-4
 40006a0:	df000015 	stw	fp,0(sp)
 40006a4:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(leds, 0b0000000000);
 40006a8:	00820034 	movhi	r2,2048
 40006ac:	10942804 	addi	r2,r2,20640
 40006b0:	0007883a 	mov	r3,zero
 40006b4:	10c00035 	stwio	r3,0(r2)
}
 40006b8:	0001883a 	nop
 40006bc:	e037883a 	mov	sp,fp
 40006c0:	df000017 	ldw	fp,0(sp)
 40006c4:	dec00104 	addi	sp,sp,4
 40006c8:	f800283a 	ret

040006cc <ledOn>:

void ledOn()
{
 40006cc:	deffff04 	addi	sp,sp,-4
 40006d0:	df000015 	stw	fp,0(sp)
 40006d4:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(leds, 0b1111111111);
 40006d8:	00820034 	movhi	r2,2048
 40006dc:	10942804 	addi	r2,r2,20640
 40006e0:	1007883a 	mov	r3,r2
 40006e4:	0080ffc4 	movi	r2,1023
 40006e8:	18800035 	stwio	r2,0(r3)
}
 40006ec:	0001883a 	nop
 40006f0:	e037883a 	mov	sp,fp
 40006f4:	df000017 	ldw	fp,0(sp)
 40006f8:	dec00104 	addi	sp,sp,4
 40006fc:	f800283a 	ret

04000700 <oddLedsOn>:

void oddLedsOn()
{
 4000700:	deffff04 	addi	sp,sp,-4
 4000704:	df000015 	stw	fp,0(sp)
 4000708:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(leds, 0b0101010101);
 400070c:	00820034 	movhi	r2,2048
 4000710:	10942804 	addi	r2,r2,20640
 4000714:	1007883a 	mov	r3,r2
 4000718:	00805544 	movi	r2,341
 400071c:	18800035 	stwio	r2,0(r3)
}
 4000720:	0001883a 	nop
 4000724:	e037883a 	mov	sp,fp
 4000728:	df000017 	ldw	fp,0(sp)
 400072c:	dec00104 	addi	sp,sp,4
 4000730:	f800283a 	ret

04000734 <evenLedsOn>:

void evenLedsOn()
{
 4000734:	deffff04 	addi	sp,sp,-4
 4000738:	df000015 	stw	fp,0(sp)
 400073c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(leds, 0b1010101010);
 4000740:	00820034 	movhi	r2,2048
 4000744:	10942804 	addi	r2,r2,20640
 4000748:	1007883a 	mov	r3,r2
 400074c:	0080aa84 	movi	r2,682
 4000750:	18800035 	stwio	r2,0(r3)
} 
 4000754:	0001883a 	nop
 4000758:	e037883a 	mov	sp,fp
 400075c:	df000017 	ldw	fp,0(sp)
 4000760:	dec00104 	addi	sp,sp,4
 4000764:	f800283a 	ret

04000768 <handle_button_interrupts>:

volatile int edge_capture;
volatile float averageTime;

static void handle_button_interrupts(void *context, alt_u32 id)
{
 4000768:	defffb04 	addi	sp,sp,-20
 400076c:	dfc00415 	stw	ra,16(sp)
 4000770:	df000315 	stw	fp,12(sp)
 4000774:	df000304 	addi	fp,sp,12
 4000778:	e13ffe15 	stw	r4,-8(fp)
 400077c:	e17fff15 	stw	r5,-4(fp)
	/* Cast context to edge_capture's type. It is important that this be
	 * declared volatile to avoid unwanted compiler optimization.
	 */
	volatile int *edge_capture_ptr = (volatile int *)context;
 4000780:	e0bffe17 	ldw	r2,-8(fp)
 4000784:	e0bffd15 	stw	r2,-12(fp)

	/* Store the value in the Button's edge capture register in *context. */
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(key);
 4000788:	00820034 	movhi	r2,2048
 400078c:	10940c04 	addi	r2,r2,20528
 4000790:	10800304 	addi	r2,r2,12
 4000794:	10c00037 	ldwio	r3,0(r2)
 4000798:	e0bffd17 	ldw	r2,-12(fp)
 400079c:	10c00015 	stw	r3,0(r2)

	/* Reset the Button's edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(key, 0);
 40007a0:	00820034 	movhi	r2,2048
 40007a4:	10940c04 	addi	r2,r2,20528
 40007a8:	10800304 	addi	r2,r2,12
 40007ac:	0007883a 	mov	r3,zero
 40007b0:	10c00035 	stwio	r3,0(r2)

	//if we push the first button, we start the game
	if(*edge_capture_ptr==1){
 40007b4:	e0bffd17 	ldw	r2,-12(fp)
 40007b8:	10800017 	ldw	r2,0(r2)
 40007bc:	10800058 	cmpnei	r2,r2,1
 40007c0:	1000031e 	bne	r2,zero,40007d0 <handle_button_interrupts+0x68>
		wantToPlayAGame=true;
 40007c4:	00800044 	movi	r2,1
 40007c8:	d0a72615 	stw	r2,-25448(gp)

	//we push the fourth button to play the game
	else if(*edge_capture_ptr==8){
		stopGame=true;
	}
}
 40007cc:	00001d06 	br	4000844 <handle_button_interrupts+0xdc>
	//if we push the first button, we start the game
	if(*edge_capture_ptr==1){
		wantToPlayAGame=true;
	}
	//if we push the second button, we show the average time since the beginning of the game
	else if(*edge_capture_ptr==2){
 40007d0:	e0bffd17 	ldw	r2,-12(fp)
 40007d4:	10800017 	ldw	r2,0(r2)
 40007d8:	10800098 	cmpnei	r2,r2,2
 40007dc:	10000c1e 	bne	r2,zero,4000810 <handle_button_interrupts+0xa8>
		averageTime=totalTime/nbTry;
 40007e0:	d0a72917 	ldw	r2,-25436(gp)
 40007e4:	d0e72817 	ldw	r3,-25440(gp)
 40007e8:	180b883a 	mov	r5,r3
 40007ec:	1009883a 	mov	r4,r2
 40007f0:	4000cc40 	call	4000cc4 <__divsi3>
 40007f4:	1009883a 	mov	r4,r2
 40007f8:	4000ee80 	call	4000ee8 <__floatsisf>
 40007fc:	1007883a 	mov	r3,r2
 4000800:	d0e72c15 	stw	r3,-25424(gp)
		//displayDecimalNumber(averageTime);
		triggerAverage1_3=true;
 4000804:	00800044 	movi	r2,1
 4000808:	d0a72b15 	stw	r2,-25428(gp)

	//we push the fourth button to play the game
	else if(*edge_capture_ptr==8){
		stopGame=true;
	}
}
 400080c:	00000d06 	br	4000844 <handle_button_interrupts+0xdc>
		triggerAverage1_3=true;
	}

	/* Perform the button press handling code here. */
	//Nothing in particular for the 3rd button
	else if(*edge_capture_ptr==4){
 4000810:	e0bffd17 	ldw	r2,-12(fp)
 4000814:	10800017 	ldw	r2,0(r2)
 4000818:	10800118 	cmpnei	r2,r2,4
 400081c:	1000031e 	bne	r2,zero,400082c <handle_button_interrupts+0xc4>
		nbTry=0;
 4000820:	d0272815 	stw	zero,-25440(gp)
		totalTime=0;
 4000824:	d0272915 	stw	zero,-25436(gp)

	//we push the fourth button to play the game
	else if(*edge_capture_ptr==8){
		stopGame=true;
	}
}
 4000828:	00000606 	br	4000844 <handle_button_interrupts+0xdc>
		nbTry=0;
		totalTime=0;
	}

	//we push the fourth button to play the game
	else if(*edge_capture_ptr==8){
 400082c:	e0bffd17 	ldw	r2,-12(fp)
 4000830:	10800017 	ldw	r2,0(r2)
 4000834:	10800218 	cmpnei	r2,r2,8
 4000838:	1000021e 	bne	r2,zero,4000844 <handle_button_interrupts+0xdc>
		stopGame=true;
 400083c:	00800044 	movi	r2,1
 4000840:	d0a72715 	stw	r2,-25444(gp)
	}
}
 4000844:	0001883a 	nop
 4000848:	e037883a 	mov	sp,fp
 400084c:	dfc00117 	ldw	ra,4(sp)
 4000850:	df000017 	ldw	fp,0(sp)
 4000854:	dec00204 	addi	sp,sp,8
 4000858:	f800283a 	ret

0400085c <init_button_pio>:

static void init_button_pio()
{
 400085c:	defffd04 	addi	sp,sp,-12
 4000860:	dfc00215 	stw	ra,8(sp)
 4000864:	df000115 	stw	fp,4(sp)
 4000868:	df000104 	addi	fp,sp,4
	/* Recast the edge_capture pointer to match the alt_irq_register() function
	 * prototype. */
	void *edge_capture_ptr = (void *)&edge_capture;
 400086c:	d0a72e04 	addi	r2,gp,-25416
 4000870:	e0bfff15 	stw	r2,-4(fp)

	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(key, 0xf);
 4000874:	00820034 	movhi	r2,2048
 4000878:	10940c04 	addi	r2,r2,20528
 400087c:	10800204 	addi	r2,r2,8
 4000880:	1007883a 	mov	r3,r2
 4000884:	008003c4 	movi	r2,15
 4000888:	18800035 	stwio	r2,0(r3)

	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(key, 0x0);
 400088c:	00820034 	movhi	r2,2048
 4000890:	10940c04 	addi	r2,r2,20528
 4000894:	10800304 	addi	r2,r2,12
 4000898:	0007883a 	mov	r3,zero
 400089c:	10c00035 	stwio	r3,0(r2)

	/* Register the ISR */
	alt_irq_register(KEY_IRQ, edge_capture_ptr, handle_button_interrupts);
 40008a0:	01810034 	movhi	r6,1024
 40008a4:	3181da04 	addi	r6,r6,1896
 40008a8:	e17fff17 	ldw	r5,-4(fp)
 40008ac:	01000084 	movi	r4,2
 40008b0:	40113d80 	call	40113d8 <alt_irq_register>
}
 40008b4:	0001883a 	nop
 40008b8:	e037883a 	mov	sp,fp
 40008bc:	dfc00117 	ldw	ra,4(sp)
 40008c0:	df000017 	ldw	fp,0(sp)
 40008c4:	dec00204 	addi	sp,sp,8
 40008c8:	f800283a 	ret

040008cc <play>:


void play(){
 40008cc:	defff104 	addi	sp,sp,-60
 40008d0:	dfc00e15 	stw	ra,56(sp)
 40008d4:	df000d15 	stw	fp,52(sp)
 40008d8:	df000d04 	addi	fp,sp,52
	nbTry++;
 40008dc:	d0a72817 	ldw	r2,-25440(gp)
 40008e0:	10800044 	addi	r2,r2,1
 40008e4:	d0a72815 	stw	r2,-25440(gp)

	// wait for a random time between 1 and 5 seconds
	int randomTime = rand() % time + 1;
 40008e8:	40015280 	call	4001528 <rand>
 40008ec:	1007883a 	mov	r3,r2
 40008f0:	d0a72a17 	ldw	r2,-25432(gp)
 40008f4:	100b883a 	mov	r5,r2
 40008f8:	1809883a 	mov	r4,r3
 40008fc:	4000d480 	call	4000d48 <__modsi3>
 4000900:	10800044 	addi	r2,r2,1
 4000904:	e0bff415 	stw	r2,-48(fp)
	printf("random time : %d\n", randomTime);
 4000908:	e17ff417 	ldw	r5,-48(fp)
 400090c:	010100b4 	movhi	r4,1026
 4000910:	21324d04 	addi	r4,r4,-14028
 4000914:	40014000 	call	4001400 <printf>
	for (int i = 0; i < randomTime; i++)
 4000918:	e03ff315 	stw	zero,-52(fp)
 400091c:	00000b06 	br	400094c <play+0x80>
	{
		usleep(500000);
 4000920:	01000234 	movhi	r4,8
 4000924:	21284804 	addi	r4,r4,-24288
 4000928:	4011b3c0 	call	4011b3c <usleep>
		evenLedsOn();
 400092c:	40007340 	call	4000734 <evenLedsOn>
		usleep(500000);
 4000930:	01000234 	movhi	r4,8
 4000934:	21284804 	addi	r4,r4,-24288
 4000938:	4011b3c0 	call	4011b3c <usleep>
		oddLedsOn();
 400093c:	40007000 	call	4000700 <oddLedsOn>
	nbTry++;

	// wait for a random time between 1 and 5 seconds
	int randomTime = rand() % time + 1;
	printf("random time : %d\n", randomTime);
	for (int i = 0; i < randomTime; i++)
 4000940:	e0bff317 	ldw	r2,-52(fp)
 4000944:	10800044 	addi	r2,r2,1
 4000948:	e0bff315 	stw	r2,-52(fp)
 400094c:	e0fff317 	ldw	r3,-52(fp)
 4000950:	e0bff417 	ldw	r2,-48(fp)
 4000954:	18bff216 	blt	r3,r2,4000920 <__alt_mem_onchip_memory2_0+0xfbffe920>
		oddLedsOn();
	}


	INT32U end;
	INT32U start=OSTimeGet();
 4000958:	401a2640 	call	401a264 <OSTimeGet>
 400095c:	e0bff515 	stw	r2,-44(fp)
	ledOn();
 4000960:	40006cc0 	call	40006cc <ledOn>

	while (!stopGame)
 4000964:	0001883a 	nop
 4000968:	d0a72717 	ldw	r2,-25444(gp)
 400096c:	103ffe26 	beq	r2,zero,4000968 <__alt_mem_onchip_memory2_0+0xfbffe968>
	{
		// wait for the user to press the button
	}

	end = OSTimeGet();
 4000970:	401a2640 	call	401a264 <OSTimeGet>
 4000974:	e0bff615 	stw	r2,-40(fp)

	// display the time
	// print end and start
	printf("end : %lu\n", end);
 4000978:	e17ff617 	ldw	r5,-40(fp)
 400097c:	010100b4 	movhi	r4,1026
 4000980:	21325204 	addi	r4,r4,-14008
 4000984:	40014000 	call	4001400 <printf>
	printf("start : %lu\n", start);
 4000988:	e17ff517 	ldw	r5,-44(fp)
 400098c:	010100b4 	movhi	r4,1026
 4000990:	21325504 	addi	r4,r4,-13996
 4000994:	40014000 	call	4001400 <printf>

	float time = (end - start)/1.0;
 4000998:	e0fff617 	ldw	r3,-40(fp)
 400099c:	e0bff517 	ldw	r2,-44(fp)
 40009a0:	1885c83a 	sub	r2,r3,r2
 40009a4:	1009883a 	mov	r4,r2
 40009a8:	400100c0 	call	400100c <__floatunsidf>
 40009ac:	100b883a 	mov	r5,r2
 40009b0:	180d883a 	mov	r6,r3
 40009b4:	2809883a 	mov	r4,r5
 40009b8:	300b883a 	mov	r5,r6
 40009bc:	40011c40 	call	40011c4 <__truncdfsf2>
 40009c0:	1007883a 	mov	r3,r2
 40009c4:	e0fff715 	stw	r3,-36(fp)
	//printf("time : %d", time);
	totalTime += (int)time;
 40009c8:	e13ff717 	ldw	r4,-36(fp)
 40009cc:	4000e780 	call	4000e78 <__fixsfsi>
 40009d0:	1007883a 	mov	r3,r2
 40009d4:	d0a72917 	ldw	r2,-25436(gp)
 40009d8:	1885883a 	add	r2,r3,r2
 40009dc:	d0a72915 	stw	r2,-25436(gp)
	displayDecimalNumber(time);
 40009e0:	e13ff717 	ldw	r4,-36(fp)
 40009e4:	4000e780 	call	4000e78 <__fixsfsi>
 40009e8:	1009883a 	mov	r4,r2
 40009ec:	40004440 	call	4000444 <displayDecimalNumber>

	// clean variables
	stopGame=false;
 40009f0:	d0272715 	stw	zero,-25444(gp)

	printf("sent time : %f\n", time);
 40009f4:	e13ff717 	ldw	r4,-36(fp)
 40009f8:	40010b40 	call	40010b4 <__extendsfdf2>
 40009fc:	100d883a 	mov	r6,r2
 4000a00:	180f883a 	mov	r7,r3
 4000a04:	300b883a 	mov	r5,r6
 4000a08:	380d883a 	mov	r6,r7
 4000a0c:	010100b4 	movhi	r4,1026
 4000a10:	21325904 	addi	r4,r4,-13980
 4000a14:	40014000 	call	4001400 <printf>
	char message[30];

	sprintf(message, "%f", time);
 4000a18:	e13ff717 	ldw	r4,-36(fp)
 4000a1c:	40010b40 	call	40010b4 <__extendsfdf2>
 4000a20:	1009883a 	mov	r4,r2
 4000a24:	180b883a 	mov	r5,r3
 4000a28:	e0bff804 	addi	r2,fp,-32
 4000a2c:	200d883a 	mov	r6,r4
 4000a30:	280f883a 	mov	r7,r5
 4000a34:	014100b4 	movhi	r5,1026
 4000a38:	29725d04 	addi	r5,r5,-13964
 4000a3c:	1009883a 	mov	r4,r2
 4000a40:	40015e40 	call	40015e4 <sprintf>
	OSQPost(msgQueue, (void *)message);
 4000a44:	d0a73317 	ldw	r2,-25396(gp)
 4000a48:	e0fff804 	addi	r3,fp,-32
 4000a4c:	180b883a 	mov	r5,r3
 4000a50:	1009883a 	mov	r4,r2
 4000a54:	40175840 	call	4017584 <OSQPost>
}
 4000a58:	0001883a 	nop
 4000a5c:	e037883a 	mov	sp,fp
 4000a60:	dfc00117 	ldw	ra,4(sp)
 4000a64:	df000017 	ldw	fp,0(sp)
 4000a68:	dec00204 	addi	sp,sp,8
 4000a6c:	f800283a 	ret

04000a70 <task1>:


/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 4000a70:	defffb04 	addi	sp,sp,-20
 4000a74:	dfc00415 	stw	ra,16(sp)
 4000a78:	df000315 	stw	fp,12(sp)
 4000a7c:	df000304 	addi	fp,sp,12
 4000a80:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char* message2 = "Hello";
 4000a84:	008100b4 	movhi	r2,1026
 4000a88:	10b25e04 	addi	r2,r2,-13960
 4000a8c:	e0bffd15 	stw	r2,-12(fp)
	averageTime=0;
 4000a90:	d0272c15 	stw	zero,-25424(gp)
	while (1)
	{
		if(wantToPlayAGame){
 4000a94:	d0a72617 	ldw	r2,-25448(gp)
 4000a98:	10000d26 	beq	r2,zero,4000ad0 <task1+0x60>
			OSMboxPost(mailBox1_2, (void *)message2);
 4000a9c:	d0a72d17 	ldw	r2,-25420(gp)
 4000aa0:	e17ffd17 	ldw	r5,-12(fp)
 4000aa4:	1009883a 	mov	r4,r2
 4000aa8:	40160980 	call	4016098 <OSMboxPost>
			OSMboxPend(mailBox3_1, 0, &err);
 4000aac:	d0a73217 	ldw	r2,-25400(gp)
 4000ab0:	e0fffe04 	addi	r3,fp,-8
 4000ab4:	180d883a 	mov	r6,r3
 4000ab8:	000b883a 	mov	r5,zero
 4000abc:	1009883a 	mov	r4,r2
 4000ac0:	4015cf80 	call	4015cf8 <OSMboxPend>
			wantToPlayAGame=false;
 4000ac4:	d0272615 	stw	zero,-25448(gp)
			stopGame=false;
 4000ac8:	d0272715 	stw	zero,-25444(gp)
			triggerAverage1_3=false;
 4000acc:	d0272b15 	stw	zero,-25428(gp)
		}

		if (triggerAverage1_3)
 4000ad0:	d0a72b17 	ldw	r2,-25428(gp)
 4000ad4:	103fef26 	beq	r2,zero,4000a94 <__alt_mem_onchip_memory2_0+0xfbffea94>
		{
			OSQPost(msgQueue,(void *)&averageTime);
 4000ad8:	d0a73317 	ldw	r2,-25396(gp)
 4000adc:	d1672c04 	addi	r5,gp,-25424
 4000ae0:	1009883a 	mov	r4,r2
 4000ae4:	40175840 	call	4017584 <OSQPost>
			OSMboxPend(mailBox3_1, 0, &err);
 4000ae8:	d0a73217 	ldw	r2,-25400(gp)
 4000aec:	e0fffe04 	addi	r3,fp,-8
 4000af0:	180d883a 	mov	r6,r3
 4000af4:	000b883a 	mov	r5,zero
 4000af8:	1009883a 	mov	r4,r2
 4000afc:	4015cf80 	call	4015cf8 <OSMboxPend>
			triggerAverage1_3=false;
 4000b00:	d0272b15 	stw	zero,-25428(gp)
		}
	}
 4000b04:	003fe306 	br	4000a94 <__alt_mem_onchip_memory2_0+0xfbffea94>

04000b08 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
 4000b08:	defffc04 	addi	sp,sp,-16
 4000b0c:	dfc00315 	stw	ra,12(sp)
 4000b10:	df000215 	stw	fp,8(sp)
 4000b14:	df000204 	addi	fp,sp,8
 4000b18:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while (1)
	{
		OSMboxPend(mailBox1_2, 0, &err);
 4000b1c:	d0a72d17 	ldw	r2,-25420(gp)
 4000b20:	e1bffe04 	addi	r6,fp,-8
 4000b24:	000b883a 	mov	r5,zero
 4000b28:	1009883a 	mov	r4,r2
 4000b2c:	4015cf80 	call	4015cf8 <OSMboxPend>
		play();
 4000b30:	40008cc0 	call	40008cc <play>
		wantToPlayAGame=false;
 4000b34:	d0272615 	stw	zero,-25448(gp)
	}
 4000b38:	003ff806 	br	4000b1c <__alt_mem_onchip_memory2_0+0xfbffeb1c>

04000b3c <task3>:
}

void task3(void* pdata) {
 4000b3c:	defffa04 	addi	sp,sp,-24
 4000b40:	dfc00515 	stw	ra,20(sp)
 4000b44:	df000415 	stw	fp,16(sp)
 4000b48:	df000404 	addi	fp,sp,16
 4000b4c:	e13fff15 	stw	r4,-4(fp)
	int* time;
	INT8U err;
	char* message="Hello";
 4000b50:	008100b4 	movhi	r2,1026
 4000b54:	10b25e04 	addi	r2,r2,-13960
 4000b58:	e0bffc15 	stw	r2,-16(fp)
	while (1) {
		time = (int*)OSQPend(msgQueue, 0, &err);
 4000b5c:	d0a73317 	ldw	r2,-25396(gp)
 4000b60:	e0fffe04 	addi	r3,fp,-8
 4000b64:	180d883a 	mov	r6,r3
 4000b68:	000b883a 	mov	r5,zero
 4000b6c:	1009883a 	mov	r4,r2
 4000b70:	401718c0 	call	401718c <OSQPend>
 4000b74:	e0bffd15 	stw	r2,-12(fp)
		displayDecimalNumber(time);
 4000b78:	e0bffd17 	ldw	r2,-12(fp)
 4000b7c:	1009883a 	mov	r4,r2
 4000b80:	40004440 	call	4000444 <displayDecimalNumber>
		OSMboxPost(mailBox3_1, (void *)message);
 4000b84:	d0a73217 	ldw	r2,-25400(gp)
 4000b88:	e17ffc17 	ldw	r5,-16(fp)
 4000b8c:	1009883a 	mov	r4,r2
 4000b90:	40160980 	call	4016098 <OSMboxPost>
	}
 4000b94:	003ff106 	br	4000b5c <__alt_mem_onchip_memory2_0+0xfbffeb5c>

04000b98 <main>:

}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 4000b98:	defff804 	addi	sp,sp,-32
 4000b9c:	dfc00715 	stw	ra,28(sp)
 4000ba0:	df000615 	stw	fp,24(sp)
 4000ba4:	df000604 	addi	fp,sp,24

	averageTime=0;
 4000ba8:	d0272c15 	stw	zero,-25424(gp)
	mailBox1_2=OSMboxCreate((void *)0);
 4000bac:	0009883a 	mov	r4,zero
 4000bb0:	40159e40 	call	40159e4 <OSMboxCreate>
 4000bb4:	d0a72d15 	stw	r2,-25420(gp)
	mailBox3_1=OSMboxCreate((void *)0);
 4000bb8:	0009883a 	mov	r4,zero
 4000bbc:	40159e40 	call	40159e4 <OSMboxCreate>
 4000bc0:	d0a73215 	stw	r2,-25400(gp)
	msgQueue = OSQCreate(&msgQueueTbl[0],MSG_QUEUE_SIZE);
 4000bc4:	01400504 	movi	r5,20
 4000bc8:	010100b4 	movhi	r4,1026
 4000bcc:	21098d04 	addi	r4,r4,9780
 4000bd0:	4016ca80 	call	4016ca8 <OSQCreate>
 4000bd4:	d0a73315 	stw	r2,-25396(gp)
	printf("Starting C2\n");
 4000bd8:	010100b4 	movhi	r4,1026
 4000bdc:	21326004 	addi	r4,r4,-13952
 4000be0:	40014fc0 	call	40014fc <puts>

	displayNothing();
 4000be4:	40005440 	call	4000544 <displayNothing>
	ledOff();
 4000be8:	400069c0 	call	400069c <ledOff>

	init_button_pio();
 4000bec:	400085c0 	call	400085c <init_button_pio>

	int switchValue = IORD_ALTERA_AVALON_PIO_DATA(switches); // 10 switches returned as an int
 4000bf0:	00820034 	movhi	r2,2048
 4000bf4:	10942404 	addi	r2,r2,20624
 4000bf8:	10800037 	ldwio	r2,0(r2)
 4000bfc:	e0bfff15 	stw	r2,-4(fp)
	time = IORD_ALTERA_AVALON_PIO_DATA(switches) - 511;
 4000c00:	00820034 	movhi	r2,2048
 4000c04:	10942404 	addi	r2,r2,20624
 4000c08:	10800037 	ldwio	r2,0(r2)
 4000c0c:	10bf8044 	addi	r2,r2,-511
 4000c10:	d0a72a15 	stw	r2,-25432(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(leds, switchValue);
 4000c14:	00820034 	movhi	r2,2048
 4000c18:	10942804 	addi	r2,r2,20640
 4000c1c:	1007883a 	mov	r3,r2
 4000c20:	e0bfff17 	ldw	r2,-4(fp)
 4000c24:	18800035 	stwio	r2,0(r3)

	OSTaskCreateExt(task1,
 4000c28:	d8000415 	stw	zero,16(sp)
 4000c2c:	d8000315 	stw	zero,12(sp)
 4000c30:	00820004 	movi	r2,2048
 4000c34:	d8800215 	stw	r2,8(sp)
 4000c38:	008100b4 	movhi	r2,1026
 4000c3c:	10818d04 	addi	r2,r2,1588
 4000c40:	d8800115 	stw	r2,4(sp)
 4000c44:	00800044 	movi	r2,1
 4000c48:	d8800015 	stw	r2,0(sp)
 4000c4c:	01c00044 	movi	r7,1
 4000c50:	018100b4 	movhi	r6,1026
 4000c54:	31898c04 	addi	r6,r6,9776
 4000c58:	000b883a 	mov	r5,zero
 4000c5c:	01010034 	movhi	r4,1024
 4000c60:	21029c04 	addi	r4,r4,2672
 4000c64:	4018d680 	call	4018d68 <OSTaskCreateExt>
			TASK_STACKSIZE,
			NULL,
			0);


	OSTaskCreateExt(task2,
 4000c68:	d8000415 	stw	zero,16(sp)
 4000c6c:	d8000315 	stw	zero,12(sp)
 4000c70:	00820004 	movi	r2,2048
 4000c74:	d8800215 	stw	r2,8(sp)
 4000c78:	008100b4 	movhi	r2,1026
 4000c7c:	1089bc04 	addi	r2,r2,9968
 4000c80:	d8800115 	stw	r2,4(sp)
 4000c84:	00800084 	movi	r2,2
 4000c88:	d8800015 	stw	r2,0(sp)
 4000c8c:	01c00084 	movi	r7,2
 4000c90:	018100b4 	movhi	r6,1026
 4000c94:	3191bb04 	addi	r6,r6,18156
 4000c98:	000b883a 	mov	r5,zero
 4000c9c:	01010034 	movhi	r4,1024
 4000ca0:	2102c204 	addi	r4,r4,2824
 4000ca4:	4018d680 	call	4018d68 <OSTaskCreateExt>
			TASK2_PRIORITY,
			task2_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	OSStart();
 4000ca8:	4012c080 	call	4012c08 <OSStart>
	return 0;
 4000cac:	0005883a 	mov	r2,zero
}
 4000cb0:	e037883a 	mov	sp,fp
 4000cb4:	dfc00117 	ldw	ra,4(sp)
 4000cb8:	df000017 	ldw	fp,0(sp)
 4000cbc:	dec00204 	addi	sp,sp,8
 4000cc0:	f800283a 	ret

04000cc4 <__divsi3>:
 4000cc4:	20001b16 	blt	r4,zero,4000d34 <__divsi3+0x70>
 4000cc8:	000f883a 	mov	r7,zero
 4000ccc:	28001616 	blt	r5,zero,4000d28 <__divsi3+0x64>
 4000cd0:	200d883a 	mov	r6,r4
 4000cd4:	29001a2e 	bgeu	r5,r4,4000d40 <__divsi3+0x7c>
 4000cd8:	00800804 	movi	r2,32
 4000cdc:	00c00044 	movi	r3,1
 4000ce0:	00000106 	br	4000ce8 <__divsi3+0x24>
 4000ce4:	10000d26 	beq	r2,zero,4000d1c <__divsi3+0x58>
 4000ce8:	294b883a 	add	r5,r5,r5
 4000cec:	10bfffc4 	addi	r2,r2,-1
 4000cf0:	18c7883a 	add	r3,r3,r3
 4000cf4:	293ffb36 	bltu	r5,r4,4000ce4 <__alt_mem_onchip_memory2_0+0xfbffece4>
 4000cf8:	0005883a 	mov	r2,zero
 4000cfc:	18000726 	beq	r3,zero,4000d1c <__divsi3+0x58>
 4000d00:	0005883a 	mov	r2,zero
 4000d04:	31400236 	bltu	r6,r5,4000d10 <__divsi3+0x4c>
 4000d08:	314dc83a 	sub	r6,r6,r5
 4000d0c:	10c4b03a 	or	r2,r2,r3
 4000d10:	1806d07a 	srli	r3,r3,1
 4000d14:	280ad07a 	srli	r5,r5,1
 4000d18:	183ffa1e 	bne	r3,zero,4000d04 <__alt_mem_onchip_memory2_0+0xfbffed04>
 4000d1c:	38000126 	beq	r7,zero,4000d24 <__divsi3+0x60>
 4000d20:	0085c83a 	sub	r2,zero,r2
 4000d24:	f800283a 	ret
 4000d28:	014bc83a 	sub	r5,zero,r5
 4000d2c:	39c0005c 	xori	r7,r7,1
 4000d30:	003fe706 	br	4000cd0 <__alt_mem_onchip_memory2_0+0xfbffecd0>
 4000d34:	0109c83a 	sub	r4,zero,r4
 4000d38:	01c00044 	movi	r7,1
 4000d3c:	003fe306 	br	4000ccc <__alt_mem_onchip_memory2_0+0xfbffeccc>
 4000d40:	00c00044 	movi	r3,1
 4000d44:	003fee06 	br	4000d00 <__alt_mem_onchip_memory2_0+0xfbffed00>

04000d48 <__modsi3>:
 4000d48:	20001716 	blt	r4,zero,4000da8 <__modsi3+0x60>
 4000d4c:	000f883a 	mov	r7,zero
 4000d50:	2005883a 	mov	r2,r4
 4000d54:	28001216 	blt	r5,zero,4000da0 <__modsi3+0x58>
 4000d58:	2900162e 	bgeu	r5,r4,4000db4 <__modsi3+0x6c>
 4000d5c:	01800804 	movi	r6,32
 4000d60:	00c00044 	movi	r3,1
 4000d64:	00000106 	br	4000d6c <__modsi3+0x24>
 4000d68:	30000a26 	beq	r6,zero,4000d94 <__modsi3+0x4c>
 4000d6c:	294b883a 	add	r5,r5,r5
 4000d70:	31bfffc4 	addi	r6,r6,-1
 4000d74:	18c7883a 	add	r3,r3,r3
 4000d78:	293ffb36 	bltu	r5,r4,4000d68 <__alt_mem_onchip_memory2_0+0xfbffed68>
 4000d7c:	18000526 	beq	r3,zero,4000d94 <__modsi3+0x4c>
 4000d80:	1806d07a 	srli	r3,r3,1
 4000d84:	11400136 	bltu	r2,r5,4000d8c <__modsi3+0x44>
 4000d88:	1145c83a 	sub	r2,r2,r5
 4000d8c:	280ad07a 	srli	r5,r5,1
 4000d90:	183ffb1e 	bne	r3,zero,4000d80 <__alt_mem_onchip_memory2_0+0xfbffed80>
 4000d94:	38000126 	beq	r7,zero,4000d9c <__modsi3+0x54>
 4000d98:	0085c83a 	sub	r2,zero,r2
 4000d9c:	f800283a 	ret
 4000da0:	014bc83a 	sub	r5,zero,r5
 4000da4:	003fec06 	br	4000d58 <__alt_mem_onchip_memory2_0+0xfbffed58>
 4000da8:	0109c83a 	sub	r4,zero,r4
 4000dac:	01c00044 	movi	r7,1
 4000db0:	003fe706 	br	4000d50 <__alt_mem_onchip_memory2_0+0xfbffed50>
 4000db4:	00c00044 	movi	r3,1
 4000db8:	003ff106 	br	4000d80 <__alt_mem_onchip_memory2_0+0xfbffed80>

04000dbc <__udivsi3>:
 4000dbc:	200d883a 	mov	r6,r4
 4000dc0:	2900152e 	bgeu	r5,r4,4000e18 <__udivsi3+0x5c>
 4000dc4:	28001416 	blt	r5,zero,4000e18 <__udivsi3+0x5c>
 4000dc8:	00800804 	movi	r2,32
 4000dcc:	00c00044 	movi	r3,1
 4000dd0:	00000206 	br	4000ddc <__udivsi3+0x20>
 4000dd4:	10000e26 	beq	r2,zero,4000e10 <__udivsi3+0x54>
 4000dd8:	28000516 	blt	r5,zero,4000df0 <__udivsi3+0x34>
 4000ddc:	294b883a 	add	r5,r5,r5
 4000de0:	10bfffc4 	addi	r2,r2,-1
 4000de4:	18c7883a 	add	r3,r3,r3
 4000de8:	293ffa36 	bltu	r5,r4,4000dd4 <__alt_mem_onchip_memory2_0+0xfbffedd4>
 4000dec:	18000826 	beq	r3,zero,4000e10 <__udivsi3+0x54>
 4000df0:	0005883a 	mov	r2,zero
 4000df4:	31400236 	bltu	r6,r5,4000e00 <__udivsi3+0x44>
 4000df8:	314dc83a 	sub	r6,r6,r5
 4000dfc:	10c4b03a 	or	r2,r2,r3
 4000e00:	1806d07a 	srli	r3,r3,1
 4000e04:	280ad07a 	srli	r5,r5,1
 4000e08:	183ffa1e 	bne	r3,zero,4000df4 <__alt_mem_onchip_memory2_0+0xfbffedf4>
 4000e0c:	f800283a 	ret
 4000e10:	0005883a 	mov	r2,zero
 4000e14:	f800283a 	ret
 4000e18:	00c00044 	movi	r3,1
 4000e1c:	003ff406 	br	4000df0 <__alt_mem_onchip_memory2_0+0xfbffedf0>

04000e20 <__umodsi3>:
 4000e20:	2005883a 	mov	r2,r4
 4000e24:	2900122e 	bgeu	r5,r4,4000e70 <__umodsi3+0x50>
 4000e28:	28001116 	blt	r5,zero,4000e70 <__umodsi3+0x50>
 4000e2c:	01800804 	movi	r6,32
 4000e30:	00c00044 	movi	r3,1
 4000e34:	00000206 	br	4000e40 <__umodsi3+0x20>
 4000e38:	30000c26 	beq	r6,zero,4000e6c <__umodsi3+0x4c>
 4000e3c:	28000516 	blt	r5,zero,4000e54 <__umodsi3+0x34>
 4000e40:	294b883a 	add	r5,r5,r5
 4000e44:	31bfffc4 	addi	r6,r6,-1
 4000e48:	18c7883a 	add	r3,r3,r3
 4000e4c:	293ffa36 	bltu	r5,r4,4000e38 <__alt_mem_onchip_memory2_0+0xfbffee38>
 4000e50:	18000626 	beq	r3,zero,4000e6c <__umodsi3+0x4c>
 4000e54:	1806d07a 	srli	r3,r3,1
 4000e58:	11400136 	bltu	r2,r5,4000e60 <__umodsi3+0x40>
 4000e5c:	1145c83a 	sub	r2,r2,r5
 4000e60:	280ad07a 	srli	r5,r5,1
 4000e64:	183ffb1e 	bne	r3,zero,4000e54 <__alt_mem_onchip_memory2_0+0xfbffee54>
 4000e68:	f800283a 	ret
 4000e6c:	f800283a 	ret
 4000e70:	00c00044 	movi	r3,1
 4000e74:	003ff706 	br	4000e54 <__alt_mem_onchip_memory2_0+0xfbffee54>

04000e78 <__fixsfsi>:
 4000e78:	200ad5fa 	srli	r5,r4,23
 4000e7c:	00c02034 	movhi	r3,128
 4000e80:	18ffffc4 	addi	r3,r3,-1
 4000e84:	29403fcc 	andi	r5,r5,255
 4000e88:	00801f84 	movi	r2,126
 4000e8c:	1906703a 	and	r3,r3,r4
 4000e90:	2008d7fa 	srli	r4,r4,31
 4000e94:	11400e0e 	bge	r2,r5,4000ed0 <__fixsfsi+0x58>
 4000e98:	00802744 	movi	r2,157
 4000e9c:	11400816 	blt	r2,r5,4000ec0 <__fixsfsi+0x48>
 4000ea0:	00802544 	movi	r2,149
 4000ea4:	18c02034 	orhi	r3,r3,128
 4000ea8:	11400b0e 	bge	r2,r5,4000ed8 <__fixsfsi+0x60>
 4000eac:	28bfda84 	addi	r2,r5,-150
 4000eb0:	1884983a 	sll	r2,r3,r2
 4000eb4:	20000726 	beq	r4,zero,4000ed4 <__fixsfsi+0x5c>
 4000eb8:	0085c83a 	sub	r2,zero,r2
 4000ebc:	f800283a 	ret
 4000ec0:	00a00034 	movhi	r2,32768
 4000ec4:	10bfffc4 	addi	r2,r2,-1
 4000ec8:	2085883a 	add	r2,r4,r2
 4000ecc:	f800283a 	ret
 4000ed0:	0005883a 	mov	r2,zero
 4000ed4:	f800283a 	ret
 4000ed8:	00802584 	movi	r2,150
 4000edc:	1145c83a 	sub	r2,r2,r5
 4000ee0:	1884d83a 	srl	r2,r3,r2
 4000ee4:	003ff306 	br	4000eb4 <__alt_mem_onchip_memory2_0+0xfbffeeb4>

04000ee8 <__floatsisf>:
 4000ee8:	defffd04 	addi	sp,sp,-12
 4000eec:	dfc00215 	stw	ra,8(sp)
 4000ef0:	dc400115 	stw	r17,4(sp)
 4000ef4:	dc000015 	stw	r16,0(sp)
 4000ef8:	20003526 	beq	r4,zero,4000fd0 <__floatsisf+0xe8>
 4000efc:	2021883a 	mov	r16,r4
 4000f00:	2022d7fa 	srli	r17,r4,31
 4000f04:	20003616 	blt	r4,zero,4000fe0 <__floatsisf+0xf8>
 4000f08:	8009883a 	mov	r4,r16
 4000f0c:	400136c0 	call	400136c <__clzsi2>
 4000f10:	00c02784 	movi	r3,158
 4000f14:	1887c83a 	sub	r3,r3,r2
 4000f18:	01002584 	movi	r4,150
 4000f1c:	20c01416 	blt	r4,r3,4000f70 <__floatsisf+0x88>
 4000f20:	20c9c83a 	sub	r4,r4,r3
 4000f24:	8120983a 	sll	r16,r16,r4
 4000f28:	00802034 	movhi	r2,128
 4000f2c:	10bfffc4 	addi	r2,r2,-1
 4000f30:	8809883a 	mov	r4,r17
 4000f34:	80a0703a 	and	r16,r16,r2
 4000f38:	18803fcc 	andi	r2,r3,255
 4000f3c:	100695fa 	slli	r3,r2,23
 4000f40:	20803fcc 	andi	r2,r4,255
 4000f44:	100897fa 	slli	r4,r2,31
 4000f48:	00802034 	movhi	r2,128
 4000f4c:	10bfffc4 	addi	r2,r2,-1
 4000f50:	8084703a 	and	r2,r16,r2
 4000f54:	10c4b03a 	or	r2,r2,r3
 4000f58:	1104b03a 	or	r2,r2,r4
 4000f5c:	dfc00217 	ldw	ra,8(sp)
 4000f60:	dc400117 	ldw	r17,4(sp)
 4000f64:	dc000017 	ldw	r16,0(sp)
 4000f68:	dec00304 	addi	sp,sp,12
 4000f6c:	f800283a 	ret
 4000f70:	01002644 	movi	r4,153
 4000f74:	20c01c16 	blt	r4,r3,4000fe8 <__floatsisf+0x100>
 4000f78:	20c9c83a 	sub	r4,r4,r3
 4000f7c:	8120983a 	sll	r16,r16,r4
 4000f80:	013f0034 	movhi	r4,64512
 4000f84:	213fffc4 	addi	r4,r4,-1
 4000f88:	814001cc 	andi	r5,r16,7
 4000f8c:	8108703a 	and	r4,r16,r4
 4000f90:	28000426 	beq	r5,zero,4000fa4 <__floatsisf+0xbc>
 4000f94:	840003cc 	andi	r16,r16,15
 4000f98:	01400104 	movi	r5,4
 4000f9c:	81400126 	beq	r16,r5,4000fa4 <__floatsisf+0xbc>
 4000fa0:	2149883a 	add	r4,r4,r5
 4000fa4:	2141002c 	andhi	r5,r4,1024
 4000fa8:	28000526 	beq	r5,zero,4000fc0 <__floatsisf+0xd8>
 4000fac:	00c027c4 	movi	r3,159
 4000fb0:	1887c83a 	sub	r3,r3,r2
 4000fb4:	00bf0034 	movhi	r2,64512
 4000fb8:	10bfffc4 	addi	r2,r2,-1
 4000fbc:	2088703a 	and	r4,r4,r2
 4000fc0:	202091ba 	slli	r16,r4,6
 4000fc4:	8809883a 	mov	r4,r17
 4000fc8:	8020d27a 	srli	r16,r16,9
 4000fcc:	003fda06 	br	4000f38 <__alt_mem_onchip_memory2_0+0xfbffef38>
 4000fd0:	0009883a 	mov	r4,zero
 4000fd4:	0007883a 	mov	r3,zero
 4000fd8:	0021883a 	mov	r16,zero
 4000fdc:	003fd606 	br	4000f38 <__alt_mem_onchip_memory2_0+0xfbffef38>
 4000fe0:	0121c83a 	sub	r16,zero,r4
 4000fe4:	003fc806 	br	4000f08 <__alt_mem_onchip_memory2_0+0xfbffef08>
 4000fe8:	01002e44 	movi	r4,185
 4000fec:	20c9c83a 	sub	r4,r4,r3
 4000ff0:	01400144 	movi	r5,5
 4000ff4:	8108983a 	sll	r4,r16,r4
 4000ff8:	288bc83a 	sub	r5,r5,r2
 4000ffc:	8160d83a 	srl	r16,r16,r5
 4001000:	2008c03a 	cmpne	r4,r4,zero
 4001004:	8120b03a 	or	r16,r16,r4
 4001008:	003fdd06 	br	4000f80 <__alt_mem_onchip_memory2_0+0xfbffef80>

0400100c <__floatunsidf>:
 400100c:	defffe04 	addi	sp,sp,-8
 4001010:	dc000015 	stw	r16,0(sp)
 4001014:	dfc00115 	stw	ra,4(sp)
 4001018:	2021883a 	mov	r16,r4
 400101c:	20002226 	beq	r4,zero,40010a8 <__floatunsidf+0x9c>
 4001020:	400136c0 	call	400136c <__clzsi2>
 4001024:	01010784 	movi	r4,1054
 4001028:	2089c83a 	sub	r4,r4,r2
 400102c:	01810cc4 	movi	r6,1075
 4001030:	310dc83a 	sub	r6,r6,r4
 4001034:	00c007c4 	movi	r3,31
 4001038:	1980120e 	bge	r3,r6,4001084 <__floatunsidf+0x78>
 400103c:	00c104c4 	movi	r3,1043
 4001040:	1907c83a 	sub	r3,r3,r4
 4001044:	80ca983a 	sll	r5,r16,r3
 4001048:	00800434 	movhi	r2,16
 400104c:	10bfffc4 	addi	r2,r2,-1
 4001050:	2101ffcc 	andi	r4,r4,2047
 4001054:	0021883a 	mov	r16,zero
 4001058:	288a703a 	and	r5,r5,r2
 400105c:	2008953a 	slli	r4,r4,20
 4001060:	00c00434 	movhi	r3,16
 4001064:	18ffffc4 	addi	r3,r3,-1
 4001068:	28c6703a 	and	r3,r5,r3
 400106c:	8005883a 	mov	r2,r16
 4001070:	1906b03a 	or	r3,r3,r4
 4001074:	dfc00117 	ldw	ra,4(sp)
 4001078:	dc000017 	ldw	r16,0(sp)
 400107c:	dec00204 	addi	sp,sp,8
 4001080:	f800283a 	ret
 4001084:	00c002c4 	movi	r3,11
 4001088:	188bc83a 	sub	r5,r3,r2
 400108c:	814ad83a 	srl	r5,r16,r5
 4001090:	00c00434 	movhi	r3,16
 4001094:	18ffffc4 	addi	r3,r3,-1
 4001098:	81a0983a 	sll	r16,r16,r6
 400109c:	2101ffcc 	andi	r4,r4,2047
 40010a0:	28ca703a 	and	r5,r5,r3
 40010a4:	003fed06 	br	400105c <__alt_mem_onchip_memory2_0+0xfbfff05c>
 40010a8:	0009883a 	mov	r4,zero
 40010ac:	000b883a 	mov	r5,zero
 40010b0:	003fea06 	br	400105c <__alt_mem_onchip_memory2_0+0xfbfff05c>

040010b4 <__extendsfdf2>:
 40010b4:	200ad5fa 	srli	r5,r4,23
 40010b8:	defffd04 	addi	sp,sp,-12
 40010bc:	dc400115 	stw	r17,4(sp)
 40010c0:	29403fcc 	andi	r5,r5,255
 40010c4:	29800044 	addi	r6,r5,1
 40010c8:	04402034 	movhi	r17,128
 40010cc:	dc000015 	stw	r16,0(sp)
 40010d0:	8c7fffc4 	addi	r17,r17,-1
 40010d4:	dfc00215 	stw	ra,8(sp)
 40010d8:	31803fcc 	andi	r6,r6,255
 40010dc:	00800044 	movi	r2,1
 40010e0:	8922703a 	and	r17,r17,r4
 40010e4:	2020d7fa 	srli	r16,r4,31
 40010e8:	1180110e 	bge	r2,r6,4001130 <__extendsfdf2+0x7c>
 40010ec:	880cd0fa 	srli	r6,r17,3
 40010f0:	8822977a 	slli	r17,r17,29
 40010f4:	2940e004 	addi	r5,r5,896
 40010f8:	2941ffcc 	andi	r5,r5,2047
 40010fc:	2804953a 	slli	r2,r5,20
 4001100:	01400434 	movhi	r5,16
 4001104:	800697fa 	slli	r3,r16,31
 4001108:	297fffc4 	addi	r5,r5,-1
 400110c:	314a703a 	and	r5,r6,r5
 4001110:	288ab03a 	or	r5,r5,r2
 4001114:	28c6b03a 	or	r3,r5,r3
 4001118:	8805883a 	mov	r2,r17
 400111c:	dfc00217 	ldw	ra,8(sp)
 4001120:	dc400117 	ldw	r17,4(sp)
 4001124:	dc000017 	ldw	r16,0(sp)
 4001128:	dec00304 	addi	sp,sp,12
 400112c:	f800283a 	ret
 4001130:	2800111e 	bne	r5,zero,4001178 <__extendsfdf2+0xc4>
 4001134:	88001c26 	beq	r17,zero,40011a8 <__extendsfdf2+0xf4>
 4001138:	8809883a 	mov	r4,r17
 400113c:	400136c0 	call	400136c <__clzsi2>
 4001140:	00c00284 	movi	r3,10
 4001144:	18801b16 	blt	r3,r2,40011b4 <__extendsfdf2+0x100>
 4001148:	018002c4 	movi	r6,11
 400114c:	308dc83a 	sub	r6,r6,r2
 4001150:	11000544 	addi	r4,r2,21
 4001154:	8986d83a 	srl	r3,r17,r6
 4001158:	8922983a 	sll	r17,r17,r4
 400115c:	0180e244 	movi	r6,905
 4001160:	01400434 	movhi	r5,16
 4001164:	3085c83a 	sub	r2,r6,r2
 4001168:	297fffc4 	addi	r5,r5,-1
 400116c:	194c703a 	and	r6,r3,r5
 4001170:	1141ffcc 	andi	r5,r2,2047
 4001174:	003fe006 	br	40010f8 <__alt_mem_onchip_memory2_0+0xfbfff0f8>
 4001178:	88000826 	beq	r17,zero,400119c <__extendsfdf2+0xe8>
 400117c:	880cd0fa 	srli	r6,r17,3
 4001180:	00800434 	movhi	r2,16
 4001184:	10bfffc4 	addi	r2,r2,-1
 4001188:	31800234 	orhi	r6,r6,8
 400118c:	8822977a 	slli	r17,r17,29
 4001190:	308c703a 	and	r6,r6,r2
 4001194:	0141ffc4 	movi	r5,2047
 4001198:	003fd706 	br	40010f8 <__alt_mem_onchip_memory2_0+0xfbfff0f8>
 400119c:	0141ffc4 	movi	r5,2047
 40011a0:	000d883a 	mov	r6,zero
 40011a4:	003fd406 	br	40010f8 <__alt_mem_onchip_memory2_0+0xfbfff0f8>
 40011a8:	000b883a 	mov	r5,zero
 40011ac:	000d883a 	mov	r6,zero
 40011b0:	003fd106 	br	40010f8 <__alt_mem_onchip_memory2_0+0xfbfff0f8>
 40011b4:	11bffd44 	addi	r6,r2,-11
 40011b8:	8986983a 	sll	r3,r17,r6
 40011bc:	0023883a 	mov	r17,zero
 40011c0:	003fe606 	br	400115c <__alt_mem_onchip_memory2_0+0xfbfff15c>

040011c4 <__truncdfsf2>:
 40011c4:	2810d53a 	srli	r8,r5,20
 40011c8:	01c00434 	movhi	r7,16
 40011cc:	39ffffc4 	addi	r7,r7,-1
 40011d0:	29ce703a 	and	r7,r5,r7
 40011d4:	4201ffcc 	andi	r8,r8,2047
 40011d8:	380e90fa 	slli	r7,r7,3
 40011dc:	200cd77a 	srli	r6,r4,29
 40011e0:	42400044 	addi	r9,r8,1
 40011e4:	4a41ffcc 	andi	r9,r9,2047
 40011e8:	00c00044 	movi	r3,1
 40011ec:	280ad7fa 	srli	r5,r5,31
 40011f0:	31ceb03a 	or	r7,r6,r7
 40011f4:	200490fa 	slli	r2,r4,3
 40011f8:	1a40230e 	bge	r3,r9,4001288 <__truncdfsf2+0xc4>
 40011fc:	40ff2004 	addi	r3,r8,-896
 4001200:	01803f84 	movi	r6,254
 4001204:	30c01516 	blt	r6,r3,400125c <__truncdfsf2+0x98>
 4001208:	00c0380e 	bge	zero,r3,40012ec <__truncdfsf2+0x128>
 400120c:	200c91ba 	slli	r6,r4,6
 4001210:	380e90fa 	slli	r7,r7,3
 4001214:	1004d77a 	srli	r2,r2,29
 4001218:	300cc03a 	cmpne	r6,r6,zero
 400121c:	31ccb03a 	or	r6,r6,r7
 4001220:	308cb03a 	or	r6,r6,r2
 4001224:	308001cc 	andi	r2,r6,7
 4001228:	10000426 	beq	r2,zero,400123c <__truncdfsf2+0x78>
 400122c:	308003cc 	andi	r2,r6,15
 4001230:	01000104 	movi	r4,4
 4001234:	11000126 	beq	r2,r4,400123c <__truncdfsf2+0x78>
 4001238:	31800104 	addi	r6,r6,4
 400123c:	3081002c 	andhi	r2,r6,1024
 4001240:	10001626 	beq	r2,zero,400129c <__truncdfsf2+0xd8>
 4001244:	18c00044 	addi	r3,r3,1
 4001248:	00803fc4 	movi	r2,255
 400124c:	18800326 	beq	r3,r2,400125c <__truncdfsf2+0x98>
 4001250:	300c91ba 	slli	r6,r6,6
 4001254:	300cd27a 	srli	r6,r6,9
 4001258:	00000206 	br	4001264 <__truncdfsf2+0xa0>
 400125c:	00ffffc4 	movi	r3,-1
 4001260:	000d883a 	mov	r6,zero
 4001264:	18c03fcc 	andi	r3,r3,255
 4001268:	180895fa 	slli	r4,r3,23
 400126c:	00c02034 	movhi	r3,128
 4001270:	280a97fa 	slli	r5,r5,31
 4001274:	18ffffc4 	addi	r3,r3,-1
 4001278:	30c6703a 	and	r3,r6,r3
 400127c:	1906b03a 	or	r3,r3,r4
 4001280:	1944b03a 	or	r2,r3,r5
 4001284:	f800283a 	ret
 4001288:	40000b1e 	bne	r8,zero,40012b8 <__truncdfsf2+0xf4>
 400128c:	388cb03a 	or	r6,r7,r2
 4001290:	0007883a 	mov	r3,zero
 4001294:	30000426 	beq	r6,zero,40012a8 <__truncdfsf2+0xe4>
 4001298:	01800144 	movi	r6,5
 400129c:	00803fc4 	movi	r2,255
 40012a0:	300cd0fa 	srli	r6,r6,3
 40012a4:	18800a26 	beq	r3,r2,40012d0 <__truncdfsf2+0x10c>
 40012a8:	00802034 	movhi	r2,128
 40012ac:	10bfffc4 	addi	r2,r2,-1
 40012b0:	308c703a 	and	r6,r6,r2
 40012b4:	003feb06 	br	4001264 <__alt_mem_onchip_memory2_0+0xfbfff264>
 40012b8:	3888b03a 	or	r4,r7,r2
 40012bc:	203fe726 	beq	r4,zero,400125c <__alt_mem_onchip_memory2_0+0xfbfff25c>
 40012c0:	380c90fa 	slli	r6,r7,3
 40012c4:	00c03fc4 	movi	r3,255
 40012c8:	31808034 	orhi	r6,r6,512
 40012cc:	003fd506 	br	4001224 <__alt_mem_onchip_memory2_0+0xfbfff224>
 40012d0:	303fe226 	beq	r6,zero,400125c <__alt_mem_onchip_memory2_0+0xfbfff25c>
 40012d4:	00802034 	movhi	r2,128
 40012d8:	31801034 	orhi	r6,r6,64
 40012dc:	10bfffc4 	addi	r2,r2,-1
 40012e0:	00ffffc4 	movi	r3,-1
 40012e4:	308c703a 	and	r6,r6,r2
 40012e8:	003fde06 	br	4001264 <__alt_mem_onchip_memory2_0+0xfbfff264>
 40012ec:	013ffa44 	movi	r4,-23
 40012f0:	19000e16 	blt	r3,r4,400132c <__truncdfsf2+0x168>
 40012f4:	01000784 	movi	r4,30
 40012f8:	20c9c83a 	sub	r4,r4,r3
 40012fc:	018007c4 	movi	r6,31
 4001300:	39c02034 	orhi	r7,r7,128
 4001304:	31000b16 	blt	r6,r4,4001334 <__truncdfsf2+0x170>
 4001308:	423f2084 	addi	r8,r8,-894
 400130c:	120c983a 	sll	r6,r2,r8
 4001310:	3a0e983a 	sll	r7,r7,r8
 4001314:	1104d83a 	srl	r2,r2,r4
 4001318:	300cc03a 	cmpne	r6,r6,zero
 400131c:	31ceb03a 	or	r7,r6,r7
 4001320:	388cb03a 	or	r6,r7,r2
 4001324:	0007883a 	mov	r3,zero
 4001328:	003fbe06 	br	4001224 <__alt_mem_onchip_memory2_0+0xfbfff224>
 400132c:	0007883a 	mov	r3,zero
 4001330:	003fd906 	br	4001298 <__alt_mem_onchip_memory2_0+0xfbfff298>
 4001334:	01bfff84 	movi	r6,-2
 4001338:	30cdc83a 	sub	r6,r6,r3
 400133c:	00c00804 	movi	r3,32
 4001340:	398cd83a 	srl	r6,r7,r6
 4001344:	20c00726 	beq	r4,r3,4001364 <__truncdfsf2+0x1a0>
 4001348:	423f2884 	addi	r8,r8,-862
 400134c:	3a0e983a 	sll	r7,r7,r8
 4001350:	3884b03a 	or	r2,r7,r2
 4001354:	1004c03a 	cmpne	r2,r2,zero
 4001358:	118cb03a 	or	r6,r2,r6
 400135c:	0007883a 	mov	r3,zero
 4001360:	003fb006 	br	4001224 <__alt_mem_onchip_memory2_0+0xfbfff224>
 4001364:	000f883a 	mov	r7,zero
 4001368:	003ff906 	br	4001350 <__alt_mem_onchip_memory2_0+0xfbfff350>

0400136c <__clzsi2>:
 400136c:	00bfffd4 	movui	r2,65535
 4001370:	11000536 	bltu	r2,r4,4001388 <__clzsi2+0x1c>
 4001374:	00803fc4 	movi	r2,255
 4001378:	11000f36 	bltu	r2,r4,40013b8 <__clzsi2+0x4c>
 400137c:	00800804 	movi	r2,32
 4001380:	0007883a 	mov	r3,zero
 4001384:	00000506 	br	400139c <__clzsi2+0x30>
 4001388:	00804034 	movhi	r2,256
 400138c:	10bfffc4 	addi	r2,r2,-1
 4001390:	11000c2e 	bgeu	r2,r4,40013c4 <__clzsi2+0x58>
 4001394:	00800204 	movi	r2,8
 4001398:	00c00604 	movi	r3,24
 400139c:	20c8d83a 	srl	r4,r4,r3
 40013a0:	00c100b4 	movhi	r3,1026
 40013a4:	18f26304 	addi	r3,r3,-13940
 40013a8:	1909883a 	add	r4,r3,r4
 40013ac:	20c00003 	ldbu	r3,0(r4)
 40013b0:	10c5c83a 	sub	r2,r2,r3
 40013b4:	f800283a 	ret
 40013b8:	00800604 	movi	r2,24
 40013bc:	00c00204 	movi	r3,8
 40013c0:	003ff606 	br	400139c <__alt_mem_onchip_memory2_0+0xfbfff39c>
 40013c4:	00800404 	movi	r2,16
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	003ff306 	br	400139c <__alt_mem_onchip_memory2_0+0xfbfff39c>

040013d0 <_printf_r>:
 40013d0:	defffd04 	addi	sp,sp,-12
 40013d4:	2805883a 	mov	r2,r5
 40013d8:	dfc00015 	stw	ra,0(sp)
 40013dc:	d9800115 	stw	r6,4(sp)
 40013e0:	d9c00215 	stw	r7,8(sp)
 40013e4:	21400217 	ldw	r5,8(r4)
 40013e8:	d9c00104 	addi	r7,sp,4
 40013ec:	100d883a 	mov	r6,r2
 40013f0:	40038c00 	call	40038c0 <___vfprintf_internal_r>
 40013f4:	dfc00017 	ldw	ra,0(sp)
 40013f8:	dec00304 	addi	sp,sp,12
 40013fc:	f800283a 	ret

04001400 <printf>:
 4001400:	defffc04 	addi	sp,sp,-16
 4001404:	dfc00015 	stw	ra,0(sp)
 4001408:	d9400115 	stw	r5,4(sp)
 400140c:	d9800215 	stw	r6,8(sp)
 4001410:	d9c00315 	stw	r7,12(sp)
 4001414:	008100b4 	movhi	r2,1026
 4001418:	10ba3604 	addi	r2,r2,-5928
 400141c:	10800017 	ldw	r2,0(r2)
 4001420:	200b883a 	mov	r5,r4
 4001424:	d9800104 	addi	r6,sp,4
 4001428:	11000217 	ldw	r4,8(r2)
 400142c:	4005ab80 	call	4005ab8 <__vfprintf_internal>
 4001430:	dfc00017 	ldw	ra,0(sp)
 4001434:	dec00404 	addi	sp,sp,16
 4001438:	f800283a 	ret

0400143c <_puts_r>:
 400143c:	defff604 	addi	sp,sp,-40
 4001440:	dc000715 	stw	r16,28(sp)
 4001444:	2021883a 	mov	r16,r4
 4001448:	2809883a 	mov	r4,r5
 400144c:	dc400815 	stw	r17,32(sp)
 4001450:	dfc00915 	stw	ra,36(sp)
 4001454:	2823883a 	mov	r17,r5
 4001458:	40016500 	call	4001650 <strlen>
 400145c:	10c00044 	addi	r3,r2,1
 4001460:	d8800115 	stw	r2,4(sp)
 4001464:	008100b4 	movhi	r2,1026
 4001468:	10b2a304 	addi	r2,r2,-13684
 400146c:	d8800215 	stw	r2,8(sp)
 4001470:	00800044 	movi	r2,1
 4001474:	d8800315 	stw	r2,12(sp)
 4001478:	00800084 	movi	r2,2
 400147c:	dc400015 	stw	r17,0(sp)
 4001480:	d8c00615 	stw	r3,24(sp)
 4001484:	dec00415 	stw	sp,16(sp)
 4001488:	d8800515 	stw	r2,20(sp)
 400148c:	80000226 	beq	r16,zero,4001498 <_puts_r+0x5c>
 4001490:	80800e17 	ldw	r2,56(r16)
 4001494:	10001426 	beq	r2,zero,40014e8 <_puts_r+0xac>
 4001498:	81400217 	ldw	r5,8(r16)
 400149c:	2880030b 	ldhu	r2,12(r5)
 40014a0:	10c8000c 	andi	r3,r2,8192
 40014a4:	1800061e 	bne	r3,zero,40014c0 <_puts_r+0x84>
 40014a8:	29001917 	ldw	r4,100(r5)
 40014ac:	00f7ffc4 	movi	r3,-8193
 40014b0:	10880014 	ori	r2,r2,8192
 40014b4:	20c6703a 	and	r3,r4,r3
 40014b8:	2880030d 	sth	r2,12(r5)
 40014bc:	28c01915 	stw	r3,100(r5)
 40014c0:	d9800404 	addi	r6,sp,16
 40014c4:	8009883a 	mov	r4,r16
 40014c8:	4007fe80 	call	4007fe8 <__sfvwrite_r>
 40014cc:	1000091e 	bne	r2,zero,40014f4 <_puts_r+0xb8>
 40014d0:	00800284 	movi	r2,10
 40014d4:	dfc00917 	ldw	ra,36(sp)
 40014d8:	dc400817 	ldw	r17,32(sp)
 40014dc:	dc000717 	ldw	r16,28(sp)
 40014e0:	dec00a04 	addi	sp,sp,40
 40014e4:	f800283a 	ret
 40014e8:	8009883a 	mov	r4,r16
 40014ec:	4007b640 	call	4007b64 <__sinit>
 40014f0:	003fe906 	br	4001498 <__alt_mem_onchip_memory2_0+0xfbfff498>
 40014f4:	00bfffc4 	movi	r2,-1
 40014f8:	003ff606 	br	40014d4 <__alt_mem_onchip_memory2_0+0xfbfff4d4>

040014fc <puts>:
 40014fc:	008100b4 	movhi	r2,1026
 4001500:	10ba3604 	addi	r2,r2,-5928
 4001504:	200b883a 	mov	r5,r4
 4001508:	11000017 	ldw	r4,0(r2)
 400150c:	400143c1 	jmpi	400143c <_puts_r>

04001510 <srand>:
 4001510:	008100b4 	movhi	r2,1026
 4001514:	10ba3604 	addi	r2,r2,-5928
 4001518:	10800017 	ldw	r2,0(r2)
 400151c:	11002915 	stw	r4,164(r2)
 4001520:	10002a15 	stw	zero,168(r2)
 4001524:	f800283a 	ret

04001528 <rand>:
 4001528:	008100b4 	movhi	r2,1026
 400152c:	defffe04 	addi	sp,sp,-8
 4001530:	10ba3604 	addi	r2,r2,-5928
 4001534:	dc000015 	stw	r16,0(sp)
 4001538:	14000017 	ldw	r16,0(r2)
 400153c:	dfc00115 	stw	ra,4(sp)
 4001540:	01932574 	movhi	r6,19605
 4001544:	81002917 	ldw	r4,164(r16)
 4001548:	81402a17 	ldw	r5,168(r16)
 400154c:	01d614b4 	movhi	r7,22610
 4001550:	319fcb44 	addi	r6,r6,32557
 4001554:	39fd0b44 	addi	r7,r7,-3027
 4001558:	400e1480 	call	400e148 <__muldi3>
 400155c:	11000044 	addi	r4,r2,1
 4001560:	2085803a 	cmpltu	r2,r4,r2
 4001564:	10c7883a 	add	r3,r2,r3
 4001568:	00a00034 	movhi	r2,32768
 400156c:	10bfffc4 	addi	r2,r2,-1
 4001570:	1884703a 	and	r2,r3,r2
 4001574:	81002915 	stw	r4,164(r16)
 4001578:	80c02a15 	stw	r3,168(r16)
 400157c:	dfc00117 	ldw	ra,4(sp)
 4001580:	dc000017 	ldw	r16,0(sp)
 4001584:	dec00204 	addi	sp,sp,8
 4001588:	f800283a 	ret

0400158c <_sprintf_r>:
 400158c:	deffe404 	addi	sp,sp,-112
 4001590:	2807883a 	mov	r3,r5
 4001594:	dfc01a15 	stw	ra,104(sp)
 4001598:	d9c01b15 	stw	r7,108(sp)
 400159c:	00a00034 	movhi	r2,32768
 40015a0:	10bfffc4 	addi	r2,r2,-1
 40015a4:	02008204 	movi	r8,520
 40015a8:	d8800215 	stw	r2,8(sp)
 40015ac:	d8800515 	stw	r2,20(sp)
 40015b0:	d9c01b04 	addi	r7,sp,108
 40015b4:	d80b883a 	mov	r5,sp
 40015b8:	00bfffc4 	movi	r2,-1
 40015bc:	d8c00015 	stw	r3,0(sp)
 40015c0:	d8c00415 	stw	r3,16(sp)
 40015c4:	da00030d 	sth	r8,12(sp)
 40015c8:	d880038d 	sth	r2,14(sp)
 40015cc:	40016e80 	call	40016e8 <___svfprintf_internal_r>
 40015d0:	d8c00017 	ldw	r3,0(sp)
 40015d4:	18000005 	stb	zero,0(r3)
 40015d8:	dfc01a17 	ldw	ra,104(sp)
 40015dc:	dec01c04 	addi	sp,sp,112
 40015e0:	f800283a 	ret

040015e4 <sprintf>:
 40015e4:	deffe304 	addi	sp,sp,-116
 40015e8:	2007883a 	mov	r3,r4
 40015ec:	dfc01a15 	stw	ra,104(sp)
 40015f0:	d9801b15 	stw	r6,108(sp)
 40015f4:	d9c01c15 	stw	r7,112(sp)
 40015f8:	010100b4 	movhi	r4,1026
 40015fc:	213a3604 	addi	r4,r4,-5928
 4001600:	21000017 	ldw	r4,0(r4)
 4001604:	00a00034 	movhi	r2,32768
 4001608:	10bfffc4 	addi	r2,r2,-1
 400160c:	280d883a 	mov	r6,r5
 4001610:	02008204 	movi	r8,520
 4001614:	d8800215 	stw	r2,8(sp)
 4001618:	d8800515 	stw	r2,20(sp)
 400161c:	d9c01b04 	addi	r7,sp,108
 4001620:	d80b883a 	mov	r5,sp
 4001624:	00bfffc4 	movi	r2,-1
 4001628:	d8c00015 	stw	r3,0(sp)
 400162c:	d8c00415 	stw	r3,16(sp)
 4001630:	da00030d 	sth	r8,12(sp)
 4001634:	d880038d 	sth	r2,14(sp)
 4001638:	40016e80 	call	40016e8 <___svfprintf_internal_r>
 400163c:	d8c00017 	ldw	r3,0(sp)
 4001640:	18000005 	stb	zero,0(r3)
 4001644:	dfc01a17 	ldw	ra,104(sp)
 4001648:	dec01d04 	addi	sp,sp,116
 400164c:	f800283a 	ret

04001650 <strlen>:
 4001650:	208000cc 	andi	r2,r4,3
 4001654:	10002026 	beq	r2,zero,40016d8 <strlen+0x88>
 4001658:	20800007 	ldb	r2,0(r4)
 400165c:	10002026 	beq	r2,zero,40016e0 <strlen+0x90>
 4001660:	2005883a 	mov	r2,r4
 4001664:	00000206 	br	4001670 <strlen+0x20>
 4001668:	10c00007 	ldb	r3,0(r2)
 400166c:	18001826 	beq	r3,zero,40016d0 <strlen+0x80>
 4001670:	10800044 	addi	r2,r2,1
 4001674:	10c000cc 	andi	r3,r2,3
 4001678:	183ffb1e 	bne	r3,zero,4001668 <__alt_mem_onchip_memory2_0+0xfbfff668>
 400167c:	10c00017 	ldw	r3,0(r2)
 4001680:	01ffbff4 	movhi	r7,65279
 4001684:	39ffbfc4 	addi	r7,r7,-257
 4001688:	00ca303a 	nor	r5,zero,r3
 400168c:	01a02074 	movhi	r6,32897
 4001690:	19c7883a 	add	r3,r3,r7
 4001694:	31a02004 	addi	r6,r6,-32640
 4001698:	1946703a 	and	r3,r3,r5
 400169c:	1986703a 	and	r3,r3,r6
 40016a0:	1800091e 	bne	r3,zero,40016c8 <strlen+0x78>
 40016a4:	10800104 	addi	r2,r2,4
 40016a8:	10c00017 	ldw	r3,0(r2)
 40016ac:	19cb883a 	add	r5,r3,r7
 40016b0:	00c6303a 	nor	r3,zero,r3
 40016b4:	28c6703a 	and	r3,r5,r3
 40016b8:	1986703a 	and	r3,r3,r6
 40016bc:	183ff926 	beq	r3,zero,40016a4 <__alt_mem_onchip_memory2_0+0xfbfff6a4>
 40016c0:	00000106 	br	40016c8 <strlen+0x78>
 40016c4:	10800044 	addi	r2,r2,1
 40016c8:	10c00007 	ldb	r3,0(r2)
 40016cc:	183ffd1e 	bne	r3,zero,40016c4 <__alt_mem_onchip_memory2_0+0xfbfff6c4>
 40016d0:	1105c83a 	sub	r2,r2,r4
 40016d4:	f800283a 	ret
 40016d8:	2005883a 	mov	r2,r4
 40016dc:	003fe706 	br	400167c <__alt_mem_onchip_memory2_0+0xfbfff67c>
 40016e0:	0005883a 	mov	r2,zero
 40016e4:	f800283a 	ret

040016e8 <___svfprintf_internal_r>:
 40016e8:	deffb704 	addi	sp,sp,-292
 40016ec:	dfc04815 	stw	ra,288(sp)
 40016f0:	ddc04615 	stw	r23,280(sp)
 40016f4:	d9402c15 	stw	r5,176(sp)
 40016f8:	d9003915 	stw	r4,228(sp)
 40016fc:	302f883a 	mov	r23,r6
 4001700:	d9c02d15 	stw	r7,180(sp)
 4001704:	df004715 	stw	fp,284(sp)
 4001708:	dd804515 	stw	r22,276(sp)
 400170c:	dd404415 	stw	r21,272(sp)
 4001710:	dd004315 	stw	r20,268(sp)
 4001714:	dcc04215 	stw	r19,264(sp)
 4001718:	dc804115 	stw	r18,260(sp)
 400171c:	dc404015 	stw	r17,256(sp)
 4001720:	dc003f15 	stw	r16,252(sp)
 4001724:	40086d80 	call	40086d8 <_localeconv_r>
 4001728:	10800017 	ldw	r2,0(r2)
 400172c:	1009883a 	mov	r4,r2
 4001730:	d8803415 	stw	r2,208(sp)
 4001734:	40016500 	call	4001650 <strlen>
 4001738:	d8c02c17 	ldw	r3,176(sp)
 400173c:	d8803815 	stw	r2,224(sp)
 4001740:	1880030b 	ldhu	r2,12(r3)
 4001744:	1080200c 	andi	r2,r2,128
 4001748:	10000226 	beq	r2,zero,4001754 <___svfprintf_internal_r+0x6c>
 400174c:	18800417 	ldw	r2,16(r3)
 4001750:	10067f26 	beq	r2,zero,4003150 <___svfprintf_internal_r+0x1a68>
 4001754:	dcc03917 	ldw	r19,228(sp)
 4001758:	d8c00404 	addi	r3,sp,16
 400175c:	054100b4 	movhi	r21,1026
 4001760:	d9001e04 	addi	r4,sp,120
 4001764:	ad72b484 	addi	r21,r21,-13614
 4001768:	d8c01e15 	stw	r3,120(sp)
 400176c:	d8002015 	stw	zero,128(sp)
 4001770:	d8001f15 	stw	zero,124(sp)
 4001774:	d8003315 	stw	zero,204(sp)
 4001778:	d8003615 	stw	zero,216(sp)
 400177c:	d8003715 	stw	zero,220(sp)
 4001780:	1811883a 	mov	r8,r3
 4001784:	d8003a15 	stw	zero,232(sp)
 4001788:	d8003b15 	stw	zero,236(sp)
 400178c:	d8002f15 	stw	zero,188(sp)
 4001790:	d9002815 	stw	r4,160(sp)
 4001794:	b8800007 	ldb	r2,0(r23)
 4001798:	10026726 	beq	r2,zero,4002138 <___svfprintf_internal_r+0xa50>
 400179c:	00c00944 	movi	r3,37
 40017a0:	b821883a 	mov	r16,r23
 40017a4:	10c0021e 	bne	r2,r3,40017b0 <___svfprintf_internal_r+0xc8>
 40017a8:	00001406 	br	40017fc <___svfprintf_internal_r+0x114>
 40017ac:	10c00326 	beq	r2,r3,40017bc <___svfprintf_internal_r+0xd4>
 40017b0:	84000044 	addi	r16,r16,1
 40017b4:	80800007 	ldb	r2,0(r16)
 40017b8:	103ffc1e 	bne	r2,zero,40017ac <__alt_mem_onchip_memory2_0+0xfbfff7ac>
 40017bc:	85e3c83a 	sub	r17,r16,r23
 40017c0:	88000e26 	beq	r17,zero,40017fc <___svfprintf_internal_r+0x114>
 40017c4:	d8c02017 	ldw	r3,128(sp)
 40017c8:	d8801f17 	ldw	r2,124(sp)
 40017cc:	45c00015 	stw	r23,0(r8)
 40017d0:	1c47883a 	add	r3,r3,r17
 40017d4:	10800044 	addi	r2,r2,1
 40017d8:	d8c02015 	stw	r3,128(sp)
 40017dc:	44400115 	stw	r17,4(r8)
 40017e0:	d8801f15 	stw	r2,124(sp)
 40017e4:	00c001c4 	movi	r3,7
 40017e8:	18809716 	blt	r3,r2,4001a48 <___svfprintf_internal_r+0x360>
 40017ec:	42000204 	addi	r8,r8,8
 40017f0:	d9402f17 	ldw	r5,188(sp)
 40017f4:	2c4b883a 	add	r5,r5,r17
 40017f8:	d9402f15 	stw	r5,188(sp)
 40017fc:	80800007 	ldb	r2,0(r16)
 4001800:	10009826 	beq	r2,zero,4001a64 <___svfprintf_internal_r+0x37c>
 4001804:	84400047 	ldb	r17,1(r16)
 4001808:	00bfffc4 	movi	r2,-1
 400180c:	85c00044 	addi	r23,r16,1
 4001810:	d8002785 	stb	zero,158(sp)
 4001814:	0007883a 	mov	r3,zero
 4001818:	000f883a 	mov	r7,zero
 400181c:	d8802915 	stw	r2,164(sp)
 4001820:	d8003115 	stw	zero,196(sp)
 4001824:	0025883a 	mov	r18,zero
 4001828:	01401604 	movi	r5,88
 400182c:	01800244 	movi	r6,9
 4001830:	02800a84 	movi	r10,42
 4001834:	02401b04 	movi	r9,108
 4001838:	bdc00044 	addi	r23,r23,1
 400183c:	88bff804 	addi	r2,r17,-32
 4001840:	2882f036 	bltu	r5,r2,4002404 <___svfprintf_internal_r+0xd1c>
 4001844:	100490ba 	slli	r2,r2,2
 4001848:	01010034 	movhi	r4,1024
 400184c:	21061704 	addi	r4,r4,6236
 4001850:	1105883a 	add	r2,r2,r4
 4001854:	10800017 	ldw	r2,0(r2)
 4001858:	1000683a 	jmp	r2
 400185c:	0400236c 	andhi	r16,zero,141
 4001860:	04002404 	movi	r16,144
 4001864:	04002404 	movi	r16,144
 4001868:	04002360 	cmpeqi	r16,zero,141
 400186c:	04002404 	movi	r16,144
 4001870:	04002404 	movi	r16,144
 4001874:	04002404 	movi	r16,144
 4001878:	04002404 	movi	r16,144
 400187c:	04002404 	movi	r16,144
 4001880:	04002404 	movi	r16,144
 4001884:	04001ac0 	call	4001ac <OSCtxSw_SWITCH_PC+0x40016c>
 4001888:	0400229c 	xori	r16,zero,138
 400188c:	04002404 	movi	r16,144
 4001890:	040019d0 	cmplti	r16,zero,103
 4001894:	04001ae8 	cmpgeui	r16,zero,107
 4001898:	04002404 	movi	r16,144
 400189c:	04001b5c 	xori	r16,zero,109
 40018a0:	04001b28 	cmpgeui	r16,zero,108
 40018a4:	04001b28 	cmpgeui	r16,zero,108
 40018a8:	04001b28 	cmpgeui	r16,zero,108
 40018ac:	04001b28 	cmpgeui	r16,zero,108
 40018b0:	04001b28 	cmpgeui	r16,zero,108
 40018b4:	04001b28 	cmpgeui	r16,zero,108
 40018b8:	04001b28 	cmpgeui	r16,zero,108
 40018bc:	04001b28 	cmpgeui	r16,zero,108
 40018c0:	04001b28 	cmpgeui	r16,zero,108
 40018c4:	04002404 	movi	r16,144
 40018c8:	04002404 	movi	r16,144
 40018cc:	04002404 	movi	r16,144
 40018d0:	04002404 	movi	r16,144
 40018d4:	04002404 	movi	r16,144
 40018d8:	04002404 	movi	r16,144
 40018dc:	04002404 	movi	r16,144
 40018e0:	04002404 	movi	r16,144
 40018e4:	04002404 	movi	r16,144
 40018e8:	04002404 	movi	r16,144
 40018ec:	04001c14 	movui	r16,112
 40018f0:	04001b68 	cmpgeui	r16,zero,109
 40018f4:	04002404 	movi	r16,144
 40018f8:	04001b68 	cmpgeui	r16,zero,109
 40018fc:	04002404 	movi	r16,144
 4001900:	04002404 	movi	r16,144
 4001904:	04002404 	movi	r16,144
 4001908:	04002404 	movi	r16,144
 400190c:	04001c08 	cmpgei	r16,zero,112
 4001910:	04002404 	movi	r16,144
 4001914:	04002404 	movi	r16,144
 4001918:	04001cd0 	cmplti	r16,zero,115
 400191c:	04002404 	movi	r16,144
 4001920:	04002404 	movi	r16,144
 4001924:	04002404 	movi	r16,144
 4001928:	04002404 	movi	r16,144
 400192c:	04002404 	movi	r16,144
 4001930:	04002140 	call	400214 <OSCtxSw_SWITCH_PC+0x4001d4>
 4001934:	04002404 	movi	r16,144
 4001938:	04002404 	movi	r16,144
 400193c:	040021a0 	cmpeqi	r16,zero,134
 4001940:	04002404 	movi	r16,144
 4001944:	04002404 	movi	r16,144
 4001948:	04002404 	movi	r16,144
 400194c:	04002404 	movi	r16,144
 4001950:	04002404 	movi	r16,144
 4001954:	04002404 	movi	r16,144
 4001958:	04002404 	movi	r16,144
 400195c:	04002404 	movi	r16,144
 4001960:	04002404 	movi	r16,144
 4001964:	04002404 	movi	r16,144
 4001968:	04002250 	cmplti	r16,zero,137
 400196c:	0400238c 	andi	r16,zero,142
 4001970:	04001b68 	cmpgeui	r16,zero,109
 4001974:	04001b68 	cmpgeui	r16,zero,109
 4001978:	04001b68 	cmpgeui	r16,zero,109
 400197c:	040023e0 	cmpeqi	r16,zero,143
 4001980:	0400238c 	andi	r16,zero,142
 4001984:	04002404 	movi	r16,144
 4001988:	04002404 	movi	r16,144
 400198c:	0400239c 	xori	r16,zero,142
 4001990:	04002404 	movi	r16,144
 4001994:	040023ac 	andhi	r16,zero,142
 4001998:	0400228c 	andi	r16,zero,138
 400199c:	040019dc 	xori	r16,zero,103
 40019a0:	040022ac 	andhi	r16,zero,138
 40019a4:	04002404 	movi	r16,144
 40019a8:	040022b8 	rdprs	r16,zero,138
 40019ac:	04002404 	movi	r16,144
 40019b0:	04002314 	movui	r16,140
 40019b4:	04002404 	movi	r16,144
 40019b8:	04002404 	movi	r16,144
 40019bc:	04002324 	muli	r16,zero,140
 40019c0:	d9003117 	ldw	r4,196(sp)
 40019c4:	d8802d15 	stw	r2,180(sp)
 40019c8:	0109c83a 	sub	r4,zero,r4
 40019cc:	d9003115 	stw	r4,196(sp)
 40019d0:	94800114 	ori	r18,r18,4
 40019d4:	bc400007 	ldb	r17,0(r23)
 40019d8:	003f9706 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 40019dc:	00800c04 	movi	r2,48
 40019e0:	d9002d17 	ldw	r4,180(sp)
 40019e4:	d9402917 	ldw	r5,164(sp)
 40019e8:	d8802705 	stb	r2,156(sp)
 40019ec:	00801e04 	movi	r2,120
 40019f0:	d8802745 	stb	r2,157(sp)
 40019f4:	d8002785 	stb	zero,158(sp)
 40019f8:	20c00104 	addi	r3,r4,4
 40019fc:	25000017 	ldw	r20,0(r4)
 4001a00:	002d883a 	mov	r22,zero
 4001a04:	90800094 	ori	r2,r18,2
 4001a08:	28028616 	blt	r5,zero,4002424 <___svfprintf_internal_r+0xd3c>
 4001a0c:	00bfdfc4 	movi	r2,-129
 4001a10:	90a4703a 	and	r18,r18,r2
 4001a14:	d8c02d15 	stw	r3,180(sp)
 4001a18:	94800094 	ori	r18,r18,2
 4001a1c:	a002731e 	bne	r20,zero,40023ec <___svfprintf_internal_r+0xd04>
 4001a20:	008100b4 	movhi	r2,1026
 4001a24:	10b2ad04 	addi	r2,r2,-13644
 4001a28:	d8803a15 	stw	r2,232(sp)
 4001a2c:	04401e04 	movi	r17,120
 4001a30:	d8c02917 	ldw	r3,164(sp)
 4001a34:	0039883a 	mov	fp,zero
 4001a38:	1801d526 	beq	r3,zero,4002190 <___svfprintf_internal_r+0xaa8>
 4001a3c:	0029883a 	mov	r20,zero
 4001a40:	002d883a 	mov	r22,zero
 4001a44:	0001f106 	br	400220c <___svfprintf_internal_r+0xb24>
 4001a48:	d9402c17 	ldw	r5,176(sp)
 4001a4c:	d9801e04 	addi	r6,sp,120
 4001a50:	9809883a 	mov	r4,r19
 4001a54:	400adc00 	call	400adc0 <__ssprint_r>
 4001a58:	1000081e 	bne	r2,zero,4001a7c <___svfprintf_internal_r+0x394>
 4001a5c:	da000404 	addi	r8,sp,16
 4001a60:	003f6306 	br	40017f0 <__alt_mem_onchip_memory2_0+0xfbfff7f0>
 4001a64:	d8802017 	ldw	r2,128(sp)
 4001a68:	10000426 	beq	r2,zero,4001a7c <___svfprintf_internal_r+0x394>
 4001a6c:	d9402c17 	ldw	r5,176(sp)
 4001a70:	d9003917 	ldw	r4,228(sp)
 4001a74:	d9801e04 	addi	r6,sp,120
 4001a78:	400adc00 	call	400adc0 <__ssprint_r>
 4001a7c:	d8802c17 	ldw	r2,176(sp)
 4001a80:	10c0030b 	ldhu	r3,12(r2)
 4001a84:	d8802f17 	ldw	r2,188(sp)
 4001a88:	18c0100c 	andi	r3,r3,64
 4001a8c:	1805f51e 	bne	r3,zero,4003264 <___svfprintf_internal_r+0x1b7c>
 4001a90:	dfc04817 	ldw	ra,288(sp)
 4001a94:	df004717 	ldw	fp,284(sp)
 4001a98:	ddc04617 	ldw	r23,280(sp)
 4001a9c:	dd804517 	ldw	r22,276(sp)
 4001aa0:	dd404417 	ldw	r21,272(sp)
 4001aa4:	dd004317 	ldw	r20,268(sp)
 4001aa8:	dcc04217 	ldw	r19,264(sp)
 4001aac:	dc804117 	ldw	r18,260(sp)
 4001ab0:	dc404017 	ldw	r17,256(sp)
 4001ab4:	dc003f17 	ldw	r16,252(sp)
 4001ab8:	dec04904 	addi	sp,sp,292
 4001abc:	f800283a 	ret
 4001ac0:	d8802d17 	ldw	r2,180(sp)
 4001ac4:	d9002d17 	ldw	r4,180(sp)
 4001ac8:	10800017 	ldw	r2,0(r2)
 4001acc:	d8803115 	stw	r2,196(sp)
 4001ad0:	20800104 	addi	r2,r4,4
 4001ad4:	d9003117 	ldw	r4,196(sp)
 4001ad8:	203fb916 	blt	r4,zero,40019c0 <__alt_mem_onchip_memory2_0+0xfbfff9c0>
 4001adc:	d8802d15 	stw	r2,180(sp)
 4001ae0:	bc400007 	ldb	r17,0(r23)
 4001ae4:	003f5406 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4001ae8:	bc400007 	ldb	r17,0(r23)
 4001aec:	bac00044 	addi	r11,r23,1
 4001af0:	8a873926 	beq	r17,r10,40037d8 <___svfprintf_internal_r+0x20f0>
 4001af4:	88bff404 	addi	r2,r17,-48
 4001af8:	0009883a 	mov	r4,zero
 4001afc:	30868836 	bltu	r6,r2,4003520 <___svfprintf_internal_r+0x1e38>
 4001b00:	5c400007 	ldb	r17,0(r11)
 4001b04:	210002a4 	muli	r4,r4,10
 4001b08:	5dc00044 	addi	r23,r11,1
 4001b0c:	b817883a 	mov	r11,r23
 4001b10:	2089883a 	add	r4,r4,r2
 4001b14:	88bff404 	addi	r2,r17,-48
 4001b18:	30bff92e 	bgeu	r6,r2,4001b00 <__alt_mem_onchip_memory2_0+0xfbfffb00>
 4001b1c:	2005d716 	blt	r4,zero,400327c <___svfprintf_internal_r+0x1b94>
 4001b20:	d9002915 	stw	r4,164(sp)
 4001b24:	003f4506 	br	400183c <__alt_mem_onchip_memory2_0+0xfbfff83c>
 4001b28:	b809883a 	mov	r4,r23
 4001b2c:	d8003115 	stw	zero,196(sp)
 4001b30:	88bff404 	addi	r2,r17,-48
 4001b34:	0017883a 	mov	r11,zero
 4001b38:	24400007 	ldb	r17,0(r4)
 4001b3c:	5ac002a4 	muli	r11,r11,10
 4001b40:	bdc00044 	addi	r23,r23,1
 4001b44:	b809883a 	mov	r4,r23
 4001b48:	12d7883a 	add	r11,r2,r11
 4001b4c:	88bff404 	addi	r2,r17,-48
 4001b50:	30bff92e 	bgeu	r6,r2,4001b38 <__alt_mem_onchip_memory2_0+0xfbfffb38>
 4001b54:	dac03115 	stw	r11,196(sp)
 4001b58:	003f3806 	br	400183c <__alt_mem_onchip_memory2_0+0xfbfff83c>
 4001b5c:	94802014 	ori	r18,r18,128
 4001b60:	bc400007 	ldb	r17,0(r23)
 4001b64:	003f3406 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4001b68:	18c03fcc 	andi	r3,r3,255
 4001b6c:	1807471e 	bne	r3,zero,400388c <___svfprintf_internal_r+0x21a4>
 4001b70:	9080020c 	andi	r2,r18,8
 4001b74:	10047d26 	beq	r2,zero,4002d6c <___svfprintf_internal_r+0x1684>
 4001b78:	d8c02d17 	ldw	r3,180(sp)
 4001b7c:	d9002d17 	ldw	r4,180(sp)
 4001b80:	d9402d17 	ldw	r5,180(sp)
 4001b84:	18c00017 	ldw	r3,0(r3)
 4001b88:	21000117 	ldw	r4,4(r4)
 4001b8c:	29400204 	addi	r5,r5,8
 4001b90:	d8c03615 	stw	r3,216(sp)
 4001b94:	d9003715 	stw	r4,220(sp)
 4001b98:	d9402d15 	stw	r5,180(sp)
 4001b9c:	d9003617 	ldw	r4,216(sp)
 4001ba0:	d9403717 	ldw	r5,220(sp)
 4001ba4:	da003e15 	stw	r8,248(sp)
 4001ba8:	04000044 	movi	r16,1
 4001bac:	400aae00 	call	400aae0 <__fpclassifyd>
 4001bb0:	da003e17 	ldw	r8,248(sp)
 4001bb4:	14044b1e 	bne	r2,r16,4002ce4 <___svfprintf_internal_r+0x15fc>
 4001bb8:	d9003617 	ldw	r4,216(sp)
 4001bbc:	d9403717 	ldw	r5,220(sp)
 4001bc0:	000d883a 	mov	r6,zero
 4001bc4:	000f883a 	mov	r7,zero
 4001bc8:	400ff500 	call	400ff50 <__ledf2>
 4001bcc:	da003e17 	ldw	r8,248(sp)
 4001bd0:	1005f316 	blt	r2,zero,40033a0 <___svfprintf_internal_r+0x1cb8>
 4001bd4:	df002783 	ldbu	fp,158(sp)
 4001bd8:	008011c4 	movi	r2,71
 4001bdc:	1445590e 	bge	r2,r17,4003144 <___svfprintf_internal_r+0x1a5c>
 4001be0:	040100b4 	movhi	r16,1026
 4001be4:	8432a504 	addi	r16,r16,-13676
 4001be8:	00c000c4 	movi	r3,3
 4001bec:	00bfdfc4 	movi	r2,-129
 4001bf0:	d8c02a15 	stw	r3,168(sp)
 4001bf4:	90a4703a 	and	r18,r18,r2
 4001bf8:	d8c02e15 	stw	r3,184(sp)
 4001bfc:	d8002915 	stw	zero,164(sp)
 4001c00:	d8003215 	stw	zero,200(sp)
 4001c04:	00006606 	br	4001da0 <___svfprintf_internal_r+0x6b8>
 4001c08:	94800214 	ori	r18,r18,8
 4001c0c:	bc400007 	ldb	r17,0(r23)
 4001c10:	003f0906 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4001c14:	18c03fcc 	andi	r3,r3,255
 4001c18:	1807181e 	bne	r3,zero,400387c <___svfprintf_internal_r+0x2194>
 4001c1c:	94800414 	ori	r18,r18,16
 4001c20:	9080080c 	andi	r2,r18,32
 4001c24:	10039626 	beq	r2,zero,4002a80 <___svfprintf_internal_r+0x1398>
 4001c28:	d9402d17 	ldw	r5,180(sp)
 4001c2c:	28800117 	ldw	r2,4(r5)
 4001c30:	2d000017 	ldw	r20,0(r5)
 4001c34:	29400204 	addi	r5,r5,8
 4001c38:	d9402d15 	stw	r5,180(sp)
 4001c3c:	102d883a 	mov	r22,r2
 4001c40:	10039816 	blt	r2,zero,4002aa4 <___svfprintf_internal_r+0x13bc>
 4001c44:	d9402917 	ldw	r5,164(sp)
 4001c48:	df002783 	ldbu	fp,158(sp)
 4001c4c:	2803ab16 	blt	r5,zero,4002afc <___svfprintf_internal_r+0x1414>
 4001c50:	00ffdfc4 	movi	r3,-129
 4001c54:	a584b03a 	or	r2,r20,r22
 4001c58:	90e4703a 	and	r18,r18,r3
 4001c5c:	10014a26 	beq	r2,zero,4002188 <___svfprintf_internal_r+0xaa0>
 4001c60:	b0034b26 	beq	r22,zero,4002990 <___svfprintf_internal_r+0x12a8>
 4001c64:	dc402a15 	stw	r17,168(sp)
 4001c68:	dc001e04 	addi	r16,sp,120
 4001c6c:	b023883a 	mov	r17,r22
 4001c70:	402d883a 	mov	r22,r8
 4001c74:	a009883a 	mov	r4,r20
 4001c78:	880b883a 	mov	r5,r17
 4001c7c:	01800284 	movi	r6,10
 4001c80:	000f883a 	mov	r7,zero
 4001c84:	400e7200 	call	400e720 <__umoddi3>
 4001c88:	10800c04 	addi	r2,r2,48
 4001c8c:	843fffc4 	addi	r16,r16,-1
 4001c90:	a009883a 	mov	r4,r20
 4001c94:	880b883a 	mov	r5,r17
 4001c98:	80800005 	stb	r2,0(r16)
 4001c9c:	01800284 	movi	r6,10
 4001ca0:	000f883a 	mov	r7,zero
 4001ca4:	400e1a80 	call	400e1a8 <__udivdi3>
 4001ca8:	1029883a 	mov	r20,r2
 4001cac:	10c4b03a 	or	r2,r2,r3
 4001cb0:	1823883a 	mov	r17,r3
 4001cb4:	103fef1e 	bne	r2,zero,4001c74 <__alt_mem_onchip_memory2_0+0xfbfffc74>
 4001cb8:	d8c02817 	ldw	r3,160(sp)
 4001cbc:	dc402a17 	ldw	r17,168(sp)
 4001cc0:	b011883a 	mov	r8,r22
 4001cc4:	1c07c83a 	sub	r3,r3,r16
 4001cc8:	d8c02e15 	stw	r3,184(sp)
 4001ccc:	00002e06 	br	4001d88 <___svfprintf_internal_r+0x6a0>
 4001cd0:	18c03fcc 	andi	r3,r3,255
 4001cd4:	1806e71e 	bne	r3,zero,4003874 <___svfprintf_internal_r+0x218c>
 4001cd8:	94800414 	ori	r18,r18,16
 4001cdc:	9080080c 	andi	r2,r18,32
 4001ce0:	1002d426 	beq	r2,zero,4002834 <___svfprintf_internal_r+0x114c>
 4001ce4:	d9402d17 	ldw	r5,180(sp)
 4001ce8:	d8c02917 	ldw	r3,164(sp)
 4001cec:	d8002785 	stb	zero,158(sp)
 4001cf0:	28800204 	addi	r2,r5,8
 4001cf4:	2d000017 	ldw	r20,0(r5)
 4001cf8:	2d800117 	ldw	r22,4(r5)
 4001cfc:	18041516 	blt	r3,zero,4002d54 <___svfprintf_internal_r+0x166c>
 4001d00:	013fdfc4 	movi	r4,-129
 4001d04:	a586b03a 	or	r3,r20,r22
 4001d08:	d8802d15 	stw	r2,180(sp)
 4001d0c:	9124703a 	and	r18,r18,r4
 4001d10:	1802d51e 	bne	r3,zero,4002868 <___svfprintf_internal_r+0x1180>
 4001d14:	d9402917 	ldw	r5,164(sp)
 4001d18:	0039883a 	mov	fp,zero
 4001d1c:	2806be26 	beq	r5,zero,4003818 <___svfprintf_internal_r+0x2130>
 4001d20:	0029883a 	mov	r20,zero
 4001d24:	002d883a 	mov	r22,zero
 4001d28:	dc001e04 	addi	r16,sp,120
 4001d2c:	a006d0fa 	srli	r3,r20,3
 4001d30:	b008977a 	slli	r4,r22,29
 4001d34:	b02cd0fa 	srli	r22,r22,3
 4001d38:	a50001cc 	andi	r20,r20,7
 4001d3c:	a0800c04 	addi	r2,r20,48
 4001d40:	843fffc4 	addi	r16,r16,-1
 4001d44:	20e8b03a 	or	r20,r4,r3
 4001d48:	80800005 	stb	r2,0(r16)
 4001d4c:	a586b03a 	or	r3,r20,r22
 4001d50:	183ff61e 	bne	r3,zero,4001d2c <__alt_mem_onchip_memory2_0+0xfbfffd2c>
 4001d54:	90c0004c 	andi	r3,r18,1
 4001d58:	18013926 	beq	r3,zero,4002240 <___svfprintf_internal_r+0xb58>
 4001d5c:	10803fcc 	andi	r2,r2,255
 4001d60:	1080201c 	xori	r2,r2,128
 4001d64:	10bfe004 	addi	r2,r2,-128
 4001d68:	00c00c04 	movi	r3,48
 4001d6c:	10c13426 	beq	r2,r3,4002240 <___svfprintf_internal_r+0xb58>
 4001d70:	80ffffc5 	stb	r3,-1(r16)
 4001d74:	d8c02817 	ldw	r3,160(sp)
 4001d78:	80bfffc4 	addi	r2,r16,-1
 4001d7c:	1021883a 	mov	r16,r2
 4001d80:	1887c83a 	sub	r3,r3,r2
 4001d84:	d8c02e15 	stw	r3,184(sp)
 4001d88:	d8802e17 	ldw	r2,184(sp)
 4001d8c:	d9002917 	ldw	r4,164(sp)
 4001d90:	1100010e 	bge	r2,r4,4001d98 <___svfprintf_internal_r+0x6b0>
 4001d94:	2005883a 	mov	r2,r4
 4001d98:	d8802a15 	stw	r2,168(sp)
 4001d9c:	d8003215 	stw	zero,200(sp)
 4001da0:	e7003fcc 	andi	fp,fp,255
 4001da4:	e700201c 	xori	fp,fp,128
 4001da8:	e73fe004 	addi	fp,fp,-128
 4001dac:	e0000326 	beq	fp,zero,4001dbc <___svfprintf_internal_r+0x6d4>
 4001db0:	d8c02a17 	ldw	r3,168(sp)
 4001db4:	18c00044 	addi	r3,r3,1
 4001db8:	d8c02a15 	stw	r3,168(sp)
 4001dbc:	90c0008c 	andi	r3,r18,2
 4001dc0:	d8c02b15 	stw	r3,172(sp)
 4001dc4:	18000326 	beq	r3,zero,4001dd4 <___svfprintf_internal_r+0x6ec>
 4001dc8:	d8c02a17 	ldw	r3,168(sp)
 4001dcc:	18c00084 	addi	r3,r3,2
 4001dd0:	d8c02a15 	stw	r3,168(sp)
 4001dd4:	90c0210c 	andi	r3,r18,132
 4001dd8:	d8c03015 	stw	r3,192(sp)
 4001ddc:	1801a11e 	bne	r3,zero,4002464 <___svfprintf_internal_r+0xd7c>
 4001de0:	d9003117 	ldw	r4,196(sp)
 4001de4:	d8c02a17 	ldw	r3,168(sp)
 4001de8:	20e9c83a 	sub	r20,r4,r3
 4001dec:	05019d0e 	bge	zero,r20,4002464 <___svfprintf_internal_r+0xd7c>
 4001df0:	02400404 	movi	r9,16
 4001df4:	d8c02017 	ldw	r3,128(sp)
 4001df8:	d8801f17 	ldw	r2,124(sp)
 4001dfc:	4d051b0e 	bge	r9,r20,400326c <___svfprintf_internal_r+0x1b84>
 4001e00:	014100b4 	movhi	r5,1026
 4001e04:	2972b884 	addi	r5,r5,-13598
 4001e08:	dc403c15 	stw	r17,240(sp)
 4001e0c:	d9403515 	stw	r5,212(sp)
 4001e10:	a023883a 	mov	r17,r20
 4001e14:	482d883a 	mov	r22,r9
 4001e18:	9029883a 	mov	r20,r18
 4001e1c:	070001c4 	movi	fp,7
 4001e20:	8025883a 	mov	r18,r16
 4001e24:	dc002c17 	ldw	r16,176(sp)
 4001e28:	00000306 	br	4001e38 <___svfprintf_internal_r+0x750>
 4001e2c:	8c7ffc04 	addi	r17,r17,-16
 4001e30:	42000204 	addi	r8,r8,8
 4001e34:	b440130e 	bge	r22,r17,4001e84 <___svfprintf_internal_r+0x79c>
 4001e38:	010100b4 	movhi	r4,1026
 4001e3c:	18c00404 	addi	r3,r3,16
 4001e40:	10800044 	addi	r2,r2,1
 4001e44:	2132b884 	addi	r4,r4,-13598
 4001e48:	41000015 	stw	r4,0(r8)
 4001e4c:	45800115 	stw	r22,4(r8)
 4001e50:	d8c02015 	stw	r3,128(sp)
 4001e54:	d8801f15 	stw	r2,124(sp)
 4001e58:	e0bff40e 	bge	fp,r2,4001e2c <__alt_mem_onchip_memory2_0+0xfbfffe2c>
 4001e5c:	d9801e04 	addi	r6,sp,120
 4001e60:	800b883a 	mov	r5,r16
 4001e64:	9809883a 	mov	r4,r19
 4001e68:	400adc00 	call	400adc0 <__ssprint_r>
 4001e6c:	103f031e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4001e70:	8c7ffc04 	addi	r17,r17,-16
 4001e74:	d8c02017 	ldw	r3,128(sp)
 4001e78:	d8801f17 	ldw	r2,124(sp)
 4001e7c:	da000404 	addi	r8,sp,16
 4001e80:	b47fed16 	blt	r22,r17,4001e38 <__alt_mem_onchip_memory2_0+0xfbfffe38>
 4001e84:	9021883a 	mov	r16,r18
 4001e88:	a025883a 	mov	r18,r20
 4001e8c:	8829883a 	mov	r20,r17
 4001e90:	dc403c17 	ldw	r17,240(sp)
 4001e94:	d9403517 	ldw	r5,212(sp)
 4001e98:	a0c7883a 	add	r3,r20,r3
 4001e9c:	10800044 	addi	r2,r2,1
 4001ea0:	41400015 	stw	r5,0(r8)
 4001ea4:	45000115 	stw	r20,4(r8)
 4001ea8:	d8c02015 	stw	r3,128(sp)
 4001eac:	d8801f15 	stw	r2,124(sp)
 4001eb0:	010001c4 	movi	r4,7
 4001eb4:	20829f16 	blt	r4,r2,4002934 <___svfprintf_internal_r+0x124c>
 4001eb8:	df002787 	ldb	fp,158(sp)
 4001ebc:	42000204 	addi	r8,r8,8
 4001ec0:	e0000c26 	beq	fp,zero,4001ef4 <___svfprintf_internal_r+0x80c>
 4001ec4:	d8801f17 	ldw	r2,124(sp)
 4001ec8:	d9002784 	addi	r4,sp,158
 4001ecc:	18c00044 	addi	r3,r3,1
 4001ed0:	10800044 	addi	r2,r2,1
 4001ed4:	41000015 	stw	r4,0(r8)
 4001ed8:	01000044 	movi	r4,1
 4001edc:	41000115 	stw	r4,4(r8)
 4001ee0:	d8c02015 	stw	r3,128(sp)
 4001ee4:	d8801f15 	stw	r2,124(sp)
 4001ee8:	010001c4 	movi	r4,7
 4001eec:	20823816 	blt	r4,r2,40027d0 <___svfprintf_internal_r+0x10e8>
 4001ef0:	42000204 	addi	r8,r8,8
 4001ef4:	d8802b17 	ldw	r2,172(sp)
 4001ef8:	10000c26 	beq	r2,zero,4001f2c <___svfprintf_internal_r+0x844>
 4001efc:	d8801f17 	ldw	r2,124(sp)
 4001f00:	d9002704 	addi	r4,sp,156
 4001f04:	18c00084 	addi	r3,r3,2
 4001f08:	10800044 	addi	r2,r2,1
 4001f0c:	41000015 	stw	r4,0(r8)
 4001f10:	01000084 	movi	r4,2
 4001f14:	41000115 	stw	r4,4(r8)
 4001f18:	d8c02015 	stw	r3,128(sp)
 4001f1c:	d8801f15 	stw	r2,124(sp)
 4001f20:	010001c4 	movi	r4,7
 4001f24:	20823216 	blt	r4,r2,40027f0 <___svfprintf_internal_r+0x1108>
 4001f28:	42000204 	addi	r8,r8,8
 4001f2c:	d9003017 	ldw	r4,192(sp)
 4001f30:	00802004 	movi	r2,128
 4001f34:	20819726 	beq	r4,r2,4002594 <___svfprintf_internal_r+0xeac>
 4001f38:	d9402917 	ldw	r5,164(sp)
 4001f3c:	d8802e17 	ldw	r2,184(sp)
 4001f40:	28adc83a 	sub	r22,r5,r2
 4001f44:	05802f0e 	bge	zero,r22,4002004 <___svfprintf_internal_r+0x91c>
 4001f48:	07000404 	movi	fp,16
 4001f4c:	d8801f17 	ldw	r2,124(sp)
 4001f50:	e583c00e 	bge	fp,r22,4002e54 <___svfprintf_internal_r+0x176c>
 4001f54:	014100b4 	movhi	r5,1026
 4001f58:	2972b484 	addi	r5,r5,-13614
 4001f5c:	dc402915 	stw	r17,164(sp)
 4001f60:	d9402b15 	stw	r5,172(sp)
 4001f64:	b023883a 	mov	r17,r22
 4001f68:	050001c4 	movi	r20,7
 4001f6c:	902d883a 	mov	r22,r18
 4001f70:	8025883a 	mov	r18,r16
 4001f74:	dc002c17 	ldw	r16,176(sp)
 4001f78:	00000306 	br	4001f88 <___svfprintf_internal_r+0x8a0>
 4001f7c:	8c7ffc04 	addi	r17,r17,-16
 4001f80:	42000204 	addi	r8,r8,8
 4001f84:	e440110e 	bge	fp,r17,4001fcc <___svfprintf_internal_r+0x8e4>
 4001f88:	18c00404 	addi	r3,r3,16
 4001f8c:	10800044 	addi	r2,r2,1
 4001f90:	45400015 	stw	r21,0(r8)
 4001f94:	47000115 	stw	fp,4(r8)
 4001f98:	d8c02015 	stw	r3,128(sp)
 4001f9c:	d8801f15 	stw	r2,124(sp)
 4001fa0:	a0bff60e 	bge	r20,r2,4001f7c <__alt_mem_onchip_memory2_0+0xfbffff7c>
 4001fa4:	d9801e04 	addi	r6,sp,120
 4001fa8:	800b883a 	mov	r5,r16
 4001fac:	9809883a 	mov	r4,r19
 4001fb0:	400adc00 	call	400adc0 <__ssprint_r>
 4001fb4:	103eb11e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4001fb8:	8c7ffc04 	addi	r17,r17,-16
 4001fbc:	d8c02017 	ldw	r3,128(sp)
 4001fc0:	d8801f17 	ldw	r2,124(sp)
 4001fc4:	da000404 	addi	r8,sp,16
 4001fc8:	e47fef16 	blt	fp,r17,4001f88 <__alt_mem_onchip_memory2_0+0xfbffff88>
 4001fcc:	9021883a 	mov	r16,r18
 4001fd0:	b025883a 	mov	r18,r22
 4001fd4:	882d883a 	mov	r22,r17
 4001fd8:	dc402917 	ldw	r17,164(sp)
 4001fdc:	d9002b17 	ldw	r4,172(sp)
 4001fe0:	1d87883a 	add	r3,r3,r22
 4001fe4:	10800044 	addi	r2,r2,1
 4001fe8:	41000015 	stw	r4,0(r8)
 4001fec:	45800115 	stw	r22,4(r8)
 4001ff0:	d8c02015 	stw	r3,128(sp)
 4001ff4:	d8801f15 	stw	r2,124(sp)
 4001ff8:	010001c4 	movi	r4,7
 4001ffc:	2081ec16 	blt	r4,r2,40027b0 <___svfprintf_internal_r+0x10c8>
 4002000:	42000204 	addi	r8,r8,8
 4002004:	9080400c 	andi	r2,r18,256
 4002008:	1001181e 	bne	r2,zero,400246c <___svfprintf_internal_r+0xd84>
 400200c:	d9402e17 	ldw	r5,184(sp)
 4002010:	d8801f17 	ldw	r2,124(sp)
 4002014:	44000015 	stw	r16,0(r8)
 4002018:	1947883a 	add	r3,r3,r5
 400201c:	10800044 	addi	r2,r2,1
 4002020:	41400115 	stw	r5,4(r8)
 4002024:	d8c02015 	stw	r3,128(sp)
 4002028:	d8801f15 	stw	r2,124(sp)
 400202c:	010001c4 	movi	r4,7
 4002030:	2081d116 	blt	r4,r2,4002778 <___svfprintf_internal_r+0x1090>
 4002034:	42000204 	addi	r8,r8,8
 4002038:	9480010c 	andi	r18,r18,4
 400203c:	90003226 	beq	r18,zero,4002108 <___svfprintf_internal_r+0xa20>
 4002040:	d9403117 	ldw	r5,196(sp)
 4002044:	d8802a17 	ldw	r2,168(sp)
 4002048:	28a1c83a 	sub	r16,r5,r2
 400204c:	04002e0e 	bge	zero,r16,4002108 <___svfprintf_internal_r+0xa20>
 4002050:	04400404 	movi	r17,16
 4002054:	d8801f17 	ldw	r2,124(sp)
 4002058:	8c04b90e 	bge	r17,r16,4003340 <___svfprintf_internal_r+0x1c58>
 400205c:	014100b4 	movhi	r5,1026
 4002060:	2972b884 	addi	r5,r5,-13598
 4002064:	d9403515 	stw	r5,212(sp)
 4002068:	048001c4 	movi	r18,7
 400206c:	dd002c17 	ldw	r20,176(sp)
 4002070:	00000306 	br	4002080 <___svfprintf_internal_r+0x998>
 4002074:	843ffc04 	addi	r16,r16,-16
 4002078:	42000204 	addi	r8,r8,8
 400207c:	8c00130e 	bge	r17,r16,40020cc <___svfprintf_internal_r+0x9e4>
 4002080:	010100b4 	movhi	r4,1026
 4002084:	18c00404 	addi	r3,r3,16
 4002088:	10800044 	addi	r2,r2,1
 400208c:	2132b884 	addi	r4,r4,-13598
 4002090:	41000015 	stw	r4,0(r8)
 4002094:	44400115 	stw	r17,4(r8)
 4002098:	d8c02015 	stw	r3,128(sp)
 400209c:	d8801f15 	stw	r2,124(sp)
 40020a0:	90bff40e 	bge	r18,r2,4002074 <__alt_mem_onchip_memory2_0+0xfc000074>
 40020a4:	d9801e04 	addi	r6,sp,120
 40020a8:	a00b883a 	mov	r5,r20
 40020ac:	9809883a 	mov	r4,r19
 40020b0:	400adc00 	call	400adc0 <__ssprint_r>
 40020b4:	103e711e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 40020b8:	843ffc04 	addi	r16,r16,-16
 40020bc:	d8c02017 	ldw	r3,128(sp)
 40020c0:	d8801f17 	ldw	r2,124(sp)
 40020c4:	da000404 	addi	r8,sp,16
 40020c8:	8c3fed16 	blt	r17,r16,4002080 <__alt_mem_onchip_memory2_0+0xfc000080>
 40020cc:	d9403517 	ldw	r5,212(sp)
 40020d0:	1c07883a 	add	r3,r3,r16
 40020d4:	10800044 	addi	r2,r2,1
 40020d8:	41400015 	stw	r5,0(r8)
 40020dc:	44000115 	stw	r16,4(r8)
 40020e0:	d8c02015 	stw	r3,128(sp)
 40020e4:	d8801f15 	stw	r2,124(sp)
 40020e8:	010001c4 	movi	r4,7
 40020ec:	2080060e 	bge	r4,r2,4002108 <___svfprintf_internal_r+0xa20>
 40020f0:	d9402c17 	ldw	r5,176(sp)
 40020f4:	d9801e04 	addi	r6,sp,120
 40020f8:	9809883a 	mov	r4,r19
 40020fc:	400adc00 	call	400adc0 <__ssprint_r>
 4002100:	103e5e1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002104:	d8c02017 	ldw	r3,128(sp)
 4002108:	d8803117 	ldw	r2,196(sp)
 400210c:	d9002a17 	ldw	r4,168(sp)
 4002110:	1100010e 	bge	r2,r4,4002118 <___svfprintf_internal_r+0xa30>
 4002114:	2005883a 	mov	r2,r4
 4002118:	d9402f17 	ldw	r5,188(sp)
 400211c:	288b883a 	add	r5,r5,r2
 4002120:	d9402f15 	stw	r5,188(sp)
 4002124:	18019c1e 	bne	r3,zero,4002798 <___svfprintf_internal_r+0x10b0>
 4002128:	b8800007 	ldb	r2,0(r23)
 400212c:	d8001f15 	stw	zero,124(sp)
 4002130:	da000404 	addi	r8,sp,16
 4002134:	103d991e 	bne	r2,zero,400179c <__alt_mem_onchip_memory2_0+0xfbfff79c>
 4002138:	b821883a 	mov	r16,r23
 400213c:	003daf06 	br	40017fc <__alt_mem_onchip_memory2_0+0xfbfff7fc>
 4002140:	18c03fcc 	andi	r3,r3,255
 4002144:	1805c71e 	bne	r3,zero,4003864 <___svfprintf_internal_r+0x217c>
 4002148:	94800414 	ori	r18,r18,16
 400214c:	9080080c 	andi	r2,r18,32
 4002150:	10020126 	beq	r2,zero,4002958 <___svfprintf_internal_r+0x1270>
 4002154:	d8802d17 	ldw	r2,180(sp)
 4002158:	d9002917 	ldw	r4,164(sp)
 400215c:	d8002785 	stb	zero,158(sp)
 4002160:	10c00204 	addi	r3,r2,8
 4002164:	15000017 	ldw	r20,0(r2)
 4002168:	15800117 	ldw	r22,4(r2)
 400216c:	20038e16 	blt	r4,zero,4002fa8 <___svfprintf_internal_r+0x18c0>
 4002170:	013fdfc4 	movi	r4,-129
 4002174:	a584b03a 	or	r2,r20,r22
 4002178:	d8c02d15 	stw	r3,180(sp)
 400217c:	9124703a 	and	r18,r18,r4
 4002180:	0039883a 	mov	fp,zero
 4002184:	103eb61e 	bne	r2,zero,4001c60 <__alt_mem_onchip_memory2_0+0xfbfffc60>
 4002188:	d8802917 	ldw	r2,164(sp)
 400218c:	1002c81e 	bne	r2,zero,4002cb0 <___svfprintf_internal_r+0x15c8>
 4002190:	d8002915 	stw	zero,164(sp)
 4002194:	d8002e15 	stw	zero,184(sp)
 4002198:	dc001e04 	addi	r16,sp,120
 400219c:	003efa06 	br	4001d88 <__alt_mem_onchip_memory2_0+0xfbfffd88>
 40021a0:	18c03fcc 	andi	r3,r3,255
 40021a4:	1805ad1e 	bne	r3,zero,400385c <___svfprintf_internal_r+0x2174>
 40021a8:	014100b4 	movhi	r5,1026
 40021ac:	2972a804 	addi	r5,r5,-13664
 40021b0:	d9403a15 	stw	r5,232(sp)
 40021b4:	9080080c 	andi	r2,r18,32
 40021b8:	10006126 	beq	r2,zero,4002340 <___svfprintf_internal_r+0xc58>
 40021bc:	d8802d17 	ldw	r2,180(sp)
 40021c0:	15000017 	ldw	r20,0(r2)
 40021c4:	15800117 	ldw	r22,4(r2)
 40021c8:	10800204 	addi	r2,r2,8
 40021cc:	d8802d15 	stw	r2,180(sp)
 40021d0:	9080004c 	andi	r2,r18,1
 40021d4:	10018e26 	beq	r2,zero,4002810 <___svfprintf_internal_r+0x1128>
 40021d8:	a584b03a 	or	r2,r20,r22
 40021dc:	10030926 	beq	r2,zero,4002e04 <___svfprintf_internal_r+0x171c>
 40021e0:	d8c02917 	ldw	r3,164(sp)
 40021e4:	00800c04 	movi	r2,48
 40021e8:	d8802705 	stb	r2,156(sp)
 40021ec:	dc402745 	stb	r17,157(sp)
 40021f0:	d8002785 	stb	zero,158(sp)
 40021f4:	90800094 	ori	r2,r18,2
 40021f8:	18048716 	blt	r3,zero,4003418 <___svfprintf_internal_r+0x1d30>
 40021fc:	00bfdfc4 	movi	r2,-129
 4002200:	90a4703a 	and	r18,r18,r2
 4002204:	94800094 	ori	r18,r18,2
 4002208:	0039883a 	mov	fp,zero
 400220c:	d9003a17 	ldw	r4,232(sp)
 4002210:	dc001e04 	addi	r16,sp,120
 4002214:	a08003cc 	andi	r2,r20,15
 4002218:	b006973a 	slli	r3,r22,28
 400221c:	2085883a 	add	r2,r4,r2
 4002220:	a028d13a 	srli	r20,r20,4
 4002224:	10800003 	ldbu	r2,0(r2)
 4002228:	b02cd13a 	srli	r22,r22,4
 400222c:	843fffc4 	addi	r16,r16,-1
 4002230:	1d28b03a 	or	r20,r3,r20
 4002234:	80800005 	stb	r2,0(r16)
 4002238:	a584b03a 	or	r2,r20,r22
 400223c:	103ff51e 	bne	r2,zero,4002214 <__alt_mem_onchip_memory2_0+0xfc000214>
 4002240:	d8c02817 	ldw	r3,160(sp)
 4002244:	1c07c83a 	sub	r3,r3,r16
 4002248:	d8c02e15 	stw	r3,184(sp)
 400224c:	003ece06 	br	4001d88 <__alt_mem_onchip_memory2_0+0xfbfffd88>
 4002250:	d8c02d17 	ldw	r3,180(sp)
 4002254:	d9002d17 	ldw	r4,180(sp)
 4002258:	d8002785 	stb	zero,158(sp)
 400225c:	18800017 	ldw	r2,0(r3)
 4002260:	21000104 	addi	r4,r4,4
 4002264:	00c00044 	movi	r3,1
 4002268:	d8c02a15 	stw	r3,168(sp)
 400226c:	d8801405 	stb	r2,80(sp)
 4002270:	d9002d15 	stw	r4,180(sp)
 4002274:	d8c02e15 	stw	r3,184(sp)
 4002278:	d8002915 	stw	zero,164(sp)
 400227c:	d8003215 	stw	zero,200(sp)
 4002280:	dc001404 	addi	r16,sp,80
 4002284:	0039883a 	mov	fp,zero
 4002288:	003ecc06 	br	4001dbc <__alt_mem_onchip_memory2_0+0xfbfffdbc>
 400228c:	18c03fcc 	andi	r3,r3,255
 4002290:	183e9226 	beq	r3,zero,4001cdc <__alt_mem_onchip_memory2_0+0xfbfffcdc>
 4002294:	d9c02785 	stb	r7,158(sp)
 4002298:	003e9006 	br	4001cdc <__alt_mem_onchip_memory2_0+0xfbfffcdc>
 400229c:	00c00044 	movi	r3,1
 40022a0:	01c00ac4 	movi	r7,43
 40022a4:	bc400007 	ldb	r17,0(r23)
 40022a8:	003d6306 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 40022ac:	94800814 	ori	r18,r18,32
 40022b0:	bc400007 	ldb	r17,0(r23)
 40022b4:	003d6006 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 40022b8:	d8c02d17 	ldw	r3,180(sp)
 40022bc:	d8002785 	stb	zero,158(sp)
 40022c0:	1c000017 	ldw	r16,0(r3)
 40022c4:	1d000104 	addi	r20,r3,4
 40022c8:	80040f26 	beq	r16,zero,4003308 <___svfprintf_internal_r+0x1c20>
 40022cc:	d9002917 	ldw	r4,164(sp)
 40022d0:	2003dc16 	blt	r4,zero,4003244 <___svfprintf_internal_r+0x1b5c>
 40022d4:	200d883a 	mov	r6,r4
 40022d8:	000b883a 	mov	r5,zero
 40022dc:	8009883a 	mov	r4,r16
 40022e0:	da003e15 	stw	r8,248(sp)
 40022e4:	40090d00 	call	40090d0 <memchr>
 40022e8:	da003e17 	ldw	r8,248(sp)
 40022ec:	10045826 	beq	r2,zero,4003450 <___svfprintf_internal_r+0x1d68>
 40022f0:	1405c83a 	sub	r2,r2,r16
 40022f4:	d8802e15 	stw	r2,184(sp)
 40022f8:	1003d816 	blt	r2,zero,400325c <___svfprintf_internal_r+0x1b74>
 40022fc:	df002783 	ldbu	fp,158(sp)
 4002300:	d8802a15 	stw	r2,168(sp)
 4002304:	dd002d15 	stw	r20,180(sp)
 4002308:	d8002915 	stw	zero,164(sp)
 400230c:	d8003215 	stw	zero,200(sp)
 4002310:	003ea306 	br	4001da0 <__alt_mem_onchip_memory2_0+0xfbfffda0>
 4002314:	18c03fcc 	andi	r3,r3,255
 4002318:	183f8c26 	beq	r3,zero,400214c <__alt_mem_onchip_memory2_0+0xfc00014c>
 400231c:	d9c02785 	stb	r7,158(sp)
 4002320:	003f8a06 	br	400214c <__alt_mem_onchip_memory2_0+0xfc00014c>
 4002324:	18c03fcc 	andi	r3,r3,255
 4002328:	1805631e 	bne	r3,zero,40038b8 <___svfprintf_internal_r+0x21d0>
 400232c:	014100b4 	movhi	r5,1026
 4002330:	2972ad04 	addi	r5,r5,-13644
 4002334:	d9403a15 	stw	r5,232(sp)
 4002338:	9080080c 	andi	r2,r18,32
 400233c:	103f9f1e 	bne	r2,zero,40021bc <__alt_mem_onchip_memory2_0+0xfc0001bc>
 4002340:	9080040c 	andi	r2,r18,16
 4002344:	10029c26 	beq	r2,zero,4002db8 <___svfprintf_internal_r+0x16d0>
 4002348:	d8c02d17 	ldw	r3,180(sp)
 400234c:	002d883a 	mov	r22,zero
 4002350:	1d000017 	ldw	r20,0(r3)
 4002354:	18c00104 	addi	r3,r3,4
 4002358:	d8c02d15 	stw	r3,180(sp)
 400235c:	003f9c06 	br	40021d0 <__alt_mem_onchip_memory2_0+0xfc0001d0>
 4002360:	94800054 	ori	r18,r18,1
 4002364:	bc400007 	ldb	r17,0(r23)
 4002368:	003d3306 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 400236c:	38803fcc 	andi	r2,r7,255
 4002370:	1080201c 	xori	r2,r2,128
 4002374:	10bfe004 	addi	r2,r2,-128
 4002378:	1002971e 	bne	r2,zero,4002dd8 <___svfprintf_internal_r+0x16f0>
 400237c:	00c00044 	movi	r3,1
 4002380:	01c00804 	movi	r7,32
 4002384:	bc400007 	ldb	r17,0(r23)
 4002388:	003d2b06 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 400238c:	18c03fcc 	andi	r3,r3,255
 4002390:	183e2326 	beq	r3,zero,4001c20 <__alt_mem_onchip_memory2_0+0xfbfffc20>
 4002394:	d9c02785 	stb	r7,158(sp)
 4002398:	003e2106 	br	4001c20 <__alt_mem_onchip_memory2_0+0xfbfffc20>
 400239c:	bc400007 	ldb	r17,0(r23)
 40023a0:	8a430426 	beq	r17,r9,4002fb4 <___svfprintf_internal_r+0x18cc>
 40023a4:	94800414 	ori	r18,r18,16
 40023a8:	003d2306 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 40023ac:	18c03fcc 	andi	r3,r3,255
 40023b0:	18053f1e 	bne	r3,zero,40038b0 <___svfprintf_internal_r+0x21c8>
 40023b4:	9080080c 	andi	r2,r18,32
 40023b8:	10028926 	beq	r2,zero,4002de0 <___svfprintf_internal_r+0x16f8>
 40023bc:	d9402d17 	ldw	r5,180(sp)
 40023c0:	d9002f17 	ldw	r4,188(sp)
 40023c4:	28800017 	ldw	r2,0(r5)
 40023c8:	2007d7fa 	srai	r3,r4,31
 40023cc:	29400104 	addi	r5,r5,4
 40023d0:	d9402d15 	stw	r5,180(sp)
 40023d4:	11000015 	stw	r4,0(r2)
 40023d8:	10c00115 	stw	r3,4(r2)
 40023dc:	003ced06 	br	4001794 <__alt_mem_onchip_memory2_0+0xfbfff794>
 40023e0:	94801014 	ori	r18,r18,64
 40023e4:	bc400007 	ldb	r17,0(r23)
 40023e8:	003d1306 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 40023ec:	010100b4 	movhi	r4,1026
 40023f0:	2132ad04 	addi	r4,r4,-13644
 40023f4:	0039883a 	mov	fp,zero
 40023f8:	d9003a15 	stw	r4,232(sp)
 40023fc:	04401e04 	movi	r17,120
 4002400:	003f8206 	br	400220c <__alt_mem_onchip_memory2_0+0xfc00020c>
 4002404:	18c03fcc 	andi	r3,r3,255
 4002408:	1805221e 	bne	r3,zero,4003894 <___svfprintf_internal_r+0x21ac>
 400240c:	883d9526 	beq	r17,zero,4001a64 <__alt_mem_onchip_memory2_0+0xfbfffa64>
 4002410:	00c00044 	movi	r3,1
 4002414:	d8c02a15 	stw	r3,168(sp)
 4002418:	dc401405 	stb	r17,80(sp)
 400241c:	d8002785 	stb	zero,158(sp)
 4002420:	003f9406 	br	4002274 <__alt_mem_onchip_memory2_0+0xfc000274>
 4002424:	010100b4 	movhi	r4,1026
 4002428:	2132ad04 	addi	r4,r4,-13644
 400242c:	d9003a15 	stw	r4,232(sp)
 4002430:	d8c02d15 	stw	r3,180(sp)
 4002434:	1025883a 	mov	r18,r2
 4002438:	04401e04 	movi	r17,120
 400243c:	a584b03a 	or	r2,r20,r22
 4002440:	1000fa1e 	bne	r2,zero,400282c <___svfprintf_internal_r+0x1144>
 4002444:	0039883a 	mov	fp,zero
 4002448:	00800084 	movi	r2,2
 400244c:	10803fcc 	andi	r2,r2,255
 4002450:	00c00044 	movi	r3,1
 4002454:	10c21626 	beq	r2,r3,4002cb0 <___svfprintf_internal_r+0x15c8>
 4002458:	00c00084 	movi	r3,2
 400245c:	10fe301e 	bne	r2,r3,4001d20 <__alt_mem_onchip_memory2_0+0xfbfffd20>
 4002460:	003d7606 	br	4001a3c <__alt_mem_onchip_memory2_0+0xfbfffa3c>
 4002464:	d8c02017 	ldw	r3,128(sp)
 4002468:	003e9506 	br	4001ec0 <__alt_mem_onchip_memory2_0+0xfbfffec0>
 400246c:	00801944 	movi	r2,101
 4002470:	14407c0e 	bge	r2,r17,4002664 <___svfprintf_internal_r+0xf7c>
 4002474:	d9003617 	ldw	r4,216(sp)
 4002478:	d9403717 	ldw	r5,220(sp)
 400247c:	000d883a 	mov	r6,zero
 4002480:	000f883a 	mov	r7,zero
 4002484:	d8c03d15 	stw	r3,244(sp)
 4002488:	da003e15 	stw	r8,248(sp)
 400248c:	400fdec0 	call	400fdec <__eqdf2>
 4002490:	d8c03d17 	ldw	r3,244(sp)
 4002494:	da003e17 	ldw	r8,248(sp)
 4002498:	1000f51e 	bne	r2,zero,4002870 <___svfprintf_internal_r+0x1188>
 400249c:	d8801f17 	ldw	r2,124(sp)
 40024a0:	010100b4 	movhi	r4,1026
 40024a4:	2132b404 	addi	r4,r4,-13616
 40024a8:	18c00044 	addi	r3,r3,1
 40024ac:	10800044 	addi	r2,r2,1
 40024b0:	41000015 	stw	r4,0(r8)
 40024b4:	01000044 	movi	r4,1
 40024b8:	41000115 	stw	r4,4(r8)
 40024bc:	d8c02015 	stw	r3,128(sp)
 40024c0:	d8801f15 	stw	r2,124(sp)
 40024c4:	010001c4 	movi	r4,7
 40024c8:	20826616 	blt	r4,r2,4002e64 <___svfprintf_internal_r+0x177c>
 40024cc:	42000204 	addi	r8,r8,8
 40024d0:	d8802617 	ldw	r2,152(sp)
 40024d4:	d9403317 	ldw	r5,204(sp)
 40024d8:	11400216 	blt	r2,r5,40024e4 <___svfprintf_internal_r+0xdfc>
 40024dc:	9080004c 	andi	r2,r18,1
 40024e0:	103ed526 	beq	r2,zero,4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 40024e4:	d8803817 	ldw	r2,224(sp)
 40024e8:	d9003417 	ldw	r4,208(sp)
 40024ec:	d9403817 	ldw	r5,224(sp)
 40024f0:	1887883a 	add	r3,r3,r2
 40024f4:	d8801f17 	ldw	r2,124(sp)
 40024f8:	41000015 	stw	r4,0(r8)
 40024fc:	41400115 	stw	r5,4(r8)
 4002500:	10800044 	addi	r2,r2,1
 4002504:	d8c02015 	stw	r3,128(sp)
 4002508:	d8801f15 	stw	r2,124(sp)
 400250c:	010001c4 	movi	r4,7
 4002510:	2082af16 	blt	r4,r2,4002fd0 <___svfprintf_internal_r+0x18e8>
 4002514:	42000204 	addi	r8,r8,8
 4002518:	d8803317 	ldw	r2,204(sp)
 400251c:	143fffc4 	addi	r16,r2,-1
 4002520:	043ec50e 	bge	zero,r16,4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 4002524:	04400404 	movi	r17,16
 4002528:	d8801f17 	ldw	r2,124(sp)
 400252c:	8c00860e 	bge	r17,r16,4002748 <___svfprintf_internal_r+0x1060>
 4002530:	014100b4 	movhi	r5,1026
 4002534:	2972b484 	addi	r5,r5,-13614
 4002538:	d9402b15 	stw	r5,172(sp)
 400253c:	058001c4 	movi	r22,7
 4002540:	dd002c17 	ldw	r20,176(sp)
 4002544:	00000306 	br	4002554 <___svfprintf_internal_r+0xe6c>
 4002548:	42000204 	addi	r8,r8,8
 400254c:	843ffc04 	addi	r16,r16,-16
 4002550:	8c00800e 	bge	r17,r16,4002754 <___svfprintf_internal_r+0x106c>
 4002554:	18c00404 	addi	r3,r3,16
 4002558:	10800044 	addi	r2,r2,1
 400255c:	45400015 	stw	r21,0(r8)
 4002560:	44400115 	stw	r17,4(r8)
 4002564:	d8c02015 	stw	r3,128(sp)
 4002568:	d8801f15 	stw	r2,124(sp)
 400256c:	b0bff60e 	bge	r22,r2,4002548 <__alt_mem_onchip_memory2_0+0xfc000548>
 4002570:	d9801e04 	addi	r6,sp,120
 4002574:	a00b883a 	mov	r5,r20
 4002578:	9809883a 	mov	r4,r19
 400257c:	400adc00 	call	400adc0 <__ssprint_r>
 4002580:	103d3e1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002584:	d8c02017 	ldw	r3,128(sp)
 4002588:	d8801f17 	ldw	r2,124(sp)
 400258c:	da000404 	addi	r8,sp,16
 4002590:	003fee06 	br	400254c <__alt_mem_onchip_memory2_0+0xfc00054c>
 4002594:	d9403117 	ldw	r5,196(sp)
 4002598:	d8802a17 	ldw	r2,168(sp)
 400259c:	28adc83a 	sub	r22,r5,r2
 40025a0:	05be650e 	bge	zero,r22,4001f38 <__alt_mem_onchip_memory2_0+0xfbffff38>
 40025a4:	07000404 	movi	fp,16
 40025a8:	d8801f17 	ldw	r2,124(sp)
 40025ac:	e583a20e 	bge	fp,r22,4003438 <___svfprintf_internal_r+0x1d50>
 40025b0:	014100b4 	movhi	r5,1026
 40025b4:	2972b484 	addi	r5,r5,-13614
 40025b8:	dc403015 	stw	r17,192(sp)
 40025bc:	d9402b15 	stw	r5,172(sp)
 40025c0:	b023883a 	mov	r17,r22
 40025c4:	050001c4 	movi	r20,7
 40025c8:	902d883a 	mov	r22,r18
 40025cc:	8025883a 	mov	r18,r16
 40025d0:	dc002c17 	ldw	r16,176(sp)
 40025d4:	00000306 	br	40025e4 <___svfprintf_internal_r+0xefc>
 40025d8:	8c7ffc04 	addi	r17,r17,-16
 40025dc:	42000204 	addi	r8,r8,8
 40025e0:	e440110e 	bge	fp,r17,4002628 <___svfprintf_internal_r+0xf40>
 40025e4:	18c00404 	addi	r3,r3,16
 40025e8:	10800044 	addi	r2,r2,1
 40025ec:	45400015 	stw	r21,0(r8)
 40025f0:	47000115 	stw	fp,4(r8)
 40025f4:	d8c02015 	stw	r3,128(sp)
 40025f8:	d8801f15 	stw	r2,124(sp)
 40025fc:	a0bff60e 	bge	r20,r2,40025d8 <__alt_mem_onchip_memory2_0+0xfc0005d8>
 4002600:	d9801e04 	addi	r6,sp,120
 4002604:	800b883a 	mov	r5,r16
 4002608:	9809883a 	mov	r4,r19
 400260c:	400adc00 	call	400adc0 <__ssprint_r>
 4002610:	103d1a1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002614:	8c7ffc04 	addi	r17,r17,-16
 4002618:	d8c02017 	ldw	r3,128(sp)
 400261c:	d8801f17 	ldw	r2,124(sp)
 4002620:	da000404 	addi	r8,sp,16
 4002624:	e47fef16 	blt	fp,r17,40025e4 <__alt_mem_onchip_memory2_0+0xfc0005e4>
 4002628:	9021883a 	mov	r16,r18
 400262c:	b025883a 	mov	r18,r22
 4002630:	882d883a 	mov	r22,r17
 4002634:	dc403017 	ldw	r17,192(sp)
 4002638:	d9002b17 	ldw	r4,172(sp)
 400263c:	1d87883a 	add	r3,r3,r22
 4002640:	10800044 	addi	r2,r2,1
 4002644:	41000015 	stw	r4,0(r8)
 4002648:	45800115 	stw	r22,4(r8)
 400264c:	d8c02015 	stw	r3,128(sp)
 4002650:	d8801f15 	stw	r2,124(sp)
 4002654:	010001c4 	movi	r4,7
 4002658:	20819a16 	blt	r4,r2,4002cc4 <___svfprintf_internal_r+0x15dc>
 400265c:	42000204 	addi	r8,r8,8
 4002660:	003e3506 	br	4001f38 <__alt_mem_onchip_memory2_0+0xfbffff38>
 4002664:	d9403317 	ldw	r5,204(sp)
 4002668:	00800044 	movi	r2,1
 400266c:	18c00044 	addi	r3,r3,1
 4002670:	1141710e 	bge	r2,r5,4002c38 <___svfprintf_internal_r+0x1550>
 4002674:	dc401f17 	ldw	r17,124(sp)
 4002678:	00800044 	movi	r2,1
 400267c:	40800115 	stw	r2,4(r8)
 4002680:	8c400044 	addi	r17,r17,1
 4002684:	44000015 	stw	r16,0(r8)
 4002688:	d8c02015 	stw	r3,128(sp)
 400268c:	dc401f15 	stw	r17,124(sp)
 4002690:	008001c4 	movi	r2,7
 4002694:	14417416 	blt	r2,r17,4002c68 <___svfprintf_internal_r+0x1580>
 4002698:	42000204 	addi	r8,r8,8
 400269c:	d8803817 	ldw	r2,224(sp)
 40026a0:	d9003417 	ldw	r4,208(sp)
 40026a4:	8c400044 	addi	r17,r17,1
 40026a8:	10c7883a 	add	r3,r2,r3
 40026ac:	40800115 	stw	r2,4(r8)
 40026b0:	41000015 	stw	r4,0(r8)
 40026b4:	d8c02015 	stw	r3,128(sp)
 40026b8:	dc401f15 	stw	r17,124(sp)
 40026bc:	008001c4 	movi	r2,7
 40026c0:	14417216 	blt	r2,r17,4002c8c <___svfprintf_internal_r+0x15a4>
 40026c4:	45800204 	addi	r22,r8,8
 40026c8:	d9003617 	ldw	r4,216(sp)
 40026cc:	d9403717 	ldw	r5,220(sp)
 40026d0:	000d883a 	mov	r6,zero
 40026d4:	000f883a 	mov	r7,zero
 40026d8:	d8c03d15 	stw	r3,244(sp)
 40026dc:	400fdec0 	call	400fdec <__eqdf2>
 40026e0:	d8c03d17 	ldw	r3,244(sp)
 40026e4:	1000b326 	beq	r2,zero,40029b4 <___svfprintf_internal_r+0x12cc>
 40026e8:	d9403317 	ldw	r5,204(sp)
 40026ec:	84000044 	addi	r16,r16,1
 40026f0:	8c400044 	addi	r17,r17,1
 40026f4:	28bfffc4 	addi	r2,r5,-1
 40026f8:	1887883a 	add	r3,r3,r2
 40026fc:	b0800115 	stw	r2,4(r22)
 4002700:	b4000015 	stw	r16,0(r22)
 4002704:	d8c02015 	stw	r3,128(sp)
 4002708:	dc401f15 	stw	r17,124(sp)
 400270c:	008001c4 	movi	r2,7
 4002710:	1440d216 	blt	r2,r17,4002a5c <___svfprintf_internal_r+0x1374>
 4002714:	b5800204 	addi	r22,r22,8
 4002718:	d9003b17 	ldw	r4,236(sp)
 400271c:	df0022c4 	addi	fp,sp,139
 4002720:	8c400044 	addi	r17,r17,1
 4002724:	20c7883a 	add	r3,r4,r3
 4002728:	b7000015 	stw	fp,0(r22)
 400272c:	b1000115 	stw	r4,4(r22)
 4002730:	d8c02015 	stw	r3,128(sp)
 4002734:	dc401f15 	stw	r17,124(sp)
 4002738:	008001c4 	movi	r2,7
 400273c:	14400e16 	blt	r2,r17,4002778 <___svfprintf_internal_r+0x1090>
 4002740:	b2000204 	addi	r8,r22,8
 4002744:	003e3c06 	br	4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 4002748:	010100b4 	movhi	r4,1026
 400274c:	2132b484 	addi	r4,r4,-13614
 4002750:	d9002b15 	stw	r4,172(sp)
 4002754:	d9002b17 	ldw	r4,172(sp)
 4002758:	1c07883a 	add	r3,r3,r16
 400275c:	44000115 	stw	r16,4(r8)
 4002760:	41000015 	stw	r4,0(r8)
 4002764:	10800044 	addi	r2,r2,1
 4002768:	d8c02015 	stw	r3,128(sp)
 400276c:	d8801f15 	stw	r2,124(sp)
 4002770:	010001c4 	movi	r4,7
 4002774:	20be2f0e 	bge	r4,r2,4002034 <__alt_mem_onchip_memory2_0+0xfc000034>
 4002778:	d9402c17 	ldw	r5,176(sp)
 400277c:	d9801e04 	addi	r6,sp,120
 4002780:	9809883a 	mov	r4,r19
 4002784:	400adc00 	call	400adc0 <__ssprint_r>
 4002788:	103cbc1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 400278c:	d8c02017 	ldw	r3,128(sp)
 4002790:	da000404 	addi	r8,sp,16
 4002794:	003e2806 	br	4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 4002798:	d9402c17 	ldw	r5,176(sp)
 400279c:	d9801e04 	addi	r6,sp,120
 40027a0:	9809883a 	mov	r4,r19
 40027a4:	400adc00 	call	400adc0 <__ssprint_r>
 40027a8:	103e5f26 	beq	r2,zero,4002128 <__alt_mem_onchip_memory2_0+0xfc000128>
 40027ac:	003cb306 	br	4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 40027b0:	d9402c17 	ldw	r5,176(sp)
 40027b4:	d9801e04 	addi	r6,sp,120
 40027b8:	9809883a 	mov	r4,r19
 40027bc:	400adc00 	call	400adc0 <__ssprint_r>
 40027c0:	103cae1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 40027c4:	d8c02017 	ldw	r3,128(sp)
 40027c8:	da000404 	addi	r8,sp,16
 40027cc:	003e0d06 	br	4002004 <__alt_mem_onchip_memory2_0+0xfc000004>
 40027d0:	d9402c17 	ldw	r5,176(sp)
 40027d4:	d9801e04 	addi	r6,sp,120
 40027d8:	9809883a 	mov	r4,r19
 40027dc:	400adc00 	call	400adc0 <__ssprint_r>
 40027e0:	103ca61e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 40027e4:	d8c02017 	ldw	r3,128(sp)
 40027e8:	da000404 	addi	r8,sp,16
 40027ec:	003dc106 	br	4001ef4 <__alt_mem_onchip_memory2_0+0xfbfffef4>
 40027f0:	d9402c17 	ldw	r5,176(sp)
 40027f4:	d9801e04 	addi	r6,sp,120
 40027f8:	9809883a 	mov	r4,r19
 40027fc:	400adc00 	call	400adc0 <__ssprint_r>
 4002800:	103c9e1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002804:	d8c02017 	ldw	r3,128(sp)
 4002808:	da000404 	addi	r8,sp,16
 400280c:	003dc706 	br	4001f2c <__alt_mem_onchip_memory2_0+0xfbffff2c>
 4002810:	d8802917 	ldw	r2,164(sp)
 4002814:	d8002785 	stb	zero,158(sp)
 4002818:	103f0816 	blt	r2,zero,400243c <__alt_mem_onchip_memory2_0+0xfc00043c>
 400281c:	00ffdfc4 	movi	r3,-129
 4002820:	a584b03a 	or	r2,r20,r22
 4002824:	90e4703a 	and	r18,r18,r3
 4002828:	103c8126 	beq	r2,zero,4001a30 <__alt_mem_onchip_memory2_0+0xfbfffa30>
 400282c:	0039883a 	mov	fp,zero
 4002830:	003e7606 	br	400220c <__alt_mem_onchip_memory2_0+0xfc00020c>
 4002834:	9080040c 	andi	r2,r18,16
 4002838:	10013d26 	beq	r2,zero,4002d30 <___svfprintf_internal_r+0x1648>
 400283c:	d9002d17 	ldw	r4,180(sp)
 4002840:	d9402917 	ldw	r5,164(sp)
 4002844:	d8002785 	stb	zero,158(sp)
 4002848:	20800104 	addi	r2,r4,4
 400284c:	25000017 	ldw	r20,0(r4)
 4002850:	002d883a 	mov	r22,zero
 4002854:	28013f16 	blt	r5,zero,4002d54 <___svfprintf_internal_r+0x166c>
 4002858:	00ffdfc4 	movi	r3,-129
 400285c:	d8802d15 	stw	r2,180(sp)
 4002860:	90e4703a 	and	r18,r18,r3
 4002864:	a03d2b26 	beq	r20,zero,4001d14 <__alt_mem_onchip_memory2_0+0xfbfffd14>
 4002868:	0039883a 	mov	fp,zero
 400286c:	003d2e06 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4002870:	dc402617 	ldw	r17,152(sp)
 4002874:	0441830e 	bge	zero,r17,4002e84 <___svfprintf_internal_r+0x179c>
 4002878:	dc403217 	ldw	r17,200(sp)
 400287c:	d8803317 	ldw	r2,204(sp)
 4002880:	1440010e 	bge	r2,r17,4002888 <___svfprintf_internal_r+0x11a0>
 4002884:	1023883a 	mov	r17,r2
 4002888:	04400a0e 	bge	zero,r17,40028b4 <___svfprintf_internal_r+0x11cc>
 400288c:	d8801f17 	ldw	r2,124(sp)
 4002890:	1c47883a 	add	r3,r3,r17
 4002894:	44000015 	stw	r16,0(r8)
 4002898:	10800044 	addi	r2,r2,1
 400289c:	44400115 	stw	r17,4(r8)
 40028a0:	d8c02015 	stw	r3,128(sp)
 40028a4:	d8801f15 	stw	r2,124(sp)
 40028a8:	010001c4 	movi	r4,7
 40028ac:	20827516 	blt	r4,r2,4003284 <___svfprintf_internal_r+0x1b9c>
 40028b0:	42000204 	addi	r8,r8,8
 40028b4:	88027b16 	blt	r17,zero,40032a4 <___svfprintf_internal_r+0x1bbc>
 40028b8:	d9003217 	ldw	r4,200(sp)
 40028bc:	2463c83a 	sub	r17,r4,r17
 40028c0:	0440990e 	bge	zero,r17,4002b28 <___svfprintf_internal_r+0x1440>
 40028c4:	05800404 	movi	r22,16
 40028c8:	d8801f17 	ldw	r2,124(sp)
 40028cc:	b441530e 	bge	r22,r17,4002e1c <___svfprintf_internal_r+0x1734>
 40028d0:	010100b4 	movhi	r4,1026
 40028d4:	2132b484 	addi	r4,r4,-13614
 40028d8:	d9002b15 	stw	r4,172(sp)
 40028dc:	070001c4 	movi	fp,7
 40028e0:	dd002c17 	ldw	r20,176(sp)
 40028e4:	00000306 	br	40028f4 <___svfprintf_internal_r+0x120c>
 40028e8:	42000204 	addi	r8,r8,8
 40028ec:	8c7ffc04 	addi	r17,r17,-16
 40028f0:	b4414d0e 	bge	r22,r17,4002e28 <___svfprintf_internal_r+0x1740>
 40028f4:	18c00404 	addi	r3,r3,16
 40028f8:	10800044 	addi	r2,r2,1
 40028fc:	45400015 	stw	r21,0(r8)
 4002900:	45800115 	stw	r22,4(r8)
 4002904:	d8c02015 	stw	r3,128(sp)
 4002908:	d8801f15 	stw	r2,124(sp)
 400290c:	e0bff60e 	bge	fp,r2,40028e8 <__alt_mem_onchip_memory2_0+0xfc0008e8>
 4002910:	d9801e04 	addi	r6,sp,120
 4002914:	a00b883a 	mov	r5,r20
 4002918:	9809883a 	mov	r4,r19
 400291c:	400adc00 	call	400adc0 <__ssprint_r>
 4002920:	103c561e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002924:	d8c02017 	ldw	r3,128(sp)
 4002928:	d8801f17 	ldw	r2,124(sp)
 400292c:	da000404 	addi	r8,sp,16
 4002930:	003fee06 	br	40028ec <__alt_mem_onchip_memory2_0+0xfc0008ec>
 4002934:	d9402c17 	ldw	r5,176(sp)
 4002938:	d9801e04 	addi	r6,sp,120
 400293c:	9809883a 	mov	r4,r19
 4002940:	400adc00 	call	400adc0 <__ssprint_r>
 4002944:	103c4d1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002948:	d8c02017 	ldw	r3,128(sp)
 400294c:	df002787 	ldb	fp,158(sp)
 4002950:	da000404 	addi	r8,sp,16
 4002954:	003d5a06 	br	4001ec0 <__alt_mem_onchip_memory2_0+0xfbfffec0>
 4002958:	9080040c 	andi	r2,r18,16
 400295c:	10005c26 	beq	r2,zero,4002ad0 <___svfprintf_internal_r+0x13e8>
 4002960:	d9402d17 	ldw	r5,180(sp)
 4002964:	d8c02917 	ldw	r3,164(sp)
 4002968:	d8002785 	stb	zero,158(sp)
 400296c:	28800104 	addi	r2,r5,4
 4002970:	2d000017 	ldw	r20,0(r5)
 4002974:	002d883a 	mov	r22,zero
 4002978:	18005e16 	blt	r3,zero,4002af4 <___svfprintf_internal_r+0x140c>
 400297c:	00ffdfc4 	movi	r3,-129
 4002980:	d8802d15 	stw	r2,180(sp)
 4002984:	90e4703a 	and	r18,r18,r3
 4002988:	0039883a 	mov	fp,zero
 400298c:	a03dfe26 	beq	r20,zero,4002188 <__alt_mem_onchip_memory2_0+0xfc000188>
 4002990:	00800244 	movi	r2,9
 4002994:	153cb336 	bltu	r2,r20,4001c64 <__alt_mem_onchip_memory2_0+0xfbfffc64>
 4002998:	a5000c04 	addi	r20,r20,48
 400299c:	dc001dc4 	addi	r16,sp,119
 40029a0:	dd001dc5 	stb	r20,119(sp)
 40029a4:	d8c02817 	ldw	r3,160(sp)
 40029a8:	1c07c83a 	sub	r3,r3,r16
 40029ac:	d8c02e15 	stw	r3,184(sp)
 40029b0:	003cf506 	br	4001d88 <__alt_mem_onchip_memory2_0+0xfbfffd88>
 40029b4:	d8803317 	ldw	r2,204(sp)
 40029b8:	143fffc4 	addi	r16,r2,-1
 40029bc:	043f560e 	bge	zero,r16,4002718 <__alt_mem_onchip_memory2_0+0xfc000718>
 40029c0:	07000404 	movi	fp,16
 40029c4:	e403530e 	bge	fp,r16,4003714 <___svfprintf_internal_r+0x202c>
 40029c8:	014100b4 	movhi	r5,1026
 40029cc:	2972b484 	addi	r5,r5,-13614
 40029d0:	d9402b15 	stw	r5,172(sp)
 40029d4:	01c001c4 	movi	r7,7
 40029d8:	dd002c17 	ldw	r20,176(sp)
 40029dc:	00000306 	br	40029ec <___svfprintf_internal_r+0x1304>
 40029e0:	843ffc04 	addi	r16,r16,-16
 40029e4:	b5800204 	addi	r22,r22,8
 40029e8:	e400130e 	bge	fp,r16,4002a38 <___svfprintf_internal_r+0x1350>
 40029ec:	18c00404 	addi	r3,r3,16
 40029f0:	8c400044 	addi	r17,r17,1
 40029f4:	b5400015 	stw	r21,0(r22)
 40029f8:	b7000115 	stw	fp,4(r22)
 40029fc:	d8c02015 	stw	r3,128(sp)
 4002a00:	dc401f15 	stw	r17,124(sp)
 4002a04:	3c7ff60e 	bge	r7,r17,40029e0 <__alt_mem_onchip_memory2_0+0xfc0009e0>
 4002a08:	d9801e04 	addi	r6,sp,120
 4002a0c:	a00b883a 	mov	r5,r20
 4002a10:	9809883a 	mov	r4,r19
 4002a14:	d9c03d15 	stw	r7,244(sp)
 4002a18:	400adc00 	call	400adc0 <__ssprint_r>
 4002a1c:	d9c03d17 	ldw	r7,244(sp)
 4002a20:	103c161e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002a24:	843ffc04 	addi	r16,r16,-16
 4002a28:	d8c02017 	ldw	r3,128(sp)
 4002a2c:	dc401f17 	ldw	r17,124(sp)
 4002a30:	dd800404 	addi	r22,sp,16
 4002a34:	e43fed16 	blt	fp,r16,40029ec <__alt_mem_onchip_memory2_0+0xfc0009ec>
 4002a38:	d8802b17 	ldw	r2,172(sp)
 4002a3c:	1c07883a 	add	r3,r3,r16
 4002a40:	8c400044 	addi	r17,r17,1
 4002a44:	b0800015 	stw	r2,0(r22)
 4002a48:	b4000115 	stw	r16,4(r22)
 4002a4c:	d8c02015 	stw	r3,128(sp)
 4002a50:	dc401f15 	stw	r17,124(sp)
 4002a54:	008001c4 	movi	r2,7
 4002a58:	147f2e0e 	bge	r2,r17,4002714 <__alt_mem_onchip_memory2_0+0xfc000714>
 4002a5c:	d9402c17 	ldw	r5,176(sp)
 4002a60:	d9801e04 	addi	r6,sp,120
 4002a64:	9809883a 	mov	r4,r19
 4002a68:	400adc00 	call	400adc0 <__ssprint_r>
 4002a6c:	103c031e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002a70:	d8c02017 	ldw	r3,128(sp)
 4002a74:	dc401f17 	ldw	r17,124(sp)
 4002a78:	dd800404 	addi	r22,sp,16
 4002a7c:	003f2606 	br	4002718 <__alt_mem_onchip_memory2_0+0xfc000718>
 4002a80:	9080040c 	andi	r2,r18,16
 4002a84:	1000c326 	beq	r2,zero,4002d94 <___svfprintf_internal_r+0x16ac>
 4002a88:	d8802d17 	ldw	r2,180(sp)
 4002a8c:	15000017 	ldw	r20,0(r2)
 4002a90:	10800104 	addi	r2,r2,4
 4002a94:	d8802d15 	stw	r2,180(sp)
 4002a98:	a02dd7fa 	srai	r22,r20,31
 4002a9c:	b005883a 	mov	r2,r22
 4002aa0:	103c680e 	bge	r2,zero,4001c44 <__alt_mem_onchip_memory2_0+0xfbfffc44>
 4002aa4:	0529c83a 	sub	r20,zero,r20
 4002aa8:	a004c03a 	cmpne	r2,r20,zero
 4002aac:	05adc83a 	sub	r22,zero,r22
 4002ab0:	b0adc83a 	sub	r22,r22,r2
 4002ab4:	d8802917 	ldw	r2,164(sp)
 4002ab8:	07000b44 	movi	fp,45
 4002abc:	df002785 	stb	fp,158(sp)
 4002ac0:	10022e16 	blt	r2,zero,400337c <___svfprintf_internal_r+0x1c94>
 4002ac4:	00bfdfc4 	movi	r2,-129
 4002ac8:	90a4703a 	and	r18,r18,r2
 4002acc:	003c6406 	br	4001c60 <__alt_mem_onchip_memory2_0+0xfbfffc60>
 4002ad0:	9080100c 	andi	r2,r18,64
 4002ad4:	d8002785 	stb	zero,158(sp)
 4002ad8:	10012526 	beq	r2,zero,4002f70 <___svfprintf_internal_r+0x1888>
 4002adc:	d9002d17 	ldw	r4,180(sp)
 4002ae0:	d9402917 	ldw	r5,164(sp)
 4002ae4:	002d883a 	mov	r22,zero
 4002ae8:	20800104 	addi	r2,r4,4
 4002aec:	2500000b 	ldhu	r20,0(r4)
 4002af0:	283fa20e 	bge	r5,zero,400297c <__alt_mem_onchip_memory2_0+0xfc00097c>
 4002af4:	d8802d15 	stw	r2,180(sp)
 4002af8:	0039883a 	mov	fp,zero
 4002afc:	a584b03a 	or	r2,r20,r22
 4002b00:	103c571e 	bne	r2,zero,4001c60 <__alt_mem_onchip_memory2_0+0xfbfffc60>
 4002b04:	00800044 	movi	r2,1
 4002b08:	003e5006 	br	400244c <__alt_mem_onchip_memory2_0+0xfc00044c>
 4002b0c:	d9402c17 	ldw	r5,176(sp)
 4002b10:	d9801e04 	addi	r6,sp,120
 4002b14:	9809883a 	mov	r4,r19
 4002b18:	400adc00 	call	400adc0 <__ssprint_r>
 4002b1c:	103bd71e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002b20:	d8c02017 	ldw	r3,128(sp)
 4002b24:	da000404 	addi	r8,sp,16
 4002b28:	d9003217 	ldw	r4,200(sp)
 4002b2c:	d8802617 	ldw	r2,152(sp)
 4002b30:	d9403317 	ldw	r5,204(sp)
 4002b34:	8123883a 	add	r17,r16,r4
 4002b38:	11400216 	blt	r2,r5,4002b44 <___svfprintf_internal_r+0x145c>
 4002b3c:	9100004c 	andi	r4,r18,1
 4002b40:	20000d26 	beq	r4,zero,4002b78 <___svfprintf_internal_r+0x1490>
 4002b44:	d9003817 	ldw	r4,224(sp)
 4002b48:	d9403417 	ldw	r5,208(sp)
 4002b4c:	1907883a 	add	r3,r3,r4
 4002b50:	d9001f17 	ldw	r4,124(sp)
 4002b54:	41400015 	stw	r5,0(r8)
 4002b58:	d9403817 	ldw	r5,224(sp)
 4002b5c:	21000044 	addi	r4,r4,1
 4002b60:	d8c02015 	stw	r3,128(sp)
 4002b64:	41400115 	stw	r5,4(r8)
 4002b68:	d9001f15 	stw	r4,124(sp)
 4002b6c:	014001c4 	movi	r5,7
 4002b70:	2901dc16 	blt	r5,r4,40032e4 <___svfprintf_internal_r+0x1bfc>
 4002b74:	42000204 	addi	r8,r8,8
 4002b78:	d9003317 	ldw	r4,204(sp)
 4002b7c:	8121883a 	add	r16,r16,r4
 4002b80:	2085c83a 	sub	r2,r4,r2
 4002b84:	8461c83a 	sub	r16,r16,r17
 4002b88:	1400010e 	bge	r2,r16,4002b90 <___svfprintf_internal_r+0x14a8>
 4002b8c:	1021883a 	mov	r16,r2
 4002b90:	04000a0e 	bge	zero,r16,4002bbc <___svfprintf_internal_r+0x14d4>
 4002b94:	d9001f17 	ldw	r4,124(sp)
 4002b98:	1c07883a 	add	r3,r3,r16
 4002b9c:	44400015 	stw	r17,0(r8)
 4002ba0:	21000044 	addi	r4,r4,1
 4002ba4:	44000115 	stw	r16,4(r8)
 4002ba8:	d8c02015 	stw	r3,128(sp)
 4002bac:	d9001f15 	stw	r4,124(sp)
 4002bb0:	014001c4 	movi	r5,7
 4002bb4:	2901e616 	blt	r5,r4,4003350 <___svfprintf_internal_r+0x1c68>
 4002bb8:	42000204 	addi	r8,r8,8
 4002bbc:	8001f616 	blt	r16,zero,4003398 <___svfprintf_internal_r+0x1cb0>
 4002bc0:	1421c83a 	sub	r16,r2,r16
 4002bc4:	043d1c0e 	bge	zero,r16,4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 4002bc8:	04400404 	movi	r17,16
 4002bcc:	d8801f17 	ldw	r2,124(sp)
 4002bd0:	8c3edd0e 	bge	r17,r16,4002748 <__alt_mem_onchip_memory2_0+0xfc000748>
 4002bd4:	014100b4 	movhi	r5,1026
 4002bd8:	2972b484 	addi	r5,r5,-13614
 4002bdc:	d9402b15 	stw	r5,172(sp)
 4002be0:	058001c4 	movi	r22,7
 4002be4:	dd002c17 	ldw	r20,176(sp)
 4002be8:	00000306 	br	4002bf8 <___svfprintf_internal_r+0x1510>
 4002bec:	42000204 	addi	r8,r8,8
 4002bf0:	843ffc04 	addi	r16,r16,-16
 4002bf4:	8c3ed70e 	bge	r17,r16,4002754 <__alt_mem_onchip_memory2_0+0xfc000754>
 4002bf8:	18c00404 	addi	r3,r3,16
 4002bfc:	10800044 	addi	r2,r2,1
 4002c00:	45400015 	stw	r21,0(r8)
 4002c04:	44400115 	stw	r17,4(r8)
 4002c08:	d8c02015 	stw	r3,128(sp)
 4002c0c:	d8801f15 	stw	r2,124(sp)
 4002c10:	b0bff60e 	bge	r22,r2,4002bec <__alt_mem_onchip_memory2_0+0xfc000bec>
 4002c14:	d9801e04 	addi	r6,sp,120
 4002c18:	a00b883a 	mov	r5,r20
 4002c1c:	9809883a 	mov	r4,r19
 4002c20:	400adc00 	call	400adc0 <__ssprint_r>
 4002c24:	103b951e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002c28:	d8c02017 	ldw	r3,128(sp)
 4002c2c:	d8801f17 	ldw	r2,124(sp)
 4002c30:	da000404 	addi	r8,sp,16
 4002c34:	003fee06 	br	4002bf0 <__alt_mem_onchip_memory2_0+0xfc000bf0>
 4002c38:	9088703a 	and	r4,r18,r2
 4002c3c:	203e8d1e 	bne	r4,zero,4002674 <__alt_mem_onchip_memory2_0+0xfc000674>
 4002c40:	dc401f17 	ldw	r17,124(sp)
 4002c44:	40800115 	stw	r2,4(r8)
 4002c48:	44000015 	stw	r16,0(r8)
 4002c4c:	8c400044 	addi	r17,r17,1
 4002c50:	d8c02015 	stw	r3,128(sp)
 4002c54:	dc401f15 	stw	r17,124(sp)
 4002c58:	008001c4 	movi	r2,7
 4002c5c:	147f7f16 	blt	r2,r17,4002a5c <__alt_mem_onchip_memory2_0+0xfc000a5c>
 4002c60:	45800204 	addi	r22,r8,8
 4002c64:	003eac06 	br	4002718 <__alt_mem_onchip_memory2_0+0xfc000718>
 4002c68:	d9402c17 	ldw	r5,176(sp)
 4002c6c:	d9801e04 	addi	r6,sp,120
 4002c70:	9809883a 	mov	r4,r19
 4002c74:	400adc00 	call	400adc0 <__ssprint_r>
 4002c78:	103b801e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002c7c:	d8c02017 	ldw	r3,128(sp)
 4002c80:	dc401f17 	ldw	r17,124(sp)
 4002c84:	da000404 	addi	r8,sp,16
 4002c88:	003e8406 	br	400269c <__alt_mem_onchip_memory2_0+0xfc00069c>
 4002c8c:	d9402c17 	ldw	r5,176(sp)
 4002c90:	d9801e04 	addi	r6,sp,120
 4002c94:	9809883a 	mov	r4,r19
 4002c98:	400adc00 	call	400adc0 <__ssprint_r>
 4002c9c:	103b771e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002ca0:	d8c02017 	ldw	r3,128(sp)
 4002ca4:	dc401f17 	ldw	r17,124(sp)
 4002ca8:	dd800404 	addi	r22,sp,16
 4002cac:	003e8606 	br	40026c8 <__alt_mem_onchip_memory2_0+0xfc0006c8>
 4002cb0:	0029883a 	mov	r20,zero
 4002cb4:	a5000c04 	addi	r20,r20,48
 4002cb8:	dc001dc4 	addi	r16,sp,119
 4002cbc:	dd001dc5 	stb	r20,119(sp)
 4002cc0:	003f3806 	br	40029a4 <__alt_mem_onchip_memory2_0+0xfc0009a4>
 4002cc4:	d9402c17 	ldw	r5,176(sp)
 4002cc8:	d9801e04 	addi	r6,sp,120
 4002ccc:	9809883a 	mov	r4,r19
 4002cd0:	400adc00 	call	400adc0 <__ssprint_r>
 4002cd4:	103b691e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002cd8:	d8c02017 	ldw	r3,128(sp)
 4002cdc:	da000404 	addi	r8,sp,16
 4002ce0:	003c9506 	br	4001f38 <__alt_mem_onchip_memory2_0+0xfbffff38>
 4002ce4:	d9003617 	ldw	r4,216(sp)
 4002ce8:	d9403717 	ldw	r5,220(sp)
 4002cec:	da003e15 	stw	r8,248(sp)
 4002cf0:	400aae00 	call	400aae0 <__fpclassifyd>
 4002cf4:	da003e17 	ldw	r8,248(sp)
 4002cf8:	1000bd1e 	bne	r2,zero,4002ff0 <___svfprintf_internal_r+0x1908>
 4002cfc:	008011c4 	movi	r2,71
 4002d00:	14411e0e 	bge	r2,r17,400317c <___svfprintf_internal_r+0x1a94>
 4002d04:	040100b4 	movhi	r16,1026
 4002d08:	8432a704 	addi	r16,r16,-13668
 4002d0c:	00c000c4 	movi	r3,3
 4002d10:	00bfdfc4 	movi	r2,-129
 4002d14:	d8c02a15 	stw	r3,168(sp)
 4002d18:	90a4703a 	and	r18,r18,r2
 4002d1c:	df002783 	ldbu	fp,158(sp)
 4002d20:	d8c02e15 	stw	r3,184(sp)
 4002d24:	d8002915 	stw	zero,164(sp)
 4002d28:	d8003215 	stw	zero,200(sp)
 4002d2c:	003c1c06 	br	4001da0 <__alt_mem_onchip_memory2_0+0xfbfffda0>
 4002d30:	9080100c 	andi	r2,r18,64
 4002d34:	d8002785 	stb	zero,158(sp)
 4002d38:	10009426 	beq	r2,zero,4002f8c <___svfprintf_internal_r+0x18a4>
 4002d3c:	d8c02d17 	ldw	r3,180(sp)
 4002d40:	d9002917 	ldw	r4,164(sp)
 4002d44:	002d883a 	mov	r22,zero
 4002d48:	18800104 	addi	r2,r3,4
 4002d4c:	1d00000b 	ldhu	r20,0(r3)
 4002d50:	203ec10e 	bge	r4,zero,4002858 <__alt_mem_onchip_memory2_0+0xfc000858>
 4002d54:	a586b03a 	or	r3,r20,r22
 4002d58:	d8802d15 	stw	r2,180(sp)
 4002d5c:	183ec21e 	bne	r3,zero,4002868 <__alt_mem_onchip_memory2_0+0xfc000868>
 4002d60:	0039883a 	mov	fp,zero
 4002d64:	0005883a 	mov	r2,zero
 4002d68:	003db806 	br	400244c <__alt_mem_onchip_memory2_0+0xfc00044c>
 4002d6c:	d8802d17 	ldw	r2,180(sp)
 4002d70:	d8c02d17 	ldw	r3,180(sp)
 4002d74:	d9002d17 	ldw	r4,180(sp)
 4002d78:	10800017 	ldw	r2,0(r2)
 4002d7c:	18c00117 	ldw	r3,4(r3)
 4002d80:	21000204 	addi	r4,r4,8
 4002d84:	d8803615 	stw	r2,216(sp)
 4002d88:	d8c03715 	stw	r3,220(sp)
 4002d8c:	d9002d15 	stw	r4,180(sp)
 4002d90:	003b8206 	br	4001b9c <__alt_mem_onchip_memory2_0+0xfbfffb9c>
 4002d94:	9080100c 	andi	r2,r18,64
 4002d98:	10010726 	beq	r2,zero,40031b8 <___svfprintf_internal_r+0x1ad0>
 4002d9c:	d8c02d17 	ldw	r3,180(sp)
 4002da0:	1d00000f 	ldh	r20,0(r3)
 4002da4:	18c00104 	addi	r3,r3,4
 4002da8:	d8c02d15 	stw	r3,180(sp)
 4002dac:	a02dd7fa 	srai	r22,r20,31
 4002db0:	b005883a 	mov	r2,r22
 4002db4:	003ba206 	br	4001c40 <__alt_mem_onchip_memory2_0+0xfbfffc40>
 4002db8:	9080100c 	andi	r2,r18,64
 4002dbc:	10010526 	beq	r2,zero,40031d4 <___svfprintf_internal_r+0x1aec>
 4002dc0:	d9002d17 	ldw	r4,180(sp)
 4002dc4:	002d883a 	mov	r22,zero
 4002dc8:	2500000b 	ldhu	r20,0(r4)
 4002dcc:	21000104 	addi	r4,r4,4
 4002dd0:	d9002d15 	stw	r4,180(sp)
 4002dd4:	003cfe06 	br	40021d0 <__alt_mem_onchip_memory2_0+0xfc0001d0>
 4002dd8:	bc400007 	ldb	r17,0(r23)
 4002ddc:	003a9606 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4002de0:	9080040c 	andi	r2,r18,16
 4002de4:	10010126 	beq	r2,zero,40031ec <___svfprintf_internal_r+0x1b04>
 4002de8:	d9402d17 	ldw	r5,180(sp)
 4002dec:	d8c02f17 	ldw	r3,188(sp)
 4002df0:	28800017 	ldw	r2,0(r5)
 4002df4:	29400104 	addi	r5,r5,4
 4002df8:	d9402d15 	stw	r5,180(sp)
 4002dfc:	10c00015 	stw	r3,0(r2)
 4002e00:	003a6406 	br	4001794 <__alt_mem_onchip_memory2_0+0xfbfff794>
 4002e04:	d9002917 	ldw	r4,164(sp)
 4002e08:	d8002785 	stb	zero,158(sp)
 4002e0c:	203d8d16 	blt	r4,zero,4002444 <__alt_mem_onchip_memory2_0+0xfc000444>
 4002e10:	00bfdfc4 	movi	r2,-129
 4002e14:	90a4703a 	and	r18,r18,r2
 4002e18:	003b0506 	br	4001a30 <__alt_mem_onchip_memory2_0+0xfbfffa30>
 4002e1c:	014100b4 	movhi	r5,1026
 4002e20:	2972b484 	addi	r5,r5,-13614
 4002e24:	d9402b15 	stw	r5,172(sp)
 4002e28:	d9402b17 	ldw	r5,172(sp)
 4002e2c:	1c47883a 	add	r3,r3,r17
 4002e30:	10800044 	addi	r2,r2,1
 4002e34:	41400015 	stw	r5,0(r8)
 4002e38:	44400115 	stw	r17,4(r8)
 4002e3c:	d8c02015 	stw	r3,128(sp)
 4002e40:	d8801f15 	stw	r2,124(sp)
 4002e44:	010001c4 	movi	r4,7
 4002e48:	20bf3016 	blt	r4,r2,4002b0c <__alt_mem_onchip_memory2_0+0xfc000b0c>
 4002e4c:	42000204 	addi	r8,r8,8
 4002e50:	003f3506 	br	4002b28 <__alt_mem_onchip_memory2_0+0xfc000b28>
 4002e54:	010100b4 	movhi	r4,1026
 4002e58:	2132b484 	addi	r4,r4,-13614
 4002e5c:	d9002b15 	stw	r4,172(sp)
 4002e60:	003c5e06 	br	4001fdc <__alt_mem_onchip_memory2_0+0xfbffffdc>
 4002e64:	d9402c17 	ldw	r5,176(sp)
 4002e68:	d9801e04 	addi	r6,sp,120
 4002e6c:	9809883a 	mov	r4,r19
 4002e70:	400adc00 	call	400adc0 <__ssprint_r>
 4002e74:	103b011e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002e78:	d8c02017 	ldw	r3,128(sp)
 4002e7c:	da000404 	addi	r8,sp,16
 4002e80:	003d9306 	br	40024d0 <__alt_mem_onchip_memory2_0+0xfc0004d0>
 4002e84:	d8801f17 	ldw	r2,124(sp)
 4002e88:	014100b4 	movhi	r5,1026
 4002e8c:	01000044 	movi	r4,1
 4002e90:	18c00044 	addi	r3,r3,1
 4002e94:	10800044 	addi	r2,r2,1
 4002e98:	2972b404 	addi	r5,r5,-13616
 4002e9c:	41000115 	stw	r4,4(r8)
 4002ea0:	41400015 	stw	r5,0(r8)
 4002ea4:	d8c02015 	stw	r3,128(sp)
 4002ea8:	d8801f15 	stw	r2,124(sp)
 4002eac:	010001c4 	movi	r4,7
 4002eb0:	2080b516 	blt	r4,r2,4003188 <___svfprintf_internal_r+0x1aa0>
 4002eb4:	42000204 	addi	r8,r8,8
 4002eb8:	8800041e 	bne	r17,zero,4002ecc <___svfprintf_internal_r+0x17e4>
 4002ebc:	d8803317 	ldw	r2,204(sp)
 4002ec0:	1000021e 	bne	r2,zero,4002ecc <___svfprintf_internal_r+0x17e4>
 4002ec4:	9080004c 	andi	r2,r18,1
 4002ec8:	103c5b26 	beq	r2,zero,4002038 <__alt_mem_onchip_memory2_0+0xfc000038>
 4002ecc:	d9003817 	ldw	r4,224(sp)
 4002ed0:	d8801f17 	ldw	r2,124(sp)
 4002ed4:	d9403417 	ldw	r5,208(sp)
 4002ed8:	20c7883a 	add	r3,r4,r3
 4002edc:	10800044 	addi	r2,r2,1
 4002ee0:	41000115 	stw	r4,4(r8)
 4002ee4:	41400015 	stw	r5,0(r8)
 4002ee8:	d8c02015 	stw	r3,128(sp)
 4002eec:	d8801f15 	stw	r2,124(sp)
 4002ef0:	010001c4 	movi	r4,7
 4002ef4:	20818016 	blt	r4,r2,40034f8 <___svfprintf_internal_r+0x1e10>
 4002ef8:	42000204 	addi	r8,r8,8
 4002efc:	0463c83a 	sub	r17,zero,r17
 4002f00:	0440cb0e 	bge	zero,r17,4003230 <___svfprintf_internal_r+0x1b48>
 4002f04:	05800404 	movi	r22,16
 4002f08:	b440e80e 	bge	r22,r17,40032ac <___svfprintf_internal_r+0x1bc4>
 4002f0c:	014100b4 	movhi	r5,1026
 4002f10:	2972b484 	addi	r5,r5,-13614
 4002f14:	d9402b15 	stw	r5,172(sp)
 4002f18:	070001c4 	movi	fp,7
 4002f1c:	dd002c17 	ldw	r20,176(sp)
 4002f20:	00000306 	br	4002f30 <___svfprintf_internal_r+0x1848>
 4002f24:	42000204 	addi	r8,r8,8
 4002f28:	8c7ffc04 	addi	r17,r17,-16
 4002f2c:	b440e20e 	bge	r22,r17,40032b8 <___svfprintf_internal_r+0x1bd0>
 4002f30:	18c00404 	addi	r3,r3,16
 4002f34:	10800044 	addi	r2,r2,1
 4002f38:	45400015 	stw	r21,0(r8)
 4002f3c:	45800115 	stw	r22,4(r8)
 4002f40:	d8c02015 	stw	r3,128(sp)
 4002f44:	d8801f15 	stw	r2,124(sp)
 4002f48:	e0bff60e 	bge	fp,r2,4002f24 <__alt_mem_onchip_memory2_0+0xfc000f24>
 4002f4c:	d9801e04 	addi	r6,sp,120
 4002f50:	a00b883a 	mov	r5,r20
 4002f54:	9809883a 	mov	r4,r19
 4002f58:	400adc00 	call	400adc0 <__ssprint_r>
 4002f5c:	103ac71e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002f60:	d8c02017 	ldw	r3,128(sp)
 4002f64:	d8801f17 	ldw	r2,124(sp)
 4002f68:	da000404 	addi	r8,sp,16
 4002f6c:	003fee06 	br	4002f28 <__alt_mem_onchip_memory2_0+0xfc000f28>
 4002f70:	d8c02d17 	ldw	r3,180(sp)
 4002f74:	d9002917 	ldw	r4,164(sp)
 4002f78:	002d883a 	mov	r22,zero
 4002f7c:	18800104 	addi	r2,r3,4
 4002f80:	1d000017 	ldw	r20,0(r3)
 4002f84:	203e7d0e 	bge	r4,zero,400297c <__alt_mem_onchip_memory2_0+0xfc00097c>
 4002f88:	003eda06 	br	4002af4 <__alt_mem_onchip_memory2_0+0xfc000af4>
 4002f8c:	d9402d17 	ldw	r5,180(sp)
 4002f90:	d8c02917 	ldw	r3,164(sp)
 4002f94:	002d883a 	mov	r22,zero
 4002f98:	28800104 	addi	r2,r5,4
 4002f9c:	2d000017 	ldw	r20,0(r5)
 4002fa0:	183e2d0e 	bge	r3,zero,4002858 <__alt_mem_onchip_memory2_0+0xfc000858>
 4002fa4:	003f6b06 	br	4002d54 <__alt_mem_onchip_memory2_0+0xfc000d54>
 4002fa8:	d8c02d15 	stw	r3,180(sp)
 4002fac:	0039883a 	mov	fp,zero
 4002fb0:	003ed206 	br	4002afc <__alt_mem_onchip_memory2_0+0xfc000afc>
 4002fb4:	bc400043 	ldbu	r17,1(r23)
 4002fb8:	94800814 	ori	r18,r18,32
 4002fbc:	bdc00044 	addi	r23,r23,1
 4002fc0:	8c403fcc 	andi	r17,r17,255
 4002fc4:	8c40201c 	xori	r17,r17,128
 4002fc8:	8c7fe004 	addi	r17,r17,-128
 4002fcc:	003a1a06 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4002fd0:	d9402c17 	ldw	r5,176(sp)
 4002fd4:	d9801e04 	addi	r6,sp,120
 4002fd8:	9809883a 	mov	r4,r19
 4002fdc:	400adc00 	call	400adc0 <__ssprint_r>
 4002fe0:	103aa61e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4002fe4:	d8c02017 	ldw	r3,128(sp)
 4002fe8:	da000404 	addi	r8,sp,16
 4002fec:	003d4a06 	br	4002518 <__alt_mem_onchip_memory2_0+0xfc000518>
 4002ff0:	d9002917 	ldw	r4,164(sp)
 4002ff4:	05bff7c4 	movi	r22,-33
 4002ff8:	00bfffc4 	movi	r2,-1
 4002ffc:	8dac703a 	and	r22,r17,r22
 4003000:	20806a26 	beq	r4,r2,40031ac <___svfprintf_internal_r+0x1ac4>
 4003004:	008011c4 	movi	r2,71
 4003008:	b0813726 	beq	r22,r2,40034e8 <___svfprintf_internal_r+0x1e00>
 400300c:	d9003717 	ldw	r4,220(sp)
 4003010:	90c04014 	ori	r3,r18,256
 4003014:	d8c02b15 	stw	r3,172(sp)
 4003018:	20015d16 	blt	r4,zero,4003590 <___svfprintf_internal_r+0x1ea8>
 400301c:	dd003717 	ldw	r20,220(sp)
 4003020:	d8002a05 	stb	zero,168(sp)
 4003024:	00801984 	movi	r2,102
 4003028:	88814026 	beq	r17,r2,400352c <___svfprintf_internal_r+0x1e44>
 400302c:	00801184 	movi	r2,70
 4003030:	88817126 	beq	r17,r2,40035f8 <___svfprintf_internal_r+0x1f10>
 4003034:	00801144 	movi	r2,69
 4003038:	b0816226 	beq	r22,r2,40035c4 <___svfprintf_internal_r+0x1edc>
 400303c:	d8c02917 	ldw	r3,164(sp)
 4003040:	d8802104 	addi	r2,sp,132
 4003044:	d8800315 	stw	r2,12(sp)
 4003048:	d9403617 	ldw	r5,216(sp)
 400304c:	d8802504 	addi	r2,sp,148
 4003050:	d8800215 	stw	r2,8(sp)
 4003054:	d8802604 	addi	r2,sp,152
 4003058:	d8c00015 	stw	r3,0(sp)
 400305c:	d8800115 	stw	r2,4(sp)
 4003060:	01c00084 	movi	r7,2
 4003064:	a00d883a 	mov	r6,r20
 4003068:	9809883a 	mov	r4,r19
 400306c:	d8c03d15 	stw	r3,244(sp)
 4003070:	da003e15 	stw	r8,248(sp)
 4003074:	4005ee40 	call	4005ee4 <_dtoa_r>
 4003078:	1021883a 	mov	r16,r2
 400307c:	008019c4 	movi	r2,103
 4003080:	d8c03d17 	ldw	r3,244(sp)
 4003084:	da003e17 	ldw	r8,248(sp)
 4003088:	8880e726 	beq	r17,r2,4003428 <___svfprintf_internal_r+0x1d40>
 400308c:	008011c4 	movi	r2,71
 4003090:	8880d426 	beq	r17,r2,40033e4 <___svfprintf_internal_r+0x1cfc>
 4003094:	80f9883a 	add	fp,r16,r3
 4003098:	d9003617 	ldw	r4,216(sp)
 400309c:	000d883a 	mov	r6,zero
 40030a0:	000f883a 	mov	r7,zero
 40030a4:	a00b883a 	mov	r5,r20
 40030a8:	da003e15 	stw	r8,248(sp)
 40030ac:	400fdec0 	call	400fdec <__eqdf2>
 40030b0:	da003e17 	ldw	r8,248(sp)
 40030b4:	1000e426 	beq	r2,zero,4003448 <___svfprintf_internal_r+0x1d60>
 40030b8:	d8802117 	ldw	r2,132(sp)
 40030bc:	1700062e 	bgeu	r2,fp,40030d8 <___svfprintf_internal_r+0x19f0>
 40030c0:	01000c04 	movi	r4,48
 40030c4:	10c00044 	addi	r3,r2,1
 40030c8:	d8c02115 	stw	r3,132(sp)
 40030cc:	11000005 	stb	r4,0(r2)
 40030d0:	d8802117 	ldw	r2,132(sp)
 40030d4:	173ffb36 	bltu	r2,fp,40030c4 <__alt_mem_onchip_memory2_0+0xfc0010c4>
 40030d8:	1405c83a 	sub	r2,r2,r16
 40030dc:	d8803315 	stw	r2,204(sp)
 40030e0:	008011c4 	movi	r2,71
 40030e4:	b080c526 	beq	r22,r2,40033fc <___svfprintf_internal_r+0x1d14>
 40030e8:	00801944 	movi	r2,101
 40030ec:	1441d90e 	bge	r2,r17,4003854 <___svfprintf_internal_r+0x216c>
 40030f0:	d8c02617 	ldw	r3,152(sp)
 40030f4:	00801984 	movi	r2,102
 40030f8:	d8c03215 	stw	r3,200(sp)
 40030fc:	88813426 	beq	r17,r2,40035d0 <___svfprintf_internal_r+0x1ee8>
 4003100:	d8c03217 	ldw	r3,200(sp)
 4003104:	d9003317 	ldw	r4,204(sp)
 4003108:	19012516 	blt	r3,r4,40035a0 <___svfprintf_internal_r+0x1eb8>
 400310c:	9480004c 	andi	r18,r18,1
 4003110:	9001841e 	bne	r18,zero,4003724 <___svfprintf_internal_r+0x203c>
 4003114:	1805883a 	mov	r2,r3
 4003118:	1801cc16 	blt	r3,zero,400384c <___svfprintf_internal_r+0x2164>
 400311c:	d8c03217 	ldw	r3,200(sp)
 4003120:	044019c4 	movi	r17,103
 4003124:	d8c02e15 	stw	r3,184(sp)
 4003128:	df002a07 	ldb	fp,168(sp)
 400312c:	e000a61e 	bne	fp,zero,40033c8 <___svfprintf_internal_r+0x1ce0>
 4003130:	df002783 	ldbu	fp,158(sp)
 4003134:	d8802a15 	stw	r2,168(sp)
 4003138:	dc802b17 	ldw	r18,172(sp)
 400313c:	d8002915 	stw	zero,164(sp)
 4003140:	003b1706 	br	4001da0 <__alt_mem_onchip_memory2_0+0xfbfffda0>
 4003144:	040100b4 	movhi	r16,1026
 4003148:	8432a404 	addi	r16,r16,-13680
 400314c:	003aa606 	br	4001be8 <__alt_mem_onchip_memory2_0+0xfbfffbe8>
 4003150:	d9003917 	ldw	r4,228(sp)
 4003154:	04001004 	movi	r16,64
 4003158:	800b883a 	mov	r5,r16
 400315c:	40088c40 	call	40088c4 <_malloc_r>
 4003160:	d9002c17 	ldw	r4,176(sp)
 4003164:	20800015 	stw	r2,0(r4)
 4003168:	20800415 	stw	r2,16(r4)
 400316c:	1001cb26 	beq	r2,zero,400389c <___svfprintf_internal_r+0x21b4>
 4003170:	d8802c17 	ldw	r2,176(sp)
 4003174:	14000515 	stw	r16,20(r2)
 4003178:	00397606 	br	4001754 <__alt_mem_onchip_memory2_0+0xfbfff754>
 400317c:	040100b4 	movhi	r16,1026
 4003180:	8432a604 	addi	r16,r16,-13672
 4003184:	003ee106 	br	4002d0c <__alt_mem_onchip_memory2_0+0xfc000d0c>
 4003188:	d9402c17 	ldw	r5,176(sp)
 400318c:	d9801e04 	addi	r6,sp,120
 4003190:	9809883a 	mov	r4,r19
 4003194:	400adc00 	call	400adc0 <__ssprint_r>
 4003198:	103a381e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 400319c:	dc402617 	ldw	r17,152(sp)
 40031a0:	d8c02017 	ldw	r3,128(sp)
 40031a4:	da000404 	addi	r8,sp,16
 40031a8:	003f4306 	br	4002eb8 <__alt_mem_onchip_memory2_0+0xfc000eb8>
 40031ac:	01400184 	movi	r5,6
 40031b0:	d9402915 	stw	r5,164(sp)
 40031b4:	003f9506 	br	400300c <__alt_mem_onchip_memory2_0+0xfc00100c>
 40031b8:	d9002d17 	ldw	r4,180(sp)
 40031bc:	25000017 	ldw	r20,0(r4)
 40031c0:	21000104 	addi	r4,r4,4
 40031c4:	d9002d15 	stw	r4,180(sp)
 40031c8:	a02dd7fa 	srai	r22,r20,31
 40031cc:	b005883a 	mov	r2,r22
 40031d0:	003a9b06 	br	4001c40 <__alt_mem_onchip_memory2_0+0xfbfffc40>
 40031d4:	d9402d17 	ldw	r5,180(sp)
 40031d8:	002d883a 	mov	r22,zero
 40031dc:	2d000017 	ldw	r20,0(r5)
 40031e0:	29400104 	addi	r5,r5,4
 40031e4:	d9402d15 	stw	r5,180(sp)
 40031e8:	003bf906 	br	40021d0 <__alt_mem_onchip_memory2_0+0xfc0001d0>
 40031ec:	9480100c 	andi	r18,r18,64
 40031f0:	90006e26 	beq	r18,zero,40033ac <___svfprintf_internal_r+0x1cc4>
 40031f4:	d9002d17 	ldw	r4,180(sp)
 40031f8:	d9402f17 	ldw	r5,188(sp)
 40031fc:	20800017 	ldw	r2,0(r4)
 4003200:	21000104 	addi	r4,r4,4
 4003204:	d9002d15 	stw	r4,180(sp)
 4003208:	1140000d 	sth	r5,0(r2)
 400320c:	00396106 	br	4001794 <__alt_mem_onchip_memory2_0+0xfbfff794>
 4003210:	d9402c17 	ldw	r5,176(sp)
 4003214:	d9801e04 	addi	r6,sp,120
 4003218:	9809883a 	mov	r4,r19
 400321c:	400adc00 	call	400adc0 <__ssprint_r>
 4003220:	103a161e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4003224:	d8c02017 	ldw	r3,128(sp)
 4003228:	d8801f17 	ldw	r2,124(sp)
 400322c:	da000404 	addi	r8,sp,16
 4003230:	d9403317 	ldw	r5,204(sp)
 4003234:	10800044 	addi	r2,r2,1
 4003238:	44000015 	stw	r16,0(r8)
 400323c:	28c7883a 	add	r3,r5,r3
 4003240:	003b7706 	br	4002020 <__alt_mem_onchip_memory2_0+0xfc000020>
 4003244:	8009883a 	mov	r4,r16
 4003248:	da003e15 	stw	r8,248(sp)
 400324c:	40016500 	call	4001650 <strlen>
 4003250:	d8802e15 	stw	r2,184(sp)
 4003254:	da003e17 	ldw	r8,248(sp)
 4003258:	103c280e 	bge	r2,zero,40022fc <__alt_mem_onchip_memory2_0+0xfc0002fc>
 400325c:	0005883a 	mov	r2,zero
 4003260:	003c2606 	br	40022fc <__alt_mem_onchip_memory2_0+0xfc0002fc>
 4003264:	00bfffc4 	movi	r2,-1
 4003268:	003a0906 	br	4001a90 <__alt_mem_onchip_memory2_0+0xfbfffa90>
 400326c:	010100b4 	movhi	r4,1026
 4003270:	2132b884 	addi	r4,r4,-13598
 4003274:	d9003515 	stw	r4,212(sp)
 4003278:	003b0606 	br	4001e94 <__alt_mem_onchip_memory2_0+0xfbfffe94>
 400327c:	013fffc4 	movi	r4,-1
 4003280:	003a2706 	br	4001b20 <__alt_mem_onchip_memory2_0+0xfbfffb20>
 4003284:	d9402c17 	ldw	r5,176(sp)
 4003288:	d9801e04 	addi	r6,sp,120
 400328c:	9809883a 	mov	r4,r19
 4003290:	400adc00 	call	400adc0 <__ssprint_r>
 4003294:	1039f91e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4003298:	d8c02017 	ldw	r3,128(sp)
 400329c:	da000404 	addi	r8,sp,16
 40032a0:	003d8406 	br	40028b4 <__alt_mem_onchip_memory2_0+0xfc0008b4>
 40032a4:	0023883a 	mov	r17,zero
 40032a8:	003d8306 	br	40028b8 <__alt_mem_onchip_memory2_0+0xfc0008b8>
 40032ac:	010100b4 	movhi	r4,1026
 40032b0:	2132b484 	addi	r4,r4,-13614
 40032b4:	d9002b15 	stw	r4,172(sp)
 40032b8:	d9002b17 	ldw	r4,172(sp)
 40032bc:	1c47883a 	add	r3,r3,r17
 40032c0:	10800044 	addi	r2,r2,1
 40032c4:	41000015 	stw	r4,0(r8)
 40032c8:	44400115 	stw	r17,4(r8)
 40032cc:	d8c02015 	stw	r3,128(sp)
 40032d0:	d8801f15 	stw	r2,124(sp)
 40032d4:	010001c4 	movi	r4,7
 40032d8:	20bfcd16 	blt	r4,r2,4003210 <__alt_mem_onchip_memory2_0+0xfc001210>
 40032dc:	42000204 	addi	r8,r8,8
 40032e0:	003fd306 	br	4003230 <__alt_mem_onchip_memory2_0+0xfc001230>
 40032e4:	d9402c17 	ldw	r5,176(sp)
 40032e8:	d9801e04 	addi	r6,sp,120
 40032ec:	9809883a 	mov	r4,r19
 40032f0:	400adc00 	call	400adc0 <__ssprint_r>
 40032f4:	1039e11e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 40032f8:	d8802617 	ldw	r2,152(sp)
 40032fc:	d8c02017 	ldw	r3,128(sp)
 4003300:	da000404 	addi	r8,sp,16
 4003304:	003e1c06 	br	4002b78 <__alt_mem_onchip_memory2_0+0xfc000b78>
 4003308:	d8802917 	ldw	r2,164(sp)
 400330c:	00c00184 	movi	r3,6
 4003310:	1880012e 	bgeu	r3,r2,4003318 <___svfprintf_internal_r+0x1c30>
 4003314:	1805883a 	mov	r2,r3
 4003318:	d8802e15 	stw	r2,184(sp)
 400331c:	1000f316 	blt	r2,zero,40036ec <___svfprintf_internal_r+0x2004>
 4003320:	040100b4 	movhi	r16,1026
 4003324:	d8802a15 	stw	r2,168(sp)
 4003328:	dd002d15 	stw	r20,180(sp)
 400332c:	d8002915 	stw	zero,164(sp)
 4003330:	d8003215 	stw	zero,200(sp)
 4003334:	8432b204 	addi	r16,r16,-13624
 4003338:	0039883a 	mov	fp,zero
 400333c:	003a9f06 	br	4001dbc <__alt_mem_onchip_memory2_0+0xfbfffdbc>
 4003340:	010100b4 	movhi	r4,1026
 4003344:	2132b884 	addi	r4,r4,-13598
 4003348:	d9003515 	stw	r4,212(sp)
 400334c:	003b5f06 	br	40020cc <__alt_mem_onchip_memory2_0+0xfc0000cc>
 4003350:	d9402c17 	ldw	r5,176(sp)
 4003354:	d9801e04 	addi	r6,sp,120
 4003358:	9809883a 	mov	r4,r19
 400335c:	400adc00 	call	400adc0 <__ssprint_r>
 4003360:	1039c61e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 4003364:	d8802617 	ldw	r2,152(sp)
 4003368:	d9403317 	ldw	r5,204(sp)
 400336c:	d8c02017 	ldw	r3,128(sp)
 4003370:	da000404 	addi	r8,sp,16
 4003374:	2885c83a 	sub	r2,r5,r2
 4003378:	003e1006 	br	4002bbc <__alt_mem_onchip_memory2_0+0xfc000bbc>
 400337c:	00800044 	movi	r2,1
 4003380:	10803fcc 	andi	r2,r2,255
 4003384:	00c00044 	movi	r3,1
 4003388:	10fa3526 	beq	r2,r3,4001c60 <__alt_mem_onchip_memory2_0+0xfbfffc60>
 400338c:	00c00084 	movi	r3,2
 4003390:	10fb9e26 	beq	r2,r3,400220c <__alt_mem_onchip_memory2_0+0xfc00020c>
 4003394:	003a6406 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4003398:	0021883a 	mov	r16,zero
 400339c:	003e0806 	br	4002bc0 <__alt_mem_onchip_memory2_0+0xfc000bc0>
 40033a0:	07000b44 	movi	fp,45
 40033a4:	df002785 	stb	fp,158(sp)
 40033a8:	003a0b06 	br	4001bd8 <__alt_mem_onchip_memory2_0+0xfbfffbd8>
 40033ac:	d8c02d17 	ldw	r3,180(sp)
 40033b0:	d9002f17 	ldw	r4,188(sp)
 40033b4:	18800017 	ldw	r2,0(r3)
 40033b8:	18c00104 	addi	r3,r3,4
 40033bc:	d8c02d15 	stw	r3,180(sp)
 40033c0:	11000015 	stw	r4,0(r2)
 40033c4:	0038f306 	br	4001794 <__alt_mem_onchip_memory2_0+0xfbfff794>
 40033c8:	00c00b44 	movi	r3,45
 40033cc:	d8c02785 	stb	r3,158(sp)
 40033d0:	d8802a15 	stw	r2,168(sp)
 40033d4:	dc802b17 	ldw	r18,172(sp)
 40033d8:	d8002915 	stw	zero,164(sp)
 40033dc:	07000b44 	movi	fp,45
 40033e0:	003a7306 	br	4001db0 <__alt_mem_onchip_memory2_0+0xfbfffdb0>
 40033e4:	9080004c 	andi	r2,r18,1
 40033e8:	1000941e 	bne	r2,zero,400363c <___svfprintf_internal_r+0x1f54>
 40033ec:	d8802117 	ldw	r2,132(sp)
 40033f0:	1405c83a 	sub	r2,r2,r16
 40033f4:	d8803315 	stw	r2,204(sp)
 40033f8:	b441161e 	bne	r22,r17,4003854 <___svfprintf_internal_r+0x216c>
 40033fc:	dd802617 	ldw	r22,152(sp)
 4003400:	00bfff44 	movi	r2,-3
 4003404:	b0801a16 	blt	r22,r2,4003470 <___svfprintf_internal_r+0x1d88>
 4003408:	d9402917 	ldw	r5,164(sp)
 400340c:	2d801816 	blt	r5,r22,4003470 <___svfprintf_internal_r+0x1d88>
 4003410:	dd803215 	stw	r22,200(sp)
 4003414:	003f3a06 	br	4003100 <__alt_mem_onchip_memory2_0+0xfc001100>
 4003418:	1025883a 	mov	r18,r2
 400341c:	0039883a 	mov	fp,zero
 4003420:	00800084 	movi	r2,2
 4003424:	003fd606 	br	4003380 <__alt_mem_onchip_memory2_0+0xfc001380>
 4003428:	9080004c 	andi	r2,r18,1
 400342c:	103f191e 	bne	r2,zero,4003094 <__alt_mem_onchip_memory2_0+0xfc001094>
 4003430:	d8802117 	ldw	r2,132(sp)
 4003434:	003f2806 	br	40030d8 <__alt_mem_onchip_memory2_0+0xfc0010d8>
 4003438:	010100b4 	movhi	r4,1026
 400343c:	2132b484 	addi	r4,r4,-13614
 4003440:	d9002b15 	stw	r4,172(sp)
 4003444:	003c7c06 	br	4002638 <__alt_mem_onchip_memory2_0+0xfc000638>
 4003448:	e005883a 	mov	r2,fp
 400344c:	003f2206 	br	40030d8 <__alt_mem_onchip_memory2_0+0xfc0010d8>
 4003450:	d9402917 	ldw	r5,164(sp)
 4003454:	df002783 	ldbu	fp,158(sp)
 4003458:	dd002d15 	stw	r20,180(sp)
 400345c:	d9402a15 	stw	r5,168(sp)
 4003460:	d9402e15 	stw	r5,184(sp)
 4003464:	d8002915 	stw	zero,164(sp)
 4003468:	d8003215 	stw	zero,200(sp)
 400346c:	003a4c06 	br	4001da0 <__alt_mem_onchip_memory2_0+0xfbfffda0>
 4003470:	8c7fff84 	addi	r17,r17,-2
 4003474:	b5bfffc4 	addi	r22,r22,-1
 4003478:	dd802615 	stw	r22,152(sp)
 400347c:	dc4022c5 	stb	r17,139(sp)
 4003480:	b000c316 	blt	r22,zero,4003790 <___svfprintf_internal_r+0x20a8>
 4003484:	00800ac4 	movi	r2,43
 4003488:	d8802305 	stb	r2,140(sp)
 400348c:	00800244 	movi	r2,9
 4003490:	15806e16 	blt	r2,r22,400364c <___svfprintf_internal_r+0x1f64>
 4003494:	00800c04 	movi	r2,48
 4003498:	b5800c04 	addi	r22,r22,48
 400349c:	d8802345 	stb	r2,141(sp)
 40034a0:	dd802385 	stb	r22,142(sp)
 40034a4:	d88023c4 	addi	r2,sp,143
 40034a8:	df0022c4 	addi	fp,sp,139
 40034ac:	d8c03317 	ldw	r3,204(sp)
 40034b0:	1739c83a 	sub	fp,r2,fp
 40034b4:	d9003317 	ldw	r4,204(sp)
 40034b8:	e0c7883a 	add	r3,fp,r3
 40034bc:	df003b15 	stw	fp,236(sp)
 40034c0:	d8c02e15 	stw	r3,184(sp)
 40034c4:	00800044 	movi	r2,1
 40034c8:	1100b70e 	bge	r2,r4,40037a8 <___svfprintf_internal_r+0x20c0>
 40034cc:	d8c02e17 	ldw	r3,184(sp)
 40034d0:	18c00044 	addi	r3,r3,1
 40034d4:	d8c02e15 	stw	r3,184(sp)
 40034d8:	1805883a 	mov	r2,r3
 40034dc:	1800b016 	blt	r3,zero,40037a0 <___svfprintf_internal_r+0x20b8>
 40034e0:	d8003215 	stw	zero,200(sp)
 40034e4:	003f1006 	br	4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 40034e8:	d8802917 	ldw	r2,164(sp)
 40034ec:	103ec71e 	bne	r2,zero,400300c <__alt_mem_onchip_memory2_0+0xfc00100c>
 40034f0:	dc002915 	stw	r16,164(sp)
 40034f4:	003ec506 	br	400300c <__alt_mem_onchip_memory2_0+0xfc00100c>
 40034f8:	d9402c17 	ldw	r5,176(sp)
 40034fc:	d9801e04 	addi	r6,sp,120
 4003500:	9809883a 	mov	r4,r19
 4003504:	400adc00 	call	400adc0 <__ssprint_r>
 4003508:	10395c1e 	bne	r2,zero,4001a7c <__alt_mem_onchip_memory2_0+0xfbfffa7c>
 400350c:	dc402617 	ldw	r17,152(sp)
 4003510:	d8c02017 	ldw	r3,128(sp)
 4003514:	d8801f17 	ldw	r2,124(sp)
 4003518:	da000404 	addi	r8,sp,16
 400351c:	003e7706 	br	4002efc <__alt_mem_onchip_memory2_0+0xfc000efc>
 4003520:	582f883a 	mov	r23,r11
 4003524:	d8002915 	stw	zero,164(sp)
 4003528:	0038c406 	br	400183c <__alt_mem_onchip_memory2_0+0xfbfff83c>
 400352c:	d8c02917 	ldw	r3,164(sp)
 4003530:	d8802104 	addi	r2,sp,132
 4003534:	d8800315 	stw	r2,12(sp)
 4003538:	d9403617 	ldw	r5,216(sp)
 400353c:	d8802504 	addi	r2,sp,148
 4003540:	d8800215 	stw	r2,8(sp)
 4003544:	d8802604 	addi	r2,sp,152
 4003548:	d8c00015 	stw	r3,0(sp)
 400354c:	9809883a 	mov	r4,r19
 4003550:	d8800115 	stw	r2,4(sp)
 4003554:	01c000c4 	movi	r7,3
 4003558:	a00d883a 	mov	r6,r20
 400355c:	da003e15 	stw	r8,248(sp)
 4003560:	4005ee40 	call	4005ee4 <_dtoa_r>
 4003564:	d9002917 	ldw	r4,164(sp)
 4003568:	da003e17 	ldw	r8,248(sp)
 400356c:	1021883a 	mov	r16,r2
 4003570:	1139883a 	add	fp,r2,r4
 4003574:	2007883a 	mov	r3,r4
 4003578:	81000007 	ldb	r4,0(r16)
 400357c:	00800c04 	movi	r2,48
 4003580:	20806f26 	beq	r4,r2,4003740 <___svfprintf_internal_r+0x2058>
 4003584:	d8c02617 	ldw	r3,152(sp)
 4003588:	e0f9883a 	add	fp,fp,r3
 400358c:	003ec206 	br	4003098 <__alt_mem_onchip_memory2_0+0xfc001098>
 4003590:	00c00b44 	movi	r3,45
 4003594:	2520003c 	xorhi	r20,r4,32768
 4003598:	d8c02a05 	stb	r3,168(sp)
 400359c:	003ea106 	br	4003024 <__alt_mem_onchip_memory2_0+0xfc001024>
 40035a0:	d8c03217 	ldw	r3,200(sp)
 40035a4:	00c0890e 	bge	zero,r3,40037cc <___svfprintf_internal_r+0x20e4>
 40035a8:	00800044 	movi	r2,1
 40035ac:	d9003317 	ldw	r4,204(sp)
 40035b0:	1105883a 	add	r2,r2,r4
 40035b4:	d8802e15 	stw	r2,184(sp)
 40035b8:	10005f16 	blt	r2,zero,4003738 <___svfprintf_internal_r+0x2050>
 40035bc:	044019c4 	movi	r17,103
 40035c0:	003ed906 	br	4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 40035c4:	d9002917 	ldw	r4,164(sp)
 40035c8:	20c00044 	addi	r3,r4,1
 40035cc:	003e9c06 	br	4003040 <__alt_mem_onchip_memory2_0+0xfc001040>
 40035d0:	d9002917 	ldw	r4,164(sp)
 40035d4:	00c0680e 	bge	zero,r3,4003778 <___svfprintf_internal_r+0x2090>
 40035d8:	2000461e 	bne	r4,zero,40036f4 <___svfprintf_internal_r+0x200c>
 40035dc:	9480004c 	andi	r18,r18,1
 40035e0:	9000441e 	bne	r18,zero,40036f4 <___svfprintf_internal_r+0x200c>
 40035e4:	1805883a 	mov	r2,r3
 40035e8:	1800a016 	blt	r3,zero,400386c <___svfprintf_internal_r+0x2184>
 40035ec:	d8c03217 	ldw	r3,200(sp)
 40035f0:	d8c02e15 	stw	r3,184(sp)
 40035f4:	003ecc06 	br	4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 40035f8:	d9402917 	ldw	r5,164(sp)
 40035fc:	d8802104 	addi	r2,sp,132
 4003600:	d8800315 	stw	r2,12(sp)
 4003604:	d9400015 	stw	r5,0(sp)
 4003608:	d8802504 	addi	r2,sp,148
 400360c:	d9403617 	ldw	r5,216(sp)
 4003610:	d8800215 	stw	r2,8(sp)
 4003614:	d8802604 	addi	r2,sp,152
 4003618:	d8800115 	stw	r2,4(sp)
 400361c:	01c000c4 	movi	r7,3
 4003620:	a00d883a 	mov	r6,r20
 4003624:	9809883a 	mov	r4,r19
 4003628:	da003e15 	stw	r8,248(sp)
 400362c:	4005ee40 	call	4005ee4 <_dtoa_r>
 4003630:	d8c02917 	ldw	r3,164(sp)
 4003634:	da003e17 	ldw	r8,248(sp)
 4003638:	1021883a 	mov	r16,r2
 400363c:	00801184 	movi	r2,70
 4003640:	80f9883a 	add	fp,r16,r3
 4003644:	88bfcc26 	beq	r17,r2,4003578 <__alt_mem_onchip_memory2_0+0xfc001578>
 4003648:	003e9306 	br	4003098 <__alt_mem_onchip_memory2_0+0xfc001098>
 400364c:	df0022c4 	addi	fp,sp,139
 4003650:	dc002915 	stw	r16,164(sp)
 4003654:	9829883a 	mov	r20,r19
 4003658:	e021883a 	mov	r16,fp
 400365c:	4027883a 	mov	r19,r8
 4003660:	b009883a 	mov	r4,r22
 4003664:	01400284 	movi	r5,10
 4003668:	4000d480 	call	4000d48 <__modsi3>
 400366c:	10800c04 	addi	r2,r2,48
 4003670:	843fffc4 	addi	r16,r16,-1
 4003674:	b009883a 	mov	r4,r22
 4003678:	01400284 	movi	r5,10
 400367c:	80800005 	stb	r2,0(r16)
 4003680:	4000cc40 	call	4000cc4 <__divsi3>
 4003684:	102d883a 	mov	r22,r2
 4003688:	00800244 	movi	r2,9
 400368c:	15bff416 	blt	r2,r22,4003660 <__alt_mem_onchip_memory2_0+0xfc001660>
 4003690:	9811883a 	mov	r8,r19
 4003694:	b0800c04 	addi	r2,r22,48
 4003698:	a027883a 	mov	r19,r20
 400369c:	8029883a 	mov	r20,r16
 40036a0:	a17fffc4 	addi	r5,r20,-1
 40036a4:	a0bfffc5 	stb	r2,-1(r20)
 40036a8:	dc002917 	ldw	r16,164(sp)
 40036ac:	2f00752e 	bgeu	r5,fp,4003884 <___svfprintf_internal_r+0x219c>
 40036b0:	d9c02384 	addi	r7,sp,142
 40036b4:	3d0fc83a 	sub	r7,r7,r20
 40036b8:	d9002344 	addi	r4,sp,141
 40036bc:	e1cf883a 	add	r7,fp,r7
 40036c0:	00000106 	br	40036c8 <___svfprintf_internal_r+0x1fe0>
 40036c4:	28800003 	ldbu	r2,0(r5)
 40036c8:	20800005 	stb	r2,0(r4)
 40036cc:	21000044 	addi	r4,r4,1
 40036d0:	29400044 	addi	r5,r5,1
 40036d4:	21fffb1e 	bne	r4,r7,40036c4 <__alt_mem_onchip_memory2_0+0xfc0016c4>
 40036d8:	d8802304 	addi	r2,sp,140
 40036dc:	1505c83a 	sub	r2,r2,r20
 40036e0:	d8c02344 	addi	r3,sp,141
 40036e4:	1885883a 	add	r2,r3,r2
 40036e8:	003f7006 	br	40034ac <__alt_mem_onchip_memory2_0+0xfc0014ac>
 40036ec:	0005883a 	mov	r2,zero
 40036f0:	003f0b06 	br	4003320 <__alt_mem_onchip_memory2_0+0xfc001320>
 40036f4:	d9002917 	ldw	r4,164(sp)
 40036f8:	d8c03217 	ldw	r3,200(sp)
 40036fc:	20800044 	addi	r2,r4,1
 4003700:	1885883a 	add	r2,r3,r2
 4003704:	d8802e15 	stw	r2,184(sp)
 4003708:	103e870e 	bge	r2,zero,4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 400370c:	0005883a 	mov	r2,zero
 4003710:	003e8506 	br	4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 4003714:	010100b4 	movhi	r4,1026
 4003718:	2132b484 	addi	r4,r4,-13614
 400371c:	d9002b15 	stw	r4,172(sp)
 4003720:	003cc506 	br	4002a38 <__alt_mem_onchip_memory2_0+0xfc000a38>
 4003724:	d8c03217 	ldw	r3,200(sp)
 4003728:	18c00044 	addi	r3,r3,1
 400372c:	d8c02e15 	stw	r3,184(sp)
 4003730:	1805883a 	mov	r2,r3
 4003734:	183fa10e 	bge	r3,zero,40035bc <__alt_mem_onchip_memory2_0+0xfc0015bc>
 4003738:	0005883a 	mov	r2,zero
 400373c:	003f9f06 	br	40035bc <__alt_mem_onchip_memory2_0+0xfc0015bc>
 4003740:	d9003617 	ldw	r4,216(sp)
 4003744:	000d883a 	mov	r6,zero
 4003748:	000f883a 	mov	r7,zero
 400374c:	a00b883a 	mov	r5,r20
 4003750:	d8c03d15 	stw	r3,244(sp)
 4003754:	da003e15 	stw	r8,248(sp)
 4003758:	400fdec0 	call	400fdec <__eqdf2>
 400375c:	d8c03d17 	ldw	r3,244(sp)
 4003760:	da003e17 	ldw	r8,248(sp)
 4003764:	103f8726 	beq	r2,zero,4003584 <__alt_mem_onchip_memory2_0+0xfc001584>
 4003768:	00800044 	movi	r2,1
 400376c:	10c7c83a 	sub	r3,r2,r3
 4003770:	d8c02615 	stw	r3,152(sp)
 4003774:	003f8406 	br	4003588 <__alt_mem_onchip_memory2_0+0xfc001588>
 4003778:	20000e1e 	bne	r4,zero,40037b4 <___svfprintf_internal_r+0x20cc>
 400377c:	9480004c 	andi	r18,r18,1
 4003780:	90000c1e 	bne	r18,zero,40037b4 <___svfprintf_internal_r+0x20cc>
 4003784:	00800044 	movi	r2,1
 4003788:	d8802e15 	stw	r2,184(sp)
 400378c:	003e6606 	br	4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 4003790:	00800b44 	movi	r2,45
 4003794:	05adc83a 	sub	r22,zero,r22
 4003798:	d8802305 	stb	r2,140(sp)
 400379c:	003f3b06 	br	400348c <__alt_mem_onchip_memory2_0+0xfc00148c>
 40037a0:	0005883a 	mov	r2,zero
 40037a4:	003f4e06 	br	40034e0 <__alt_mem_onchip_memory2_0+0xfc0014e0>
 40037a8:	90a4703a 	and	r18,r18,r2
 40037ac:	903f4a26 	beq	r18,zero,40034d8 <__alt_mem_onchip_memory2_0+0xfc0014d8>
 40037b0:	003f4606 	br	40034cc <__alt_mem_onchip_memory2_0+0xfc0014cc>
 40037b4:	d8c02917 	ldw	r3,164(sp)
 40037b8:	18c00084 	addi	r3,r3,2
 40037bc:	d8c02e15 	stw	r3,184(sp)
 40037c0:	1805883a 	mov	r2,r3
 40037c4:	183e580e 	bge	r3,zero,4003128 <__alt_mem_onchip_memory2_0+0xfc001128>
 40037c8:	003fd006 	br	400370c <__alt_mem_onchip_memory2_0+0xfc00170c>
 40037cc:	00800084 	movi	r2,2
 40037d0:	10c5c83a 	sub	r2,r2,r3
 40037d4:	003f7506 	br	40035ac <__alt_mem_onchip_memory2_0+0xfc0015ac>
 40037d8:	d8802d17 	ldw	r2,180(sp)
 40037dc:	d9002d17 	ldw	r4,180(sp)
 40037e0:	bc400043 	ldbu	r17,1(r23)
 40037e4:	10800017 	ldw	r2,0(r2)
 40037e8:	582f883a 	mov	r23,r11
 40037ec:	d8802915 	stw	r2,164(sp)
 40037f0:	20800104 	addi	r2,r4,4
 40037f4:	d9002917 	ldw	r4,164(sp)
 40037f8:	d8802d15 	stw	r2,180(sp)
 40037fc:	203df00e 	bge	r4,zero,4002fc0 <__alt_mem_onchip_memory2_0+0xfc000fc0>
 4003800:	8c403fcc 	andi	r17,r17,255
 4003804:	00bfffc4 	movi	r2,-1
 4003808:	8c40201c 	xori	r17,r17,128
 400380c:	d8802915 	stw	r2,164(sp)
 4003810:	8c7fe004 	addi	r17,r17,-128
 4003814:	00380806 	br	4001838 <__alt_mem_onchip_memory2_0+0xfbfff838>
 4003818:	9080004c 	andi	r2,r18,1
 400381c:	0039883a 	mov	fp,zero
 4003820:	10000726 	beq	r2,zero,4003840 <___svfprintf_internal_r+0x2158>
 4003824:	d8c02817 	ldw	r3,160(sp)
 4003828:	dc001dc4 	addi	r16,sp,119
 400382c:	00800c04 	movi	r2,48
 4003830:	1c07c83a 	sub	r3,r3,r16
 4003834:	d8801dc5 	stb	r2,119(sp)
 4003838:	d8c02e15 	stw	r3,184(sp)
 400383c:	00395206 	br	4001d88 <__alt_mem_onchip_memory2_0+0xfbfffd88>
 4003840:	d8002e15 	stw	zero,184(sp)
 4003844:	dc001e04 	addi	r16,sp,120
 4003848:	00394f06 	br	4001d88 <__alt_mem_onchip_memory2_0+0xfbfffd88>
 400384c:	0005883a 	mov	r2,zero
 4003850:	003e3206 	br	400311c <__alt_mem_onchip_memory2_0+0xfc00111c>
 4003854:	dd802617 	ldw	r22,152(sp)
 4003858:	003f0606 	br	4003474 <__alt_mem_onchip_memory2_0+0xfc001474>
 400385c:	d9c02785 	stb	r7,158(sp)
 4003860:	003a5106 	br	40021a8 <__alt_mem_onchip_memory2_0+0xfc0001a8>
 4003864:	d9c02785 	stb	r7,158(sp)
 4003868:	003a3706 	br	4002148 <__alt_mem_onchip_memory2_0+0xfc000148>
 400386c:	0005883a 	mov	r2,zero
 4003870:	003f5e06 	br	40035ec <__alt_mem_onchip_memory2_0+0xfc0015ec>
 4003874:	d9c02785 	stb	r7,158(sp)
 4003878:	00391706 	br	4001cd8 <__alt_mem_onchip_memory2_0+0xfbfffcd8>
 400387c:	d9c02785 	stb	r7,158(sp)
 4003880:	0038e606 	br	4001c1c <__alt_mem_onchip_memory2_0+0xfbfffc1c>
 4003884:	d8802344 	addi	r2,sp,141
 4003888:	003f0806 	br	40034ac <__alt_mem_onchip_memory2_0+0xfc0014ac>
 400388c:	d9c02785 	stb	r7,158(sp)
 4003890:	0038b706 	br	4001b70 <__alt_mem_onchip_memory2_0+0xfbfffb70>
 4003894:	d9c02785 	stb	r7,158(sp)
 4003898:	003adc06 	br	400240c <__alt_mem_onchip_memory2_0+0xfc00040c>
 400389c:	d9403917 	ldw	r5,228(sp)
 40038a0:	00800304 	movi	r2,12
 40038a4:	28800015 	stw	r2,0(r5)
 40038a8:	00bfffc4 	movi	r2,-1
 40038ac:	00387806 	br	4001a90 <__alt_mem_onchip_memory2_0+0xfbfffa90>
 40038b0:	d9c02785 	stb	r7,158(sp)
 40038b4:	003abf06 	br	40023b4 <__alt_mem_onchip_memory2_0+0xfc0003b4>
 40038b8:	d9c02785 	stb	r7,158(sp)
 40038bc:	003a9b06 	br	400232c <__alt_mem_onchip_memory2_0+0xfc00032c>

040038c0 <___vfprintf_internal_r>:
 40038c0:	deffb804 	addi	sp,sp,-288
 40038c4:	dfc04715 	stw	ra,284(sp)
 40038c8:	ddc04515 	stw	r23,276(sp)
 40038cc:	dd404315 	stw	r21,268(sp)
 40038d0:	d9002c15 	stw	r4,176(sp)
 40038d4:	282f883a 	mov	r23,r5
 40038d8:	302b883a 	mov	r21,r6
 40038dc:	d9c02d15 	stw	r7,180(sp)
 40038e0:	df004615 	stw	fp,280(sp)
 40038e4:	dd804415 	stw	r22,272(sp)
 40038e8:	dd004215 	stw	r20,264(sp)
 40038ec:	dcc04115 	stw	r19,260(sp)
 40038f0:	dc804015 	stw	r18,256(sp)
 40038f4:	dc403f15 	stw	r17,252(sp)
 40038f8:	dc003e15 	stw	r16,248(sp)
 40038fc:	40086d80 	call	40086d8 <_localeconv_r>
 4003900:	10800017 	ldw	r2,0(r2)
 4003904:	1009883a 	mov	r4,r2
 4003908:	d8803415 	stw	r2,208(sp)
 400390c:	40016500 	call	4001650 <strlen>
 4003910:	d8803715 	stw	r2,220(sp)
 4003914:	d8802c17 	ldw	r2,176(sp)
 4003918:	10000226 	beq	r2,zero,4003924 <___vfprintf_internal_r+0x64>
 400391c:	10800e17 	ldw	r2,56(r2)
 4003920:	1000f926 	beq	r2,zero,4003d08 <___vfprintf_internal_r+0x448>
 4003924:	b880030b 	ldhu	r2,12(r23)
 4003928:	10c8000c 	andi	r3,r2,8192
 400392c:	1800061e 	bne	r3,zero,4003948 <___vfprintf_internal_r+0x88>
 4003930:	b9001917 	ldw	r4,100(r23)
 4003934:	00f7ffc4 	movi	r3,-8193
 4003938:	10880014 	ori	r2,r2,8192
 400393c:	20c6703a 	and	r3,r4,r3
 4003940:	b880030d 	sth	r2,12(r23)
 4003944:	b8c01915 	stw	r3,100(r23)
 4003948:	10c0020c 	andi	r3,r2,8
 400394c:	1800c126 	beq	r3,zero,4003c54 <___vfprintf_internal_r+0x394>
 4003950:	b8c00417 	ldw	r3,16(r23)
 4003954:	1800bf26 	beq	r3,zero,4003c54 <___vfprintf_internal_r+0x394>
 4003958:	1080068c 	andi	r2,r2,26
 400395c:	00c00284 	movi	r3,10
 4003960:	10c0c426 	beq	r2,r3,4003c74 <___vfprintf_internal_r+0x3b4>
 4003964:	d8c00404 	addi	r3,sp,16
 4003968:	050100b4 	movhi	r20,1026
 400396c:	d9001e04 	addi	r4,sp,120
 4003970:	a532bc84 	addi	r20,r20,-13582
 4003974:	d8c01e15 	stw	r3,120(sp)
 4003978:	d8002015 	stw	zero,128(sp)
 400397c:	d8001f15 	stw	zero,124(sp)
 4003980:	d8003315 	stw	zero,204(sp)
 4003984:	d8003615 	stw	zero,216(sp)
 4003988:	d8003815 	stw	zero,224(sp)
 400398c:	1811883a 	mov	r8,r3
 4003990:	d8003915 	stw	zero,228(sp)
 4003994:	d8003a15 	stw	zero,232(sp)
 4003998:	d8002f15 	stw	zero,188(sp)
 400399c:	d9002815 	stw	r4,160(sp)
 40039a0:	a8800007 	ldb	r2,0(r21)
 40039a4:	10027b26 	beq	r2,zero,4004394 <___vfprintf_internal_r+0xad4>
 40039a8:	00c00944 	movi	r3,37
 40039ac:	a821883a 	mov	r16,r21
 40039b0:	10c0021e 	bne	r2,r3,40039bc <___vfprintf_internal_r+0xfc>
 40039b4:	00001406 	br	4003a08 <___vfprintf_internal_r+0x148>
 40039b8:	10c00326 	beq	r2,r3,40039c8 <___vfprintf_internal_r+0x108>
 40039bc:	84000044 	addi	r16,r16,1
 40039c0:	80800007 	ldb	r2,0(r16)
 40039c4:	103ffc1e 	bne	r2,zero,40039b8 <__alt_mem_onchip_memory2_0+0xfc0019b8>
 40039c8:	8563c83a 	sub	r17,r16,r21
 40039cc:	88000e26 	beq	r17,zero,4003a08 <___vfprintf_internal_r+0x148>
 40039d0:	d8c02017 	ldw	r3,128(sp)
 40039d4:	d8801f17 	ldw	r2,124(sp)
 40039d8:	45400015 	stw	r21,0(r8)
 40039dc:	1c47883a 	add	r3,r3,r17
 40039e0:	10800044 	addi	r2,r2,1
 40039e4:	d8c02015 	stw	r3,128(sp)
 40039e8:	44400115 	stw	r17,4(r8)
 40039ec:	d8801f15 	stw	r2,124(sp)
 40039f0:	00c001c4 	movi	r3,7
 40039f4:	1880a716 	blt	r3,r2,4003c94 <___vfprintf_internal_r+0x3d4>
 40039f8:	42000204 	addi	r8,r8,8
 40039fc:	d9402f17 	ldw	r5,188(sp)
 4003a00:	2c4b883a 	add	r5,r5,r17
 4003a04:	d9402f15 	stw	r5,188(sp)
 4003a08:	80800007 	ldb	r2,0(r16)
 4003a0c:	1000a826 	beq	r2,zero,4003cb0 <___vfprintf_internal_r+0x3f0>
 4003a10:	84400047 	ldb	r17,1(r16)
 4003a14:	00bfffc4 	movi	r2,-1
 4003a18:	85400044 	addi	r21,r16,1
 4003a1c:	d8002785 	stb	zero,158(sp)
 4003a20:	0007883a 	mov	r3,zero
 4003a24:	000f883a 	mov	r7,zero
 4003a28:	d8802915 	stw	r2,164(sp)
 4003a2c:	d8003115 	stw	zero,196(sp)
 4003a30:	0025883a 	mov	r18,zero
 4003a34:	01401604 	movi	r5,88
 4003a38:	01800244 	movi	r6,9
 4003a3c:	02800a84 	movi	r10,42
 4003a40:	02401b04 	movi	r9,108
 4003a44:	ad400044 	addi	r21,r21,1
 4003a48:	88bff804 	addi	r2,r17,-32
 4003a4c:	28830436 	bltu	r5,r2,4004660 <___vfprintf_internal_r+0xda0>
 4003a50:	100490ba 	slli	r2,r2,2
 4003a54:	01010034 	movhi	r4,1024
 4003a58:	210e9a04 	addi	r4,r4,14952
 4003a5c:	1105883a 	add	r2,r2,r4
 4003a60:	10800017 	ldw	r2,0(r2)
 4003a64:	1000683a 	jmp	r2
 4003a68:	04004580 	call	400458 <OSCtxSw_SWITCH_PC+0x400418>
 4003a6c:	04004660 	cmpeqi	r16,zero,281
 4003a70:	04004660 	cmpeqi	r16,zero,281
 4003a74:	040045a0 	cmpeqi	r16,zero,278
 4003a78:	04004660 	cmpeqi	r16,zero,281
 4003a7c:	04004660 	cmpeqi	r16,zero,281
 4003a80:	04004660 	cmpeqi	r16,zero,281
 4003a84:	04004660 	cmpeqi	r16,zero,281
 4003a88:	04004660 	cmpeqi	r16,zero,281
 4003a8c:	04004660 	cmpeqi	r16,zero,281
 4003a90:	04003d14 	movui	r16,244
 4003a94:	040044bc 	xorhi	r16,zero,274
 4003a98:	04004660 	cmpeqi	r16,zero,281
 4003a9c:	04003bdc 	xori	r16,zero,239
 4003aa0:	04003d3c 	xorhi	r16,zero,244
 4003aa4:	04004660 	cmpeqi	r16,zero,281
 4003aa8:	04003d7c 	xorhi	r16,zero,245
 4003aac:	04003d88 	cmpgei	r16,zero,246
 4003ab0:	04003d88 	cmpgei	r16,zero,246
 4003ab4:	04003d88 	cmpgei	r16,zero,246
 4003ab8:	04003d88 	cmpgei	r16,zero,246
 4003abc:	04003d88 	cmpgei	r16,zero,246
 4003ac0:	04003d88 	cmpgei	r16,zero,246
 4003ac4:	04003d88 	cmpgei	r16,zero,246
 4003ac8:	04003d88 	cmpgei	r16,zero,246
 4003acc:	04003d88 	cmpgei	r16,zero,246
 4003ad0:	04004660 	cmpeqi	r16,zero,281
 4003ad4:	04004660 	cmpeqi	r16,zero,281
 4003ad8:	04004660 	cmpeqi	r16,zero,281
 4003adc:	04004660 	cmpeqi	r16,zero,281
 4003ae0:	04004660 	cmpeqi	r16,zero,281
 4003ae4:	04004660 	cmpeqi	r16,zero,281
 4003ae8:	04004660 	cmpeqi	r16,zero,281
 4003aec:	04004660 	cmpeqi	r16,zero,281
 4003af0:	04004660 	cmpeqi	r16,zero,281
 4003af4:	04004660 	cmpeqi	r16,zero,281
 4003af8:	04003dbc 	xorhi	r16,zero,246
 4003afc:	04003e78 	rdprs	r16,zero,249
 4003b00:	04004660 	cmpeqi	r16,zero,281
 4003b04:	04003e78 	rdprs	r16,zero,249
 4003b08:	04004660 	cmpeqi	r16,zero,281
 4003b0c:	04004660 	cmpeqi	r16,zero,281
 4003b10:	04004660 	cmpeqi	r16,zero,281
 4003b14:	04004660 	cmpeqi	r16,zero,281
 4003b18:	04003f18 	cmpnei	r16,zero,252
 4003b1c:	04004660 	cmpeqi	r16,zero,281
 4003b20:	04004660 	cmpeqi	r16,zero,281
 4003b24:	04003f24 	muli	r16,zero,252
 4003b28:	04004660 	cmpeqi	r16,zero,281
 4003b2c:	04004660 	cmpeqi	r16,zero,281
 4003b30:	04004660 	cmpeqi	r16,zero,281
 4003b34:	04004660 	cmpeqi	r16,zero,281
 4003b38:	04004660 	cmpeqi	r16,zero,281
 4003b3c:	0400439c 	xori	r16,zero,270
 4003b40:	04004660 	cmpeqi	r16,zero,281
 4003b44:	04004660 	cmpeqi	r16,zero,281
 4003b48:	040043fc 	xorhi	r16,zero,271
 4003b4c:	04004660 	cmpeqi	r16,zero,281
 4003b50:	04004660 	cmpeqi	r16,zero,281
 4003b54:	04004660 	cmpeqi	r16,zero,281
 4003b58:	04004660 	cmpeqi	r16,zero,281
 4003b5c:	04004660 	cmpeqi	r16,zero,281
 4003b60:	04004660 	cmpeqi	r16,zero,281
 4003b64:	04004660 	cmpeqi	r16,zero,281
 4003b68:	04004660 	cmpeqi	r16,zero,281
 4003b6c:	04004660 	cmpeqi	r16,zero,281
 4003b70:	04004660 	cmpeqi	r16,zero,281
 4003b74:	0400460c 	andi	r16,zero,280
 4003b78:	040045ac 	andhi	r16,zero,278
 4003b7c:	04003e78 	rdprs	r16,zero,249
 4003b80:	04003e78 	rdprs	r16,zero,249
 4003b84:	04003e78 	rdprs	r16,zero,249
 4003b88:	040045bc 	xorhi	r16,zero,278
 4003b8c:	040045ac 	andhi	r16,zero,278
 4003b90:	04004660 	cmpeqi	r16,zero,281
 4003b94:	04004660 	cmpeqi	r16,zero,281
 4003b98:	040045c8 	cmpgei	r16,zero,279
 4003b9c:	04004660 	cmpeqi	r16,zero,281
 4003ba0:	040045d8 	cmpnei	r16,zero,279
 4003ba4:	040044ac 	andhi	r16,zero,274
 4003ba8:	04003be8 	cmpgeui	r16,zero,239
 4003bac:	040044cc 	andi	r16,zero,275
 4003bb0:	04004660 	cmpeqi	r16,zero,281
 4003bb4:	040044d8 	cmpnei	r16,zero,275
 4003bb8:	04004660 	cmpeqi	r16,zero,281
 4003bbc:	04004534 	movhi	r16,276
 4003bc0:	04004660 	cmpeqi	r16,zero,281
 4003bc4:	04004660 	cmpeqi	r16,zero,281
 4003bc8:	04004544 	movi	r16,277
 4003bcc:	d9003117 	ldw	r4,196(sp)
 4003bd0:	d8802d15 	stw	r2,180(sp)
 4003bd4:	0109c83a 	sub	r4,zero,r4
 4003bd8:	d9003115 	stw	r4,196(sp)
 4003bdc:	94800114 	ori	r18,r18,4
 4003be0:	ac400007 	ldb	r17,0(r21)
 4003be4:	003f9706 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4003be8:	00800c04 	movi	r2,48
 4003bec:	d9002d17 	ldw	r4,180(sp)
 4003bf0:	d9402917 	ldw	r5,164(sp)
 4003bf4:	d8802705 	stb	r2,156(sp)
 4003bf8:	00801e04 	movi	r2,120
 4003bfc:	d8802745 	stb	r2,157(sp)
 4003c00:	d8002785 	stb	zero,158(sp)
 4003c04:	20c00104 	addi	r3,r4,4
 4003c08:	24c00017 	ldw	r19,0(r4)
 4003c0c:	002d883a 	mov	r22,zero
 4003c10:	90800094 	ori	r2,r18,2
 4003c14:	28029a16 	blt	r5,zero,4004680 <___vfprintf_internal_r+0xdc0>
 4003c18:	00bfdfc4 	movi	r2,-129
 4003c1c:	90a4703a 	and	r18,r18,r2
 4003c20:	d8c02d15 	stw	r3,180(sp)
 4003c24:	94800094 	ori	r18,r18,2
 4003c28:	9802871e 	bne	r19,zero,4004648 <___vfprintf_internal_r+0xd88>
 4003c2c:	008100b4 	movhi	r2,1026
 4003c30:	10b2ad04 	addi	r2,r2,-13644
 4003c34:	d8803915 	stw	r2,228(sp)
 4003c38:	04401e04 	movi	r17,120
 4003c3c:	d8802917 	ldw	r2,164(sp)
 4003c40:	0039883a 	mov	fp,zero
 4003c44:	1001e926 	beq	r2,zero,40043ec <___vfprintf_internal_r+0xb2c>
 4003c48:	0027883a 	mov	r19,zero
 4003c4c:	002d883a 	mov	r22,zero
 4003c50:	00020506 	br	4004468 <___vfprintf_internal_r+0xba8>
 4003c54:	d9002c17 	ldw	r4,176(sp)
 4003c58:	b80b883a 	mov	r5,r23
 4003c5c:	4005b900 	call	4005b90 <__swsetup_r>
 4003c60:	1005ac1e 	bne	r2,zero,4005314 <___vfprintf_internal_r+0x1a54>
 4003c64:	b880030b 	ldhu	r2,12(r23)
 4003c68:	00c00284 	movi	r3,10
 4003c6c:	1080068c 	andi	r2,r2,26
 4003c70:	10ff3c1e 	bne	r2,r3,4003964 <__alt_mem_onchip_memory2_0+0xfc001964>
 4003c74:	b880038f 	ldh	r2,14(r23)
 4003c78:	103f3a16 	blt	r2,zero,4003964 <__alt_mem_onchip_memory2_0+0xfc001964>
 4003c7c:	d9c02d17 	ldw	r7,180(sp)
 4003c80:	d9002c17 	ldw	r4,176(sp)
 4003c84:	a80d883a 	mov	r6,r21
 4003c88:	b80b883a 	mov	r5,r23
 4003c8c:	4005ad40 	call	4005ad4 <__sbprintf>
 4003c90:	00001106 	br	4003cd8 <___vfprintf_internal_r+0x418>
 4003c94:	d9002c17 	ldw	r4,176(sp)
 4003c98:	d9801e04 	addi	r6,sp,120
 4003c9c:	b80b883a 	mov	r5,r23
 4003ca0:	400c2c80 	call	400c2c8 <__sprint_r>
 4003ca4:	1000081e 	bne	r2,zero,4003cc8 <___vfprintf_internal_r+0x408>
 4003ca8:	da000404 	addi	r8,sp,16
 4003cac:	003f5306 	br	40039fc <__alt_mem_onchip_memory2_0+0xfc0019fc>
 4003cb0:	d8802017 	ldw	r2,128(sp)
 4003cb4:	10000426 	beq	r2,zero,4003cc8 <___vfprintf_internal_r+0x408>
 4003cb8:	d9002c17 	ldw	r4,176(sp)
 4003cbc:	d9801e04 	addi	r6,sp,120
 4003cc0:	b80b883a 	mov	r5,r23
 4003cc4:	400c2c80 	call	400c2c8 <__sprint_r>
 4003cc8:	b880030b 	ldhu	r2,12(r23)
 4003ccc:	1080100c 	andi	r2,r2,64
 4003cd0:	1005901e 	bne	r2,zero,4005314 <___vfprintf_internal_r+0x1a54>
 4003cd4:	d8802f17 	ldw	r2,188(sp)
 4003cd8:	dfc04717 	ldw	ra,284(sp)
 4003cdc:	df004617 	ldw	fp,280(sp)
 4003ce0:	ddc04517 	ldw	r23,276(sp)
 4003ce4:	dd804417 	ldw	r22,272(sp)
 4003ce8:	dd404317 	ldw	r21,268(sp)
 4003cec:	dd004217 	ldw	r20,264(sp)
 4003cf0:	dcc04117 	ldw	r19,260(sp)
 4003cf4:	dc804017 	ldw	r18,256(sp)
 4003cf8:	dc403f17 	ldw	r17,252(sp)
 4003cfc:	dc003e17 	ldw	r16,248(sp)
 4003d00:	dec04804 	addi	sp,sp,288
 4003d04:	f800283a 	ret
 4003d08:	d9002c17 	ldw	r4,176(sp)
 4003d0c:	4007b640 	call	4007b64 <__sinit>
 4003d10:	003f0406 	br	4003924 <__alt_mem_onchip_memory2_0+0xfc001924>
 4003d14:	d8802d17 	ldw	r2,180(sp)
 4003d18:	d9002d17 	ldw	r4,180(sp)
 4003d1c:	10800017 	ldw	r2,0(r2)
 4003d20:	d8803115 	stw	r2,196(sp)
 4003d24:	20800104 	addi	r2,r4,4
 4003d28:	d9003117 	ldw	r4,196(sp)
 4003d2c:	203fa716 	blt	r4,zero,4003bcc <__alt_mem_onchip_memory2_0+0xfc001bcc>
 4003d30:	d8802d15 	stw	r2,180(sp)
 4003d34:	ac400007 	ldb	r17,0(r21)
 4003d38:	003f4206 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4003d3c:	ac400007 	ldb	r17,0(r21)
 4003d40:	aac00044 	addi	r11,r21,1
 4003d44:	8a872826 	beq	r17,r10,40059e8 <___vfprintf_internal_r+0x2128>
 4003d48:	88bff404 	addi	r2,r17,-48
 4003d4c:	0009883a 	mov	r4,zero
 4003d50:	30867d36 	bltu	r6,r2,4005748 <___vfprintf_internal_r+0x1e88>
 4003d54:	5c400007 	ldb	r17,0(r11)
 4003d58:	210002a4 	muli	r4,r4,10
 4003d5c:	5d400044 	addi	r21,r11,1
 4003d60:	a817883a 	mov	r11,r21
 4003d64:	2089883a 	add	r4,r4,r2
 4003d68:	88bff404 	addi	r2,r17,-48
 4003d6c:	30bff92e 	bgeu	r6,r2,4003d54 <__alt_mem_onchip_memory2_0+0xfc001d54>
 4003d70:	2005c916 	blt	r4,zero,4005498 <___vfprintf_internal_r+0x1bd8>
 4003d74:	d9002915 	stw	r4,164(sp)
 4003d78:	003f3306 	br	4003a48 <__alt_mem_onchip_memory2_0+0xfc001a48>
 4003d7c:	94802014 	ori	r18,r18,128
 4003d80:	ac400007 	ldb	r17,0(r21)
 4003d84:	003f2f06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4003d88:	a809883a 	mov	r4,r21
 4003d8c:	d8003115 	stw	zero,196(sp)
 4003d90:	88bff404 	addi	r2,r17,-48
 4003d94:	0017883a 	mov	r11,zero
 4003d98:	24400007 	ldb	r17,0(r4)
 4003d9c:	5ac002a4 	muli	r11,r11,10
 4003da0:	ad400044 	addi	r21,r21,1
 4003da4:	a809883a 	mov	r4,r21
 4003da8:	12d7883a 	add	r11,r2,r11
 4003dac:	88bff404 	addi	r2,r17,-48
 4003db0:	30bff92e 	bgeu	r6,r2,4003d98 <__alt_mem_onchip_memory2_0+0xfc001d98>
 4003db4:	dac03115 	stw	r11,196(sp)
 4003db8:	003f2306 	br	4003a48 <__alt_mem_onchip_memory2_0+0xfc001a48>
 4003dbc:	18c03fcc 	andi	r3,r3,255
 4003dc0:	18072b1e 	bne	r3,zero,4005a70 <___vfprintf_internal_r+0x21b0>
 4003dc4:	94800414 	ori	r18,r18,16
 4003dc8:	9080080c 	andi	r2,r18,32
 4003dcc:	10037b26 	beq	r2,zero,4004bbc <___vfprintf_internal_r+0x12fc>
 4003dd0:	d9402d17 	ldw	r5,180(sp)
 4003dd4:	28800117 	ldw	r2,4(r5)
 4003dd8:	2cc00017 	ldw	r19,0(r5)
 4003ddc:	29400204 	addi	r5,r5,8
 4003de0:	d9402d15 	stw	r5,180(sp)
 4003de4:	102d883a 	mov	r22,r2
 4003de8:	10044b16 	blt	r2,zero,4004f18 <___vfprintf_internal_r+0x1658>
 4003dec:	d9402917 	ldw	r5,164(sp)
 4003df0:	df002783 	ldbu	fp,158(sp)
 4003df4:	2803bc16 	blt	r5,zero,4004ce8 <___vfprintf_internal_r+0x1428>
 4003df8:	00ffdfc4 	movi	r3,-129
 4003dfc:	9d84b03a 	or	r2,r19,r22
 4003e00:	90e4703a 	and	r18,r18,r3
 4003e04:	10017726 	beq	r2,zero,40043e4 <___vfprintf_internal_r+0xb24>
 4003e08:	b0038326 	beq	r22,zero,4004c18 <___vfprintf_internal_r+0x1358>
 4003e0c:	dc402a15 	stw	r17,168(sp)
 4003e10:	dc001e04 	addi	r16,sp,120
 4003e14:	b023883a 	mov	r17,r22
 4003e18:	402d883a 	mov	r22,r8
 4003e1c:	9809883a 	mov	r4,r19
 4003e20:	880b883a 	mov	r5,r17
 4003e24:	01800284 	movi	r6,10
 4003e28:	000f883a 	mov	r7,zero
 4003e2c:	400e7200 	call	400e720 <__umoddi3>
 4003e30:	10800c04 	addi	r2,r2,48
 4003e34:	843fffc4 	addi	r16,r16,-1
 4003e38:	9809883a 	mov	r4,r19
 4003e3c:	880b883a 	mov	r5,r17
 4003e40:	80800005 	stb	r2,0(r16)
 4003e44:	01800284 	movi	r6,10
 4003e48:	000f883a 	mov	r7,zero
 4003e4c:	400e1a80 	call	400e1a8 <__udivdi3>
 4003e50:	1027883a 	mov	r19,r2
 4003e54:	10c4b03a 	or	r2,r2,r3
 4003e58:	1823883a 	mov	r17,r3
 4003e5c:	103fef1e 	bne	r2,zero,4003e1c <__alt_mem_onchip_memory2_0+0xfc001e1c>
 4003e60:	d8c02817 	ldw	r3,160(sp)
 4003e64:	dc402a17 	ldw	r17,168(sp)
 4003e68:	b011883a 	mov	r8,r22
 4003e6c:	1c07c83a 	sub	r3,r3,r16
 4003e70:	d8c02e15 	stw	r3,184(sp)
 4003e74:	00005906 	br	4003fdc <___vfprintf_internal_r+0x71c>
 4003e78:	18c03fcc 	andi	r3,r3,255
 4003e7c:	1806fa1e 	bne	r3,zero,4005a68 <___vfprintf_internal_r+0x21a8>
 4003e80:	9080020c 	andi	r2,r18,8
 4003e84:	10048a26 	beq	r2,zero,40050b0 <___vfprintf_internal_r+0x17f0>
 4003e88:	d8c02d17 	ldw	r3,180(sp)
 4003e8c:	d9002d17 	ldw	r4,180(sp)
 4003e90:	d9402d17 	ldw	r5,180(sp)
 4003e94:	18c00017 	ldw	r3,0(r3)
 4003e98:	21000117 	ldw	r4,4(r4)
 4003e9c:	29400204 	addi	r5,r5,8
 4003ea0:	d8c03615 	stw	r3,216(sp)
 4003ea4:	d9003815 	stw	r4,224(sp)
 4003ea8:	d9402d15 	stw	r5,180(sp)
 4003eac:	d9003617 	ldw	r4,216(sp)
 4003eb0:	d9403817 	ldw	r5,224(sp)
 4003eb4:	da003d15 	stw	r8,244(sp)
 4003eb8:	04000044 	movi	r16,1
 4003ebc:	400aae00 	call	400aae0 <__fpclassifyd>
 4003ec0:	da003d17 	ldw	r8,244(sp)
 4003ec4:	14041f1e 	bne	r2,r16,4004f44 <___vfprintf_internal_r+0x1684>
 4003ec8:	d9003617 	ldw	r4,216(sp)
 4003ecc:	d9403817 	ldw	r5,224(sp)
 4003ed0:	000d883a 	mov	r6,zero
 4003ed4:	000f883a 	mov	r7,zero
 4003ed8:	400ff500 	call	400ff50 <__ledf2>
 4003edc:	da003d17 	ldw	r8,244(sp)
 4003ee0:	1005be16 	blt	r2,zero,40055dc <___vfprintf_internal_r+0x1d1c>
 4003ee4:	df002783 	ldbu	fp,158(sp)
 4003ee8:	008011c4 	movi	r2,71
 4003eec:	1445330e 	bge	r2,r17,40053bc <___vfprintf_internal_r+0x1afc>
 4003ef0:	040100b4 	movhi	r16,1026
 4003ef4:	8432a504 	addi	r16,r16,-13676
 4003ef8:	00c000c4 	movi	r3,3
 4003efc:	00bfdfc4 	movi	r2,-129
 4003f00:	d8c02a15 	stw	r3,168(sp)
 4003f04:	90a4703a 	and	r18,r18,r2
 4003f08:	d8c02e15 	stw	r3,184(sp)
 4003f0c:	d8002915 	stw	zero,164(sp)
 4003f10:	d8003215 	stw	zero,200(sp)
 4003f14:	00003706 	br	4003ff4 <___vfprintf_internal_r+0x734>
 4003f18:	94800214 	ori	r18,r18,8
 4003f1c:	ac400007 	ldb	r17,0(r21)
 4003f20:	003ec806 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4003f24:	18c03fcc 	andi	r3,r3,255
 4003f28:	1806db1e 	bne	r3,zero,4005a98 <___vfprintf_internal_r+0x21d8>
 4003f2c:	94800414 	ori	r18,r18,16
 4003f30:	9080080c 	andi	r2,r18,32
 4003f34:	1002d826 	beq	r2,zero,4004a98 <___vfprintf_internal_r+0x11d8>
 4003f38:	d9402d17 	ldw	r5,180(sp)
 4003f3c:	d8c02917 	ldw	r3,164(sp)
 4003f40:	d8002785 	stb	zero,158(sp)
 4003f44:	28800204 	addi	r2,r5,8
 4003f48:	2cc00017 	ldw	r19,0(r5)
 4003f4c:	2d800117 	ldw	r22,4(r5)
 4003f50:	18048f16 	blt	r3,zero,4005190 <___vfprintf_internal_r+0x18d0>
 4003f54:	013fdfc4 	movi	r4,-129
 4003f58:	9d86b03a 	or	r3,r19,r22
 4003f5c:	d8802d15 	stw	r2,180(sp)
 4003f60:	9124703a 	and	r18,r18,r4
 4003f64:	1802d91e 	bne	r3,zero,4004acc <___vfprintf_internal_r+0x120c>
 4003f68:	d8c02917 	ldw	r3,164(sp)
 4003f6c:	0039883a 	mov	fp,zero
 4003f70:	1805c326 	beq	r3,zero,4005680 <___vfprintf_internal_r+0x1dc0>
 4003f74:	0027883a 	mov	r19,zero
 4003f78:	002d883a 	mov	r22,zero
 4003f7c:	dc001e04 	addi	r16,sp,120
 4003f80:	9806d0fa 	srli	r3,r19,3
 4003f84:	b008977a 	slli	r4,r22,29
 4003f88:	b02cd0fa 	srli	r22,r22,3
 4003f8c:	9cc001cc 	andi	r19,r19,7
 4003f90:	98800c04 	addi	r2,r19,48
 4003f94:	843fffc4 	addi	r16,r16,-1
 4003f98:	20e6b03a 	or	r19,r4,r3
 4003f9c:	80800005 	stb	r2,0(r16)
 4003fa0:	9d86b03a 	or	r3,r19,r22
 4003fa4:	183ff61e 	bne	r3,zero,4003f80 <__alt_mem_onchip_memory2_0+0xfc001f80>
 4003fa8:	90c0004c 	andi	r3,r18,1
 4003fac:	18013b26 	beq	r3,zero,400449c <___vfprintf_internal_r+0xbdc>
 4003fb0:	10803fcc 	andi	r2,r2,255
 4003fb4:	1080201c 	xori	r2,r2,128
 4003fb8:	10bfe004 	addi	r2,r2,-128
 4003fbc:	00c00c04 	movi	r3,48
 4003fc0:	10c13626 	beq	r2,r3,400449c <___vfprintf_internal_r+0xbdc>
 4003fc4:	80ffffc5 	stb	r3,-1(r16)
 4003fc8:	d8c02817 	ldw	r3,160(sp)
 4003fcc:	80bfffc4 	addi	r2,r16,-1
 4003fd0:	1021883a 	mov	r16,r2
 4003fd4:	1887c83a 	sub	r3,r3,r2
 4003fd8:	d8c02e15 	stw	r3,184(sp)
 4003fdc:	d8802e17 	ldw	r2,184(sp)
 4003fe0:	d9002917 	ldw	r4,164(sp)
 4003fe4:	1100010e 	bge	r2,r4,4003fec <___vfprintf_internal_r+0x72c>
 4003fe8:	2005883a 	mov	r2,r4
 4003fec:	d8802a15 	stw	r2,168(sp)
 4003ff0:	d8003215 	stw	zero,200(sp)
 4003ff4:	e7003fcc 	andi	fp,fp,255
 4003ff8:	e700201c 	xori	fp,fp,128
 4003ffc:	e73fe004 	addi	fp,fp,-128
 4004000:	e0000326 	beq	fp,zero,4004010 <___vfprintf_internal_r+0x750>
 4004004:	d8c02a17 	ldw	r3,168(sp)
 4004008:	18c00044 	addi	r3,r3,1
 400400c:	d8c02a15 	stw	r3,168(sp)
 4004010:	90c0008c 	andi	r3,r18,2
 4004014:	d8c02b15 	stw	r3,172(sp)
 4004018:	18000326 	beq	r3,zero,4004028 <___vfprintf_internal_r+0x768>
 400401c:	d8c02a17 	ldw	r3,168(sp)
 4004020:	18c00084 	addi	r3,r3,2
 4004024:	d8c02a15 	stw	r3,168(sp)
 4004028:	90c0210c 	andi	r3,r18,132
 400402c:	d8c03015 	stw	r3,192(sp)
 4004030:	1801a31e 	bne	r3,zero,40046c0 <___vfprintf_internal_r+0xe00>
 4004034:	d9003117 	ldw	r4,196(sp)
 4004038:	d8c02a17 	ldw	r3,168(sp)
 400403c:	20e7c83a 	sub	r19,r4,r3
 4004040:	04c19f0e 	bge	zero,r19,40046c0 <___vfprintf_internal_r+0xe00>
 4004044:	02400404 	movi	r9,16
 4004048:	d8c02017 	ldw	r3,128(sp)
 400404c:	d8801f17 	ldw	r2,124(sp)
 4004050:	4cc50d0e 	bge	r9,r19,4005488 <___vfprintf_internal_r+0x1bc8>
 4004054:	014100b4 	movhi	r5,1026
 4004058:	2972c084 	addi	r5,r5,-13566
 400405c:	dc403b15 	stw	r17,236(sp)
 4004060:	d9403515 	stw	r5,212(sp)
 4004064:	9823883a 	mov	r17,r19
 4004068:	482d883a 	mov	r22,r9
 400406c:	9027883a 	mov	r19,r18
 4004070:	070001c4 	movi	fp,7
 4004074:	8025883a 	mov	r18,r16
 4004078:	dc002c17 	ldw	r16,176(sp)
 400407c:	00000306 	br	400408c <___vfprintf_internal_r+0x7cc>
 4004080:	8c7ffc04 	addi	r17,r17,-16
 4004084:	42000204 	addi	r8,r8,8
 4004088:	b440130e 	bge	r22,r17,40040d8 <___vfprintf_internal_r+0x818>
 400408c:	010100b4 	movhi	r4,1026
 4004090:	18c00404 	addi	r3,r3,16
 4004094:	10800044 	addi	r2,r2,1
 4004098:	2132c084 	addi	r4,r4,-13566
 400409c:	41000015 	stw	r4,0(r8)
 40040a0:	45800115 	stw	r22,4(r8)
 40040a4:	d8c02015 	stw	r3,128(sp)
 40040a8:	d8801f15 	stw	r2,124(sp)
 40040ac:	e0bff40e 	bge	fp,r2,4004080 <__alt_mem_onchip_memory2_0+0xfc002080>
 40040b0:	d9801e04 	addi	r6,sp,120
 40040b4:	b80b883a 	mov	r5,r23
 40040b8:	8009883a 	mov	r4,r16
 40040bc:	400c2c80 	call	400c2c8 <__sprint_r>
 40040c0:	103f011e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40040c4:	8c7ffc04 	addi	r17,r17,-16
 40040c8:	d8c02017 	ldw	r3,128(sp)
 40040cc:	d8801f17 	ldw	r2,124(sp)
 40040d0:	da000404 	addi	r8,sp,16
 40040d4:	b47fed16 	blt	r22,r17,400408c <__alt_mem_onchip_memory2_0+0xfc00208c>
 40040d8:	9021883a 	mov	r16,r18
 40040dc:	9825883a 	mov	r18,r19
 40040e0:	8827883a 	mov	r19,r17
 40040e4:	dc403b17 	ldw	r17,236(sp)
 40040e8:	d9403517 	ldw	r5,212(sp)
 40040ec:	98c7883a 	add	r3,r19,r3
 40040f0:	10800044 	addi	r2,r2,1
 40040f4:	41400015 	stw	r5,0(r8)
 40040f8:	44c00115 	stw	r19,4(r8)
 40040fc:	d8c02015 	stw	r3,128(sp)
 4004100:	d8801f15 	stw	r2,124(sp)
 4004104:	010001c4 	movi	r4,7
 4004108:	2082a316 	blt	r4,r2,4004b98 <___vfprintf_internal_r+0x12d8>
 400410c:	df002787 	ldb	fp,158(sp)
 4004110:	42000204 	addi	r8,r8,8
 4004114:	e0000c26 	beq	fp,zero,4004148 <___vfprintf_internal_r+0x888>
 4004118:	d8801f17 	ldw	r2,124(sp)
 400411c:	d9002784 	addi	r4,sp,158
 4004120:	18c00044 	addi	r3,r3,1
 4004124:	10800044 	addi	r2,r2,1
 4004128:	41000015 	stw	r4,0(r8)
 400412c:	01000044 	movi	r4,1
 4004130:	41000115 	stw	r4,4(r8)
 4004134:	d8c02015 	stw	r3,128(sp)
 4004138:	d8801f15 	stw	r2,124(sp)
 400413c:	010001c4 	movi	r4,7
 4004140:	20823c16 	blt	r4,r2,4004a34 <___vfprintf_internal_r+0x1174>
 4004144:	42000204 	addi	r8,r8,8
 4004148:	d8802b17 	ldw	r2,172(sp)
 400414c:	10000c26 	beq	r2,zero,4004180 <___vfprintf_internal_r+0x8c0>
 4004150:	d8801f17 	ldw	r2,124(sp)
 4004154:	d9002704 	addi	r4,sp,156
 4004158:	18c00084 	addi	r3,r3,2
 400415c:	10800044 	addi	r2,r2,1
 4004160:	41000015 	stw	r4,0(r8)
 4004164:	01000084 	movi	r4,2
 4004168:	41000115 	stw	r4,4(r8)
 400416c:	d8c02015 	stw	r3,128(sp)
 4004170:	d8801f15 	stw	r2,124(sp)
 4004174:	010001c4 	movi	r4,7
 4004178:	20823616 	blt	r4,r2,4004a54 <___vfprintf_internal_r+0x1194>
 400417c:	42000204 	addi	r8,r8,8
 4004180:	d9003017 	ldw	r4,192(sp)
 4004184:	00802004 	movi	r2,128
 4004188:	20819926 	beq	r4,r2,40047f0 <___vfprintf_internal_r+0xf30>
 400418c:	d9402917 	ldw	r5,164(sp)
 4004190:	d8802e17 	ldw	r2,184(sp)
 4004194:	28adc83a 	sub	r22,r5,r2
 4004198:	0580310e 	bge	zero,r22,4004260 <___vfprintf_internal_r+0x9a0>
 400419c:	07000404 	movi	fp,16
 40041a0:	d8801f17 	ldw	r2,124(sp)
 40041a4:	e584140e 	bge	fp,r22,40051f8 <___vfprintf_internal_r+0x1938>
 40041a8:	014100b4 	movhi	r5,1026
 40041ac:	2972bc84 	addi	r5,r5,-13582
 40041b0:	dc402915 	stw	r17,164(sp)
 40041b4:	d9402b15 	stw	r5,172(sp)
 40041b8:	b023883a 	mov	r17,r22
 40041bc:	04c001c4 	movi	r19,7
 40041c0:	a82d883a 	mov	r22,r21
 40041c4:	902b883a 	mov	r21,r18
 40041c8:	8025883a 	mov	r18,r16
 40041cc:	dc002c17 	ldw	r16,176(sp)
 40041d0:	00000306 	br	40041e0 <___vfprintf_internal_r+0x920>
 40041d4:	8c7ffc04 	addi	r17,r17,-16
 40041d8:	42000204 	addi	r8,r8,8
 40041dc:	e440110e 	bge	fp,r17,4004224 <___vfprintf_internal_r+0x964>
 40041e0:	18c00404 	addi	r3,r3,16
 40041e4:	10800044 	addi	r2,r2,1
 40041e8:	45000015 	stw	r20,0(r8)
 40041ec:	47000115 	stw	fp,4(r8)
 40041f0:	d8c02015 	stw	r3,128(sp)
 40041f4:	d8801f15 	stw	r2,124(sp)
 40041f8:	98bff60e 	bge	r19,r2,40041d4 <__alt_mem_onchip_memory2_0+0xfc0021d4>
 40041fc:	d9801e04 	addi	r6,sp,120
 4004200:	b80b883a 	mov	r5,r23
 4004204:	8009883a 	mov	r4,r16
 4004208:	400c2c80 	call	400c2c8 <__sprint_r>
 400420c:	103eae1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004210:	8c7ffc04 	addi	r17,r17,-16
 4004214:	d8c02017 	ldw	r3,128(sp)
 4004218:	d8801f17 	ldw	r2,124(sp)
 400421c:	da000404 	addi	r8,sp,16
 4004220:	e47fef16 	blt	fp,r17,40041e0 <__alt_mem_onchip_memory2_0+0xfc0021e0>
 4004224:	9021883a 	mov	r16,r18
 4004228:	a825883a 	mov	r18,r21
 400422c:	b02b883a 	mov	r21,r22
 4004230:	882d883a 	mov	r22,r17
 4004234:	dc402917 	ldw	r17,164(sp)
 4004238:	d9002b17 	ldw	r4,172(sp)
 400423c:	1d87883a 	add	r3,r3,r22
 4004240:	10800044 	addi	r2,r2,1
 4004244:	41000015 	stw	r4,0(r8)
 4004248:	45800115 	stw	r22,4(r8)
 400424c:	d8c02015 	stw	r3,128(sp)
 4004250:	d8801f15 	stw	r2,124(sp)
 4004254:	010001c4 	movi	r4,7
 4004258:	2081ee16 	blt	r4,r2,4004a14 <___vfprintf_internal_r+0x1154>
 400425c:	42000204 	addi	r8,r8,8
 4004260:	9080400c 	andi	r2,r18,256
 4004264:	1001181e 	bne	r2,zero,40046c8 <___vfprintf_internal_r+0xe08>
 4004268:	d9402e17 	ldw	r5,184(sp)
 400426c:	d8801f17 	ldw	r2,124(sp)
 4004270:	44000015 	stw	r16,0(r8)
 4004274:	1947883a 	add	r3,r3,r5
 4004278:	10800044 	addi	r2,r2,1
 400427c:	41400115 	stw	r5,4(r8)
 4004280:	d8c02015 	stw	r3,128(sp)
 4004284:	d8801f15 	stw	r2,124(sp)
 4004288:	010001c4 	movi	r4,7
 400428c:	2081d316 	blt	r4,r2,40049dc <___vfprintf_internal_r+0x111c>
 4004290:	42000204 	addi	r8,r8,8
 4004294:	9480010c 	andi	r18,r18,4
 4004298:	90003226 	beq	r18,zero,4004364 <___vfprintf_internal_r+0xaa4>
 400429c:	d9403117 	ldw	r5,196(sp)
 40042a0:	d8802a17 	ldw	r2,168(sp)
 40042a4:	28a1c83a 	sub	r16,r5,r2
 40042a8:	04002e0e 	bge	zero,r16,4004364 <___vfprintf_internal_r+0xaa4>
 40042ac:	04400404 	movi	r17,16
 40042b0:	d8801f17 	ldw	r2,124(sp)
 40042b4:	8c04a20e 	bge	r17,r16,4005540 <___vfprintf_internal_r+0x1c80>
 40042b8:	014100b4 	movhi	r5,1026
 40042bc:	2972c084 	addi	r5,r5,-13566
 40042c0:	d9403515 	stw	r5,212(sp)
 40042c4:	048001c4 	movi	r18,7
 40042c8:	dcc02c17 	ldw	r19,176(sp)
 40042cc:	00000306 	br	40042dc <___vfprintf_internal_r+0xa1c>
 40042d0:	843ffc04 	addi	r16,r16,-16
 40042d4:	42000204 	addi	r8,r8,8
 40042d8:	8c00130e 	bge	r17,r16,4004328 <___vfprintf_internal_r+0xa68>
 40042dc:	010100b4 	movhi	r4,1026
 40042e0:	18c00404 	addi	r3,r3,16
 40042e4:	10800044 	addi	r2,r2,1
 40042e8:	2132c084 	addi	r4,r4,-13566
 40042ec:	41000015 	stw	r4,0(r8)
 40042f0:	44400115 	stw	r17,4(r8)
 40042f4:	d8c02015 	stw	r3,128(sp)
 40042f8:	d8801f15 	stw	r2,124(sp)
 40042fc:	90bff40e 	bge	r18,r2,40042d0 <__alt_mem_onchip_memory2_0+0xfc0022d0>
 4004300:	d9801e04 	addi	r6,sp,120
 4004304:	b80b883a 	mov	r5,r23
 4004308:	9809883a 	mov	r4,r19
 400430c:	400c2c80 	call	400c2c8 <__sprint_r>
 4004310:	103e6d1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004314:	843ffc04 	addi	r16,r16,-16
 4004318:	d8c02017 	ldw	r3,128(sp)
 400431c:	d8801f17 	ldw	r2,124(sp)
 4004320:	da000404 	addi	r8,sp,16
 4004324:	8c3fed16 	blt	r17,r16,40042dc <__alt_mem_onchip_memory2_0+0xfc0022dc>
 4004328:	d9403517 	ldw	r5,212(sp)
 400432c:	1c07883a 	add	r3,r3,r16
 4004330:	10800044 	addi	r2,r2,1
 4004334:	41400015 	stw	r5,0(r8)
 4004338:	44000115 	stw	r16,4(r8)
 400433c:	d8c02015 	stw	r3,128(sp)
 4004340:	d8801f15 	stw	r2,124(sp)
 4004344:	010001c4 	movi	r4,7
 4004348:	2080060e 	bge	r4,r2,4004364 <___vfprintf_internal_r+0xaa4>
 400434c:	d9002c17 	ldw	r4,176(sp)
 4004350:	d9801e04 	addi	r6,sp,120
 4004354:	b80b883a 	mov	r5,r23
 4004358:	400c2c80 	call	400c2c8 <__sprint_r>
 400435c:	103e5a1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004360:	d8c02017 	ldw	r3,128(sp)
 4004364:	d8803117 	ldw	r2,196(sp)
 4004368:	d9002a17 	ldw	r4,168(sp)
 400436c:	1100010e 	bge	r2,r4,4004374 <___vfprintf_internal_r+0xab4>
 4004370:	2005883a 	mov	r2,r4
 4004374:	d9402f17 	ldw	r5,188(sp)
 4004378:	288b883a 	add	r5,r5,r2
 400437c:	d9402f15 	stw	r5,188(sp)
 4004380:	18019e1e 	bne	r3,zero,40049fc <___vfprintf_internal_r+0x113c>
 4004384:	a8800007 	ldb	r2,0(r21)
 4004388:	d8001f15 	stw	zero,124(sp)
 400438c:	da000404 	addi	r8,sp,16
 4004390:	103d851e 	bne	r2,zero,40039a8 <__alt_mem_onchip_memory2_0+0xfc0019a8>
 4004394:	a821883a 	mov	r16,r21
 4004398:	003d9b06 	br	4003a08 <__alt_mem_onchip_memory2_0+0xfc001a08>
 400439c:	18c03fcc 	andi	r3,r3,255
 40043a0:	1805c11e 	bne	r3,zero,4005aa8 <___vfprintf_internal_r+0x21e8>
 40043a4:	94800414 	ori	r18,r18,16
 40043a8:	9080080c 	andi	r2,r18,32
 40043ac:	10020c26 	beq	r2,zero,4004be0 <___vfprintf_internal_r+0x1320>
 40043b0:	d8802d17 	ldw	r2,180(sp)
 40043b4:	d9002917 	ldw	r4,164(sp)
 40043b8:	d8002785 	stb	zero,158(sp)
 40043bc:	10c00204 	addi	r3,r2,8
 40043c0:	14c00017 	ldw	r19,0(r2)
 40043c4:	15800117 	ldw	r22,4(r2)
 40043c8:	20040f16 	blt	r4,zero,4005408 <___vfprintf_internal_r+0x1b48>
 40043cc:	013fdfc4 	movi	r4,-129
 40043d0:	9d84b03a 	or	r2,r19,r22
 40043d4:	d8c02d15 	stw	r3,180(sp)
 40043d8:	9124703a 	and	r18,r18,r4
 40043dc:	0039883a 	mov	fp,zero
 40043e0:	103e891e 	bne	r2,zero,4003e08 <__alt_mem_onchip_memory2_0+0xfc001e08>
 40043e4:	d9002917 	ldw	r4,164(sp)
 40043e8:	2002c11e 	bne	r4,zero,4004ef0 <___vfprintf_internal_r+0x1630>
 40043ec:	d8002915 	stw	zero,164(sp)
 40043f0:	d8002e15 	stw	zero,184(sp)
 40043f4:	dc001e04 	addi	r16,sp,120
 40043f8:	003ef806 	br	4003fdc <__alt_mem_onchip_memory2_0+0xfc001fdc>
 40043fc:	18c03fcc 	andi	r3,r3,255
 4004400:	18059d1e 	bne	r3,zero,4005a78 <___vfprintf_internal_r+0x21b8>
 4004404:	014100b4 	movhi	r5,1026
 4004408:	2972a804 	addi	r5,r5,-13664
 400440c:	d9403915 	stw	r5,228(sp)
 4004410:	9080080c 	andi	r2,r18,32
 4004414:	10005226 	beq	r2,zero,4004560 <___vfprintf_internal_r+0xca0>
 4004418:	d8802d17 	ldw	r2,180(sp)
 400441c:	14c00017 	ldw	r19,0(r2)
 4004420:	15800117 	ldw	r22,4(r2)
 4004424:	10800204 	addi	r2,r2,8
 4004428:	d8802d15 	stw	r2,180(sp)
 400442c:	9080004c 	andi	r2,r18,1
 4004430:	10019026 	beq	r2,zero,4004a74 <___vfprintf_internal_r+0x11b4>
 4004434:	9d84b03a 	or	r2,r19,r22
 4004438:	10036926 	beq	r2,zero,40051e0 <___vfprintf_internal_r+0x1920>
 400443c:	d8c02917 	ldw	r3,164(sp)
 4004440:	00800c04 	movi	r2,48
 4004444:	d8802705 	stb	r2,156(sp)
 4004448:	dc402745 	stb	r17,157(sp)
 400444c:	d8002785 	stb	zero,158(sp)
 4004450:	90800094 	ori	r2,r18,2
 4004454:	18045d16 	blt	r3,zero,40055cc <___vfprintf_internal_r+0x1d0c>
 4004458:	00bfdfc4 	movi	r2,-129
 400445c:	90a4703a 	and	r18,r18,r2
 4004460:	94800094 	ori	r18,r18,2
 4004464:	0039883a 	mov	fp,zero
 4004468:	d9003917 	ldw	r4,228(sp)
 400446c:	dc001e04 	addi	r16,sp,120
 4004470:	988003cc 	andi	r2,r19,15
 4004474:	b006973a 	slli	r3,r22,28
 4004478:	2085883a 	add	r2,r4,r2
 400447c:	9826d13a 	srli	r19,r19,4
 4004480:	10800003 	ldbu	r2,0(r2)
 4004484:	b02cd13a 	srli	r22,r22,4
 4004488:	843fffc4 	addi	r16,r16,-1
 400448c:	1ce6b03a 	or	r19,r3,r19
 4004490:	80800005 	stb	r2,0(r16)
 4004494:	9d84b03a 	or	r2,r19,r22
 4004498:	103ff51e 	bne	r2,zero,4004470 <__alt_mem_onchip_memory2_0+0xfc002470>
 400449c:	d8c02817 	ldw	r3,160(sp)
 40044a0:	1c07c83a 	sub	r3,r3,r16
 40044a4:	d8c02e15 	stw	r3,184(sp)
 40044a8:	003ecc06 	br	4003fdc <__alt_mem_onchip_memory2_0+0xfc001fdc>
 40044ac:	18c03fcc 	andi	r3,r3,255
 40044b0:	183e9f26 	beq	r3,zero,4003f30 <__alt_mem_onchip_memory2_0+0xfc001f30>
 40044b4:	d9c02785 	stb	r7,158(sp)
 40044b8:	003e9d06 	br	4003f30 <__alt_mem_onchip_memory2_0+0xfc001f30>
 40044bc:	00c00044 	movi	r3,1
 40044c0:	01c00ac4 	movi	r7,43
 40044c4:	ac400007 	ldb	r17,0(r21)
 40044c8:	003d5e06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40044cc:	94800814 	ori	r18,r18,32
 40044d0:	ac400007 	ldb	r17,0(r21)
 40044d4:	003d5b06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40044d8:	d8c02d17 	ldw	r3,180(sp)
 40044dc:	d8002785 	stb	zero,158(sp)
 40044e0:	1c000017 	ldw	r16,0(r3)
 40044e4:	1cc00104 	addi	r19,r3,4
 40044e8:	80041926 	beq	r16,zero,4005550 <___vfprintf_internal_r+0x1c90>
 40044ec:	d9002917 	ldw	r4,164(sp)
 40044f0:	2003d016 	blt	r4,zero,4005434 <___vfprintf_internal_r+0x1b74>
 40044f4:	200d883a 	mov	r6,r4
 40044f8:	000b883a 	mov	r5,zero
 40044fc:	8009883a 	mov	r4,r16
 4004500:	da003d15 	stw	r8,244(sp)
 4004504:	40090d00 	call	40090d0 <memchr>
 4004508:	da003d17 	ldw	r8,244(sp)
 400450c:	10045426 	beq	r2,zero,4005660 <___vfprintf_internal_r+0x1da0>
 4004510:	1405c83a 	sub	r2,r2,r16
 4004514:	d8802e15 	stw	r2,184(sp)
 4004518:	1003cc16 	blt	r2,zero,400544c <___vfprintf_internal_r+0x1b8c>
 400451c:	df002783 	ldbu	fp,158(sp)
 4004520:	d8802a15 	stw	r2,168(sp)
 4004524:	dcc02d15 	stw	r19,180(sp)
 4004528:	d8002915 	stw	zero,164(sp)
 400452c:	d8003215 	stw	zero,200(sp)
 4004530:	003eb006 	br	4003ff4 <__alt_mem_onchip_memory2_0+0xfc001ff4>
 4004534:	18c03fcc 	andi	r3,r3,255
 4004538:	183f9b26 	beq	r3,zero,40043a8 <__alt_mem_onchip_memory2_0+0xfc0023a8>
 400453c:	d9c02785 	stb	r7,158(sp)
 4004540:	003f9906 	br	40043a8 <__alt_mem_onchip_memory2_0+0xfc0023a8>
 4004544:	18c03fcc 	andi	r3,r3,255
 4004548:	1805551e 	bne	r3,zero,4005aa0 <___vfprintf_internal_r+0x21e0>
 400454c:	014100b4 	movhi	r5,1026
 4004550:	2972ad04 	addi	r5,r5,-13644
 4004554:	d9403915 	stw	r5,228(sp)
 4004558:	9080080c 	andi	r2,r18,32
 400455c:	103fae1e 	bne	r2,zero,4004418 <__alt_mem_onchip_memory2_0+0xfc002418>
 4004560:	9080040c 	andi	r2,r18,16
 4004564:	1002de26 	beq	r2,zero,40050e0 <___vfprintf_internal_r+0x1820>
 4004568:	d8c02d17 	ldw	r3,180(sp)
 400456c:	002d883a 	mov	r22,zero
 4004570:	1cc00017 	ldw	r19,0(r3)
 4004574:	18c00104 	addi	r3,r3,4
 4004578:	d8c02d15 	stw	r3,180(sp)
 400457c:	003fab06 	br	400442c <__alt_mem_onchip_memory2_0+0xfc00242c>
 4004580:	38803fcc 	andi	r2,r7,255
 4004584:	1080201c 	xori	r2,r2,128
 4004588:	10bfe004 	addi	r2,r2,-128
 400458c:	1002d21e 	bne	r2,zero,40050d8 <___vfprintf_internal_r+0x1818>
 4004590:	00c00044 	movi	r3,1
 4004594:	01c00804 	movi	r7,32
 4004598:	ac400007 	ldb	r17,0(r21)
 400459c:	003d2906 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40045a0:	94800054 	ori	r18,r18,1
 40045a4:	ac400007 	ldb	r17,0(r21)
 40045a8:	003d2606 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40045ac:	18c03fcc 	andi	r3,r3,255
 40045b0:	183e0526 	beq	r3,zero,4003dc8 <__alt_mem_onchip_memory2_0+0xfc001dc8>
 40045b4:	d9c02785 	stb	r7,158(sp)
 40045b8:	003e0306 	br	4003dc8 <__alt_mem_onchip_memory2_0+0xfc001dc8>
 40045bc:	94801014 	ori	r18,r18,64
 40045c0:	ac400007 	ldb	r17,0(r21)
 40045c4:	003d1f06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40045c8:	ac400007 	ldb	r17,0(r21)
 40045cc:	8a438726 	beq	r17,r9,40053ec <___vfprintf_internal_r+0x1b2c>
 40045d0:	94800414 	ori	r18,r18,16
 40045d4:	003d1b06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40045d8:	18c03fcc 	andi	r3,r3,255
 40045dc:	1805341e 	bne	r3,zero,4005ab0 <___vfprintf_internal_r+0x21f0>
 40045e0:	9080080c 	andi	r2,r18,32
 40045e4:	1002cd26 	beq	r2,zero,400511c <___vfprintf_internal_r+0x185c>
 40045e8:	d9402d17 	ldw	r5,180(sp)
 40045ec:	d9002f17 	ldw	r4,188(sp)
 40045f0:	28800017 	ldw	r2,0(r5)
 40045f4:	2007d7fa 	srai	r3,r4,31
 40045f8:	29400104 	addi	r5,r5,4
 40045fc:	d9402d15 	stw	r5,180(sp)
 4004600:	11000015 	stw	r4,0(r2)
 4004604:	10c00115 	stw	r3,4(r2)
 4004608:	003ce506 	br	40039a0 <__alt_mem_onchip_memory2_0+0xfc0019a0>
 400460c:	d8c02d17 	ldw	r3,180(sp)
 4004610:	d9002d17 	ldw	r4,180(sp)
 4004614:	d8002785 	stb	zero,158(sp)
 4004618:	18800017 	ldw	r2,0(r3)
 400461c:	21000104 	addi	r4,r4,4
 4004620:	00c00044 	movi	r3,1
 4004624:	d8c02a15 	stw	r3,168(sp)
 4004628:	d8801405 	stb	r2,80(sp)
 400462c:	d9002d15 	stw	r4,180(sp)
 4004630:	d8c02e15 	stw	r3,184(sp)
 4004634:	d8002915 	stw	zero,164(sp)
 4004638:	d8003215 	stw	zero,200(sp)
 400463c:	dc001404 	addi	r16,sp,80
 4004640:	0039883a 	mov	fp,zero
 4004644:	003e7206 	br	4004010 <__alt_mem_onchip_memory2_0+0xfc002010>
 4004648:	010100b4 	movhi	r4,1026
 400464c:	2132ad04 	addi	r4,r4,-13644
 4004650:	0039883a 	mov	fp,zero
 4004654:	d9003915 	stw	r4,228(sp)
 4004658:	04401e04 	movi	r17,120
 400465c:	003f8206 	br	4004468 <__alt_mem_onchip_memory2_0+0xfc002468>
 4004660:	18c03fcc 	andi	r3,r3,255
 4004664:	1805061e 	bne	r3,zero,4005a80 <___vfprintf_internal_r+0x21c0>
 4004668:	883d9126 	beq	r17,zero,4003cb0 <__alt_mem_onchip_memory2_0+0xfc001cb0>
 400466c:	00c00044 	movi	r3,1
 4004670:	d8c02a15 	stw	r3,168(sp)
 4004674:	dc401405 	stb	r17,80(sp)
 4004678:	d8002785 	stb	zero,158(sp)
 400467c:	003fec06 	br	4004630 <__alt_mem_onchip_memory2_0+0xfc002630>
 4004680:	014100b4 	movhi	r5,1026
 4004684:	2972ad04 	addi	r5,r5,-13644
 4004688:	d9403915 	stw	r5,228(sp)
 400468c:	d8c02d15 	stw	r3,180(sp)
 4004690:	1025883a 	mov	r18,r2
 4004694:	04401e04 	movi	r17,120
 4004698:	9d84b03a 	or	r2,r19,r22
 400469c:	1000fc1e 	bne	r2,zero,4004a90 <___vfprintf_internal_r+0x11d0>
 40046a0:	0039883a 	mov	fp,zero
 40046a4:	00800084 	movi	r2,2
 40046a8:	10803fcc 	andi	r2,r2,255
 40046ac:	00c00044 	movi	r3,1
 40046b0:	10c20f26 	beq	r2,r3,4004ef0 <___vfprintf_internal_r+0x1630>
 40046b4:	00c00084 	movi	r3,2
 40046b8:	10fd6326 	beq	r2,r3,4003c48 <__alt_mem_onchip_memory2_0+0xfc001c48>
 40046bc:	003e2d06 	br	4003f74 <__alt_mem_onchip_memory2_0+0xfc001f74>
 40046c0:	d8c02017 	ldw	r3,128(sp)
 40046c4:	003e9306 	br	4004114 <__alt_mem_onchip_memory2_0+0xfc002114>
 40046c8:	00801944 	movi	r2,101
 40046cc:	14407e0e 	bge	r2,r17,40048c8 <___vfprintf_internal_r+0x1008>
 40046d0:	d9003617 	ldw	r4,216(sp)
 40046d4:	d9403817 	ldw	r5,224(sp)
 40046d8:	000d883a 	mov	r6,zero
 40046dc:	000f883a 	mov	r7,zero
 40046e0:	d8c03c15 	stw	r3,240(sp)
 40046e4:	da003d15 	stw	r8,244(sp)
 40046e8:	400fdec0 	call	400fdec <__eqdf2>
 40046ec:	d8c03c17 	ldw	r3,240(sp)
 40046f0:	da003d17 	ldw	r8,244(sp)
 40046f4:	1000f71e 	bne	r2,zero,4004ad4 <___vfprintf_internal_r+0x1214>
 40046f8:	d8801f17 	ldw	r2,124(sp)
 40046fc:	010100b4 	movhi	r4,1026
 4004700:	2132b404 	addi	r4,r4,-13616
 4004704:	18c00044 	addi	r3,r3,1
 4004708:	10800044 	addi	r2,r2,1
 400470c:	41000015 	stw	r4,0(r8)
 4004710:	01000044 	movi	r4,1
 4004714:	41000115 	stw	r4,4(r8)
 4004718:	d8c02015 	stw	r3,128(sp)
 400471c:	d8801f15 	stw	r2,124(sp)
 4004720:	010001c4 	movi	r4,7
 4004724:	2082b816 	blt	r4,r2,4005208 <___vfprintf_internal_r+0x1948>
 4004728:	42000204 	addi	r8,r8,8
 400472c:	d8802617 	ldw	r2,152(sp)
 4004730:	d9403317 	ldw	r5,204(sp)
 4004734:	11400216 	blt	r2,r5,4004740 <___vfprintf_internal_r+0xe80>
 4004738:	9080004c 	andi	r2,r18,1
 400473c:	103ed526 	beq	r2,zero,4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 4004740:	d8803717 	ldw	r2,220(sp)
 4004744:	d9003417 	ldw	r4,208(sp)
 4004748:	d9403717 	ldw	r5,220(sp)
 400474c:	1887883a 	add	r3,r3,r2
 4004750:	d8801f17 	ldw	r2,124(sp)
 4004754:	41000015 	stw	r4,0(r8)
 4004758:	41400115 	stw	r5,4(r8)
 400475c:	10800044 	addi	r2,r2,1
 4004760:	d8c02015 	stw	r3,128(sp)
 4004764:	d8801f15 	stw	r2,124(sp)
 4004768:	010001c4 	movi	r4,7
 400476c:	20832916 	blt	r4,r2,4005414 <___vfprintf_internal_r+0x1b54>
 4004770:	42000204 	addi	r8,r8,8
 4004774:	d8803317 	ldw	r2,204(sp)
 4004778:	143fffc4 	addi	r16,r2,-1
 400477c:	043ec50e 	bge	zero,r16,4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 4004780:	04400404 	movi	r17,16
 4004784:	d8801f17 	ldw	r2,124(sp)
 4004788:	8c00880e 	bge	r17,r16,40049ac <___vfprintf_internal_r+0x10ec>
 400478c:	014100b4 	movhi	r5,1026
 4004790:	2972bc84 	addi	r5,r5,-13582
 4004794:	d9402b15 	stw	r5,172(sp)
 4004798:	058001c4 	movi	r22,7
 400479c:	dcc02c17 	ldw	r19,176(sp)
 40047a0:	00000306 	br	40047b0 <___vfprintf_internal_r+0xef0>
 40047a4:	42000204 	addi	r8,r8,8
 40047a8:	843ffc04 	addi	r16,r16,-16
 40047ac:	8c00820e 	bge	r17,r16,40049b8 <___vfprintf_internal_r+0x10f8>
 40047b0:	18c00404 	addi	r3,r3,16
 40047b4:	10800044 	addi	r2,r2,1
 40047b8:	45000015 	stw	r20,0(r8)
 40047bc:	44400115 	stw	r17,4(r8)
 40047c0:	d8c02015 	stw	r3,128(sp)
 40047c4:	d8801f15 	stw	r2,124(sp)
 40047c8:	b0bff60e 	bge	r22,r2,40047a4 <__alt_mem_onchip_memory2_0+0xfc0027a4>
 40047cc:	d9801e04 	addi	r6,sp,120
 40047d0:	b80b883a 	mov	r5,r23
 40047d4:	9809883a 	mov	r4,r19
 40047d8:	400c2c80 	call	400c2c8 <__sprint_r>
 40047dc:	103d3a1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40047e0:	d8c02017 	ldw	r3,128(sp)
 40047e4:	d8801f17 	ldw	r2,124(sp)
 40047e8:	da000404 	addi	r8,sp,16
 40047ec:	003fee06 	br	40047a8 <__alt_mem_onchip_memory2_0+0xfc0027a8>
 40047f0:	d9403117 	ldw	r5,196(sp)
 40047f4:	d8802a17 	ldw	r2,168(sp)
 40047f8:	28adc83a 	sub	r22,r5,r2
 40047fc:	05be630e 	bge	zero,r22,400418c <__alt_mem_onchip_memory2_0+0xfc00218c>
 4004800:	07000404 	movi	fp,16
 4004804:	d8801f17 	ldw	r2,124(sp)
 4004808:	e5838f0e 	bge	fp,r22,4005648 <___vfprintf_internal_r+0x1d88>
 400480c:	014100b4 	movhi	r5,1026
 4004810:	2972bc84 	addi	r5,r5,-13582
 4004814:	dc403015 	stw	r17,192(sp)
 4004818:	d9402b15 	stw	r5,172(sp)
 400481c:	b023883a 	mov	r17,r22
 4004820:	04c001c4 	movi	r19,7
 4004824:	a82d883a 	mov	r22,r21
 4004828:	902b883a 	mov	r21,r18
 400482c:	8025883a 	mov	r18,r16
 4004830:	dc002c17 	ldw	r16,176(sp)
 4004834:	00000306 	br	4004844 <___vfprintf_internal_r+0xf84>
 4004838:	8c7ffc04 	addi	r17,r17,-16
 400483c:	42000204 	addi	r8,r8,8
 4004840:	e440110e 	bge	fp,r17,4004888 <___vfprintf_internal_r+0xfc8>
 4004844:	18c00404 	addi	r3,r3,16
 4004848:	10800044 	addi	r2,r2,1
 400484c:	45000015 	stw	r20,0(r8)
 4004850:	47000115 	stw	fp,4(r8)
 4004854:	d8c02015 	stw	r3,128(sp)
 4004858:	d8801f15 	stw	r2,124(sp)
 400485c:	98bff60e 	bge	r19,r2,4004838 <__alt_mem_onchip_memory2_0+0xfc002838>
 4004860:	d9801e04 	addi	r6,sp,120
 4004864:	b80b883a 	mov	r5,r23
 4004868:	8009883a 	mov	r4,r16
 400486c:	400c2c80 	call	400c2c8 <__sprint_r>
 4004870:	103d151e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004874:	8c7ffc04 	addi	r17,r17,-16
 4004878:	d8c02017 	ldw	r3,128(sp)
 400487c:	d8801f17 	ldw	r2,124(sp)
 4004880:	da000404 	addi	r8,sp,16
 4004884:	e47fef16 	blt	fp,r17,4004844 <__alt_mem_onchip_memory2_0+0xfc002844>
 4004888:	9021883a 	mov	r16,r18
 400488c:	a825883a 	mov	r18,r21
 4004890:	b02b883a 	mov	r21,r22
 4004894:	882d883a 	mov	r22,r17
 4004898:	dc403017 	ldw	r17,192(sp)
 400489c:	d9002b17 	ldw	r4,172(sp)
 40048a0:	1d87883a 	add	r3,r3,r22
 40048a4:	10800044 	addi	r2,r2,1
 40048a8:	41000015 	stw	r4,0(r8)
 40048ac:	45800115 	stw	r22,4(r8)
 40048b0:	d8c02015 	stw	r3,128(sp)
 40048b4:	d8801f15 	stw	r2,124(sp)
 40048b8:	010001c4 	movi	r4,7
 40048bc:	20818e16 	blt	r4,r2,4004ef8 <___vfprintf_internal_r+0x1638>
 40048c0:	42000204 	addi	r8,r8,8
 40048c4:	003e3106 	br	400418c <__alt_mem_onchip_memory2_0+0xfc00218c>
 40048c8:	d9403317 	ldw	r5,204(sp)
 40048cc:	00800044 	movi	r2,1
 40048d0:	18c00044 	addi	r3,r3,1
 40048d4:	1141530e 	bge	r2,r5,4004e24 <___vfprintf_internal_r+0x1564>
 40048d8:	dc401f17 	ldw	r17,124(sp)
 40048dc:	00800044 	movi	r2,1
 40048e0:	40800115 	stw	r2,4(r8)
 40048e4:	8c400044 	addi	r17,r17,1
 40048e8:	44000015 	stw	r16,0(r8)
 40048ec:	d8c02015 	stw	r3,128(sp)
 40048f0:	dc401f15 	stw	r17,124(sp)
 40048f4:	008001c4 	movi	r2,7
 40048f8:	14416b16 	blt	r2,r17,4004ea8 <___vfprintf_internal_r+0x15e8>
 40048fc:	42000204 	addi	r8,r8,8
 4004900:	d8803717 	ldw	r2,220(sp)
 4004904:	d9003417 	ldw	r4,208(sp)
 4004908:	8c400044 	addi	r17,r17,1
 400490c:	10c7883a 	add	r3,r2,r3
 4004910:	40800115 	stw	r2,4(r8)
 4004914:	41000015 	stw	r4,0(r8)
 4004918:	d8c02015 	stw	r3,128(sp)
 400491c:	dc401f15 	stw	r17,124(sp)
 4004920:	008001c4 	movi	r2,7
 4004924:	14416916 	blt	r2,r17,4004ecc <___vfprintf_internal_r+0x160c>
 4004928:	45800204 	addi	r22,r8,8
 400492c:	d9003617 	ldw	r4,216(sp)
 4004930:	d9403817 	ldw	r5,224(sp)
 4004934:	000d883a 	mov	r6,zero
 4004938:	000f883a 	mov	r7,zero
 400493c:	d8c03c15 	stw	r3,240(sp)
 4004940:	400fdec0 	call	400fdec <__eqdf2>
 4004944:	d8c03c17 	ldw	r3,240(sp)
 4004948:	1000bc26 	beq	r2,zero,4004c3c <___vfprintf_internal_r+0x137c>
 400494c:	d9403317 	ldw	r5,204(sp)
 4004950:	84000044 	addi	r16,r16,1
 4004954:	8c400044 	addi	r17,r17,1
 4004958:	28bfffc4 	addi	r2,r5,-1
 400495c:	1887883a 	add	r3,r3,r2
 4004960:	b0800115 	stw	r2,4(r22)
 4004964:	b4000015 	stw	r16,0(r22)
 4004968:	d8c02015 	stw	r3,128(sp)
 400496c:	dc401f15 	stw	r17,124(sp)
 4004970:	008001c4 	movi	r2,7
 4004974:	14414316 	blt	r2,r17,4004e84 <___vfprintf_internal_r+0x15c4>
 4004978:	b5800204 	addi	r22,r22,8
 400497c:	d9003a17 	ldw	r4,232(sp)
 4004980:	df0022c4 	addi	fp,sp,139
 4004984:	8c400044 	addi	r17,r17,1
 4004988:	20c7883a 	add	r3,r4,r3
 400498c:	b7000015 	stw	fp,0(r22)
 4004990:	b1000115 	stw	r4,4(r22)
 4004994:	d8c02015 	stw	r3,128(sp)
 4004998:	dc401f15 	stw	r17,124(sp)
 400499c:	008001c4 	movi	r2,7
 40049a0:	14400e16 	blt	r2,r17,40049dc <___vfprintf_internal_r+0x111c>
 40049a4:	b2000204 	addi	r8,r22,8
 40049a8:	003e3a06 	br	4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 40049ac:	010100b4 	movhi	r4,1026
 40049b0:	2132bc84 	addi	r4,r4,-13582
 40049b4:	d9002b15 	stw	r4,172(sp)
 40049b8:	d9002b17 	ldw	r4,172(sp)
 40049bc:	1c07883a 	add	r3,r3,r16
 40049c0:	44000115 	stw	r16,4(r8)
 40049c4:	41000015 	stw	r4,0(r8)
 40049c8:	10800044 	addi	r2,r2,1
 40049cc:	d8c02015 	stw	r3,128(sp)
 40049d0:	d8801f15 	stw	r2,124(sp)
 40049d4:	010001c4 	movi	r4,7
 40049d8:	20be2d0e 	bge	r4,r2,4004290 <__alt_mem_onchip_memory2_0+0xfc002290>
 40049dc:	d9002c17 	ldw	r4,176(sp)
 40049e0:	d9801e04 	addi	r6,sp,120
 40049e4:	b80b883a 	mov	r5,r23
 40049e8:	400c2c80 	call	400c2c8 <__sprint_r>
 40049ec:	103cb61e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40049f0:	d8c02017 	ldw	r3,128(sp)
 40049f4:	da000404 	addi	r8,sp,16
 40049f8:	003e2606 	br	4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 40049fc:	d9002c17 	ldw	r4,176(sp)
 4004a00:	d9801e04 	addi	r6,sp,120
 4004a04:	b80b883a 	mov	r5,r23
 4004a08:	400c2c80 	call	400c2c8 <__sprint_r>
 4004a0c:	103e5d26 	beq	r2,zero,4004384 <__alt_mem_onchip_memory2_0+0xfc002384>
 4004a10:	003cad06 	br	4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004a14:	d9002c17 	ldw	r4,176(sp)
 4004a18:	d9801e04 	addi	r6,sp,120
 4004a1c:	b80b883a 	mov	r5,r23
 4004a20:	400c2c80 	call	400c2c8 <__sprint_r>
 4004a24:	103ca81e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004a28:	d8c02017 	ldw	r3,128(sp)
 4004a2c:	da000404 	addi	r8,sp,16
 4004a30:	003e0b06 	br	4004260 <__alt_mem_onchip_memory2_0+0xfc002260>
 4004a34:	d9002c17 	ldw	r4,176(sp)
 4004a38:	d9801e04 	addi	r6,sp,120
 4004a3c:	b80b883a 	mov	r5,r23
 4004a40:	400c2c80 	call	400c2c8 <__sprint_r>
 4004a44:	103ca01e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004a48:	d8c02017 	ldw	r3,128(sp)
 4004a4c:	da000404 	addi	r8,sp,16
 4004a50:	003dbd06 	br	4004148 <__alt_mem_onchip_memory2_0+0xfc002148>
 4004a54:	d9002c17 	ldw	r4,176(sp)
 4004a58:	d9801e04 	addi	r6,sp,120
 4004a5c:	b80b883a 	mov	r5,r23
 4004a60:	400c2c80 	call	400c2c8 <__sprint_r>
 4004a64:	103c981e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004a68:	d8c02017 	ldw	r3,128(sp)
 4004a6c:	da000404 	addi	r8,sp,16
 4004a70:	003dc306 	br	4004180 <__alt_mem_onchip_memory2_0+0xfc002180>
 4004a74:	d8802917 	ldw	r2,164(sp)
 4004a78:	d8002785 	stb	zero,158(sp)
 4004a7c:	103f0616 	blt	r2,zero,4004698 <__alt_mem_onchip_memory2_0+0xfc002698>
 4004a80:	00ffdfc4 	movi	r3,-129
 4004a84:	9d84b03a 	or	r2,r19,r22
 4004a88:	90e4703a 	and	r18,r18,r3
 4004a8c:	103c6b26 	beq	r2,zero,4003c3c <__alt_mem_onchip_memory2_0+0xfc001c3c>
 4004a90:	0039883a 	mov	fp,zero
 4004a94:	003e7406 	br	4004468 <__alt_mem_onchip_memory2_0+0xfc002468>
 4004a98:	9080040c 	andi	r2,r18,16
 4004a9c:	1001b326 	beq	r2,zero,400516c <___vfprintf_internal_r+0x18ac>
 4004aa0:	d9002d17 	ldw	r4,180(sp)
 4004aa4:	d9402917 	ldw	r5,164(sp)
 4004aa8:	d8002785 	stb	zero,158(sp)
 4004aac:	20800104 	addi	r2,r4,4
 4004ab0:	24c00017 	ldw	r19,0(r4)
 4004ab4:	002d883a 	mov	r22,zero
 4004ab8:	2801b516 	blt	r5,zero,4005190 <___vfprintf_internal_r+0x18d0>
 4004abc:	00ffdfc4 	movi	r3,-129
 4004ac0:	d8802d15 	stw	r2,180(sp)
 4004ac4:	90e4703a 	and	r18,r18,r3
 4004ac8:	983d2726 	beq	r19,zero,4003f68 <__alt_mem_onchip_memory2_0+0xfc001f68>
 4004acc:	0039883a 	mov	fp,zero
 4004ad0:	003d2a06 	br	4003f7c <__alt_mem_onchip_memory2_0+0xfc001f7c>
 4004ad4:	dc402617 	ldw	r17,152(sp)
 4004ad8:	0441d30e 	bge	zero,r17,4005228 <___vfprintf_internal_r+0x1968>
 4004adc:	dc403217 	ldw	r17,200(sp)
 4004ae0:	d8803317 	ldw	r2,204(sp)
 4004ae4:	1440010e 	bge	r2,r17,4004aec <___vfprintf_internal_r+0x122c>
 4004ae8:	1023883a 	mov	r17,r2
 4004aec:	04400a0e 	bge	zero,r17,4004b18 <___vfprintf_internal_r+0x1258>
 4004af0:	d8801f17 	ldw	r2,124(sp)
 4004af4:	1c47883a 	add	r3,r3,r17
 4004af8:	44000015 	stw	r16,0(r8)
 4004afc:	10800044 	addi	r2,r2,1
 4004b00:	44400115 	stw	r17,4(r8)
 4004b04:	d8c02015 	stw	r3,128(sp)
 4004b08:	d8801f15 	stw	r2,124(sp)
 4004b0c:	010001c4 	movi	r4,7
 4004b10:	20826516 	blt	r4,r2,40054a8 <___vfprintf_internal_r+0x1be8>
 4004b14:	42000204 	addi	r8,r8,8
 4004b18:	88026116 	blt	r17,zero,40054a0 <___vfprintf_internal_r+0x1be0>
 4004b1c:	d9003217 	ldw	r4,200(sp)
 4004b20:	2463c83a 	sub	r17,r4,r17
 4004b24:	04407b0e 	bge	zero,r17,4004d14 <___vfprintf_internal_r+0x1454>
 4004b28:	05800404 	movi	r22,16
 4004b2c:	d8801f17 	ldw	r2,124(sp)
 4004b30:	b4419d0e 	bge	r22,r17,40051a8 <___vfprintf_internal_r+0x18e8>
 4004b34:	010100b4 	movhi	r4,1026
 4004b38:	2132bc84 	addi	r4,r4,-13582
 4004b3c:	d9002b15 	stw	r4,172(sp)
 4004b40:	070001c4 	movi	fp,7
 4004b44:	dcc02c17 	ldw	r19,176(sp)
 4004b48:	00000306 	br	4004b58 <___vfprintf_internal_r+0x1298>
 4004b4c:	42000204 	addi	r8,r8,8
 4004b50:	8c7ffc04 	addi	r17,r17,-16
 4004b54:	b441970e 	bge	r22,r17,40051b4 <___vfprintf_internal_r+0x18f4>
 4004b58:	18c00404 	addi	r3,r3,16
 4004b5c:	10800044 	addi	r2,r2,1
 4004b60:	45000015 	stw	r20,0(r8)
 4004b64:	45800115 	stw	r22,4(r8)
 4004b68:	d8c02015 	stw	r3,128(sp)
 4004b6c:	d8801f15 	stw	r2,124(sp)
 4004b70:	e0bff60e 	bge	fp,r2,4004b4c <__alt_mem_onchip_memory2_0+0xfc002b4c>
 4004b74:	d9801e04 	addi	r6,sp,120
 4004b78:	b80b883a 	mov	r5,r23
 4004b7c:	9809883a 	mov	r4,r19
 4004b80:	400c2c80 	call	400c2c8 <__sprint_r>
 4004b84:	103c501e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004b88:	d8c02017 	ldw	r3,128(sp)
 4004b8c:	d8801f17 	ldw	r2,124(sp)
 4004b90:	da000404 	addi	r8,sp,16
 4004b94:	003fee06 	br	4004b50 <__alt_mem_onchip_memory2_0+0xfc002b50>
 4004b98:	d9002c17 	ldw	r4,176(sp)
 4004b9c:	d9801e04 	addi	r6,sp,120
 4004ba0:	b80b883a 	mov	r5,r23
 4004ba4:	400c2c80 	call	400c2c8 <__sprint_r>
 4004ba8:	103c471e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004bac:	d8c02017 	ldw	r3,128(sp)
 4004bb0:	df002787 	ldb	fp,158(sp)
 4004bb4:	da000404 	addi	r8,sp,16
 4004bb8:	003d5606 	br	4004114 <__alt_mem_onchip_memory2_0+0xfc002114>
 4004bbc:	9080040c 	andi	r2,r18,16
 4004bc0:	10016126 	beq	r2,zero,4005148 <___vfprintf_internal_r+0x1888>
 4004bc4:	d8802d17 	ldw	r2,180(sp)
 4004bc8:	14c00017 	ldw	r19,0(r2)
 4004bcc:	10800104 	addi	r2,r2,4
 4004bd0:	d8802d15 	stw	r2,180(sp)
 4004bd4:	982dd7fa 	srai	r22,r19,31
 4004bd8:	b005883a 	mov	r2,r22
 4004bdc:	003c8206 	br	4003de8 <__alt_mem_onchip_memory2_0+0xfc001de8>
 4004be0:	9080040c 	andi	r2,r18,16
 4004be4:	10003526 	beq	r2,zero,4004cbc <___vfprintf_internal_r+0x13fc>
 4004be8:	d9402d17 	ldw	r5,180(sp)
 4004bec:	d8c02917 	ldw	r3,164(sp)
 4004bf0:	d8002785 	stb	zero,158(sp)
 4004bf4:	28800104 	addi	r2,r5,4
 4004bf8:	2cc00017 	ldw	r19,0(r5)
 4004bfc:	002d883a 	mov	r22,zero
 4004c00:	18003716 	blt	r3,zero,4004ce0 <___vfprintf_internal_r+0x1420>
 4004c04:	00ffdfc4 	movi	r3,-129
 4004c08:	d8802d15 	stw	r2,180(sp)
 4004c0c:	90e4703a 	and	r18,r18,r3
 4004c10:	0039883a 	mov	fp,zero
 4004c14:	983df326 	beq	r19,zero,40043e4 <__alt_mem_onchip_memory2_0+0xfc0023e4>
 4004c18:	00800244 	movi	r2,9
 4004c1c:	14fc7b36 	bltu	r2,r19,4003e0c <__alt_mem_onchip_memory2_0+0xfc001e0c>
 4004c20:	d8c02817 	ldw	r3,160(sp)
 4004c24:	dc001dc4 	addi	r16,sp,119
 4004c28:	9cc00c04 	addi	r19,r19,48
 4004c2c:	1c07c83a 	sub	r3,r3,r16
 4004c30:	dcc01dc5 	stb	r19,119(sp)
 4004c34:	d8c02e15 	stw	r3,184(sp)
 4004c38:	003ce806 	br	4003fdc <__alt_mem_onchip_memory2_0+0xfc001fdc>
 4004c3c:	d8803317 	ldw	r2,204(sp)
 4004c40:	143fffc4 	addi	r16,r2,-1
 4004c44:	043f4d0e 	bge	zero,r16,400497c <__alt_mem_onchip_memory2_0+0xfc00297c>
 4004c48:	07000404 	movi	fp,16
 4004c4c:	e400810e 	bge	fp,r16,4004e54 <___vfprintf_internal_r+0x1594>
 4004c50:	014100b4 	movhi	r5,1026
 4004c54:	2972bc84 	addi	r5,r5,-13582
 4004c58:	d9402b15 	stw	r5,172(sp)
 4004c5c:	01c001c4 	movi	r7,7
 4004c60:	dcc02c17 	ldw	r19,176(sp)
 4004c64:	00000306 	br	4004c74 <___vfprintf_internal_r+0x13b4>
 4004c68:	b5800204 	addi	r22,r22,8
 4004c6c:	843ffc04 	addi	r16,r16,-16
 4004c70:	e4007b0e 	bge	fp,r16,4004e60 <___vfprintf_internal_r+0x15a0>
 4004c74:	18c00404 	addi	r3,r3,16
 4004c78:	8c400044 	addi	r17,r17,1
 4004c7c:	b5000015 	stw	r20,0(r22)
 4004c80:	b7000115 	stw	fp,4(r22)
 4004c84:	d8c02015 	stw	r3,128(sp)
 4004c88:	dc401f15 	stw	r17,124(sp)
 4004c8c:	3c7ff60e 	bge	r7,r17,4004c68 <__alt_mem_onchip_memory2_0+0xfc002c68>
 4004c90:	d9801e04 	addi	r6,sp,120
 4004c94:	b80b883a 	mov	r5,r23
 4004c98:	9809883a 	mov	r4,r19
 4004c9c:	d9c03c15 	stw	r7,240(sp)
 4004ca0:	400c2c80 	call	400c2c8 <__sprint_r>
 4004ca4:	d9c03c17 	ldw	r7,240(sp)
 4004ca8:	103c071e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004cac:	d8c02017 	ldw	r3,128(sp)
 4004cb0:	dc401f17 	ldw	r17,124(sp)
 4004cb4:	dd800404 	addi	r22,sp,16
 4004cb8:	003fec06 	br	4004c6c <__alt_mem_onchip_memory2_0+0xfc002c6c>
 4004cbc:	9080100c 	andi	r2,r18,64
 4004cc0:	d8002785 	stb	zero,158(sp)
 4004cc4:	10010e26 	beq	r2,zero,4005100 <___vfprintf_internal_r+0x1840>
 4004cc8:	d9002d17 	ldw	r4,180(sp)
 4004ccc:	d9402917 	ldw	r5,164(sp)
 4004cd0:	002d883a 	mov	r22,zero
 4004cd4:	20800104 	addi	r2,r4,4
 4004cd8:	24c0000b 	ldhu	r19,0(r4)
 4004cdc:	283fc90e 	bge	r5,zero,4004c04 <__alt_mem_onchip_memory2_0+0xfc002c04>
 4004ce0:	d8802d15 	stw	r2,180(sp)
 4004ce4:	0039883a 	mov	fp,zero
 4004ce8:	9d84b03a 	or	r2,r19,r22
 4004cec:	103c461e 	bne	r2,zero,4003e08 <__alt_mem_onchip_memory2_0+0xfc001e08>
 4004cf0:	00800044 	movi	r2,1
 4004cf4:	003e6c06 	br	40046a8 <__alt_mem_onchip_memory2_0+0xfc0026a8>
 4004cf8:	d9002c17 	ldw	r4,176(sp)
 4004cfc:	d9801e04 	addi	r6,sp,120
 4004d00:	b80b883a 	mov	r5,r23
 4004d04:	400c2c80 	call	400c2c8 <__sprint_r>
 4004d08:	103bef1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004d0c:	d8c02017 	ldw	r3,128(sp)
 4004d10:	da000404 	addi	r8,sp,16
 4004d14:	d9003217 	ldw	r4,200(sp)
 4004d18:	d8802617 	ldw	r2,152(sp)
 4004d1c:	d9403317 	ldw	r5,204(sp)
 4004d20:	8123883a 	add	r17,r16,r4
 4004d24:	11400216 	blt	r2,r5,4004d30 <___vfprintf_internal_r+0x1470>
 4004d28:	9100004c 	andi	r4,r18,1
 4004d2c:	20000d26 	beq	r4,zero,4004d64 <___vfprintf_internal_r+0x14a4>
 4004d30:	d9003717 	ldw	r4,220(sp)
 4004d34:	d9403417 	ldw	r5,208(sp)
 4004d38:	1907883a 	add	r3,r3,r4
 4004d3c:	d9001f17 	ldw	r4,124(sp)
 4004d40:	41400015 	stw	r5,0(r8)
 4004d44:	d9403717 	ldw	r5,220(sp)
 4004d48:	21000044 	addi	r4,r4,1
 4004d4c:	d8c02015 	stw	r3,128(sp)
 4004d50:	41400115 	stw	r5,4(r8)
 4004d54:	d9001f15 	stw	r4,124(sp)
 4004d58:	014001c4 	movi	r5,7
 4004d5c:	2901e816 	blt	r5,r4,4005500 <___vfprintf_internal_r+0x1c40>
 4004d60:	42000204 	addi	r8,r8,8
 4004d64:	d9003317 	ldw	r4,204(sp)
 4004d68:	8121883a 	add	r16,r16,r4
 4004d6c:	2085c83a 	sub	r2,r4,r2
 4004d70:	8461c83a 	sub	r16,r16,r17
 4004d74:	1400010e 	bge	r2,r16,4004d7c <___vfprintf_internal_r+0x14bc>
 4004d78:	1021883a 	mov	r16,r2
 4004d7c:	04000a0e 	bge	zero,r16,4004da8 <___vfprintf_internal_r+0x14e8>
 4004d80:	d9001f17 	ldw	r4,124(sp)
 4004d84:	1c07883a 	add	r3,r3,r16
 4004d88:	44400015 	stw	r17,0(r8)
 4004d8c:	21000044 	addi	r4,r4,1
 4004d90:	44000115 	stw	r16,4(r8)
 4004d94:	d8c02015 	stw	r3,128(sp)
 4004d98:	d9001f15 	stw	r4,124(sp)
 4004d9c:	014001c4 	movi	r5,7
 4004da0:	2901fb16 	blt	r5,r4,4005590 <___vfprintf_internal_r+0x1cd0>
 4004da4:	42000204 	addi	r8,r8,8
 4004da8:	8001f716 	blt	r16,zero,4005588 <___vfprintf_internal_r+0x1cc8>
 4004dac:	1421c83a 	sub	r16,r2,r16
 4004db0:	043d380e 	bge	zero,r16,4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 4004db4:	04400404 	movi	r17,16
 4004db8:	d8801f17 	ldw	r2,124(sp)
 4004dbc:	8c3efb0e 	bge	r17,r16,40049ac <__alt_mem_onchip_memory2_0+0xfc0029ac>
 4004dc0:	014100b4 	movhi	r5,1026
 4004dc4:	2972bc84 	addi	r5,r5,-13582
 4004dc8:	d9402b15 	stw	r5,172(sp)
 4004dcc:	058001c4 	movi	r22,7
 4004dd0:	dcc02c17 	ldw	r19,176(sp)
 4004dd4:	00000306 	br	4004de4 <___vfprintf_internal_r+0x1524>
 4004dd8:	42000204 	addi	r8,r8,8
 4004ddc:	843ffc04 	addi	r16,r16,-16
 4004de0:	8c3ef50e 	bge	r17,r16,40049b8 <__alt_mem_onchip_memory2_0+0xfc0029b8>
 4004de4:	18c00404 	addi	r3,r3,16
 4004de8:	10800044 	addi	r2,r2,1
 4004dec:	45000015 	stw	r20,0(r8)
 4004df0:	44400115 	stw	r17,4(r8)
 4004df4:	d8c02015 	stw	r3,128(sp)
 4004df8:	d8801f15 	stw	r2,124(sp)
 4004dfc:	b0bff60e 	bge	r22,r2,4004dd8 <__alt_mem_onchip_memory2_0+0xfc002dd8>
 4004e00:	d9801e04 	addi	r6,sp,120
 4004e04:	b80b883a 	mov	r5,r23
 4004e08:	9809883a 	mov	r4,r19
 4004e0c:	400c2c80 	call	400c2c8 <__sprint_r>
 4004e10:	103bad1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004e14:	d8c02017 	ldw	r3,128(sp)
 4004e18:	d8801f17 	ldw	r2,124(sp)
 4004e1c:	da000404 	addi	r8,sp,16
 4004e20:	003fee06 	br	4004ddc <__alt_mem_onchip_memory2_0+0xfc002ddc>
 4004e24:	9088703a 	and	r4,r18,r2
 4004e28:	203eab1e 	bne	r4,zero,40048d8 <__alt_mem_onchip_memory2_0+0xfc0028d8>
 4004e2c:	dc401f17 	ldw	r17,124(sp)
 4004e30:	40800115 	stw	r2,4(r8)
 4004e34:	44000015 	stw	r16,0(r8)
 4004e38:	8c400044 	addi	r17,r17,1
 4004e3c:	d8c02015 	stw	r3,128(sp)
 4004e40:	dc401f15 	stw	r17,124(sp)
 4004e44:	008001c4 	movi	r2,7
 4004e48:	14400e16 	blt	r2,r17,4004e84 <___vfprintf_internal_r+0x15c4>
 4004e4c:	45800204 	addi	r22,r8,8
 4004e50:	003eca06 	br	400497c <__alt_mem_onchip_memory2_0+0xfc00297c>
 4004e54:	010100b4 	movhi	r4,1026
 4004e58:	2132bc84 	addi	r4,r4,-13582
 4004e5c:	d9002b15 	stw	r4,172(sp)
 4004e60:	d8802b17 	ldw	r2,172(sp)
 4004e64:	1c07883a 	add	r3,r3,r16
 4004e68:	8c400044 	addi	r17,r17,1
 4004e6c:	b0800015 	stw	r2,0(r22)
 4004e70:	b4000115 	stw	r16,4(r22)
 4004e74:	d8c02015 	stw	r3,128(sp)
 4004e78:	dc401f15 	stw	r17,124(sp)
 4004e7c:	008001c4 	movi	r2,7
 4004e80:	147ebd0e 	bge	r2,r17,4004978 <__alt_mem_onchip_memory2_0+0xfc002978>
 4004e84:	d9002c17 	ldw	r4,176(sp)
 4004e88:	d9801e04 	addi	r6,sp,120
 4004e8c:	b80b883a 	mov	r5,r23
 4004e90:	400c2c80 	call	400c2c8 <__sprint_r>
 4004e94:	103b8c1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004e98:	d8c02017 	ldw	r3,128(sp)
 4004e9c:	dc401f17 	ldw	r17,124(sp)
 4004ea0:	dd800404 	addi	r22,sp,16
 4004ea4:	003eb506 	br	400497c <__alt_mem_onchip_memory2_0+0xfc00297c>
 4004ea8:	d9002c17 	ldw	r4,176(sp)
 4004eac:	d9801e04 	addi	r6,sp,120
 4004eb0:	b80b883a 	mov	r5,r23
 4004eb4:	400c2c80 	call	400c2c8 <__sprint_r>
 4004eb8:	103b831e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004ebc:	d8c02017 	ldw	r3,128(sp)
 4004ec0:	dc401f17 	ldw	r17,124(sp)
 4004ec4:	da000404 	addi	r8,sp,16
 4004ec8:	003e8d06 	br	4004900 <__alt_mem_onchip_memory2_0+0xfc002900>
 4004ecc:	d9002c17 	ldw	r4,176(sp)
 4004ed0:	d9801e04 	addi	r6,sp,120
 4004ed4:	b80b883a 	mov	r5,r23
 4004ed8:	400c2c80 	call	400c2c8 <__sprint_r>
 4004edc:	103b7a1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004ee0:	d8c02017 	ldw	r3,128(sp)
 4004ee4:	dc401f17 	ldw	r17,124(sp)
 4004ee8:	dd800404 	addi	r22,sp,16
 4004eec:	003e8f06 	br	400492c <__alt_mem_onchip_memory2_0+0xfc00292c>
 4004ef0:	0027883a 	mov	r19,zero
 4004ef4:	003f4a06 	br	4004c20 <__alt_mem_onchip_memory2_0+0xfc002c20>
 4004ef8:	d9002c17 	ldw	r4,176(sp)
 4004efc:	d9801e04 	addi	r6,sp,120
 4004f00:	b80b883a 	mov	r5,r23
 4004f04:	400c2c80 	call	400c2c8 <__sprint_r>
 4004f08:	103b6f1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4004f0c:	d8c02017 	ldw	r3,128(sp)
 4004f10:	da000404 	addi	r8,sp,16
 4004f14:	003c9d06 	br	400418c <__alt_mem_onchip_memory2_0+0xfc00218c>
 4004f18:	04e7c83a 	sub	r19,zero,r19
 4004f1c:	9804c03a 	cmpne	r2,r19,zero
 4004f20:	05adc83a 	sub	r22,zero,r22
 4004f24:	b0adc83a 	sub	r22,r22,r2
 4004f28:	d8802917 	ldw	r2,164(sp)
 4004f2c:	07000b44 	movi	fp,45
 4004f30:	df002785 	stb	fp,158(sp)
 4004f34:	10017b16 	blt	r2,zero,4005524 <___vfprintf_internal_r+0x1c64>
 4004f38:	00bfdfc4 	movi	r2,-129
 4004f3c:	90a4703a 	and	r18,r18,r2
 4004f40:	003bb106 	br	4003e08 <__alt_mem_onchip_memory2_0+0xfc001e08>
 4004f44:	d9003617 	ldw	r4,216(sp)
 4004f48:	d9403817 	ldw	r5,224(sp)
 4004f4c:	da003d15 	stw	r8,244(sp)
 4004f50:	400aae00 	call	400aae0 <__fpclassifyd>
 4004f54:	da003d17 	ldw	r8,244(sp)
 4004f58:	1000f026 	beq	r2,zero,400531c <___vfprintf_internal_r+0x1a5c>
 4004f5c:	d9002917 	ldw	r4,164(sp)
 4004f60:	05bff7c4 	movi	r22,-33
 4004f64:	00bfffc4 	movi	r2,-1
 4004f68:	8dac703a 	and	r22,r17,r22
 4004f6c:	20820026 	beq	r4,r2,4005770 <___vfprintf_internal_r+0x1eb0>
 4004f70:	008011c4 	movi	r2,71
 4004f74:	b081f726 	beq	r22,r2,4005754 <___vfprintf_internal_r+0x1e94>
 4004f78:	d9003817 	ldw	r4,224(sp)
 4004f7c:	90c04014 	ori	r3,r18,256
 4004f80:	d8c02b15 	stw	r3,172(sp)
 4004f84:	20021516 	blt	r4,zero,40057dc <___vfprintf_internal_r+0x1f1c>
 4004f88:	dcc03817 	ldw	r19,224(sp)
 4004f8c:	d8002a05 	stb	zero,168(sp)
 4004f90:	00801984 	movi	r2,102
 4004f94:	8881f926 	beq	r17,r2,400577c <___vfprintf_internal_r+0x1ebc>
 4004f98:	00801184 	movi	r2,70
 4004f9c:	88821c26 	beq	r17,r2,4005810 <___vfprintf_internal_r+0x1f50>
 4004fa0:	00801144 	movi	r2,69
 4004fa4:	b081ef26 	beq	r22,r2,4005764 <___vfprintf_internal_r+0x1ea4>
 4004fa8:	d8c02917 	ldw	r3,164(sp)
 4004fac:	d8802104 	addi	r2,sp,132
 4004fb0:	d8800315 	stw	r2,12(sp)
 4004fb4:	d9403617 	ldw	r5,216(sp)
 4004fb8:	d8802504 	addi	r2,sp,148
 4004fbc:	d9002c17 	ldw	r4,176(sp)
 4004fc0:	d8800215 	stw	r2,8(sp)
 4004fc4:	d8802604 	addi	r2,sp,152
 4004fc8:	d8c00015 	stw	r3,0(sp)
 4004fcc:	d8800115 	stw	r2,4(sp)
 4004fd0:	01c00084 	movi	r7,2
 4004fd4:	980d883a 	mov	r6,r19
 4004fd8:	d8c03c15 	stw	r3,240(sp)
 4004fdc:	da003d15 	stw	r8,244(sp)
 4004fe0:	4005ee40 	call	4005ee4 <_dtoa_r>
 4004fe4:	1021883a 	mov	r16,r2
 4004fe8:	008019c4 	movi	r2,103
 4004fec:	d8c03c17 	ldw	r3,240(sp)
 4004ff0:	da003d17 	ldw	r8,244(sp)
 4004ff4:	88817126 	beq	r17,r2,40055bc <___vfprintf_internal_r+0x1cfc>
 4004ff8:	008011c4 	movi	r2,71
 4004ffc:	88829226 	beq	r17,r2,4005a48 <___vfprintf_internal_r+0x2188>
 4005000:	80f9883a 	add	fp,r16,r3
 4005004:	d9003617 	ldw	r4,216(sp)
 4005008:	000d883a 	mov	r6,zero
 400500c:	000f883a 	mov	r7,zero
 4005010:	980b883a 	mov	r5,r19
 4005014:	da003d15 	stw	r8,244(sp)
 4005018:	400fdec0 	call	400fdec <__eqdf2>
 400501c:	da003d17 	ldw	r8,244(sp)
 4005020:	10018d26 	beq	r2,zero,4005658 <___vfprintf_internal_r+0x1d98>
 4005024:	d8802117 	ldw	r2,132(sp)
 4005028:	1700062e 	bgeu	r2,fp,4005044 <___vfprintf_internal_r+0x1784>
 400502c:	01000c04 	movi	r4,48
 4005030:	10c00044 	addi	r3,r2,1
 4005034:	d8c02115 	stw	r3,132(sp)
 4005038:	11000005 	stb	r4,0(r2)
 400503c:	d8802117 	ldw	r2,132(sp)
 4005040:	173ffb36 	bltu	r2,fp,4005030 <__alt_mem_onchip_memory2_0+0xfc003030>
 4005044:	1405c83a 	sub	r2,r2,r16
 4005048:	d8803315 	stw	r2,204(sp)
 400504c:	008011c4 	movi	r2,71
 4005050:	b0817626 	beq	r22,r2,400562c <___vfprintf_internal_r+0x1d6c>
 4005054:	00801944 	movi	r2,101
 4005058:	1442810e 	bge	r2,r17,4005a60 <___vfprintf_internal_r+0x21a0>
 400505c:	d8c02617 	ldw	r3,152(sp)
 4005060:	00801984 	movi	r2,102
 4005064:	d8c03215 	stw	r3,200(sp)
 4005068:	8881fe26 	beq	r17,r2,4005864 <___vfprintf_internal_r+0x1fa4>
 400506c:	d8c03217 	ldw	r3,200(sp)
 4005070:	d9003317 	ldw	r4,204(sp)
 4005074:	1901dd16 	blt	r3,r4,40057ec <___vfprintf_internal_r+0x1f2c>
 4005078:	9480004c 	andi	r18,r18,1
 400507c:	90022b1e 	bne	r18,zero,400592c <___vfprintf_internal_r+0x206c>
 4005080:	1805883a 	mov	r2,r3
 4005084:	18028016 	blt	r3,zero,4005a88 <___vfprintf_internal_r+0x21c8>
 4005088:	d8c03217 	ldw	r3,200(sp)
 400508c:	044019c4 	movi	r17,103
 4005090:	d8c02e15 	stw	r3,184(sp)
 4005094:	df002a07 	ldb	fp,168(sp)
 4005098:	e001531e 	bne	fp,zero,40055e8 <___vfprintf_internal_r+0x1d28>
 400509c:	df002783 	ldbu	fp,158(sp)
 40050a0:	d8802a15 	stw	r2,168(sp)
 40050a4:	dc802b17 	ldw	r18,172(sp)
 40050a8:	d8002915 	stw	zero,164(sp)
 40050ac:	003bd106 	br	4003ff4 <__alt_mem_onchip_memory2_0+0xfc001ff4>
 40050b0:	d8802d17 	ldw	r2,180(sp)
 40050b4:	d8c02d17 	ldw	r3,180(sp)
 40050b8:	d9002d17 	ldw	r4,180(sp)
 40050bc:	10800017 	ldw	r2,0(r2)
 40050c0:	18c00117 	ldw	r3,4(r3)
 40050c4:	21000204 	addi	r4,r4,8
 40050c8:	d8803615 	stw	r2,216(sp)
 40050cc:	d8c03815 	stw	r3,224(sp)
 40050d0:	d9002d15 	stw	r4,180(sp)
 40050d4:	003b7506 	br	4003eac <__alt_mem_onchip_memory2_0+0xfc001eac>
 40050d8:	ac400007 	ldb	r17,0(r21)
 40050dc:	003a5906 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 40050e0:	9080100c 	andi	r2,r18,64
 40050e4:	1000a826 	beq	r2,zero,4005388 <___vfprintf_internal_r+0x1ac8>
 40050e8:	d9002d17 	ldw	r4,180(sp)
 40050ec:	002d883a 	mov	r22,zero
 40050f0:	24c0000b 	ldhu	r19,0(r4)
 40050f4:	21000104 	addi	r4,r4,4
 40050f8:	d9002d15 	stw	r4,180(sp)
 40050fc:	003ccb06 	br	400442c <__alt_mem_onchip_memory2_0+0xfc00242c>
 4005100:	d8c02d17 	ldw	r3,180(sp)
 4005104:	d9002917 	ldw	r4,164(sp)
 4005108:	002d883a 	mov	r22,zero
 400510c:	18800104 	addi	r2,r3,4
 4005110:	1cc00017 	ldw	r19,0(r3)
 4005114:	203ebb0e 	bge	r4,zero,4004c04 <__alt_mem_onchip_memory2_0+0xfc002c04>
 4005118:	003ef106 	br	4004ce0 <__alt_mem_onchip_memory2_0+0xfc002ce0>
 400511c:	9080040c 	andi	r2,r18,16
 4005120:	1000921e 	bne	r2,zero,400536c <___vfprintf_internal_r+0x1aac>
 4005124:	9480100c 	andi	r18,r18,64
 4005128:	90013926 	beq	r18,zero,4005610 <___vfprintf_internal_r+0x1d50>
 400512c:	d9002d17 	ldw	r4,180(sp)
 4005130:	d9402f17 	ldw	r5,188(sp)
 4005134:	20800017 	ldw	r2,0(r4)
 4005138:	21000104 	addi	r4,r4,4
 400513c:	d9002d15 	stw	r4,180(sp)
 4005140:	1140000d 	sth	r5,0(r2)
 4005144:	003a1606 	br	40039a0 <__alt_mem_onchip_memory2_0+0xfc0019a0>
 4005148:	9080100c 	andi	r2,r18,64
 400514c:	10008026 	beq	r2,zero,4005350 <___vfprintf_internal_r+0x1a90>
 4005150:	d8c02d17 	ldw	r3,180(sp)
 4005154:	1cc0000f 	ldh	r19,0(r3)
 4005158:	18c00104 	addi	r3,r3,4
 400515c:	d8c02d15 	stw	r3,180(sp)
 4005160:	982dd7fa 	srai	r22,r19,31
 4005164:	b005883a 	mov	r2,r22
 4005168:	003b1f06 	br	4003de8 <__alt_mem_onchip_memory2_0+0xfc001de8>
 400516c:	9080100c 	andi	r2,r18,64
 4005170:	d8002785 	stb	zero,158(sp)
 4005174:	10008a1e 	bne	r2,zero,40053a0 <___vfprintf_internal_r+0x1ae0>
 4005178:	d9402d17 	ldw	r5,180(sp)
 400517c:	d8c02917 	ldw	r3,164(sp)
 4005180:	002d883a 	mov	r22,zero
 4005184:	28800104 	addi	r2,r5,4
 4005188:	2cc00017 	ldw	r19,0(r5)
 400518c:	183e4b0e 	bge	r3,zero,4004abc <__alt_mem_onchip_memory2_0+0xfc002abc>
 4005190:	9d86b03a 	or	r3,r19,r22
 4005194:	d8802d15 	stw	r2,180(sp)
 4005198:	183e4c1e 	bne	r3,zero,4004acc <__alt_mem_onchip_memory2_0+0xfc002acc>
 400519c:	0039883a 	mov	fp,zero
 40051a0:	0005883a 	mov	r2,zero
 40051a4:	003d4006 	br	40046a8 <__alt_mem_onchip_memory2_0+0xfc0026a8>
 40051a8:	014100b4 	movhi	r5,1026
 40051ac:	2972bc84 	addi	r5,r5,-13582
 40051b0:	d9402b15 	stw	r5,172(sp)
 40051b4:	d9402b17 	ldw	r5,172(sp)
 40051b8:	1c47883a 	add	r3,r3,r17
 40051bc:	10800044 	addi	r2,r2,1
 40051c0:	41400015 	stw	r5,0(r8)
 40051c4:	44400115 	stw	r17,4(r8)
 40051c8:	d8c02015 	stw	r3,128(sp)
 40051cc:	d8801f15 	stw	r2,124(sp)
 40051d0:	010001c4 	movi	r4,7
 40051d4:	20bec816 	blt	r4,r2,4004cf8 <__alt_mem_onchip_memory2_0+0xfc002cf8>
 40051d8:	42000204 	addi	r8,r8,8
 40051dc:	003ecd06 	br	4004d14 <__alt_mem_onchip_memory2_0+0xfc002d14>
 40051e0:	d9002917 	ldw	r4,164(sp)
 40051e4:	d8002785 	stb	zero,158(sp)
 40051e8:	203d2d16 	blt	r4,zero,40046a0 <__alt_mem_onchip_memory2_0+0xfc0026a0>
 40051ec:	00bfdfc4 	movi	r2,-129
 40051f0:	90a4703a 	and	r18,r18,r2
 40051f4:	003a9106 	br	4003c3c <__alt_mem_onchip_memory2_0+0xfc001c3c>
 40051f8:	010100b4 	movhi	r4,1026
 40051fc:	2132bc84 	addi	r4,r4,-13582
 4005200:	d9002b15 	stw	r4,172(sp)
 4005204:	003c0c06 	br	4004238 <__alt_mem_onchip_memory2_0+0xfc002238>
 4005208:	d9002c17 	ldw	r4,176(sp)
 400520c:	d9801e04 	addi	r6,sp,120
 4005210:	b80b883a 	mov	r5,r23
 4005214:	400c2c80 	call	400c2c8 <__sprint_r>
 4005218:	103aab1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 400521c:	d8c02017 	ldw	r3,128(sp)
 4005220:	da000404 	addi	r8,sp,16
 4005224:	003d4106 	br	400472c <__alt_mem_onchip_memory2_0+0xfc00272c>
 4005228:	d8801f17 	ldw	r2,124(sp)
 400522c:	014100b4 	movhi	r5,1026
 4005230:	01000044 	movi	r4,1
 4005234:	18c00044 	addi	r3,r3,1
 4005238:	10800044 	addi	r2,r2,1
 400523c:	2972b404 	addi	r5,r5,-13616
 4005240:	41000115 	stw	r4,4(r8)
 4005244:	41400015 	stw	r5,0(r8)
 4005248:	d8c02015 	stw	r3,128(sp)
 400524c:	d8801f15 	stw	r2,124(sp)
 4005250:	010001c4 	movi	r4,7
 4005254:	20805c16 	blt	r4,r2,40053c8 <___vfprintf_internal_r+0x1b08>
 4005258:	42000204 	addi	r8,r8,8
 400525c:	8800041e 	bne	r17,zero,4005270 <___vfprintf_internal_r+0x19b0>
 4005260:	d8803317 	ldw	r2,204(sp)
 4005264:	1000021e 	bne	r2,zero,4005270 <___vfprintf_internal_r+0x19b0>
 4005268:	9080004c 	andi	r2,r18,1
 400526c:	103c0926 	beq	r2,zero,4004294 <__alt_mem_onchip_memory2_0+0xfc002294>
 4005270:	d9003717 	ldw	r4,220(sp)
 4005274:	d8801f17 	ldw	r2,124(sp)
 4005278:	d9403417 	ldw	r5,208(sp)
 400527c:	20c7883a 	add	r3,r4,r3
 4005280:	10800044 	addi	r2,r2,1
 4005284:	41000115 	stw	r4,4(r8)
 4005288:	41400015 	stw	r5,0(r8)
 400528c:	d8c02015 	stw	r3,128(sp)
 4005290:	d8801f15 	stw	r2,124(sp)
 4005294:	010001c4 	movi	r4,7
 4005298:	20812116 	blt	r4,r2,4005720 <___vfprintf_internal_r+0x1e60>
 400529c:	42000204 	addi	r8,r8,8
 40052a0:	0463c83a 	sub	r17,zero,r17
 40052a4:	0440730e 	bge	zero,r17,4005474 <___vfprintf_internal_r+0x1bb4>
 40052a8:	05800404 	movi	r22,16
 40052ac:	b440860e 	bge	r22,r17,40054c8 <___vfprintf_internal_r+0x1c08>
 40052b0:	014100b4 	movhi	r5,1026
 40052b4:	2972bc84 	addi	r5,r5,-13582
 40052b8:	d9402b15 	stw	r5,172(sp)
 40052bc:	070001c4 	movi	fp,7
 40052c0:	dcc02c17 	ldw	r19,176(sp)
 40052c4:	00000306 	br	40052d4 <___vfprintf_internal_r+0x1a14>
 40052c8:	42000204 	addi	r8,r8,8
 40052cc:	8c7ffc04 	addi	r17,r17,-16
 40052d0:	b440800e 	bge	r22,r17,40054d4 <___vfprintf_internal_r+0x1c14>
 40052d4:	18c00404 	addi	r3,r3,16
 40052d8:	10800044 	addi	r2,r2,1
 40052dc:	45000015 	stw	r20,0(r8)
 40052e0:	45800115 	stw	r22,4(r8)
 40052e4:	d8c02015 	stw	r3,128(sp)
 40052e8:	d8801f15 	stw	r2,124(sp)
 40052ec:	e0bff60e 	bge	fp,r2,40052c8 <__alt_mem_onchip_memory2_0+0xfc0032c8>
 40052f0:	d9801e04 	addi	r6,sp,120
 40052f4:	b80b883a 	mov	r5,r23
 40052f8:	9809883a 	mov	r4,r19
 40052fc:	400c2c80 	call	400c2c8 <__sprint_r>
 4005300:	103a711e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4005304:	d8c02017 	ldw	r3,128(sp)
 4005308:	d8801f17 	ldw	r2,124(sp)
 400530c:	da000404 	addi	r8,sp,16
 4005310:	003fee06 	br	40052cc <__alt_mem_onchip_memory2_0+0xfc0032cc>
 4005314:	00bfffc4 	movi	r2,-1
 4005318:	003a6f06 	br	4003cd8 <__alt_mem_onchip_memory2_0+0xfc001cd8>
 400531c:	008011c4 	movi	r2,71
 4005320:	1440b816 	blt	r2,r17,4005604 <___vfprintf_internal_r+0x1d44>
 4005324:	040100b4 	movhi	r16,1026
 4005328:	8432a604 	addi	r16,r16,-13672
 400532c:	00c000c4 	movi	r3,3
 4005330:	00bfdfc4 	movi	r2,-129
 4005334:	d8c02a15 	stw	r3,168(sp)
 4005338:	90a4703a 	and	r18,r18,r2
 400533c:	df002783 	ldbu	fp,158(sp)
 4005340:	d8c02e15 	stw	r3,184(sp)
 4005344:	d8002915 	stw	zero,164(sp)
 4005348:	d8003215 	stw	zero,200(sp)
 400534c:	003b2906 	br	4003ff4 <__alt_mem_onchip_memory2_0+0xfc001ff4>
 4005350:	d9002d17 	ldw	r4,180(sp)
 4005354:	24c00017 	ldw	r19,0(r4)
 4005358:	21000104 	addi	r4,r4,4
 400535c:	d9002d15 	stw	r4,180(sp)
 4005360:	982dd7fa 	srai	r22,r19,31
 4005364:	b005883a 	mov	r2,r22
 4005368:	003a9f06 	br	4003de8 <__alt_mem_onchip_memory2_0+0xfc001de8>
 400536c:	d9402d17 	ldw	r5,180(sp)
 4005370:	d8c02f17 	ldw	r3,188(sp)
 4005374:	28800017 	ldw	r2,0(r5)
 4005378:	29400104 	addi	r5,r5,4
 400537c:	d9402d15 	stw	r5,180(sp)
 4005380:	10c00015 	stw	r3,0(r2)
 4005384:	00398606 	br	40039a0 <__alt_mem_onchip_memory2_0+0xfc0019a0>
 4005388:	d9402d17 	ldw	r5,180(sp)
 400538c:	002d883a 	mov	r22,zero
 4005390:	2cc00017 	ldw	r19,0(r5)
 4005394:	29400104 	addi	r5,r5,4
 4005398:	d9402d15 	stw	r5,180(sp)
 400539c:	003c2306 	br	400442c <__alt_mem_onchip_memory2_0+0xfc00242c>
 40053a0:	d8c02d17 	ldw	r3,180(sp)
 40053a4:	d9002917 	ldw	r4,164(sp)
 40053a8:	002d883a 	mov	r22,zero
 40053ac:	18800104 	addi	r2,r3,4
 40053b0:	1cc0000b 	ldhu	r19,0(r3)
 40053b4:	203dc10e 	bge	r4,zero,4004abc <__alt_mem_onchip_memory2_0+0xfc002abc>
 40053b8:	003f7506 	br	4005190 <__alt_mem_onchip_memory2_0+0xfc003190>
 40053bc:	040100b4 	movhi	r16,1026
 40053c0:	8432a404 	addi	r16,r16,-13680
 40053c4:	003acc06 	br	4003ef8 <__alt_mem_onchip_memory2_0+0xfc001ef8>
 40053c8:	d9002c17 	ldw	r4,176(sp)
 40053cc:	d9801e04 	addi	r6,sp,120
 40053d0:	b80b883a 	mov	r5,r23
 40053d4:	400c2c80 	call	400c2c8 <__sprint_r>
 40053d8:	103a3b1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40053dc:	dc402617 	ldw	r17,152(sp)
 40053e0:	d8c02017 	ldw	r3,128(sp)
 40053e4:	da000404 	addi	r8,sp,16
 40053e8:	003f9c06 	br	400525c <__alt_mem_onchip_memory2_0+0xfc00325c>
 40053ec:	ac400043 	ldbu	r17,1(r21)
 40053f0:	94800814 	ori	r18,r18,32
 40053f4:	ad400044 	addi	r21,r21,1
 40053f8:	8c403fcc 	andi	r17,r17,255
 40053fc:	8c40201c 	xori	r17,r17,128
 4005400:	8c7fe004 	addi	r17,r17,-128
 4005404:	00398f06 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4005408:	d8c02d15 	stw	r3,180(sp)
 400540c:	0039883a 	mov	fp,zero
 4005410:	003e3506 	br	4004ce8 <__alt_mem_onchip_memory2_0+0xfc002ce8>
 4005414:	d9002c17 	ldw	r4,176(sp)
 4005418:	d9801e04 	addi	r6,sp,120
 400541c:	b80b883a 	mov	r5,r23
 4005420:	400c2c80 	call	400c2c8 <__sprint_r>
 4005424:	103a281e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4005428:	d8c02017 	ldw	r3,128(sp)
 400542c:	da000404 	addi	r8,sp,16
 4005430:	003cd006 	br	4004774 <__alt_mem_onchip_memory2_0+0xfc002774>
 4005434:	8009883a 	mov	r4,r16
 4005438:	da003d15 	stw	r8,244(sp)
 400543c:	40016500 	call	4001650 <strlen>
 4005440:	d8802e15 	stw	r2,184(sp)
 4005444:	da003d17 	ldw	r8,244(sp)
 4005448:	103c340e 	bge	r2,zero,400451c <__alt_mem_onchip_memory2_0+0xfc00251c>
 400544c:	0005883a 	mov	r2,zero
 4005450:	003c3206 	br	400451c <__alt_mem_onchip_memory2_0+0xfc00251c>
 4005454:	d9002c17 	ldw	r4,176(sp)
 4005458:	d9801e04 	addi	r6,sp,120
 400545c:	b80b883a 	mov	r5,r23
 4005460:	400c2c80 	call	400c2c8 <__sprint_r>
 4005464:	103a181e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4005468:	d8c02017 	ldw	r3,128(sp)
 400546c:	d8801f17 	ldw	r2,124(sp)
 4005470:	da000404 	addi	r8,sp,16
 4005474:	d9403317 	ldw	r5,204(sp)
 4005478:	10800044 	addi	r2,r2,1
 400547c:	44000015 	stw	r16,0(r8)
 4005480:	28c7883a 	add	r3,r5,r3
 4005484:	003b7d06 	br	400427c <__alt_mem_onchip_memory2_0+0xfc00227c>
 4005488:	010100b4 	movhi	r4,1026
 400548c:	2132c084 	addi	r4,r4,-13566
 4005490:	d9003515 	stw	r4,212(sp)
 4005494:	003b1406 	br	40040e8 <__alt_mem_onchip_memory2_0+0xfc0020e8>
 4005498:	013fffc4 	movi	r4,-1
 400549c:	003a3506 	br	4003d74 <__alt_mem_onchip_memory2_0+0xfc001d74>
 40054a0:	0023883a 	mov	r17,zero
 40054a4:	003d9d06 	br	4004b1c <__alt_mem_onchip_memory2_0+0xfc002b1c>
 40054a8:	d9002c17 	ldw	r4,176(sp)
 40054ac:	d9801e04 	addi	r6,sp,120
 40054b0:	b80b883a 	mov	r5,r23
 40054b4:	400c2c80 	call	400c2c8 <__sprint_r>
 40054b8:	103a031e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40054bc:	d8c02017 	ldw	r3,128(sp)
 40054c0:	da000404 	addi	r8,sp,16
 40054c4:	003d9406 	br	4004b18 <__alt_mem_onchip_memory2_0+0xfc002b18>
 40054c8:	010100b4 	movhi	r4,1026
 40054cc:	2132bc84 	addi	r4,r4,-13582
 40054d0:	d9002b15 	stw	r4,172(sp)
 40054d4:	d9002b17 	ldw	r4,172(sp)
 40054d8:	1c47883a 	add	r3,r3,r17
 40054dc:	10800044 	addi	r2,r2,1
 40054e0:	41000015 	stw	r4,0(r8)
 40054e4:	44400115 	stw	r17,4(r8)
 40054e8:	d8c02015 	stw	r3,128(sp)
 40054ec:	d8801f15 	stw	r2,124(sp)
 40054f0:	010001c4 	movi	r4,7
 40054f4:	20bfd716 	blt	r4,r2,4005454 <__alt_mem_onchip_memory2_0+0xfc003454>
 40054f8:	42000204 	addi	r8,r8,8
 40054fc:	003fdd06 	br	4005474 <__alt_mem_onchip_memory2_0+0xfc003474>
 4005500:	d9002c17 	ldw	r4,176(sp)
 4005504:	d9801e04 	addi	r6,sp,120
 4005508:	b80b883a 	mov	r5,r23
 400550c:	400c2c80 	call	400c2c8 <__sprint_r>
 4005510:	1039ed1e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4005514:	d8802617 	ldw	r2,152(sp)
 4005518:	d8c02017 	ldw	r3,128(sp)
 400551c:	da000404 	addi	r8,sp,16
 4005520:	003e1006 	br	4004d64 <__alt_mem_onchip_memory2_0+0xfc002d64>
 4005524:	00800044 	movi	r2,1
 4005528:	10803fcc 	andi	r2,r2,255
 400552c:	00c00044 	movi	r3,1
 4005530:	10fa3526 	beq	r2,r3,4003e08 <__alt_mem_onchip_memory2_0+0xfc001e08>
 4005534:	00c00084 	movi	r3,2
 4005538:	10fbcb26 	beq	r2,r3,4004468 <__alt_mem_onchip_memory2_0+0xfc002468>
 400553c:	003a8f06 	br	4003f7c <__alt_mem_onchip_memory2_0+0xfc001f7c>
 4005540:	010100b4 	movhi	r4,1026
 4005544:	2132c084 	addi	r4,r4,-13566
 4005548:	d9003515 	stw	r4,212(sp)
 400554c:	003b7606 	br	4004328 <__alt_mem_onchip_memory2_0+0xfc002328>
 4005550:	d8802917 	ldw	r2,164(sp)
 4005554:	00c00184 	movi	r3,6
 4005558:	1880012e 	bgeu	r3,r2,4005560 <___vfprintf_internal_r+0x1ca0>
 400555c:	1805883a 	mov	r2,r3
 4005560:	d8802e15 	stw	r2,184(sp)
 4005564:	1000ef16 	blt	r2,zero,4005924 <___vfprintf_internal_r+0x2064>
 4005568:	040100b4 	movhi	r16,1026
 400556c:	d8802a15 	stw	r2,168(sp)
 4005570:	dcc02d15 	stw	r19,180(sp)
 4005574:	d8002915 	stw	zero,164(sp)
 4005578:	d8003215 	stw	zero,200(sp)
 400557c:	8432b204 	addi	r16,r16,-13624
 4005580:	0039883a 	mov	fp,zero
 4005584:	003aa206 	br	4004010 <__alt_mem_onchip_memory2_0+0xfc002010>
 4005588:	0021883a 	mov	r16,zero
 400558c:	003e0706 	br	4004dac <__alt_mem_onchip_memory2_0+0xfc002dac>
 4005590:	d9002c17 	ldw	r4,176(sp)
 4005594:	d9801e04 	addi	r6,sp,120
 4005598:	b80b883a 	mov	r5,r23
 400559c:	400c2c80 	call	400c2c8 <__sprint_r>
 40055a0:	1039c91e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 40055a4:	d8802617 	ldw	r2,152(sp)
 40055a8:	d9403317 	ldw	r5,204(sp)
 40055ac:	d8c02017 	ldw	r3,128(sp)
 40055b0:	da000404 	addi	r8,sp,16
 40055b4:	2885c83a 	sub	r2,r5,r2
 40055b8:	003dfb06 	br	4004da8 <__alt_mem_onchip_memory2_0+0xfc002da8>
 40055bc:	9080004c 	andi	r2,r18,1
 40055c0:	103e8f1e 	bne	r2,zero,4005000 <__alt_mem_onchip_memory2_0+0xfc003000>
 40055c4:	d8802117 	ldw	r2,132(sp)
 40055c8:	003e9e06 	br	4005044 <__alt_mem_onchip_memory2_0+0xfc003044>
 40055cc:	1025883a 	mov	r18,r2
 40055d0:	0039883a 	mov	fp,zero
 40055d4:	00800084 	movi	r2,2
 40055d8:	003fd306 	br	4005528 <__alt_mem_onchip_memory2_0+0xfc003528>
 40055dc:	07000b44 	movi	fp,45
 40055e0:	df002785 	stb	fp,158(sp)
 40055e4:	003a4006 	br	4003ee8 <__alt_mem_onchip_memory2_0+0xfc001ee8>
 40055e8:	00c00b44 	movi	r3,45
 40055ec:	d8c02785 	stb	r3,158(sp)
 40055f0:	d8802a15 	stw	r2,168(sp)
 40055f4:	dc802b17 	ldw	r18,172(sp)
 40055f8:	d8002915 	stw	zero,164(sp)
 40055fc:	07000b44 	movi	fp,45
 4005600:	003a8006 	br	4004004 <__alt_mem_onchip_memory2_0+0xfc002004>
 4005604:	040100b4 	movhi	r16,1026
 4005608:	8432a704 	addi	r16,r16,-13668
 400560c:	003f4706 	br	400532c <__alt_mem_onchip_memory2_0+0xfc00332c>
 4005610:	d8c02d17 	ldw	r3,180(sp)
 4005614:	d9002f17 	ldw	r4,188(sp)
 4005618:	18800017 	ldw	r2,0(r3)
 400561c:	18c00104 	addi	r3,r3,4
 4005620:	d8c02d15 	stw	r3,180(sp)
 4005624:	11000015 	stw	r4,0(r2)
 4005628:	0038dd06 	br	40039a0 <__alt_mem_onchip_memory2_0+0xfc0019a0>
 400562c:	dd802617 	ldw	r22,152(sp)
 4005630:	00bfff44 	movi	r2,-3
 4005634:	b0801c16 	blt	r22,r2,40056a8 <___vfprintf_internal_r+0x1de8>
 4005638:	d9402917 	ldw	r5,164(sp)
 400563c:	2d801a16 	blt	r5,r22,40056a8 <___vfprintf_internal_r+0x1de8>
 4005640:	dd803215 	stw	r22,200(sp)
 4005644:	003e8906 	br	400506c <__alt_mem_onchip_memory2_0+0xfc00306c>
 4005648:	010100b4 	movhi	r4,1026
 400564c:	2132bc84 	addi	r4,r4,-13582
 4005650:	d9002b15 	stw	r4,172(sp)
 4005654:	003c9106 	br	400489c <__alt_mem_onchip_memory2_0+0xfc00289c>
 4005658:	e005883a 	mov	r2,fp
 400565c:	003e7906 	br	4005044 <__alt_mem_onchip_memory2_0+0xfc003044>
 4005660:	d9402917 	ldw	r5,164(sp)
 4005664:	df002783 	ldbu	fp,158(sp)
 4005668:	dcc02d15 	stw	r19,180(sp)
 400566c:	d9402a15 	stw	r5,168(sp)
 4005670:	d9402e15 	stw	r5,184(sp)
 4005674:	d8002915 	stw	zero,164(sp)
 4005678:	d8003215 	stw	zero,200(sp)
 400567c:	003a5d06 	br	4003ff4 <__alt_mem_onchip_memory2_0+0xfc001ff4>
 4005680:	9080004c 	andi	r2,r18,1
 4005684:	0039883a 	mov	fp,zero
 4005688:	10000426 	beq	r2,zero,400569c <___vfprintf_internal_r+0x1ddc>
 400568c:	00800c04 	movi	r2,48
 4005690:	dc001dc4 	addi	r16,sp,119
 4005694:	d8801dc5 	stb	r2,119(sp)
 4005698:	003b8006 	br	400449c <__alt_mem_onchip_memory2_0+0xfc00249c>
 400569c:	d8002e15 	stw	zero,184(sp)
 40056a0:	dc001e04 	addi	r16,sp,120
 40056a4:	003a4d06 	br	4003fdc <__alt_mem_onchip_memory2_0+0xfc001fdc>
 40056a8:	8c7fff84 	addi	r17,r17,-2
 40056ac:	b5bfffc4 	addi	r22,r22,-1
 40056b0:	dd802615 	stw	r22,152(sp)
 40056b4:	dc4022c5 	stb	r17,139(sp)
 40056b8:	b000bf16 	blt	r22,zero,40059b8 <___vfprintf_internal_r+0x20f8>
 40056bc:	00800ac4 	movi	r2,43
 40056c0:	d8802305 	stb	r2,140(sp)
 40056c4:	00800244 	movi	r2,9
 40056c8:	15807016 	blt	r2,r22,400588c <___vfprintf_internal_r+0x1fcc>
 40056cc:	00800c04 	movi	r2,48
 40056d0:	b5800c04 	addi	r22,r22,48
 40056d4:	d8802345 	stb	r2,141(sp)
 40056d8:	dd802385 	stb	r22,142(sp)
 40056dc:	d88023c4 	addi	r2,sp,143
 40056e0:	df0022c4 	addi	fp,sp,139
 40056e4:	d8c03317 	ldw	r3,204(sp)
 40056e8:	1739c83a 	sub	fp,r2,fp
 40056ec:	d9003317 	ldw	r4,204(sp)
 40056f0:	e0c7883a 	add	r3,fp,r3
 40056f4:	df003a15 	stw	fp,232(sp)
 40056f8:	d8c02e15 	stw	r3,184(sp)
 40056fc:	00800044 	movi	r2,1
 4005700:	1100b30e 	bge	r2,r4,40059d0 <___vfprintf_internal_r+0x2110>
 4005704:	d8c02e17 	ldw	r3,184(sp)
 4005708:	18c00044 	addi	r3,r3,1
 400570c:	d8c02e15 	stw	r3,184(sp)
 4005710:	1805883a 	mov	r2,r3
 4005714:	1800ac16 	blt	r3,zero,40059c8 <___vfprintf_internal_r+0x2108>
 4005718:	d8003215 	stw	zero,200(sp)
 400571c:	003e5d06 	br	4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 4005720:	d9002c17 	ldw	r4,176(sp)
 4005724:	d9801e04 	addi	r6,sp,120
 4005728:	b80b883a 	mov	r5,r23
 400572c:	400c2c80 	call	400c2c8 <__sprint_r>
 4005730:	1039651e 	bne	r2,zero,4003cc8 <__alt_mem_onchip_memory2_0+0xfc001cc8>
 4005734:	dc402617 	ldw	r17,152(sp)
 4005738:	d8c02017 	ldw	r3,128(sp)
 400573c:	d8801f17 	ldw	r2,124(sp)
 4005740:	da000404 	addi	r8,sp,16
 4005744:	003ed606 	br	40052a0 <__alt_mem_onchip_memory2_0+0xfc0032a0>
 4005748:	582b883a 	mov	r21,r11
 400574c:	d8002915 	stw	zero,164(sp)
 4005750:	0038bd06 	br	4003a48 <__alt_mem_onchip_memory2_0+0xfc001a48>
 4005754:	d8802917 	ldw	r2,164(sp)
 4005758:	103e071e 	bne	r2,zero,4004f78 <__alt_mem_onchip_memory2_0+0xfc002f78>
 400575c:	dc002915 	stw	r16,164(sp)
 4005760:	003e0506 	br	4004f78 <__alt_mem_onchip_memory2_0+0xfc002f78>
 4005764:	d9002917 	ldw	r4,164(sp)
 4005768:	20c00044 	addi	r3,r4,1
 400576c:	003e0f06 	br	4004fac <__alt_mem_onchip_memory2_0+0xfc002fac>
 4005770:	01400184 	movi	r5,6
 4005774:	d9402915 	stw	r5,164(sp)
 4005778:	003dff06 	br	4004f78 <__alt_mem_onchip_memory2_0+0xfc002f78>
 400577c:	d8802104 	addi	r2,sp,132
 4005780:	d8800315 	stw	r2,12(sp)
 4005784:	d8802504 	addi	r2,sp,148
 4005788:	d8800215 	stw	r2,8(sp)
 400578c:	d8802604 	addi	r2,sp,152
 4005790:	d8800115 	stw	r2,4(sp)
 4005794:	d8802917 	ldw	r2,164(sp)
 4005798:	d9403617 	ldw	r5,216(sp)
 400579c:	d9002c17 	ldw	r4,176(sp)
 40057a0:	d8800015 	stw	r2,0(sp)
 40057a4:	01c000c4 	movi	r7,3
 40057a8:	980d883a 	mov	r6,r19
 40057ac:	da003d15 	stw	r8,244(sp)
 40057b0:	4005ee40 	call	4005ee4 <_dtoa_r>
 40057b4:	d8c02917 	ldw	r3,164(sp)
 40057b8:	da003d17 	ldw	r8,244(sp)
 40057bc:	1021883a 	mov	r16,r2
 40057c0:	10f9883a 	add	fp,r2,r3
 40057c4:	81000007 	ldb	r4,0(r16)
 40057c8:	00800c04 	movi	r2,48
 40057cc:	20805e26 	beq	r4,r2,4005948 <___vfprintf_internal_r+0x2088>
 40057d0:	d8c02617 	ldw	r3,152(sp)
 40057d4:	e0f9883a 	add	fp,fp,r3
 40057d8:	003e0a06 	br	4005004 <__alt_mem_onchip_memory2_0+0xfc003004>
 40057dc:	00c00b44 	movi	r3,45
 40057e0:	24e0003c 	xorhi	r19,r4,32768
 40057e4:	d8c02a05 	stb	r3,168(sp)
 40057e8:	003de906 	br	4004f90 <__alt_mem_onchip_memory2_0+0xfc002f90>
 40057ec:	d8c03217 	ldw	r3,200(sp)
 40057f0:	00c07a0e 	bge	zero,r3,40059dc <___vfprintf_internal_r+0x211c>
 40057f4:	00800044 	movi	r2,1
 40057f8:	d9003317 	ldw	r4,204(sp)
 40057fc:	1105883a 	add	r2,r2,r4
 4005800:	d8802e15 	stw	r2,184(sp)
 4005804:	10004e16 	blt	r2,zero,4005940 <___vfprintf_internal_r+0x2080>
 4005808:	044019c4 	movi	r17,103
 400580c:	003e2106 	br	4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 4005810:	d9002917 	ldw	r4,164(sp)
 4005814:	d8802104 	addi	r2,sp,132
 4005818:	d8800315 	stw	r2,12(sp)
 400581c:	d9000015 	stw	r4,0(sp)
 4005820:	d8802504 	addi	r2,sp,148
 4005824:	d9403617 	ldw	r5,216(sp)
 4005828:	d9002c17 	ldw	r4,176(sp)
 400582c:	d8800215 	stw	r2,8(sp)
 4005830:	d8802604 	addi	r2,sp,152
 4005834:	d8800115 	stw	r2,4(sp)
 4005838:	01c000c4 	movi	r7,3
 400583c:	980d883a 	mov	r6,r19
 4005840:	da003d15 	stw	r8,244(sp)
 4005844:	4005ee40 	call	4005ee4 <_dtoa_r>
 4005848:	d8c02917 	ldw	r3,164(sp)
 400584c:	da003d17 	ldw	r8,244(sp)
 4005850:	1021883a 	mov	r16,r2
 4005854:	00801184 	movi	r2,70
 4005858:	80f9883a 	add	fp,r16,r3
 400585c:	88bfd926 	beq	r17,r2,40057c4 <__alt_mem_onchip_memory2_0+0xfc0037c4>
 4005860:	003de806 	br	4005004 <__alt_mem_onchip_memory2_0+0xfc003004>
 4005864:	d9002917 	ldw	r4,164(sp)
 4005868:	00c04d0e 	bge	zero,r3,40059a0 <___vfprintf_internal_r+0x20e0>
 400586c:	2000441e 	bne	r4,zero,4005980 <___vfprintf_internal_r+0x20c0>
 4005870:	9480004c 	andi	r18,r18,1
 4005874:	9000421e 	bne	r18,zero,4005980 <___vfprintf_internal_r+0x20c0>
 4005878:	1805883a 	mov	r2,r3
 400587c:	18007016 	blt	r3,zero,4005a40 <___vfprintf_internal_r+0x2180>
 4005880:	d8c03217 	ldw	r3,200(sp)
 4005884:	d8c02e15 	stw	r3,184(sp)
 4005888:	003e0206 	br	4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 400588c:	df0022c4 	addi	fp,sp,139
 4005890:	dc002915 	stw	r16,164(sp)
 4005894:	4027883a 	mov	r19,r8
 4005898:	e021883a 	mov	r16,fp
 400589c:	b009883a 	mov	r4,r22
 40058a0:	01400284 	movi	r5,10
 40058a4:	4000d480 	call	4000d48 <__modsi3>
 40058a8:	10800c04 	addi	r2,r2,48
 40058ac:	843fffc4 	addi	r16,r16,-1
 40058b0:	b009883a 	mov	r4,r22
 40058b4:	01400284 	movi	r5,10
 40058b8:	80800005 	stb	r2,0(r16)
 40058bc:	4000cc40 	call	4000cc4 <__divsi3>
 40058c0:	102d883a 	mov	r22,r2
 40058c4:	00800244 	movi	r2,9
 40058c8:	15bff416 	blt	r2,r22,400589c <__alt_mem_onchip_memory2_0+0xfc00389c>
 40058cc:	9811883a 	mov	r8,r19
 40058d0:	b0800c04 	addi	r2,r22,48
 40058d4:	8027883a 	mov	r19,r16
 40058d8:	997fffc4 	addi	r5,r19,-1
 40058dc:	98bfffc5 	stb	r2,-1(r19)
 40058e0:	dc002917 	ldw	r16,164(sp)
 40058e4:	2f006a2e 	bgeu	r5,fp,4005a90 <___vfprintf_internal_r+0x21d0>
 40058e8:	d9c02384 	addi	r7,sp,142
 40058ec:	3ccfc83a 	sub	r7,r7,r19
 40058f0:	d9002344 	addi	r4,sp,141
 40058f4:	e1cf883a 	add	r7,fp,r7
 40058f8:	00000106 	br	4005900 <___vfprintf_internal_r+0x2040>
 40058fc:	28800003 	ldbu	r2,0(r5)
 4005900:	20800005 	stb	r2,0(r4)
 4005904:	21000044 	addi	r4,r4,1
 4005908:	29400044 	addi	r5,r5,1
 400590c:	393ffb1e 	bne	r7,r4,40058fc <__alt_mem_onchip_memory2_0+0xfc0038fc>
 4005910:	d8802304 	addi	r2,sp,140
 4005914:	14c5c83a 	sub	r2,r2,r19
 4005918:	d8c02344 	addi	r3,sp,141
 400591c:	1885883a 	add	r2,r3,r2
 4005920:	003f7006 	br	40056e4 <__alt_mem_onchip_memory2_0+0xfc0036e4>
 4005924:	0005883a 	mov	r2,zero
 4005928:	003f0f06 	br	4005568 <__alt_mem_onchip_memory2_0+0xfc003568>
 400592c:	d8c03217 	ldw	r3,200(sp)
 4005930:	18c00044 	addi	r3,r3,1
 4005934:	d8c02e15 	stw	r3,184(sp)
 4005938:	1805883a 	mov	r2,r3
 400593c:	183fb20e 	bge	r3,zero,4005808 <__alt_mem_onchip_memory2_0+0xfc003808>
 4005940:	0005883a 	mov	r2,zero
 4005944:	003fb006 	br	4005808 <__alt_mem_onchip_memory2_0+0xfc003808>
 4005948:	d9003617 	ldw	r4,216(sp)
 400594c:	000d883a 	mov	r6,zero
 4005950:	000f883a 	mov	r7,zero
 4005954:	980b883a 	mov	r5,r19
 4005958:	d8c03c15 	stw	r3,240(sp)
 400595c:	da003d15 	stw	r8,244(sp)
 4005960:	400fdec0 	call	400fdec <__eqdf2>
 4005964:	d8c03c17 	ldw	r3,240(sp)
 4005968:	da003d17 	ldw	r8,244(sp)
 400596c:	103f9826 	beq	r2,zero,40057d0 <__alt_mem_onchip_memory2_0+0xfc0037d0>
 4005970:	00800044 	movi	r2,1
 4005974:	10c7c83a 	sub	r3,r2,r3
 4005978:	d8c02615 	stw	r3,152(sp)
 400597c:	003f9506 	br	40057d4 <__alt_mem_onchip_memory2_0+0xfc0037d4>
 4005980:	d9002917 	ldw	r4,164(sp)
 4005984:	d8c03217 	ldw	r3,200(sp)
 4005988:	20800044 	addi	r2,r4,1
 400598c:	1885883a 	add	r2,r3,r2
 4005990:	d8802e15 	stw	r2,184(sp)
 4005994:	103dbf0e 	bge	r2,zero,4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 4005998:	0005883a 	mov	r2,zero
 400599c:	003dbd06 	br	4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 40059a0:	2000211e 	bne	r4,zero,4005a28 <___vfprintf_internal_r+0x2168>
 40059a4:	9480004c 	andi	r18,r18,1
 40059a8:	90001f1e 	bne	r18,zero,4005a28 <___vfprintf_internal_r+0x2168>
 40059ac:	00800044 	movi	r2,1
 40059b0:	d8802e15 	stw	r2,184(sp)
 40059b4:	003db706 	br	4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 40059b8:	00800b44 	movi	r2,45
 40059bc:	05adc83a 	sub	r22,zero,r22
 40059c0:	d8802305 	stb	r2,140(sp)
 40059c4:	003f3f06 	br	40056c4 <__alt_mem_onchip_memory2_0+0xfc0036c4>
 40059c8:	0005883a 	mov	r2,zero
 40059cc:	003f5206 	br	4005718 <__alt_mem_onchip_memory2_0+0xfc003718>
 40059d0:	90a4703a 	and	r18,r18,r2
 40059d4:	903f4e26 	beq	r18,zero,4005710 <__alt_mem_onchip_memory2_0+0xfc003710>
 40059d8:	003f4a06 	br	4005704 <__alt_mem_onchip_memory2_0+0xfc003704>
 40059dc:	00800084 	movi	r2,2
 40059e0:	10c5c83a 	sub	r2,r2,r3
 40059e4:	003f8406 	br	40057f8 <__alt_mem_onchip_memory2_0+0xfc0037f8>
 40059e8:	d8802d17 	ldw	r2,180(sp)
 40059ec:	d9002d17 	ldw	r4,180(sp)
 40059f0:	ac400043 	ldbu	r17,1(r21)
 40059f4:	10800017 	ldw	r2,0(r2)
 40059f8:	582b883a 	mov	r21,r11
 40059fc:	d8802915 	stw	r2,164(sp)
 4005a00:	20800104 	addi	r2,r4,4
 4005a04:	d9002917 	ldw	r4,164(sp)
 4005a08:	d8802d15 	stw	r2,180(sp)
 4005a0c:	203e7a0e 	bge	r4,zero,40053f8 <__alt_mem_onchip_memory2_0+0xfc0033f8>
 4005a10:	8c403fcc 	andi	r17,r17,255
 4005a14:	00bfffc4 	movi	r2,-1
 4005a18:	8c40201c 	xori	r17,r17,128
 4005a1c:	d8802915 	stw	r2,164(sp)
 4005a20:	8c7fe004 	addi	r17,r17,-128
 4005a24:	00380706 	br	4003a44 <__alt_mem_onchip_memory2_0+0xfc001a44>
 4005a28:	d8c02917 	ldw	r3,164(sp)
 4005a2c:	18c00084 	addi	r3,r3,2
 4005a30:	d8c02e15 	stw	r3,184(sp)
 4005a34:	1805883a 	mov	r2,r3
 4005a38:	183d960e 	bge	r3,zero,4005094 <__alt_mem_onchip_memory2_0+0xfc003094>
 4005a3c:	003fd606 	br	4005998 <__alt_mem_onchip_memory2_0+0xfc003998>
 4005a40:	0005883a 	mov	r2,zero
 4005a44:	003f8e06 	br	4005880 <__alt_mem_onchip_memory2_0+0xfc003880>
 4005a48:	9080004c 	andi	r2,r18,1
 4005a4c:	103f811e 	bne	r2,zero,4005854 <__alt_mem_onchip_memory2_0+0xfc003854>
 4005a50:	d8802117 	ldw	r2,132(sp)
 4005a54:	1405c83a 	sub	r2,r2,r16
 4005a58:	d8803315 	stw	r2,204(sp)
 4005a5c:	b47ef326 	beq	r22,r17,400562c <__alt_mem_onchip_memory2_0+0xfc00362c>
 4005a60:	dd802617 	ldw	r22,152(sp)
 4005a64:	003f1106 	br	40056ac <__alt_mem_onchip_memory2_0+0xfc0036ac>
 4005a68:	d9c02785 	stb	r7,158(sp)
 4005a6c:	00390406 	br	4003e80 <__alt_mem_onchip_memory2_0+0xfc001e80>
 4005a70:	d9c02785 	stb	r7,158(sp)
 4005a74:	0038d306 	br	4003dc4 <__alt_mem_onchip_memory2_0+0xfc001dc4>
 4005a78:	d9c02785 	stb	r7,158(sp)
 4005a7c:	003a6106 	br	4004404 <__alt_mem_onchip_memory2_0+0xfc002404>
 4005a80:	d9c02785 	stb	r7,158(sp)
 4005a84:	003af806 	br	4004668 <__alt_mem_onchip_memory2_0+0xfc002668>
 4005a88:	0005883a 	mov	r2,zero
 4005a8c:	003d7e06 	br	4005088 <__alt_mem_onchip_memory2_0+0xfc003088>
 4005a90:	d8802344 	addi	r2,sp,141
 4005a94:	003f1306 	br	40056e4 <__alt_mem_onchip_memory2_0+0xfc0036e4>
 4005a98:	d9c02785 	stb	r7,158(sp)
 4005a9c:	00392306 	br	4003f2c <__alt_mem_onchip_memory2_0+0xfc001f2c>
 4005aa0:	d9c02785 	stb	r7,158(sp)
 4005aa4:	003aa906 	br	400454c <__alt_mem_onchip_memory2_0+0xfc00254c>
 4005aa8:	d9c02785 	stb	r7,158(sp)
 4005aac:	003a3d06 	br	40043a4 <__alt_mem_onchip_memory2_0+0xfc0023a4>
 4005ab0:	d9c02785 	stb	r7,158(sp)
 4005ab4:	003aca06 	br	40045e0 <__alt_mem_onchip_memory2_0+0xfc0025e0>

04005ab8 <__vfprintf_internal>:
 4005ab8:	008100b4 	movhi	r2,1026
 4005abc:	10ba3604 	addi	r2,r2,-5928
 4005ac0:	300f883a 	mov	r7,r6
 4005ac4:	280d883a 	mov	r6,r5
 4005ac8:	200b883a 	mov	r5,r4
 4005acc:	11000017 	ldw	r4,0(r2)
 4005ad0:	40038c01 	jmpi	40038c0 <___vfprintf_internal_r>

04005ad4 <__sbprintf>:
 4005ad4:	2880030b 	ldhu	r2,12(r5)
 4005ad8:	2ac01917 	ldw	r11,100(r5)
 4005adc:	2a80038b 	ldhu	r10,14(r5)
 4005ae0:	2a400717 	ldw	r9,28(r5)
 4005ae4:	2a000917 	ldw	r8,36(r5)
 4005ae8:	defee204 	addi	sp,sp,-1144
 4005aec:	00c10004 	movi	r3,1024
 4005af0:	dc011a15 	stw	r16,1128(sp)
 4005af4:	10bfff4c 	andi	r2,r2,65533
 4005af8:	2821883a 	mov	r16,r5
 4005afc:	d8cb883a 	add	r5,sp,r3
 4005b00:	dc811c15 	stw	r18,1136(sp)
 4005b04:	dc411b15 	stw	r17,1132(sp)
 4005b08:	dfc11d15 	stw	ra,1140(sp)
 4005b0c:	2025883a 	mov	r18,r4
 4005b10:	d881030d 	sth	r2,1036(sp)
 4005b14:	dac11915 	stw	r11,1124(sp)
 4005b18:	da81038d 	sth	r10,1038(sp)
 4005b1c:	da410715 	stw	r9,1052(sp)
 4005b20:	da010915 	stw	r8,1060(sp)
 4005b24:	dec10015 	stw	sp,1024(sp)
 4005b28:	dec10415 	stw	sp,1040(sp)
 4005b2c:	d8c10215 	stw	r3,1032(sp)
 4005b30:	d8c10515 	stw	r3,1044(sp)
 4005b34:	d8010615 	stw	zero,1048(sp)
 4005b38:	40038c00 	call	40038c0 <___vfprintf_internal_r>
 4005b3c:	1023883a 	mov	r17,r2
 4005b40:	10000416 	blt	r2,zero,4005b54 <__sbprintf+0x80>
 4005b44:	d9410004 	addi	r5,sp,1024
 4005b48:	9009883a 	mov	r4,r18
 4005b4c:	40077880 	call	4007788 <_fflush_r>
 4005b50:	10000d1e 	bne	r2,zero,4005b88 <__sbprintf+0xb4>
 4005b54:	d881030b 	ldhu	r2,1036(sp)
 4005b58:	1080100c 	andi	r2,r2,64
 4005b5c:	10000326 	beq	r2,zero,4005b6c <__sbprintf+0x98>
 4005b60:	8080030b 	ldhu	r2,12(r16)
 4005b64:	10801014 	ori	r2,r2,64
 4005b68:	8080030d 	sth	r2,12(r16)
 4005b6c:	8805883a 	mov	r2,r17
 4005b70:	dfc11d17 	ldw	ra,1140(sp)
 4005b74:	dc811c17 	ldw	r18,1136(sp)
 4005b78:	dc411b17 	ldw	r17,1132(sp)
 4005b7c:	dc011a17 	ldw	r16,1128(sp)
 4005b80:	dec11e04 	addi	sp,sp,1144
 4005b84:	f800283a 	ret
 4005b88:	047fffc4 	movi	r17,-1
 4005b8c:	003ff106 	br	4005b54 <__alt_mem_onchip_memory2_0+0xfc003b54>

04005b90 <__swsetup_r>:
 4005b90:	008100b4 	movhi	r2,1026
 4005b94:	defffd04 	addi	sp,sp,-12
 4005b98:	10ba3604 	addi	r2,r2,-5928
 4005b9c:	dc400115 	stw	r17,4(sp)
 4005ba0:	2023883a 	mov	r17,r4
 4005ba4:	11000017 	ldw	r4,0(r2)
 4005ba8:	dc000015 	stw	r16,0(sp)
 4005bac:	dfc00215 	stw	ra,8(sp)
 4005bb0:	2821883a 	mov	r16,r5
 4005bb4:	20000226 	beq	r4,zero,4005bc0 <__swsetup_r+0x30>
 4005bb8:	20800e17 	ldw	r2,56(r4)
 4005bbc:	10003126 	beq	r2,zero,4005c84 <__swsetup_r+0xf4>
 4005bc0:	8080030b 	ldhu	r2,12(r16)
 4005bc4:	10c0020c 	andi	r3,r2,8
 4005bc8:	1009883a 	mov	r4,r2
 4005bcc:	18000f26 	beq	r3,zero,4005c0c <__swsetup_r+0x7c>
 4005bd0:	80c00417 	ldw	r3,16(r16)
 4005bd4:	18001526 	beq	r3,zero,4005c2c <__swsetup_r+0x9c>
 4005bd8:	1100004c 	andi	r4,r2,1
 4005bdc:	20001c1e 	bne	r4,zero,4005c50 <__swsetup_r+0xc0>
 4005be0:	1080008c 	andi	r2,r2,2
 4005be4:	1000291e 	bne	r2,zero,4005c8c <__swsetup_r+0xfc>
 4005be8:	80800517 	ldw	r2,20(r16)
 4005bec:	80800215 	stw	r2,8(r16)
 4005bf0:	18001c26 	beq	r3,zero,4005c64 <__swsetup_r+0xd4>
 4005bf4:	0005883a 	mov	r2,zero
 4005bf8:	dfc00217 	ldw	ra,8(sp)
 4005bfc:	dc400117 	ldw	r17,4(sp)
 4005c00:	dc000017 	ldw	r16,0(sp)
 4005c04:	dec00304 	addi	sp,sp,12
 4005c08:	f800283a 	ret
 4005c0c:	2080040c 	andi	r2,r4,16
 4005c10:	10002e26 	beq	r2,zero,4005ccc <__swsetup_r+0x13c>
 4005c14:	2080010c 	andi	r2,r4,4
 4005c18:	10001e1e 	bne	r2,zero,4005c94 <__swsetup_r+0x104>
 4005c1c:	80c00417 	ldw	r3,16(r16)
 4005c20:	20800214 	ori	r2,r4,8
 4005c24:	8080030d 	sth	r2,12(r16)
 4005c28:	183feb1e 	bne	r3,zero,4005bd8 <__alt_mem_onchip_memory2_0+0xfc003bd8>
 4005c2c:	1100a00c 	andi	r4,r2,640
 4005c30:	01408004 	movi	r5,512
 4005c34:	217fe826 	beq	r4,r5,4005bd8 <__alt_mem_onchip_memory2_0+0xfc003bd8>
 4005c38:	800b883a 	mov	r5,r16
 4005c3c:	8809883a 	mov	r4,r17
 4005c40:	40087080 	call	4008708 <__smakebuf_r>
 4005c44:	8080030b 	ldhu	r2,12(r16)
 4005c48:	80c00417 	ldw	r3,16(r16)
 4005c4c:	003fe206 	br	4005bd8 <__alt_mem_onchip_memory2_0+0xfc003bd8>
 4005c50:	80800517 	ldw	r2,20(r16)
 4005c54:	80000215 	stw	zero,8(r16)
 4005c58:	0085c83a 	sub	r2,zero,r2
 4005c5c:	80800615 	stw	r2,24(r16)
 4005c60:	183fe41e 	bne	r3,zero,4005bf4 <__alt_mem_onchip_memory2_0+0xfc003bf4>
 4005c64:	80c0030b 	ldhu	r3,12(r16)
 4005c68:	0005883a 	mov	r2,zero
 4005c6c:	1900200c 	andi	r4,r3,128
 4005c70:	203fe126 	beq	r4,zero,4005bf8 <__alt_mem_onchip_memory2_0+0xfc003bf8>
 4005c74:	18c01014 	ori	r3,r3,64
 4005c78:	80c0030d 	sth	r3,12(r16)
 4005c7c:	00bfffc4 	movi	r2,-1
 4005c80:	003fdd06 	br	4005bf8 <__alt_mem_onchip_memory2_0+0xfc003bf8>
 4005c84:	4007b640 	call	4007b64 <__sinit>
 4005c88:	003fcd06 	br	4005bc0 <__alt_mem_onchip_memory2_0+0xfc003bc0>
 4005c8c:	0005883a 	mov	r2,zero
 4005c90:	003fd606 	br	4005bec <__alt_mem_onchip_memory2_0+0xfc003bec>
 4005c94:	81400c17 	ldw	r5,48(r16)
 4005c98:	28000626 	beq	r5,zero,4005cb4 <__swsetup_r+0x124>
 4005c9c:	80801004 	addi	r2,r16,64
 4005ca0:	28800326 	beq	r5,r2,4005cb0 <__swsetup_r+0x120>
 4005ca4:	8809883a 	mov	r4,r17
 4005ca8:	4007cd80 	call	4007cd8 <_free_r>
 4005cac:	8100030b 	ldhu	r4,12(r16)
 4005cb0:	80000c15 	stw	zero,48(r16)
 4005cb4:	80c00417 	ldw	r3,16(r16)
 4005cb8:	00bff6c4 	movi	r2,-37
 4005cbc:	1108703a 	and	r4,r2,r4
 4005cc0:	80000115 	stw	zero,4(r16)
 4005cc4:	80c00015 	stw	r3,0(r16)
 4005cc8:	003fd506 	br	4005c20 <__alt_mem_onchip_memory2_0+0xfc003c20>
 4005ccc:	00800244 	movi	r2,9
 4005cd0:	88800015 	stw	r2,0(r17)
 4005cd4:	20801014 	ori	r2,r4,64
 4005cd8:	8080030d 	sth	r2,12(r16)
 4005cdc:	00bfffc4 	movi	r2,-1
 4005ce0:	003fc506 	br	4005bf8 <__alt_mem_onchip_memory2_0+0xfc003bf8>

04005ce4 <quorem>:
 4005ce4:	defff704 	addi	sp,sp,-36
 4005ce8:	dc800215 	stw	r18,8(sp)
 4005cec:	20800417 	ldw	r2,16(r4)
 4005cf0:	2c800417 	ldw	r18,16(r5)
 4005cf4:	dfc00815 	stw	ra,32(sp)
 4005cf8:	ddc00715 	stw	r23,28(sp)
 4005cfc:	dd800615 	stw	r22,24(sp)
 4005d00:	dd400515 	stw	r21,20(sp)
 4005d04:	dd000415 	stw	r20,16(sp)
 4005d08:	dcc00315 	stw	r19,12(sp)
 4005d0c:	dc400115 	stw	r17,4(sp)
 4005d10:	dc000015 	stw	r16,0(sp)
 4005d14:	14807116 	blt	r2,r18,4005edc <quorem+0x1f8>
 4005d18:	94bfffc4 	addi	r18,r18,-1
 4005d1c:	94ad883a 	add	r22,r18,r18
 4005d20:	b5ad883a 	add	r22,r22,r22
 4005d24:	2c400504 	addi	r17,r5,20
 4005d28:	8da9883a 	add	r20,r17,r22
 4005d2c:	25400504 	addi	r21,r4,20
 4005d30:	282f883a 	mov	r23,r5
 4005d34:	adad883a 	add	r22,r21,r22
 4005d38:	a1400017 	ldw	r5,0(r20)
 4005d3c:	2021883a 	mov	r16,r4
 4005d40:	b1000017 	ldw	r4,0(r22)
 4005d44:	29400044 	addi	r5,r5,1
 4005d48:	4000dbc0 	call	4000dbc <__udivsi3>
 4005d4c:	1027883a 	mov	r19,r2
 4005d50:	10002c26 	beq	r2,zero,4005e04 <quorem+0x120>
 4005d54:	a813883a 	mov	r9,r21
 4005d58:	880b883a 	mov	r5,r17
 4005d5c:	0009883a 	mov	r4,zero
 4005d60:	000d883a 	mov	r6,zero
 4005d64:	2a000017 	ldw	r8,0(r5)
 4005d68:	49c00017 	ldw	r7,0(r9)
 4005d6c:	29400104 	addi	r5,r5,4
 4005d70:	40bfffcc 	andi	r2,r8,65535
 4005d74:	14c5383a 	mul	r2,r2,r19
 4005d78:	4010d43a 	srli	r8,r8,16
 4005d7c:	38ffffcc 	andi	r3,r7,65535
 4005d80:	1105883a 	add	r2,r2,r4
 4005d84:	1008d43a 	srli	r4,r2,16
 4005d88:	44d1383a 	mul	r8,r8,r19
 4005d8c:	198d883a 	add	r6,r3,r6
 4005d90:	10ffffcc 	andi	r3,r2,65535
 4005d94:	30c7c83a 	sub	r3,r6,r3
 4005d98:	380ed43a 	srli	r7,r7,16
 4005d9c:	4105883a 	add	r2,r8,r4
 4005da0:	180dd43a 	srai	r6,r3,16
 4005da4:	113fffcc 	andi	r4,r2,65535
 4005da8:	390fc83a 	sub	r7,r7,r4
 4005dac:	398d883a 	add	r6,r7,r6
 4005db0:	300e943a 	slli	r7,r6,16
 4005db4:	18ffffcc 	andi	r3,r3,65535
 4005db8:	1008d43a 	srli	r4,r2,16
 4005dbc:	38ceb03a 	or	r7,r7,r3
 4005dc0:	49c00015 	stw	r7,0(r9)
 4005dc4:	300dd43a 	srai	r6,r6,16
 4005dc8:	4a400104 	addi	r9,r9,4
 4005dcc:	a17fe52e 	bgeu	r20,r5,4005d64 <__alt_mem_onchip_memory2_0+0xfc003d64>
 4005dd0:	b0800017 	ldw	r2,0(r22)
 4005dd4:	10000b1e 	bne	r2,zero,4005e04 <quorem+0x120>
 4005dd8:	b0bfff04 	addi	r2,r22,-4
 4005ddc:	a880082e 	bgeu	r21,r2,4005e00 <quorem+0x11c>
 4005de0:	b0ffff17 	ldw	r3,-4(r22)
 4005de4:	18000326 	beq	r3,zero,4005df4 <quorem+0x110>
 4005de8:	00000506 	br	4005e00 <quorem+0x11c>
 4005dec:	10c00017 	ldw	r3,0(r2)
 4005df0:	1800031e 	bne	r3,zero,4005e00 <quorem+0x11c>
 4005df4:	10bfff04 	addi	r2,r2,-4
 4005df8:	94bfffc4 	addi	r18,r18,-1
 4005dfc:	a8bffb36 	bltu	r21,r2,4005dec <__alt_mem_onchip_memory2_0+0xfc003dec>
 4005e00:	84800415 	stw	r18,16(r16)
 4005e04:	b80b883a 	mov	r5,r23
 4005e08:	8009883a 	mov	r4,r16
 4005e0c:	4009e480 	call	4009e48 <__mcmp>
 4005e10:	10002616 	blt	r2,zero,4005eac <quorem+0x1c8>
 4005e14:	9cc00044 	addi	r19,r19,1
 4005e18:	a805883a 	mov	r2,r21
 4005e1c:	000b883a 	mov	r5,zero
 4005e20:	11000017 	ldw	r4,0(r2)
 4005e24:	89800017 	ldw	r6,0(r17)
 4005e28:	10800104 	addi	r2,r2,4
 4005e2c:	20ffffcc 	andi	r3,r4,65535
 4005e30:	194b883a 	add	r5,r3,r5
 4005e34:	30ffffcc 	andi	r3,r6,65535
 4005e38:	28c7c83a 	sub	r3,r5,r3
 4005e3c:	300cd43a 	srli	r6,r6,16
 4005e40:	2008d43a 	srli	r4,r4,16
 4005e44:	180bd43a 	srai	r5,r3,16
 4005e48:	18ffffcc 	andi	r3,r3,65535
 4005e4c:	2189c83a 	sub	r4,r4,r6
 4005e50:	2149883a 	add	r4,r4,r5
 4005e54:	200c943a 	slli	r6,r4,16
 4005e58:	8c400104 	addi	r17,r17,4
 4005e5c:	200bd43a 	srai	r5,r4,16
 4005e60:	30c6b03a 	or	r3,r6,r3
 4005e64:	10ffff15 	stw	r3,-4(r2)
 4005e68:	a47fed2e 	bgeu	r20,r17,4005e20 <__alt_mem_onchip_memory2_0+0xfc003e20>
 4005e6c:	9485883a 	add	r2,r18,r18
 4005e70:	1085883a 	add	r2,r2,r2
 4005e74:	a887883a 	add	r3,r21,r2
 4005e78:	18800017 	ldw	r2,0(r3)
 4005e7c:	10000b1e 	bne	r2,zero,4005eac <quorem+0x1c8>
 4005e80:	18bfff04 	addi	r2,r3,-4
 4005e84:	a880082e 	bgeu	r21,r2,4005ea8 <quorem+0x1c4>
 4005e88:	18ffff17 	ldw	r3,-4(r3)
 4005e8c:	18000326 	beq	r3,zero,4005e9c <quorem+0x1b8>
 4005e90:	00000506 	br	4005ea8 <quorem+0x1c4>
 4005e94:	10c00017 	ldw	r3,0(r2)
 4005e98:	1800031e 	bne	r3,zero,4005ea8 <quorem+0x1c4>
 4005e9c:	10bfff04 	addi	r2,r2,-4
 4005ea0:	94bfffc4 	addi	r18,r18,-1
 4005ea4:	a8bffb36 	bltu	r21,r2,4005e94 <__alt_mem_onchip_memory2_0+0xfc003e94>
 4005ea8:	84800415 	stw	r18,16(r16)
 4005eac:	9805883a 	mov	r2,r19
 4005eb0:	dfc00817 	ldw	ra,32(sp)
 4005eb4:	ddc00717 	ldw	r23,28(sp)
 4005eb8:	dd800617 	ldw	r22,24(sp)
 4005ebc:	dd400517 	ldw	r21,20(sp)
 4005ec0:	dd000417 	ldw	r20,16(sp)
 4005ec4:	dcc00317 	ldw	r19,12(sp)
 4005ec8:	dc800217 	ldw	r18,8(sp)
 4005ecc:	dc400117 	ldw	r17,4(sp)
 4005ed0:	dc000017 	ldw	r16,0(sp)
 4005ed4:	dec00904 	addi	sp,sp,36
 4005ed8:	f800283a 	ret
 4005edc:	0005883a 	mov	r2,zero
 4005ee0:	003ff306 	br	4005eb0 <__alt_mem_onchip_memory2_0+0xfc003eb0>

04005ee4 <_dtoa_r>:
 4005ee4:	20801017 	ldw	r2,64(r4)
 4005ee8:	deffde04 	addi	sp,sp,-136
 4005eec:	df002015 	stw	fp,128(sp)
 4005ef0:	dcc01b15 	stw	r19,108(sp)
 4005ef4:	dc801a15 	stw	r18,104(sp)
 4005ef8:	dc401915 	stw	r17,100(sp)
 4005efc:	dc001815 	stw	r16,96(sp)
 4005f00:	dfc02115 	stw	ra,132(sp)
 4005f04:	ddc01f15 	stw	r23,124(sp)
 4005f08:	dd801e15 	stw	r22,120(sp)
 4005f0c:	dd401d15 	stw	r21,116(sp)
 4005f10:	dd001c15 	stw	r20,112(sp)
 4005f14:	d9c00315 	stw	r7,12(sp)
 4005f18:	2039883a 	mov	fp,r4
 4005f1c:	3023883a 	mov	r17,r6
 4005f20:	2825883a 	mov	r18,r5
 4005f24:	dc002417 	ldw	r16,144(sp)
 4005f28:	3027883a 	mov	r19,r6
 4005f2c:	10000826 	beq	r2,zero,4005f50 <_dtoa_r+0x6c>
 4005f30:	21801117 	ldw	r6,68(r4)
 4005f34:	00c00044 	movi	r3,1
 4005f38:	100b883a 	mov	r5,r2
 4005f3c:	1986983a 	sll	r3,r3,r6
 4005f40:	11800115 	stw	r6,4(r2)
 4005f44:	10c00215 	stw	r3,8(r2)
 4005f48:	40096280 	call	4009628 <_Bfree>
 4005f4c:	e0001015 	stw	zero,64(fp)
 4005f50:	88002e16 	blt	r17,zero,400600c <_dtoa_r+0x128>
 4005f54:	80000015 	stw	zero,0(r16)
 4005f58:	889ffc2c 	andhi	r2,r17,32752
 4005f5c:	00dffc34 	movhi	r3,32752
 4005f60:	10c01c26 	beq	r2,r3,4005fd4 <_dtoa_r+0xf0>
 4005f64:	000d883a 	mov	r6,zero
 4005f68:	000f883a 	mov	r7,zero
 4005f6c:	9009883a 	mov	r4,r18
 4005f70:	980b883a 	mov	r5,r19
 4005f74:	400fdec0 	call	400fdec <__eqdf2>
 4005f78:	10002b1e 	bne	r2,zero,4006028 <_dtoa_r+0x144>
 4005f7c:	d9c02317 	ldw	r7,140(sp)
 4005f80:	00800044 	movi	r2,1
 4005f84:	38800015 	stw	r2,0(r7)
 4005f88:	d8802517 	ldw	r2,148(sp)
 4005f8c:	10019e26 	beq	r2,zero,4006608 <_dtoa_r+0x724>
 4005f90:	d8c02517 	ldw	r3,148(sp)
 4005f94:	008100b4 	movhi	r2,1026
 4005f98:	10b2b444 	addi	r2,r2,-13615
 4005f9c:	18800015 	stw	r2,0(r3)
 4005fa0:	10bfffc4 	addi	r2,r2,-1
 4005fa4:	dfc02117 	ldw	ra,132(sp)
 4005fa8:	df002017 	ldw	fp,128(sp)
 4005fac:	ddc01f17 	ldw	r23,124(sp)
 4005fb0:	dd801e17 	ldw	r22,120(sp)
 4005fb4:	dd401d17 	ldw	r21,116(sp)
 4005fb8:	dd001c17 	ldw	r20,112(sp)
 4005fbc:	dcc01b17 	ldw	r19,108(sp)
 4005fc0:	dc801a17 	ldw	r18,104(sp)
 4005fc4:	dc401917 	ldw	r17,100(sp)
 4005fc8:	dc001817 	ldw	r16,96(sp)
 4005fcc:	dec02204 	addi	sp,sp,136
 4005fd0:	f800283a 	ret
 4005fd4:	d8c02317 	ldw	r3,140(sp)
 4005fd8:	0089c3c4 	movi	r2,9999
 4005fdc:	18800015 	stw	r2,0(r3)
 4005fe0:	90017726 	beq	r18,zero,40065c0 <_dtoa_r+0x6dc>
 4005fe4:	008100b4 	movhi	r2,1026
 4005fe8:	10b2c804 	addi	r2,r2,-13536
 4005fec:	d9002517 	ldw	r4,148(sp)
 4005ff0:	203fec26 	beq	r4,zero,4005fa4 <__alt_mem_onchip_memory2_0+0xfc003fa4>
 4005ff4:	10c000c7 	ldb	r3,3(r2)
 4005ff8:	1801781e 	bne	r3,zero,40065dc <_dtoa_r+0x6f8>
 4005ffc:	10c000c4 	addi	r3,r2,3
 4006000:	d9802517 	ldw	r6,148(sp)
 4006004:	30c00015 	stw	r3,0(r6)
 4006008:	003fe606 	br	4005fa4 <__alt_mem_onchip_memory2_0+0xfc003fa4>
 400600c:	04e00034 	movhi	r19,32768
 4006010:	9cffffc4 	addi	r19,r19,-1
 4006014:	00800044 	movi	r2,1
 4006018:	8ce6703a 	and	r19,r17,r19
 400601c:	80800015 	stw	r2,0(r16)
 4006020:	9823883a 	mov	r17,r19
 4006024:	003fcc06 	br	4005f58 <__alt_mem_onchip_memory2_0+0xfc003f58>
 4006028:	d8800204 	addi	r2,sp,8
 400602c:	d8800015 	stw	r2,0(sp)
 4006030:	d9c00104 	addi	r7,sp,4
 4006034:	900b883a 	mov	r5,r18
 4006038:	980d883a 	mov	r6,r19
 400603c:	e009883a 	mov	r4,fp
 4006040:	8820d53a 	srli	r16,r17,20
 4006044:	400a2140 	call	400a214 <__d2b>
 4006048:	d8800915 	stw	r2,36(sp)
 400604c:	8001651e 	bne	r16,zero,40065e4 <_dtoa_r+0x700>
 4006050:	dd800217 	ldw	r22,8(sp)
 4006054:	dc000117 	ldw	r16,4(sp)
 4006058:	00800804 	movi	r2,32
 400605c:	b421883a 	add	r16,r22,r16
 4006060:	80c10c84 	addi	r3,r16,1074
 4006064:	10c2d10e 	bge	r2,r3,4006bac <_dtoa_r+0xcc8>
 4006068:	00801004 	movi	r2,64
 400606c:	81010484 	addi	r4,r16,1042
 4006070:	10c7c83a 	sub	r3,r2,r3
 4006074:	9108d83a 	srl	r4,r18,r4
 4006078:	88e2983a 	sll	r17,r17,r3
 400607c:	2448b03a 	or	r4,r4,r17
 4006080:	400100c0 	call	400100c <__floatunsidf>
 4006084:	017f8434 	movhi	r5,65040
 4006088:	01800044 	movi	r6,1
 400608c:	1009883a 	mov	r4,r2
 4006090:	194b883a 	add	r5,r3,r5
 4006094:	843fffc4 	addi	r16,r16,-1
 4006098:	d9801115 	stw	r6,68(sp)
 400609c:	000d883a 	mov	r6,zero
 40060a0:	01cffe34 	movhi	r7,16376
 40060a4:	401075c0 	call	401075c <__subdf3>
 40060a8:	0198dbf4 	movhi	r6,25455
 40060ac:	01cff4f4 	movhi	r7,16339
 40060b0:	3190d844 	addi	r6,r6,17249
 40060b4:	39e1e9c4 	addi	r7,r7,-30809
 40060b8:	1009883a 	mov	r4,r2
 40060bc:	180b883a 	mov	r5,r3
 40060c0:	40100440 	call	4010044 <__muldf3>
 40060c4:	01a2d874 	movhi	r6,35681
 40060c8:	01cff1f4 	movhi	r7,16327
 40060cc:	31b22cc4 	addi	r6,r6,-14157
 40060d0:	39e28a04 	addi	r7,r7,-30168
 40060d4:	180b883a 	mov	r5,r3
 40060d8:	1009883a 	mov	r4,r2
 40060dc:	400ec580 	call	400ec58 <__adddf3>
 40060e0:	8009883a 	mov	r4,r16
 40060e4:	1029883a 	mov	r20,r2
 40060e8:	1823883a 	mov	r17,r3
 40060ec:	40110d80 	call	40110d8 <__floatsidf>
 40060f0:	019427f4 	movhi	r6,20639
 40060f4:	01cff4f4 	movhi	r7,16339
 40060f8:	319e7ec4 	addi	r6,r6,31227
 40060fc:	39d104c4 	addi	r7,r7,17427
 4006100:	1009883a 	mov	r4,r2
 4006104:	180b883a 	mov	r5,r3
 4006108:	40100440 	call	4010044 <__muldf3>
 400610c:	100d883a 	mov	r6,r2
 4006110:	180f883a 	mov	r7,r3
 4006114:	a009883a 	mov	r4,r20
 4006118:	880b883a 	mov	r5,r17
 400611c:	400ec580 	call	400ec58 <__adddf3>
 4006120:	1009883a 	mov	r4,r2
 4006124:	180b883a 	mov	r5,r3
 4006128:	1029883a 	mov	r20,r2
 400612c:	1823883a 	mov	r17,r3
 4006130:	40110580 	call	4011058 <__fixdfsi>
 4006134:	000d883a 	mov	r6,zero
 4006138:	000f883a 	mov	r7,zero
 400613c:	a009883a 	mov	r4,r20
 4006140:	880b883a 	mov	r5,r17
 4006144:	d8800515 	stw	r2,20(sp)
 4006148:	400ff500 	call	400ff50 <__ledf2>
 400614c:	10028716 	blt	r2,zero,4006b6c <_dtoa_r+0xc88>
 4006150:	d8c00517 	ldw	r3,20(sp)
 4006154:	00800584 	movi	r2,22
 4006158:	10c27536 	bltu	r2,r3,4006b30 <_dtoa_r+0xc4c>
 400615c:	180490fa 	slli	r2,r3,3
 4006160:	00c100b4 	movhi	r3,1026
 4006164:	18f2e404 	addi	r3,r3,-13424
 4006168:	1885883a 	add	r2,r3,r2
 400616c:	11000017 	ldw	r4,0(r2)
 4006170:	11400117 	ldw	r5,4(r2)
 4006174:	900d883a 	mov	r6,r18
 4006178:	980f883a 	mov	r7,r19
 400617c:	400fe740 	call	400fe74 <__gedf2>
 4006180:	00828d0e 	bge	zero,r2,4006bb8 <_dtoa_r+0xcd4>
 4006184:	d9000517 	ldw	r4,20(sp)
 4006188:	d8000e15 	stw	zero,56(sp)
 400618c:	213fffc4 	addi	r4,r4,-1
 4006190:	d9000515 	stw	r4,20(sp)
 4006194:	b42dc83a 	sub	r22,r22,r16
 4006198:	b5bfffc4 	addi	r22,r22,-1
 400619c:	b0026f16 	blt	r22,zero,4006b5c <_dtoa_r+0xc78>
 40061a0:	d8000815 	stw	zero,32(sp)
 40061a4:	d9c00517 	ldw	r7,20(sp)
 40061a8:	38026416 	blt	r7,zero,4006b3c <_dtoa_r+0xc58>
 40061ac:	b1ed883a 	add	r22,r22,r7
 40061b0:	d9c00d15 	stw	r7,52(sp)
 40061b4:	d8000a15 	stw	zero,40(sp)
 40061b8:	d9800317 	ldw	r6,12(sp)
 40061bc:	00800244 	movi	r2,9
 40061c0:	11811436 	bltu	r2,r6,4006614 <_dtoa_r+0x730>
 40061c4:	00800144 	movi	r2,5
 40061c8:	1184e10e 	bge	r2,r6,4007550 <_dtoa_r+0x166c>
 40061cc:	31bfff04 	addi	r6,r6,-4
 40061d0:	d9800315 	stw	r6,12(sp)
 40061d4:	0023883a 	mov	r17,zero
 40061d8:	d9800317 	ldw	r6,12(sp)
 40061dc:	008000c4 	movi	r2,3
 40061e0:	30836726 	beq	r6,r2,4006f80 <_dtoa_r+0x109c>
 40061e4:	1183410e 	bge	r2,r6,4006eec <_dtoa_r+0x1008>
 40061e8:	d9c00317 	ldw	r7,12(sp)
 40061ec:	00800104 	movi	r2,4
 40061f0:	38827c26 	beq	r7,r2,4006be4 <_dtoa_r+0xd00>
 40061f4:	00800144 	movi	r2,5
 40061f8:	3884c41e 	bne	r7,r2,400750c <_dtoa_r+0x1628>
 40061fc:	00800044 	movi	r2,1
 4006200:	d8800b15 	stw	r2,44(sp)
 4006204:	d8c00517 	ldw	r3,20(sp)
 4006208:	d9002217 	ldw	r4,136(sp)
 400620c:	1907883a 	add	r3,r3,r4
 4006210:	19800044 	addi	r6,r3,1
 4006214:	d8c00c15 	stw	r3,48(sp)
 4006218:	d9800615 	stw	r6,24(sp)
 400621c:	0183a40e 	bge	zero,r6,40070b0 <_dtoa_r+0x11cc>
 4006220:	d9800617 	ldw	r6,24(sp)
 4006224:	3021883a 	mov	r16,r6
 4006228:	e0001115 	stw	zero,68(fp)
 400622c:	008005c4 	movi	r2,23
 4006230:	1184c92e 	bgeu	r2,r6,4007558 <_dtoa_r+0x1674>
 4006234:	00c00044 	movi	r3,1
 4006238:	00800104 	movi	r2,4
 400623c:	1085883a 	add	r2,r2,r2
 4006240:	11000504 	addi	r4,r2,20
 4006244:	180b883a 	mov	r5,r3
 4006248:	18c00044 	addi	r3,r3,1
 400624c:	313ffb2e 	bgeu	r6,r4,400623c <__alt_mem_onchip_memory2_0+0xfc00423c>
 4006250:	e1401115 	stw	r5,68(fp)
 4006254:	e009883a 	mov	r4,fp
 4006258:	40095800 	call	4009580 <_Balloc>
 400625c:	d8800715 	stw	r2,28(sp)
 4006260:	e0801015 	stw	r2,64(fp)
 4006264:	00800384 	movi	r2,14
 4006268:	1400f736 	bltu	r2,r16,4006648 <_dtoa_r+0x764>
 400626c:	8800f626 	beq	r17,zero,4006648 <_dtoa_r+0x764>
 4006270:	d9c00517 	ldw	r7,20(sp)
 4006274:	01c39a0e 	bge	zero,r7,40070e0 <_dtoa_r+0x11fc>
 4006278:	388003cc 	andi	r2,r7,15
 400627c:	100490fa 	slli	r2,r2,3
 4006280:	382bd13a 	srai	r21,r7,4
 4006284:	00c100b4 	movhi	r3,1026
 4006288:	18f2e404 	addi	r3,r3,-13424
 400628c:	1885883a 	add	r2,r3,r2
 4006290:	a8c0040c 	andi	r3,r21,16
 4006294:	12400017 	ldw	r9,0(r2)
 4006298:	12000117 	ldw	r8,4(r2)
 400629c:	18037926 	beq	r3,zero,4007084 <_dtoa_r+0x11a0>
 40062a0:	008100b4 	movhi	r2,1026
 40062a4:	10b2da04 	addi	r2,r2,-13464
 40062a8:	11800817 	ldw	r6,32(r2)
 40062ac:	11c00917 	ldw	r7,36(r2)
 40062b0:	9009883a 	mov	r4,r18
 40062b4:	980b883a 	mov	r5,r19
 40062b8:	da001715 	stw	r8,92(sp)
 40062bc:	da401615 	stw	r9,88(sp)
 40062c0:	400f5040 	call	400f504 <__divdf3>
 40062c4:	da001717 	ldw	r8,92(sp)
 40062c8:	da401617 	ldw	r9,88(sp)
 40062cc:	ad4003cc 	andi	r21,r21,15
 40062d0:	040000c4 	movi	r16,3
 40062d4:	1023883a 	mov	r17,r2
 40062d8:	1829883a 	mov	r20,r3
 40062dc:	a8001126 	beq	r21,zero,4006324 <_dtoa_r+0x440>
 40062e0:	05c100b4 	movhi	r23,1026
 40062e4:	bdf2da04 	addi	r23,r23,-13464
 40062e8:	4805883a 	mov	r2,r9
 40062ec:	4007883a 	mov	r3,r8
 40062f0:	a980004c 	andi	r6,r21,1
 40062f4:	1009883a 	mov	r4,r2
 40062f8:	a82bd07a 	srai	r21,r21,1
 40062fc:	180b883a 	mov	r5,r3
 4006300:	30000426 	beq	r6,zero,4006314 <_dtoa_r+0x430>
 4006304:	b9800017 	ldw	r6,0(r23)
 4006308:	b9c00117 	ldw	r7,4(r23)
 400630c:	84000044 	addi	r16,r16,1
 4006310:	40100440 	call	4010044 <__muldf3>
 4006314:	bdc00204 	addi	r23,r23,8
 4006318:	a83ff51e 	bne	r21,zero,40062f0 <__alt_mem_onchip_memory2_0+0xfc0042f0>
 400631c:	1013883a 	mov	r9,r2
 4006320:	1811883a 	mov	r8,r3
 4006324:	480d883a 	mov	r6,r9
 4006328:	400f883a 	mov	r7,r8
 400632c:	8809883a 	mov	r4,r17
 4006330:	a00b883a 	mov	r5,r20
 4006334:	400f5040 	call	400f504 <__divdf3>
 4006338:	d8800f15 	stw	r2,60(sp)
 400633c:	d8c01015 	stw	r3,64(sp)
 4006340:	d8c00e17 	ldw	r3,56(sp)
 4006344:	18000626 	beq	r3,zero,4006360 <_dtoa_r+0x47c>
 4006348:	d9000f17 	ldw	r4,60(sp)
 400634c:	d9401017 	ldw	r5,64(sp)
 4006350:	000d883a 	mov	r6,zero
 4006354:	01cffc34 	movhi	r7,16368
 4006358:	400ff500 	call	400ff50 <__ledf2>
 400635c:	10040b16 	blt	r2,zero,400738c <_dtoa_r+0x14a8>
 4006360:	8009883a 	mov	r4,r16
 4006364:	40110d80 	call	40110d8 <__floatsidf>
 4006368:	d9800f17 	ldw	r6,60(sp)
 400636c:	d9c01017 	ldw	r7,64(sp)
 4006370:	1009883a 	mov	r4,r2
 4006374:	180b883a 	mov	r5,r3
 4006378:	40100440 	call	4010044 <__muldf3>
 400637c:	000d883a 	mov	r6,zero
 4006380:	01d00734 	movhi	r7,16412
 4006384:	1009883a 	mov	r4,r2
 4006388:	180b883a 	mov	r5,r3
 400638c:	400ec580 	call	400ec58 <__adddf3>
 4006390:	1021883a 	mov	r16,r2
 4006394:	d8800617 	ldw	r2,24(sp)
 4006398:	047f3034 	movhi	r17,64704
 400639c:	1c63883a 	add	r17,r3,r17
 40063a0:	10031826 	beq	r2,zero,4007004 <_dtoa_r+0x1120>
 40063a4:	d8c00517 	ldw	r3,20(sp)
 40063a8:	db000617 	ldw	r12,24(sp)
 40063ac:	d8c01315 	stw	r3,76(sp)
 40063b0:	d9000b17 	ldw	r4,44(sp)
 40063b4:	20038f26 	beq	r4,zero,40071f4 <_dtoa_r+0x1310>
 40063b8:	60bfffc4 	addi	r2,r12,-1
 40063bc:	100490fa 	slli	r2,r2,3
 40063c0:	00c100b4 	movhi	r3,1026
 40063c4:	18f2e404 	addi	r3,r3,-13424
 40063c8:	1885883a 	add	r2,r3,r2
 40063cc:	11800017 	ldw	r6,0(r2)
 40063d0:	11c00117 	ldw	r7,4(r2)
 40063d4:	d8800717 	ldw	r2,28(sp)
 40063d8:	0009883a 	mov	r4,zero
 40063dc:	014ff834 	movhi	r5,16352
 40063e0:	db001615 	stw	r12,88(sp)
 40063e4:	15c00044 	addi	r23,r2,1
 40063e8:	400f5040 	call	400f504 <__divdf3>
 40063ec:	800d883a 	mov	r6,r16
 40063f0:	880f883a 	mov	r7,r17
 40063f4:	1009883a 	mov	r4,r2
 40063f8:	180b883a 	mov	r5,r3
 40063fc:	401075c0 	call	401075c <__subdf3>
 4006400:	d9401017 	ldw	r5,64(sp)
 4006404:	d9000f17 	ldw	r4,60(sp)
 4006408:	102b883a 	mov	r21,r2
 400640c:	d8c01215 	stw	r3,72(sp)
 4006410:	40110580 	call	4011058 <__fixdfsi>
 4006414:	1009883a 	mov	r4,r2
 4006418:	1029883a 	mov	r20,r2
 400641c:	40110d80 	call	40110d8 <__floatsidf>
 4006420:	d9000f17 	ldw	r4,60(sp)
 4006424:	d9401017 	ldw	r5,64(sp)
 4006428:	100d883a 	mov	r6,r2
 400642c:	180f883a 	mov	r7,r3
 4006430:	401075c0 	call	401075c <__subdf3>
 4006434:	1823883a 	mov	r17,r3
 4006438:	d8c00717 	ldw	r3,28(sp)
 400643c:	d9401217 	ldw	r5,72(sp)
 4006440:	a2000c04 	addi	r8,r20,48
 4006444:	1021883a 	mov	r16,r2
 4006448:	1a000005 	stb	r8,0(r3)
 400644c:	800d883a 	mov	r6,r16
 4006450:	880f883a 	mov	r7,r17
 4006454:	a809883a 	mov	r4,r21
 4006458:	4029883a 	mov	r20,r8
 400645c:	400fe740 	call	400fe74 <__gedf2>
 4006460:	00841d16 	blt	zero,r2,40074d8 <_dtoa_r+0x15f4>
 4006464:	800d883a 	mov	r6,r16
 4006468:	880f883a 	mov	r7,r17
 400646c:	0009883a 	mov	r4,zero
 4006470:	014ffc34 	movhi	r5,16368
 4006474:	401075c0 	call	401075c <__subdf3>
 4006478:	d9401217 	ldw	r5,72(sp)
 400647c:	100d883a 	mov	r6,r2
 4006480:	180f883a 	mov	r7,r3
 4006484:	a809883a 	mov	r4,r21
 4006488:	400fe740 	call	400fe74 <__gedf2>
 400648c:	db001617 	ldw	r12,88(sp)
 4006490:	00840e16 	blt	zero,r2,40074cc <_dtoa_r+0x15e8>
 4006494:	00800044 	movi	r2,1
 4006498:	13006b0e 	bge	r2,r12,4006648 <_dtoa_r+0x764>
 400649c:	d9000717 	ldw	r4,28(sp)
 40064a0:	dd800f15 	stw	r22,60(sp)
 40064a4:	dcc01015 	stw	r19,64(sp)
 40064a8:	2319883a 	add	r12,r4,r12
 40064ac:	dcc01217 	ldw	r19,72(sp)
 40064b0:	602d883a 	mov	r22,r12
 40064b4:	dc801215 	stw	r18,72(sp)
 40064b8:	b825883a 	mov	r18,r23
 40064bc:	00000906 	br	40064e4 <_dtoa_r+0x600>
 40064c0:	401075c0 	call	401075c <__subdf3>
 40064c4:	a80d883a 	mov	r6,r21
 40064c8:	980f883a 	mov	r7,r19
 40064cc:	1009883a 	mov	r4,r2
 40064d0:	180b883a 	mov	r5,r3
 40064d4:	400ff500 	call	400ff50 <__ledf2>
 40064d8:	1003e816 	blt	r2,zero,400747c <_dtoa_r+0x1598>
 40064dc:	b825883a 	mov	r18,r23
 40064e0:	bd83e926 	beq	r23,r22,4007488 <_dtoa_r+0x15a4>
 40064e4:	a809883a 	mov	r4,r21
 40064e8:	980b883a 	mov	r5,r19
 40064ec:	000d883a 	mov	r6,zero
 40064f0:	01d00934 	movhi	r7,16420
 40064f4:	40100440 	call	4010044 <__muldf3>
 40064f8:	000d883a 	mov	r6,zero
 40064fc:	01d00934 	movhi	r7,16420
 4006500:	8009883a 	mov	r4,r16
 4006504:	880b883a 	mov	r5,r17
 4006508:	102b883a 	mov	r21,r2
 400650c:	1827883a 	mov	r19,r3
 4006510:	40100440 	call	4010044 <__muldf3>
 4006514:	180b883a 	mov	r5,r3
 4006518:	1009883a 	mov	r4,r2
 400651c:	1821883a 	mov	r16,r3
 4006520:	1023883a 	mov	r17,r2
 4006524:	40110580 	call	4011058 <__fixdfsi>
 4006528:	1009883a 	mov	r4,r2
 400652c:	1029883a 	mov	r20,r2
 4006530:	40110d80 	call	40110d8 <__floatsidf>
 4006534:	8809883a 	mov	r4,r17
 4006538:	800b883a 	mov	r5,r16
 400653c:	100d883a 	mov	r6,r2
 4006540:	180f883a 	mov	r7,r3
 4006544:	401075c0 	call	401075c <__subdf3>
 4006548:	a5000c04 	addi	r20,r20,48
 400654c:	a80d883a 	mov	r6,r21
 4006550:	980f883a 	mov	r7,r19
 4006554:	1009883a 	mov	r4,r2
 4006558:	180b883a 	mov	r5,r3
 400655c:	95000005 	stb	r20,0(r18)
 4006560:	1021883a 	mov	r16,r2
 4006564:	1823883a 	mov	r17,r3
 4006568:	400ff500 	call	400ff50 <__ledf2>
 400656c:	bdc00044 	addi	r23,r23,1
 4006570:	800d883a 	mov	r6,r16
 4006574:	880f883a 	mov	r7,r17
 4006578:	0009883a 	mov	r4,zero
 400657c:	014ffc34 	movhi	r5,16368
 4006580:	103fcf0e 	bge	r2,zero,40064c0 <__alt_mem_onchip_memory2_0+0xfc0044c0>
 4006584:	d8c01317 	ldw	r3,76(sp)
 4006588:	d8c00515 	stw	r3,20(sp)
 400658c:	d9400917 	ldw	r5,36(sp)
 4006590:	e009883a 	mov	r4,fp
 4006594:	40096280 	call	4009628 <_Bfree>
 4006598:	d9000517 	ldw	r4,20(sp)
 400659c:	d9802317 	ldw	r6,140(sp)
 40065a0:	d9c02517 	ldw	r7,148(sp)
 40065a4:	b8000005 	stb	zero,0(r23)
 40065a8:	20800044 	addi	r2,r4,1
 40065ac:	30800015 	stw	r2,0(r6)
 40065b0:	3802aa26 	beq	r7,zero,400705c <_dtoa_r+0x1178>
 40065b4:	3dc00015 	stw	r23,0(r7)
 40065b8:	d8800717 	ldw	r2,28(sp)
 40065bc:	003e7906 	br	4005fa4 <__alt_mem_onchip_memory2_0+0xfc003fa4>
 40065c0:	00800434 	movhi	r2,16
 40065c4:	10bfffc4 	addi	r2,r2,-1
 40065c8:	88a2703a 	and	r17,r17,r2
 40065cc:	883e851e 	bne	r17,zero,4005fe4 <__alt_mem_onchip_memory2_0+0xfc003fe4>
 40065d0:	008100b4 	movhi	r2,1026
 40065d4:	10b2c504 	addi	r2,r2,-13548
 40065d8:	003e8406 	br	4005fec <__alt_mem_onchip_memory2_0+0xfc003fec>
 40065dc:	10c00204 	addi	r3,r2,8
 40065e0:	003e8706 	br	4006000 <__alt_mem_onchip_memory2_0+0xfc004000>
 40065e4:	01400434 	movhi	r5,16
 40065e8:	297fffc4 	addi	r5,r5,-1
 40065ec:	994a703a 	and	r5,r19,r5
 40065f0:	9009883a 	mov	r4,r18
 40065f4:	843f0044 	addi	r16,r16,-1023
 40065f8:	294ffc34 	orhi	r5,r5,16368
 40065fc:	dd800217 	ldw	r22,8(sp)
 4006600:	d8001115 	stw	zero,68(sp)
 4006604:	003ea506 	br	400609c <__alt_mem_onchip_memory2_0+0xfc00409c>
 4006608:	008100b4 	movhi	r2,1026
 400660c:	10b2b404 	addi	r2,r2,-13616
 4006610:	003e6406 	br	4005fa4 <__alt_mem_onchip_memory2_0+0xfc003fa4>
 4006614:	e0001115 	stw	zero,68(fp)
 4006618:	000b883a 	mov	r5,zero
 400661c:	e009883a 	mov	r4,fp
 4006620:	40095800 	call	4009580 <_Balloc>
 4006624:	01bfffc4 	movi	r6,-1
 4006628:	01c00044 	movi	r7,1
 400662c:	d8800715 	stw	r2,28(sp)
 4006630:	d9800c15 	stw	r6,48(sp)
 4006634:	e0801015 	stw	r2,64(fp)
 4006638:	d8000315 	stw	zero,12(sp)
 400663c:	d9c00b15 	stw	r7,44(sp)
 4006640:	d9800615 	stw	r6,24(sp)
 4006644:	d8002215 	stw	zero,136(sp)
 4006648:	d8800117 	ldw	r2,4(sp)
 400664c:	10008916 	blt	r2,zero,4006874 <_dtoa_r+0x990>
 4006650:	d9000517 	ldw	r4,20(sp)
 4006654:	00c00384 	movi	r3,14
 4006658:	19008616 	blt	r3,r4,4006874 <_dtoa_r+0x990>
 400665c:	200490fa 	slli	r2,r4,3
 4006660:	00c100b4 	movhi	r3,1026
 4006664:	d9802217 	ldw	r6,136(sp)
 4006668:	18f2e404 	addi	r3,r3,-13424
 400666c:	1885883a 	add	r2,r3,r2
 4006670:	14000017 	ldw	r16,0(r2)
 4006674:	14400117 	ldw	r17,4(r2)
 4006678:	30016316 	blt	r6,zero,4006c08 <_dtoa_r+0xd24>
 400667c:	800d883a 	mov	r6,r16
 4006680:	880f883a 	mov	r7,r17
 4006684:	9009883a 	mov	r4,r18
 4006688:	980b883a 	mov	r5,r19
 400668c:	400f5040 	call	400f504 <__divdf3>
 4006690:	180b883a 	mov	r5,r3
 4006694:	1009883a 	mov	r4,r2
 4006698:	40110580 	call	4011058 <__fixdfsi>
 400669c:	1009883a 	mov	r4,r2
 40066a0:	102b883a 	mov	r21,r2
 40066a4:	40110d80 	call	40110d8 <__floatsidf>
 40066a8:	800d883a 	mov	r6,r16
 40066ac:	880f883a 	mov	r7,r17
 40066b0:	1009883a 	mov	r4,r2
 40066b4:	180b883a 	mov	r5,r3
 40066b8:	40100440 	call	4010044 <__muldf3>
 40066bc:	100d883a 	mov	r6,r2
 40066c0:	180f883a 	mov	r7,r3
 40066c4:	9009883a 	mov	r4,r18
 40066c8:	980b883a 	mov	r5,r19
 40066cc:	401075c0 	call	401075c <__subdf3>
 40066d0:	d9c00717 	ldw	r7,28(sp)
 40066d4:	1009883a 	mov	r4,r2
 40066d8:	a8800c04 	addi	r2,r21,48
 40066dc:	38800005 	stb	r2,0(r7)
 40066e0:	3dc00044 	addi	r23,r7,1
 40066e4:	d9c00617 	ldw	r7,24(sp)
 40066e8:	01800044 	movi	r6,1
 40066ec:	180b883a 	mov	r5,r3
 40066f0:	2005883a 	mov	r2,r4
 40066f4:	39803826 	beq	r7,r6,40067d8 <_dtoa_r+0x8f4>
 40066f8:	000d883a 	mov	r6,zero
 40066fc:	01d00934 	movhi	r7,16420
 4006700:	40100440 	call	4010044 <__muldf3>
 4006704:	000d883a 	mov	r6,zero
 4006708:	000f883a 	mov	r7,zero
 400670c:	1009883a 	mov	r4,r2
 4006710:	180b883a 	mov	r5,r3
 4006714:	1025883a 	mov	r18,r2
 4006718:	1827883a 	mov	r19,r3
 400671c:	400fdec0 	call	400fdec <__eqdf2>
 4006720:	103f9a26 	beq	r2,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006724:	d9c00617 	ldw	r7,24(sp)
 4006728:	d8c00717 	ldw	r3,28(sp)
 400672c:	b829883a 	mov	r20,r23
 4006730:	38bfffc4 	addi	r2,r7,-1
 4006734:	18ad883a 	add	r22,r3,r2
 4006738:	00000a06 	br	4006764 <_dtoa_r+0x880>
 400673c:	40100440 	call	4010044 <__muldf3>
 4006740:	000d883a 	mov	r6,zero
 4006744:	000f883a 	mov	r7,zero
 4006748:	1009883a 	mov	r4,r2
 400674c:	180b883a 	mov	r5,r3
 4006750:	1025883a 	mov	r18,r2
 4006754:	1827883a 	mov	r19,r3
 4006758:	b829883a 	mov	r20,r23
 400675c:	400fdec0 	call	400fdec <__eqdf2>
 4006760:	103f8a26 	beq	r2,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006764:	800d883a 	mov	r6,r16
 4006768:	880f883a 	mov	r7,r17
 400676c:	9009883a 	mov	r4,r18
 4006770:	980b883a 	mov	r5,r19
 4006774:	400f5040 	call	400f504 <__divdf3>
 4006778:	180b883a 	mov	r5,r3
 400677c:	1009883a 	mov	r4,r2
 4006780:	40110580 	call	4011058 <__fixdfsi>
 4006784:	1009883a 	mov	r4,r2
 4006788:	102b883a 	mov	r21,r2
 400678c:	40110d80 	call	40110d8 <__floatsidf>
 4006790:	800d883a 	mov	r6,r16
 4006794:	880f883a 	mov	r7,r17
 4006798:	1009883a 	mov	r4,r2
 400679c:	180b883a 	mov	r5,r3
 40067a0:	40100440 	call	4010044 <__muldf3>
 40067a4:	100d883a 	mov	r6,r2
 40067a8:	180f883a 	mov	r7,r3
 40067ac:	9009883a 	mov	r4,r18
 40067b0:	980b883a 	mov	r5,r19
 40067b4:	401075c0 	call	401075c <__subdf3>
 40067b8:	aa000c04 	addi	r8,r21,48
 40067bc:	a2000005 	stb	r8,0(r20)
 40067c0:	000d883a 	mov	r6,zero
 40067c4:	01d00934 	movhi	r7,16420
 40067c8:	1009883a 	mov	r4,r2
 40067cc:	180b883a 	mov	r5,r3
 40067d0:	a5c00044 	addi	r23,r20,1
 40067d4:	b53fd91e 	bne	r22,r20,400673c <__alt_mem_onchip_memory2_0+0xfc00473c>
 40067d8:	100d883a 	mov	r6,r2
 40067dc:	180f883a 	mov	r7,r3
 40067e0:	1009883a 	mov	r4,r2
 40067e4:	180b883a 	mov	r5,r3
 40067e8:	400ec580 	call	400ec58 <__adddf3>
 40067ec:	100d883a 	mov	r6,r2
 40067f0:	180f883a 	mov	r7,r3
 40067f4:	8009883a 	mov	r4,r16
 40067f8:	880b883a 	mov	r5,r17
 40067fc:	1027883a 	mov	r19,r2
 4006800:	1825883a 	mov	r18,r3
 4006804:	400ff500 	call	400ff50 <__ledf2>
 4006808:	10000816 	blt	r2,zero,400682c <_dtoa_r+0x948>
 400680c:	980d883a 	mov	r6,r19
 4006810:	900f883a 	mov	r7,r18
 4006814:	8009883a 	mov	r4,r16
 4006818:	880b883a 	mov	r5,r17
 400681c:	400fdec0 	call	400fdec <__eqdf2>
 4006820:	103f5a1e 	bne	r2,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006824:	ad40004c 	andi	r21,r21,1
 4006828:	a83f5826 	beq	r21,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 400682c:	bd3fffc3 	ldbu	r20,-1(r23)
 4006830:	b8bfffc4 	addi	r2,r23,-1
 4006834:	1007883a 	mov	r3,r2
 4006838:	01400e44 	movi	r5,57
 400683c:	d9800717 	ldw	r6,28(sp)
 4006840:	00000506 	br	4006858 <_dtoa_r+0x974>
 4006844:	18ffffc4 	addi	r3,r3,-1
 4006848:	11824726 	beq	r2,r6,4007168 <_dtoa_r+0x1284>
 400684c:	1d000003 	ldbu	r20,0(r3)
 4006850:	102f883a 	mov	r23,r2
 4006854:	10bfffc4 	addi	r2,r2,-1
 4006858:	a1003fcc 	andi	r4,r20,255
 400685c:	2100201c 	xori	r4,r4,128
 4006860:	213fe004 	addi	r4,r4,-128
 4006864:	217ff726 	beq	r4,r5,4006844 <__alt_mem_onchip_memory2_0+0xfc004844>
 4006868:	a2000044 	addi	r8,r20,1
 400686c:	12000005 	stb	r8,0(r2)
 4006870:	003f4606 	br	400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006874:	d9000b17 	ldw	r4,44(sp)
 4006878:	2000c826 	beq	r4,zero,4006b9c <_dtoa_r+0xcb8>
 400687c:	d9800317 	ldw	r6,12(sp)
 4006880:	00c00044 	movi	r3,1
 4006884:	1980f90e 	bge	r3,r6,4006c6c <_dtoa_r+0xd88>
 4006888:	d8800617 	ldw	r2,24(sp)
 400688c:	d8c00a17 	ldw	r3,40(sp)
 4006890:	157fffc4 	addi	r21,r2,-1
 4006894:	1d41f316 	blt	r3,r21,4007064 <_dtoa_r+0x1180>
 4006898:	1d6bc83a 	sub	r21,r3,r21
 400689c:	d9c00617 	ldw	r7,24(sp)
 40068a0:	3802aa16 	blt	r7,zero,400734c <_dtoa_r+0x1468>
 40068a4:	dd000817 	ldw	r20,32(sp)
 40068a8:	d8800617 	ldw	r2,24(sp)
 40068ac:	d8c00817 	ldw	r3,32(sp)
 40068b0:	01400044 	movi	r5,1
 40068b4:	e009883a 	mov	r4,fp
 40068b8:	1887883a 	add	r3,r3,r2
 40068bc:	d8c00815 	stw	r3,32(sp)
 40068c0:	b0ad883a 	add	r22,r22,r2
 40068c4:	400998c0 	call	400998c <__i2b>
 40068c8:	1023883a 	mov	r17,r2
 40068cc:	a0000826 	beq	r20,zero,40068f0 <_dtoa_r+0xa0c>
 40068d0:	0580070e 	bge	zero,r22,40068f0 <_dtoa_r+0xa0c>
 40068d4:	a005883a 	mov	r2,r20
 40068d8:	b500b916 	blt	r22,r20,4006bc0 <_dtoa_r+0xcdc>
 40068dc:	d9000817 	ldw	r4,32(sp)
 40068e0:	a0a9c83a 	sub	r20,r20,r2
 40068e4:	b0adc83a 	sub	r22,r22,r2
 40068e8:	2089c83a 	sub	r4,r4,r2
 40068ec:	d9000815 	stw	r4,32(sp)
 40068f0:	d9800a17 	ldw	r6,40(sp)
 40068f4:	0181810e 	bge	zero,r6,4006efc <_dtoa_r+0x1018>
 40068f8:	d9c00b17 	ldw	r7,44(sp)
 40068fc:	3800b326 	beq	r7,zero,4006bcc <_dtoa_r+0xce8>
 4006900:	a800b226 	beq	r21,zero,4006bcc <_dtoa_r+0xce8>
 4006904:	880b883a 	mov	r5,r17
 4006908:	a80d883a 	mov	r6,r21
 400690c:	e009883a 	mov	r4,fp
 4006910:	4009bc00 	call	4009bc0 <__pow5mult>
 4006914:	d9800917 	ldw	r6,36(sp)
 4006918:	100b883a 	mov	r5,r2
 400691c:	e009883a 	mov	r4,fp
 4006920:	1023883a 	mov	r17,r2
 4006924:	40099c80 	call	40099c8 <__multiply>
 4006928:	1021883a 	mov	r16,r2
 400692c:	d8800a17 	ldw	r2,40(sp)
 4006930:	d9400917 	ldw	r5,36(sp)
 4006934:	e009883a 	mov	r4,fp
 4006938:	1545c83a 	sub	r2,r2,r21
 400693c:	d8800a15 	stw	r2,40(sp)
 4006940:	40096280 	call	4009628 <_Bfree>
 4006944:	d8c00a17 	ldw	r3,40(sp)
 4006948:	18009f1e 	bne	r3,zero,4006bc8 <_dtoa_r+0xce4>
 400694c:	05c00044 	movi	r23,1
 4006950:	e009883a 	mov	r4,fp
 4006954:	b80b883a 	mov	r5,r23
 4006958:	400998c0 	call	400998c <__i2b>
 400695c:	d9000d17 	ldw	r4,52(sp)
 4006960:	102b883a 	mov	r21,r2
 4006964:	2000ce26 	beq	r4,zero,4006ca0 <_dtoa_r+0xdbc>
 4006968:	200d883a 	mov	r6,r4
 400696c:	100b883a 	mov	r5,r2
 4006970:	e009883a 	mov	r4,fp
 4006974:	4009bc00 	call	4009bc0 <__pow5mult>
 4006978:	d9800317 	ldw	r6,12(sp)
 400697c:	102b883a 	mov	r21,r2
 4006980:	b981810e 	bge	r23,r6,4006f88 <_dtoa_r+0x10a4>
 4006984:	0027883a 	mov	r19,zero
 4006988:	a8800417 	ldw	r2,16(r21)
 400698c:	05c00804 	movi	r23,32
 4006990:	10800104 	addi	r2,r2,4
 4006994:	1085883a 	add	r2,r2,r2
 4006998:	1085883a 	add	r2,r2,r2
 400699c:	a885883a 	add	r2,r21,r2
 40069a0:	11000017 	ldw	r4,0(r2)
 40069a4:	40098740 	call	4009874 <__hi0bits>
 40069a8:	b885c83a 	sub	r2,r23,r2
 40069ac:	1585883a 	add	r2,r2,r22
 40069b0:	108007cc 	andi	r2,r2,31
 40069b4:	1000b326 	beq	r2,zero,4006c84 <_dtoa_r+0xda0>
 40069b8:	00c00804 	movi	r3,32
 40069bc:	1887c83a 	sub	r3,r3,r2
 40069c0:	01000104 	movi	r4,4
 40069c4:	20c2cd0e 	bge	r4,r3,40074fc <_dtoa_r+0x1618>
 40069c8:	00c00704 	movi	r3,28
 40069cc:	1885c83a 	sub	r2,r3,r2
 40069d0:	d8c00817 	ldw	r3,32(sp)
 40069d4:	a0a9883a 	add	r20,r20,r2
 40069d8:	b0ad883a 	add	r22,r22,r2
 40069dc:	1887883a 	add	r3,r3,r2
 40069e0:	d8c00815 	stw	r3,32(sp)
 40069e4:	d9800817 	ldw	r6,32(sp)
 40069e8:	0180040e 	bge	zero,r6,40069fc <_dtoa_r+0xb18>
 40069ec:	800b883a 	mov	r5,r16
 40069f0:	e009883a 	mov	r4,fp
 40069f4:	4009d000 	call	4009d00 <__lshift>
 40069f8:	1021883a 	mov	r16,r2
 40069fc:	0580050e 	bge	zero,r22,4006a14 <_dtoa_r+0xb30>
 4006a00:	a80b883a 	mov	r5,r21
 4006a04:	b00d883a 	mov	r6,r22
 4006a08:	e009883a 	mov	r4,fp
 4006a0c:	4009d000 	call	4009d00 <__lshift>
 4006a10:	102b883a 	mov	r21,r2
 4006a14:	d9c00e17 	ldw	r7,56(sp)
 4006a18:	3801211e 	bne	r7,zero,4006ea0 <_dtoa_r+0xfbc>
 4006a1c:	d9800617 	ldw	r6,24(sp)
 4006a20:	0181380e 	bge	zero,r6,4006f04 <_dtoa_r+0x1020>
 4006a24:	d8c00b17 	ldw	r3,44(sp)
 4006a28:	1800ab1e 	bne	r3,zero,4006cd8 <_dtoa_r+0xdf4>
 4006a2c:	dc800717 	ldw	r18,28(sp)
 4006a30:	dcc00617 	ldw	r19,24(sp)
 4006a34:	9029883a 	mov	r20,r18
 4006a38:	00000206 	br	4006a44 <_dtoa_r+0xb60>
 4006a3c:	40096500 	call	4009650 <__multadd>
 4006a40:	1021883a 	mov	r16,r2
 4006a44:	a80b883a 	mov	r5,r21
 4006a48:	8009883a 	mov	r4,r16
 4006a4c:	4005ce40 	call	4005ce4 <quorem>
 4006a50:	10800c04 	addi	r2,r2,48
 4006a54:	90800005 	stb	r2,0(r18)
 4006a58:	94800044 	addi	r18,r18,1
 4006a5c:	9507c83a 	sub	r3,r18,r20
 4006a60:	000f883a 	mov	r7,zero
 4006a64:	01800284 	movi	r6,10
 4006a68:	800b883a 	mov	r5,r16
 4006a6c:	e009883a 	mov	r4,fp
 4006a70:	1cfff216 	blt	r3,r19,4006a3c <__alt_mem_onchip_memory2_0+0xfc004a3c>
 4006a74:	1011883a 	mov	r8,r2
 4006a78:	d8800617 	ldw	r2,24(sp)
 4006a7c:	0082370e 	bge	zero,r2,400735c <_dtoa_r+0x1478>
 4006a80:	d9000717 	ldw	r4,28(sp)
 4006a84:	0025883a 	mov	r18,zero
 4006a88:	20af883a 	add	r23,r4,r2
 4006a8c:	01800044 	movi	r6,1
 4006a90:	800b883a 	mov	r5,r16
 4006a94:	e009883a 	mov	r4,fp
 4006a98:	da001715 	stw	r8,92(sp)
 4006a9c:	4009d000 	call	4009d00 <__lshift>
 4006aa0:	a80b883a 	mov	r5,r21
 4006aa4:	1009883a 	mov	r4,r2
 4006aa8:	d8800915 	stw	r2,36(sp)
 4006aac:	4009e480 	call	4009e48 <__mcmp>
 4006ab0:	da001717 	ldw	r8,92(sp)
 4006ab4:	0081800e 	bge	zero,r2,40070b8 <_dtoa_r+0x11d4>
 4006ab8:	b93fffc3 	ldbu	r4,-1(r23)
 4006abc:	b8bfffc4 	addi	r2,r23,-1
 4006ac0:	1007883a 	mov	r3,r2
 4006ac4:	01800e44 	movi	r6,57
 4006ac8:	d9c00717 	ldw	r7,28(sp)
 4006acc:	00000506 	br	4006ae4 <_dtoa_r+0xc00>
 4006ad0:	18ffffc4 	addi	r3,r3,-1
 4006ad4:	11c12326 	beq	r2,r7,4006f64 <_dtoa_r+0x1080>
 4006ad8:	19000003 	ldbu	r4,0(r3)
 4006adc:	102f883a 	mov	r23,r2
 4006ae0:	10bfffc4 	addi	r2,r2,-1
 4006ae4:	21403fcc 	andi	r5,r4,255
 4006ae8:	2940201c 	xori	r5,r5,128
 4006aec:	297fe004 	addi	r5,r5,-128
 4006af0:	29bff726 	beq	r5,r6,4006ad0 <__alt_mem_onchip_memory2_0+0xfc004ad0>
 4006af4:	21000044 	addi	r4,r4,1
 4006af8:	11000005 	stb	r4,0(r2)
 4006afc:	a80b883a 	mov	r5,r21
 4006b00:	e009883a 	mov	r4,fp
 4006b04:	40096280 	call	4009628 <_Bfree>
 4006b08:	883ea026 	beq	r17,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006b0c:	90000426 	beq	r18,zero,4006b20 <_dtoa_r+0xc3c>
 4006b10:	94400326 	beq	r18,r17,4006b20 <_dtoa_r+0xc3c>
 4006b14:	900b883a 	mov	r5,r18
 4006b18:	e009883a 	mov	r4,fp
 4006b1c:	40096280 	call	4009628 <_Bfree>
 4006b20:	880b883a 	mov	r5,r17
 4006b24:	e009883a 	mov	r4,fp
 4006b28:	40096280 	call	4009628 <_Bfree>
 4006b2c:	003e9706 	br	400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006b30:	01800044 	movi	r6,1
 4006b34:	d9800e15 	stw	r6,56(sp)
 4006b38:	003d9606 	br	4006194 <__alt_mem_onchip_memory2_0+0xfc004194>
 4006b3c:	d8800817 	ldw	r2,32(sp)
 4006b40:	d8c00517 	ldw	r3,20(sp)
 4006b44:	d8000d15 	stw	zero,52(sp)
 4006b48:	10c5c83a 	sub	r2,r2,r3
 4006b4c:	00c9c83a 	sub	r4,zero,r3
 4006b50:	d8800815 	stw	r2,32(sp)
 4006b54:	d9000a15 	stw	r4,40(sp)
 4006b58:	003d9706 	br	40061b8 <__alt_mem_onchip_memory2_0+0xfc0041b8>
 4006b5c:	05adc83a 	sub	r22,zero,r22
 4006b60:	dd800815 	stw	r22,32(sp)
 4006b64:	002d883a 	mov	r22,zero
 4006b68:	003d8e06 	br	40061a4 <__alt_mem_onchip_memory2_0+0xfc0041a4>
 4006b6c:	d9000517 	ldw	r4,20(sp)
 4006b70:	40110d80 	call	40110d8 <__floatsidf>
 4006b74:	100d883a 	mov	r6,r2
 4006b78:	180f883a 	mov	r7,r3
 4006b7c:	a009883a 	mov	r4,r20
 4006b80:	880b883a 	mov	r5,r17
 4006b84:	400fdec0 	call	400fdec <__eqdf2>
 4006b88:	103d7126 	beq	r2,zero,4006150 <__alt_mem_onchip_memory2_0+0xfc004150>
 4006b8c:	d9c00517 	ldw	r7,20(sp)
 4006b90:	39ffffc4 	addi	r7,r7,-1
 4006b94:	d9c00515 	stw	r7,20(sp)
 4006b98:	003d6d06 	br	4006150 <__alt_mem_onchip_memory2_0+0xfc004150>
 4006b9c:	dd400a17 	ldw	r21,40(sp)
 4006ba0:	dd000817 	ldw	r20,32(sp)
 4006ba4:	0023883a 	mov	r17,zero
 4006ba8:	003f4806 	br	40068cc <__alt_mem_onchip_memory2_0+0xfc0048cc>
 4006bac:	10e3c83a 	sub	r17,r2,r3
 4006bb0:	9448983a 	sll	r4,r18,r17
 4006bb4:	003d3206 	br	4006080 <__alt_mem_onchip_memory2_0+0xfc004080>
 4006bb8:	d8000e15 	stw	zero,56(sp)
 4006bbc:	003d7506 	br	4006194 <__alt_mem_onchip_memory2_0+0xfc004194>
 4006bc0:	b005883a 	mov	r2,r22
 4006bc4:	003f4506 	br	40068dc <__alt_mem_onchip_memory2_0+0xfc0048dc>
 4006bc8:	dc000915 	stw	r16,36(sp)
 4006bcc:	d9800a17 	ldw	r6,40(sp)
 4006bd0:	d9400917 	ldw	r5,36(sp)
 4006bd4:	e009883a 	mov	r4,fp
 4006bd8:	4009bc00 	call	4009bc0 <__pow5mult>
 4006bdc:	1021883a 	mov	r16,r2
 4006be0:	003f5a06 	br	400694c <__alt_mem_onchip_memory2_0+0xfc00494c>
 4006be4:	01c00044 	movi	r7,1
 4006be8:	d9c00b15 	stw	r7,44(sp)
 4006bec:	d8802217 	ldw	r2,136(sp)
 4006bf0:	0081280e 	bge	zero,r2,4007094 <_dtoa_r+0x11b0>
 4006bf4:	100d883a 	mov	r6,r2
 4006bf8:	1021883a 	mov	r16,r2
 4006bfc:	d8800c15 	stw	r2,48(sp)
 4006c00:	d8800615 	stw	r2,24(sp)
 4006c04:	003d8806 	br	4006228 <__alt_mem_onchip_memory2_0+0xfc004228>
 4006c08:	d8800617 	ldw	r2,24(sp)
 4006c0c:	00be9b16 	blt	zero,r2,400667c <__alt_mem_onchip_memory2_0+0xfc00467c>
 4006c10:	10010f1e 	bne	r2,zero,4007050 <_dtoa_r+0x116c>
 4006c14:	880b883a 	mov	r5,r17
 4006c18:	000d883a 	mov	r6,zero
 4006c1c:	01d00534 	movhi	r7,16404
 4006c20:	8009883a 	mov	r4,r16
 4006c24:	40100440 	call	4010044 <__muldf3>
 4006c28:	900d883a 	mov	r6,r18
 4006c2c:	980f883a 	mov	r7,r19
 4006c30:	1009883a 	mov	r4,r2
 4006c34:	180b883a 	mov	r5,r3
 4006c38:	400fe740 	call	400fe74 <__gedf2>
 4006c3c:	002b883a 	mov	r21,zero
 4006c40:	0023883a 	mov	r17,zero
 4006c44:	1000bf16 	blt	r2,zero,4006f44 <_dtoa_r+0x1060>
 4006c48:	d9802217 	ldw	r6,136(sp)
 4006c4c:	ddc00717 	ldw	r23,28(sp)
 4006c50:	018c303a 	nor	r6,zero,r6
 4006c54:	d9800515 	stw	r6,20(sp)
 4006c58:	a80b883a 	mov	r5,r21
 4006c5c:	e009883a 	mov	r4,fp
 4006c60:	40096280 	call	4009628 <_Bfree>
 4006c64:	883e4926 	beq	r17,zero,400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 4006c68:	003fad06 	br	4006b20 <__alt_mem_onchip_memory2_0+0xfc004b20>
 4006c6c:	d9c01117 	ldw	r7,68(sp)
 4006c70:	3801bc26 	beq	r7,zero,4007364 <_dtoa_r+0x1480>
 4006c74:	10810cc4 	addi	r2,r2,1075
 4006c78:	dd400a17 	ldw	r21,40(sp)
 4006c7c:	dd000817 	ldw	r20,32(sp)
 4006c80:	003f0a06 	br	40068ac <__alt_mem_onchip_memory2_0+0xfc0048ac>
 4006c84:	00800704 	movi	r2,28
 4006c88:	d9000817 	ldw	r4,32(sp)
 4006c8c:	a0a9883a 	add	r20,r20,r2
 4006c90:	b0ad883a 	add	r22,r22,r2
 4006c94:	2089883a 	add	r4,r4,r2
 4006c98:	d9000815 	stw	r4,32(sp)
 4006c9c:	003f5106 	br	40069e4 <__alt_mem_onchip_memory2_0+0xfc0049e4>
 4006ca0:	d8c00317 	ldw	r3,12(sp)
 4006ca4:	b8c1fc0e 	bge	r23,r3,4007498 <_dtoa_r+0x15b4>
 4006ca8:	0027883a 	mov	r19,zero
 4006cac:	b805883a 	mov	r2,r23
 4006cb0:	003f3e06 	br	40069ac <__alt_mem_onchip_memory2_0+0xfc0049ac>
 4006cb4:	880b883a 	mov	r5,r17
 4006cb8:	e009883a 	mov	r4,fp
 4006cbc:	000f883a 	mov	r7,zero
 4006cc0:	01800284 	movi	r6,10
 4006cc4:	40096500 	call	4009650 <__multadd>
 4006cc8:	d9000c17 	ldw	r4,48(sp)
 4006ccc:	1023883a 	mov	r17,r2
 4006cd0:	0102040e 	bge	zero,r4,40074e4 <_dtoa_r+0x1600>
 4006cd4:	d9000615 	stw	r4,24(sp)
 4006cd8:	0500050e 	bge	zero,r20,4006cf0 <_dtoa_r+0xe0c>
 4006cdc:	880b883a 	mov	r5,r17
 4006ce0:	a00d883a 	mov	r6,r20
 4006ce4:	e009883a 	mov	r4,fp
 4006ce8:	4009d000 	call	4009d00 <__lshift>
 4006cec:	1023883a 	mov	r17,r2
 4006cf0:	9801241e 	bne	r19,zero,4007184 <_dtoa_r+0x12a0>
 4006cf4:	8829883a 	mov	r20,r17
 4006cf8:	d9000617 	ldw	r4,24(sp)
 4006cfc:	dcc00717 	ldw	r19,28(sp)
 4006d00:	9480004c 	andi	r18,r18,1
 4006d04:	20bfffc4 	addi	r2,r4,-1
 4006d08:	9885883a 	add	r2,r19,r2
 4006d0c:	d8800415 	stw	r2,16(sp)
 4006d10:	dc800615 	stw	r18,24(sp)
 4006d14:	a80b883a 	mov	r5,r21
 4006d18:	8009883a 	mov	r4,r16
 4006d1c:	4005ce40 	call	4005ce4 <quorem>
 4006d20:	880b883a 	mov	r5,r17
 4006d24:	8009883a 	mov	r4,r16
 4006d28:	102f883a 	mov	r23,r2
 4006d2c:	4009e480 	call	4009e48 <__mcmp>
 4006d30:	a80b883a 	mov	r5,r21
 4006d34:	a00d883a 	mov	r6,r20
 4006d38:	e009883a 	mov	r4,fp
 4006d3c:	102d883a 	mov	r22,r2
 4006d40:	4009ea80 	call	4009ea8 <__mdiff>
 4006d44:	1007883a 	mov	r3,r2
 4006d48:	10800317 	ldw	r2,12(r2)
 4006d4c:	bc800c04 	addi	r18,r23,48
 4006d50:	180b883a 	mov	r5,r3
 4006d54:	10004e1e 	bne	r2,zero,4006e90 <_dtoa_r+0xfac>
 4006d58:	8009883a 	mov	r4,r16
 4006d5c:	d8c01615 	stw	r3,88(sp)
 4006d60:	4009e480 	call	4009e48 <__mcmp>
 4006d64:	d8c01617 	ldw	r3,88(sp)
 4006d68:	e009883a 	mov	r4,fp
 4006d6c:	d8801615 	stw	r2,88(sp)
 4006d70:	180b883a 	mov	r5,r3
 4006d74:	40096280 	call	4009628 <_Bfree>
 4006d78:	d8801617 	ldw	r2,88(sp)
 4006d7c:	1000041e 	bne	r2,zero,4006d90 <_dtoa_r+0xeac>
 4006d80:	d9800317 	ldw	r6,12(sp)
 4006d84:	3000021e 	bne	r6,zero,4006d90 <_dtoa_r+0xeac>
 4006d88:	d8c00617 	ldw	r3,24(sp)
 4006d8c:	18003726 	beq	r3,zero,4006e6c <_dtoa_r+0xf88>
 4006d90:	b0002016 	blt	r22,zero,4006e14 <_dtoa_r+0xf30>
 4006d94:	b000041e 	bne	r22,zero,4006da8 <_dtoa_r+0xec4>
 4006d98:	d9000317 	ldw	r4,12(sp)
 4006d9c:	2000021e 	bne	r4,zero,4006da8 <_dtoa_r+0xec4>
 4006da0:	d8c00617 	ldw	r3,24(sp)
 4006da4:	18001b26 	beq	r3,zero,4006e14 <_dtoa_r+0xf30>
 4006da8:	00810716 	blt	zero,r2,40071c8 <_dtoa_r+0x12e4>
 4006dac:	d8c00417 	ldw	r3,16(sp)
 4006db0:	9d800044 	addi	r22,r19,1
 4006db4:	9c800005 	stb	r18,0(r19)
 4006db8:	b02f883a 	mov	r23,r22
 4006dbc:	98c10626 	beq	r19,r3,40071d8 <_dtoa_r+0x12f4>
 4006dc0:	800b883a 	mov	r5,r16
 4006dc4:	000f883a 	mov	r7,zero
 4006dc8:	01800284 	movi	r6,10
 4006dcc:	e009883a 	mov	r4,fp
 4006dd0:	40096500 	call	4009650 <__multadd>
 4006dd4:	1021883a 	mov	r16,r2
 4006dd8:	000f883a 	mov	r7,zero
 4006ddc:	01800284 	movi	r6,10
 4006de0:	880b883a 	mov	r5,r17
 4006de4:	e009883a 	mov	r4,fp
 4006de8:	8d002526 	beq	r17,r20,4006e80 <_dtoa_r+0xf9c>
 4006dec:	40096500 	call	4009650 <__multadd>
 4006df0:	a00b883a 	mov	r5,r20
 4006df4:	000f883a 	mov	r7,zero
 4006df8:	01800284 	movi	r6,10
 4006dfc:	e009883a 	mov	r4,fp
 4006e00:	1023883a 	mov	r17,r2
 4006e04:	40096500 	call	4009650 <__multadd>
 4006e08:	1029883a 	mov	r20,r2
 4006e0c:	b027883a 	mov	r19,r22
 4006e10:	003fc006 	br	4006d14 <__alt_mem_onchip_memory2_0+0xfc004d14>
 4006e14:	9011883a 	mov	r8,r18
 4006e18:	00800e0e 	bge	zero,r2,4006e54 <_dtoa_r+0xf70>
 4006e1c:	800b883a 	mov	r5,r16
 4006e20:	01800044 	movi	r6,1
 4006e24:	e009883a 	mov	r4,fp
 4006e28:	da001715 	stw	r8,92(sp)
 4006e2c:	4009d000 	call	4009d00 <__lshift>
 4006e30:	a80b883a 	mov	r5,r21
 4006e34:	1009883a 	mov	r4,r2
 4006e38:	1021883a 	mov	r16,r2
 4006e3c:	4009e480 	call	4009e48 <__mcmp>
 4006e40:	da001717 	ldw	r8,92(sp)
 4006e44:	0081960e 	bge	zero,r2,40074a0 <_dtoa_r+0x15bc>
 4006e48:	00800e44 	movi	r2,57
 4006e4c:	40817026 	beq	r8,r2,4007410 <_dtoa_r+0x152c>
 4006e50:	ba000c44 	addi	r8,r23,49
 4006e54:	8825883a 	mov	r18,r17
 4006e58:	9dc00044 	addi	r23,r19,1
 4006e5c:	9a000005 	stb	r8,0(r19)
 4006e60:	a023883a 	mov	r17,r20
 4006e64:	dc000915 	stw	r16,36(sp)
 4006e68:	003f2406 	br	4006afc <__alt_mem_onchip_memory2_0+0xfc004afc>
 4006e6c:	00800e44 	movi	r2,57
 4006e70:	9011883a 	mov	r8,r18
 4006e74:	90816626 	beq	r18,r2,4007410 <_dtoa_r+0x152c>
 4006e78:	05bff516 	blt	zero,r22,4006e50 <__alt_mem_onchip_memory2_0+0xfc004e50>
 4006e7c:	003ff506 	br	4006e54 <__alt_mem_onchip_memory2_0+0xfc004e54>
 4006e80:	40096500 	call	4009650 <__multadd>
 4006e84:	1023883a 	mov	r17,r2
 4006e88:	1029883a 	mov	r20,r2
 4006e8c:	003fdf06 	br	4006e0c <__alt_mem_onchip_memory2_0+0xfc004e0c>
 4006e90:	e009883a 	mov	r4,fp
 4006e94:	40096280 	call	4009628 <_Bfree>
 4006e98:	00800044 	movi	r2,1
 4006e9c:	003fbc06 	br	4006d90 <__alt_mem_onchip_memory2_0+0xfc004d90>
 4006ea0:	a80b883a 	mov	r5,r21
 4006ea4:	8009883a 	mov	r4,r16
 4006ea8:	4009e480 	call	4009e48 <__mcmp>
 4006eac:	103edb0e 	bge	r2,zero,4006a1c <__alt_mem_onchip_memory2_0+0xfc004a1c>
 4006eb0:	800b883a 	mov	r5,r16
 4006eb4:	000f883a 	mov	r7,zero
 4006eb8:	01800284 	movi	r6,10
 4006ebc:	e009883a 	mov	r4,fp
 4006ec0:	40096500 	call	4009650 <__multadd>
 4006ec4:	1021883a 	mov	r16,r2
 4006ec8:	d8800517 	ldw	r2,20(sp)
 4006ecc:	d8c00b17 	ldw	r3,44(sp)
 4006ed0:	10bfffc4 	addi	r2,r2,-1
 4006ed4:	d8800515 	stw	r2,20(sp)
 4006ed8:	183f761e 	bne	r3,zero,4006cb4 <__alt_mem_onchip_memory2_0+0xfc004cb4>
 4006edc:	d9000c17 	ldw	r4,48(sp)
 4006ee0:	0101730e 	bge	zero,r4,40074b0 <_dtoa_r+0x15cc>
 4006ee4:	d9000615 	stw	r4,24(sp)
 4006ee8:	003ed006 	br	4006a2c <__alt_mem_onchip_memory2_0+0xfc004a2c>
 4006eec:	00800084 	movi	r2,2
 4006ef0:	3081861e 	bne	r6,r2,400750c <_dtoa_r+0x1628>
 4006ef4:	d8000b15 	stw	zero,44(sp)
 4006ef8:	003f3c06 	br	4006bec <__alt_mem_onchip_memory2_0+0xfc004bec>
 4006efc:	dc000917 	ldw	r16,36(sp)
 4006f00:	003e9206 	br	400694c <__alt_mem_onchip_memory2_0+0xfc00494c>
 4006f04:	d9c00317 	ldw	r7,12(sp)
 4006f08:	00800084 	movi	r2,2
 4006f0c:	11fec50e 	bge	r2,r7,4006a24 <__alt_mem_onchip_memory2_0+0xfc004a24>
 4006f10:	d9000617 	ldw	r4,24(sp)
 4006f14:	20013c1e 	bne	r4,zero,4007408 <_dtoa_r+0x1524>
 4006f18:	a80b883a 	mov	r5,r21
 4006f1c:	000f883a 	mov	r7,zero
 4006f20:	01800144 	movi	r6,5
 4006f24:	e009883a 	mov	r4,fp
 4006f28:	40096500 	call	4009650 <__multadd>
 4006f2c:	100b883a 	mov	r5,r2
 4006f30:	8009883a 	mov	r4,r16
 4006f34:	102b883a 	mov	r21,r2
 4006f38:	4009e480 	call	4009e48 <__mcmp>
 4006f3c:	dc000915 	stw	r16,36(sp)
 4006f40:	00bf410e 	bge	zero,r2,4006c48 <__alt_mem_onchip_memory2_0+0xfc004c48>
 4006f44:	d9c00717 	ldw	r7,28(sp)
 4006f48:	00800c44 	movi	r2,49
 4006f4c:	38800005 	stb	r2,0(r7)
 4006f50:	d8800517 	ldw	r2,20(sp)
 4006f54:	3dc00044 	addi	r23,r7,1
 4006f58:	10800044 	addi	r2,r2,1
 4006f5c:	d8800515 	stw	r2,20(sp)
 4006f60:	003f3d06 	br	4006c58 <__alt_mem_onchip_memory2_0+0xfc004c58>
 4006f64:	d9800517 	ldw	r6,20(sp)
 4006f68:	d9c00717 	ldw	r7,28(sp)
 4006f6c:	00800c44 	movi	r2,49
 4006f70:	31800044 	addi	r6,r6,1
 4006f74:	d9800515 	stw	r6,20(sp)
 4006f78:	38800005 	stb	r2,0(r7)
 4006f7c:	003edf06 	br	4006afc <__alt_mem_onchip_memory2_0+0xfc004afc>
 4006f80:	d8000b15 	stw	zero,44(sp)
 4006f84:	003c9f06 	br	4006204 <__alt_mem_onchip_memory2_0+0xfc004204>
 4006f88:	903e7e1e 	bne	r18,zero,4006984 <__alt_mem_onchip_memory2_0+0xfc004984>
 4006f8c:	00800434 	movhi	r2,16
 4006f90:	10bfffc4 	addi	r2,r2,-1
 4006f94:	9884703a 	and	r2,r19,r2
 4006f98:	1000ea1e 	bne	r2,zero,4007344 <_dtoa_r+0x1460>
 4006f9c:	9cdffc2c 	andhi	r19,r19,32752
 4006fa0:	9800e826 	beq	r19,zero,4007344 <_dtoa_r+0x1460>
 4006fa4:	d9c00817 	ldw	r7,32(sp)
 4006fa8:	b5800044 	addi	r22,r22,1
 4006fac:	04c00044 	movi	r19,1
 4006fb0:	39c00044 	addi	r7,r7,1
 4006fb4:	d9c00815 	stw	r7,32(sp)
 4006fb8:	d8800d17 	ldw	r2,52(sp)
 4006fbc:	103e721e 	bne	r2,zero,4006988 <__alt_mem_onchip_memory2_0+0xfc004988>
 4006fc0:	00800044 	movi	r2,1
 4006fc4:	003e7906 	br	40069ac <__alt_mem_onchip_memory2_0+0xfc0049ac>
 4006fc8:	8009883a 	mov	r4,r16
 4006fcc:	40110d80 	call	40110d8 <__floatsidf>
 4006fd0:	d9800f17 	ldw	r6,60(sp)
 4006fd4:	d9c01017 	ldw	r7,64(sp)
 4006fd8:	1009883a 	mov	r4,r2
 4006fdc:	180b883a 	mov	r5,r3
 4006fe0:	40100440 	call	4010044 <__muldf3>
 4006fe4:	000d883a 	mov	r6,zero
 4006fe8:	01d00734 	movhi	r7,16412
 4006fec:	1009883a 	mov	r4,r2
 4006ff0:	180b883a 	mov	r5,r3
 4006ff4:	400ec580 	call	400ec58 <__adddf3>
 4006ff8:	047f3034 	movhi	r17,64704
 4006ffc:	1021883a 	mov	r16,r2
 4007000:	1c63883a 	add	r17,r3,r17
 4007004:	d9000f17 	ldw	r4,60(sp)
 4007008:	d9401017 	ldw	r5,64(sp)
 400700c:	000d883a 	mov	r6,zero
 4007010:	01d00534 	movhi	r7,16404
 4007014:	401075c0 	call	401075c <__subdf3>
 4007018:	800d883a 	mov	r6,r16
 400701c:	880f883a 	mov	r7,r17
 4007020:	1009883a 	mov	r4,r2
 4007024:	180b883a 	mov	r5,r3
 4007028:	102b883a 	mov	r21,r2
 400702c:	1829883a 	mov	r20,r3
 4007030:	400fe740 	call	400fe74 <__gedf2>
 4007034:	00806c16 	blt	zero,r2,40071e8 <_dtoa_r+0x1304>
 4007038:	89e0003c 	xorhi	r7,r17,32768
 400703c:	800d883a 	mov	r6,r16
 4007040:	a809883a 	mov	r4,r21
 4007044:	a00b883a 	mov	r5,r20
 4007048:	400ff500 	call	400ff50 <__ledf2>
 400704c:	103d7e0e 	bge	r2,zero,4006648 <__alt_mem_onchip_memory2_0+0xfc004648>
 4007050:	002b883a 	mov	r21,zero
 4007054:	0023883a 	mov	r17,zero
 4007058:	003efb06 	br	4006c48 <__alt_mem_onchip_memory2_0+0xfc004c48>
 400705c:	d8800717 	ldw	r2,28(sp)
 4007060:	003bd006 	br	4005fa4 <__alt_mem_onchip_memory2_0+0xfc003fa4>
 4007064:	d9000a17 	ldw	r4,40(sp)
 4007068:	d9800d17 	ldw	r6,52(sp)
 400706c:	dd400a15 	stw	r21,40(sp)
 4007070:	a905c83a 	sub	r2,r21,r4
 4007074:	308d883a 	add	r6,r6,r2
 4007078:	d9800d15 	stw	r6,52(sp)
 400707c:	002b883a 	mov	r21,zero
 4007080:	003e0606 	br	400689c <__alt_mem_onchip_memory2_0+0xfc00489c>
 4007084:	9023883a 	mov	r17,r18
 4007088:	9829883a 	mov	r20,r19
 400708c:	04000084 	movi	r16,2
 4007090:	003c9206 	br	40062dc <__alt_mem_onchip_memory2_0+0xfc0042dc>
 4007094:	04000044 	movi	r16,1
 4007098:	dc000c15 	stw	r16,48(sp)
 400709c:	dc000615 	stw	r16,24(sp)
 40070a0:	dc002215 	stw	r16,136(sp)
 40070a4:	e0001115 	stw	zero,68(fp)
 40070a8:	000b883a 	mov	r5,zero
 40070ac:	003c6906 	br	4006254 <__alt_mem_onchip_memory2_0+0xfc004254>
 40070b0:	3021883a 	mov	r16,r6
 40070b4:	003ffb06 	br	40070a4 <__alt_mem_onchip_memory2_0+0xfc0050a4>
 40070b8:	1000021e 	bne	r2,zero,40070c4 <_dtoa_r+0x11e0>
 40070bc:	4200004c 	andi	r8,r8,1
 40070c0:	403e7d1e 	bne	r8,zero,4006ab8 <__alt_mem_onchip_memory2_0+0xfc004ab8>
 40070c4:	01000c04 	movi	r4,48
 40070c8:	00000106 	br	40070d0 <_dtoa_r+0x11ec>
 40070cc:	102f883a 	mov	r23,r2
 40070d0:	b8bfffc4 	addi	r2,r23,-1
 40070d4:	10c00007 	ldb	r3,0(r2)
 40070d8:	193ffc26 	beq	r3,r4,40070cc <__alt_mem_onchip_memory2_0+0xfc0050cc>
 40070dc:	003e8706 	br	4006afc <__alt_mem_onchip_memory2_0+0xfc004afc>
 40070e0:	d8800517 	ldw	r2,20(sp)
 40070e4:	00a3c83a 	sub	r17,zero,r2
 40070e8:	8800a426 	beq	r17,zero,400737c <_dtoa_r+0x1498>
 40070ec:	888003cc 	andi	r2,r17,15
 40070f0:	100490fa 	slli	r2,r2,3
 40070f4:	00c100b4 	movhi	r3,1026
 40070f8:	18f2e404 	addi	r3,r3,-13424
 40070fc:	1885883a 	add	r2,r3,r2
 4007100:	11800017 	ldw	r6,0(r2)
 4007104:	11c00117 	ldw	r7,4(r2)
 4007108:	9009883a 	mov	r4,r18
 400710c:	980b883a 	mov	r5,r19
 4007110:	8823d13a 	srai	r17,r17,4
 4007114:	40100440 	call	4010044 <__muldf3>
 4007118:	d8800f15 	stw	r2,60(sp)
 400711c:	d8c01015 	stw	r3,64(sp)
 4007120:	8800e826 	beq	r17,zero,40074c4 <_dtoa_r+0x15e0>
 4007124:	050100b4 	movhi	r20,1026
 4007128:	a532da04 	addi	r20,r20,-13464
 400712c:	04000084 	movi	r16,2
 4007130:	8980004c 	andi	r6,r17,1
 4007134:	1009883a 	mov	r4,r2
 4007138:	8823d07a 	srai	r17,r17,1
 400713c:	180b883a 	mov	r5,r3
 4007140:	30000426 	beq	r6,zero,4007154 <_dtoa_r+0x1270>
 4007144:	a1800017 	ldw	r6,0(r20)
 4007148:	a1c00117 	ldw	r7,4(r20)
 400714c:	84000044 	addi	r16,r16,1
 4007150:	40100440 	call	4010044 <__muldf3>
 4007154:	a5000204 	addi	r20,r20,8
 4007158:	883ff51e 	bne	r17,zero,4007130 <__alt_mem_onchip_memory2_0+0xfc005130>
 400715c:	d8800f15 	stw	r2,60(sp)
 4007160:	d8c01015 	stw	r3,64(sp)
 4007164:	003c7606 	br	4006340 <__alt_mem_onchip_memory2_0+0xfc004340>
 4007168:	00c00c04 	movi	r3,48
 400716c:	10c00005 	stb	r3,0(r2)
 4007170:	d8c00517 	ldw	r3,20(sp)
 4007174:	bd3fffc3 	ldbu	r20,-1(r23)
 4007178:	18c00044 	addi	r3,r3,1
 400717c:	d8c00515 	stw	r3,20(sp)
 4007180:	003db906 	br	4006868 <__alt_mem_onchip_memory2_0+0xfc004868>
 4007184:	89400117 	ldw	r5,4(r17)
 4007188:	e009883a 	mov	r4,fp
 400718c:	40095800 	call	4009580 <_Balloc>
 4007190:	89800417 	ldw	r6,16(r17)
 4007194:	89400304 	addi	r5,r17,12
 4007198:	11000304 	addi	r4,r2,12
 400719c:	31800084 	addi	r6,r6,2
 40071a0:	318d883a 	add	r6,r6,r6
 40071a4:	318d883a 	add	r6,r6,r6
 40071a8:	1027883a 	mov	r19,r2
 40071ac:	40091b40 	call	40091b4 <memcpy>
 40071b0:	01800044 	movi	r6,1
 40071b4:	980b883a 	mov	r5,r19
 40071b8:	e009883a 	mov	r4,fp
 40071bc:	4009d000 	call	4009d00 <__lshift>
 40071c0:	1029883a 	mov	r20,r2
 40071c4:	003ecc06 	br	4006cf8 <__alt_mem_onchip_memory2_0+0xfc004cf8>
 40071c8:	00800e44 	movi	r2,57
 40071cc:	90809026 	beq	r18,r2,4007410 <_dtoa_r+0x152c>
 40071d0:	92000044 	addi	r8,r18,1
 40071d4:	003f1f06 	br	4006e54 <__alt_mem_onchip_memory2_0+0xfc004e54>
 40071d8:	9011883a 	mov	r8,r18
 40071dc:	8825883a 	mov	r18,r17
 40071e0:	a023883a 	mov	r17,r20
 40071e4:	003e2906 	br	4006a8c <__alt_mem_onchip_memory2_0+0xfc004a8c>
 40071e8:	002b883a 	mov	r21,zero
 40071ec:	0023883a 	mov	r17,zero
 40071f0:	003f5406 	br	4006f44 <__alt_mem_onchip_memory2_0+0xfc004f44>
 40071f4:	61bfffc4 	addi	r6,r12,-1
 40071f8:	300490fa 	slli	r2,r6,3
 40071fc:	00c100b4 	movhi	r3,1026
 4007200:	18f2e404 	addi	r3,r3,-13424
 4007204:	1885883a 	add	r2,r3,r2
 4007208:	11000017 	ldw	r4,0(r2)
 400720c:	11400117 	ldw	r5,4(r2)
 4007210:	d8800717 	ldw	r2,28(sp)
 4007214:	880f883a 	mov	r7,r17
 4007218:	d9801215 	stw	r6,72(sp)
 400721c:	800d883a 	mov	r6,r16
 4007220:	db001615 	stw	r12,88(sp)
 4007224:	15c00044 	addi	r23,r2,1
 4007228:	40100440 	call	4010044 <__muldf3>
 400722c:	d9401017 	ldw	r5,64(sp)
 4007230:	d9000f17 	ldw	r4,60(sp)
 4007234:	d8c01515 	stw	r3,84(sp)
 4007238:	d8801415 	stw	r2,80(sp)
 400723c:	40110580 	call	4011058 <__fixdfsi>
 4007240:	1009883a 	mov	r4,r2
 4007244:	1021883a 	mov	r16,r2
 4007248:	40110d80 	call	40110d8 <__floatsidf>
 400724c:	d9000f17 	ldw	r4,60(sp)
 4007250:	d9401017 	ldw	r5,64(sp)
 4007254:	100d883a 	mov	r6,r2
 4007258:	180f883a 	mov	r7,r3
 400725c:	401075c0 	call	401075c <__subdf3>
 4007260:	1829883a 	mov	r20,r3
 4007264:	d8c00717 	ldw	r3,28(sp)
 4007268:	84000c04 	addi	r16,r16,48
 400726c:	1023883a 	mov	r17,r2
 4007270:	1c000005 	stb	r16,0(r3)
 4007274:	db001617 	ldw	r12,88(sp)
 4007278:	00800044 	movi	r2,1
 400727c:	60802226 	beq	r12,r2,4007308 <_dtoa_r+0x1424>
 4007280:	d9c00717 	ldw	r7,28(sp)
 4007284:	8805883a 	mov	r2,r17
 4007288:	b82b883a 	mov	r21,r23
 400728c:	3b19883a 	add	r12,r7,r12
 4007290:	6023883a 	mov	r17,r12
 4007294:	a007883a 	mov	r3,r20
 4007298:	dc800f15 	stw	r18,60(sp)
 400729c:	000d883a 	mov	r6,zero
 40072a0:	01d00934 	movhi	r7,16420
 40072a4:	1009883a 	mov	r4,r2
 40072a8:	180b883a 	mov	r5,r3
 40072ac:	40100440 	call	4010044 <__muldf3>
 40072b0:	180b883a 	mov	r5,r3
 40072b4:	1009883a 	mov	r4,r2
 40072b8:	1829883a 	mov	r20,r3
 40072bc:	1025883a 	mov	r18,r2
 40072c0:	40110580 	call	4011058 <__fixdfsi>
 40072c4:	1009883a 	mov	r4,r2
 40072c8:	1021883a 	mov	r16,r2
 40072cc:	40110d80 	call	40110d8 <__floatsidf>
 40072d0:	100d883a 	mov	r6,r2
 40072d4:	180f883a 	mov	r7,r3
 40072d8:	9009883a 	mov	r4,r18
 40072dc:	a00b883a 	mov	r5,r20
 40072e0:	84000c04 	addi	r16,r16,48
 40072e4:	401075c0 	call	401075c <__subdf3>
 40072e8:	ad400044 	addi	r21,r21,1
 40072ec:	ac3fffc5 	stb	r16,-1(r21)
 40072f0:	ac7fea1e 	bne	r21,r17,400729c <__alt_mem_onchip_memory2_0+0xfc00529c>
 40072f4:	1023883a 	mov	r17,r2
 40072f8:	d8801217 	ldw	r2,72(sp)
 40072fc:	dc800f17 	ldw	r18,60(sp)
 4007300:	1829883a 	mov	r20,r3
 4007304:	b8af883a 	add	r23,r23,r2
 4007308:	d9001417 	ldw	r4,80(sp)
 400730c:	d9401517 	ldw	r5,84(sp)
 4007310:	000d883a 	mov	r6,zero
 4007314:	01cff834 	movhi	r7,16352
 4007318:	400ec580 	call	400ec58 <__adddf3>
 400731c:	880d883a 	mov	r6,r17
 4007320:	a00f883a 	mov	r7,r20
 4007324:	1009883a 	mov	r4,r2
 4007328:	180b883a 	mov	r5,r3
 400732c:	400ff500 	call	400ff50 <__ledf2>
 4007330:	10003e0e 	bge	r2,zero,400742c <_dtoa_r+0x1548>
 4007334:	d9001317 	ldw	r4,76(sp)
 4007338:	bd3fffc3 	ldbu	r20,-1(r23)
 400733c:	d9000515 	stw	r4,20(sp)
 4007340:	003d3b06 	br	4006830 <__alt_mem_onchip_memory2_0+0xfc004830>
 4007344:	0027883a 	mov	r19,zero
 4007348:	003f1b06 	br	4006fb8 <__alt_mem_onchip_memory2_0+0xfc004fb8>
 400734c:	d8800817 	ldw	r2,32(sp)
 4007350:	11e9c83a 	sub	r20,r2,r7
 4007354:	0005883a 	mov	r2,zero
 4007358:	003d5406 	br	40068ac <__alt_mem_onchip_memory2_0+0xfc0048ac>
 400735c:	00800044 	movi	r2,1
 4007360:	003dc706 	br	4006a80 <__alt_mem_onchip_memory2_0+0xfc004a80>
 4007364:	d8c00217 	ldw	r3,8(sp)
 4007368:	00800d84 	movi	r2,54
 400736c:	dd400a17 	ldw	r21,40(sp)
 4007370:	10c5c83a 	sub	r2,r2,r3
 4007374:	dd000817 	ldw	r20,32(sp)
 4007378:	003d4c06 	br	40068ac <__alt_mem_onchip_memory2_0+0xfc0048ac>
 400737c:	dc800f15 	stw	r18,60(sp)
 4007380:	dcc01015 	stw	r19,64(sp)
 4007384:	04000084 	movi	r16,2
 4007388:	003bed06 	br	4006340 <__alt_mem_onchip_memory2_0+0xfc004340>
 400738c:	d9000617 	ldw	r4,24(sp)
 4007390:	203f0d26 	beq	r4,zero,4006fc8 <__alt_mem_onchip_memory2_0+0xfc004fc8>
 4007394:	d9800c17 	ldw	r6,48(sp)
 4007398:	01bcab0e 	bge	zero,r6,4006648 <__alt_mem_onchip_memory2_0+0xfc004648>
 400739c:	d9401017 	ldw	r5,64(sp)
 40073a0:	d9000f17 	ldw	r4,60(sp)
 40073a4:	000d883a 	mov	r6,zero
 40073a8:	01d00934 	movhi	r7,16420
 40073ac:	40100440 	call	4010044 <__muldf3>
 40073b0:	81000044 	addi	r4,r16,1
 40073b4:	d8800f15 	stw	r2,60(sp)
 40073b8:	d8c01015 	stw	r3,64(sp)
 40073bc:	40110d80 	call	40110d8 <__floatsidf>
 40073c0:	d9800f17 	ldw	r6,60(sp)
 40073c4:	d9c01017 	ldw	r7,64(sp)
 40073c8:	1009883a 	mov	r4,r2
 40073cc:	180b883a 	mov	r5,r3
 40073d0:	40100440 	call	4010044 <__muldf3>
 40073d4:	01d00734 	movhi	r7,16412
 40073d8:	000d883a 	mov	r6,zero
 40073dc:	1009883a 	mov	r4,r2
 40073e0:	180b883a 	mov	r5,r3
 40073e4:	400ec580 	call	400ec58 <__adddf3>
 40073e8:	d9c00517 	ldw	r7,20(sp)
 40073ec:	047f3034 	movhi	r17,64704
 40073f0:	1021883a 	mov	r16,r2
 40073f4:	39ffffc4 	addi	r7,r7,-1
 40073f8:	d9c01315 	stw	r7,76(sp)
 40073fc:	1c63883a 	add	r17,r3,r17
 4007400:	db000c17 	ldw	r12,48(sp)
 4007404:	003bea06 	br	40063b0 <__alt_mem_onchip_memory2_0+0xfc0043b0>
 4007408:	dc000915 	stw	r16,36(sp)
 400740c:	003e0e06 	br	4006c48 <__alt_mem_onchip_memory2_0+0xfc004c48>
 4007410:	01000e44 	movi	r4,57
 4007414:	8825883a 	mov	r18,r17
 4007418:	9dc00044 	addi	r23,r19,1
 400741c:	99000005 	stb	r4,0(r19)
 4007420:	a023883a 	mov	r17,r20
 4007424:	dc000915 	stw	r16,36(sp)
 4007428:	003da406 	br	4006abc <__alt_mem_onchip_memory2_0+0xfc004abc>
 400742c:	d9801417 	ldw	r6,80(sp)
 4007430:	d9c01517 	ldw	r7,84(sp)
 4007434:	0009883a 	mov	r4,zero
 4007438:	014ff834 	movhi	r5,16352
 400743c:	401075c0 	call	401075c <__subdf3>
 4007440:	880d883a 	mov	r6,r17
 4007444:	a00f883a 	mov	r7,r20
 4007448:	1009883a 	mov	r4,r2
 400744c:	180b883a 	mov	r5,r3
 4007450:	400fe740 	call	400fe74 <__gedf2>
 4007454:	00bc7c0e 	bge	zero,r2,4006648 <__alt_mem_onchip_memory2_0+0xfc004648>
 4007458:	01000c04 	movi	r4,48
 400745c:	00000106 	br	4007464 <_dtoa_r+0x1580>
 4007460:	102f883a 	mov	r23,r2
 4007464:	b8bfffc4 	addi	r2,r23,-1
 4007468:	10c00007 	ldb	r3,0(r2)
 400746c:	193ffc26 	beq	r3,r4,4007460 <__alt_mem_onchip_memory2_0+0xfc005460>
 4007470:	d9801317 	ldw	r6,76(sp)
 4007474:	d9800515 	stw	r6,20(sp)
 4007478:	003c4406 	br	400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 400747c:	d9801317 	ldw	r6,76(sp)
 4007480:	d9800515 	stw	r6,20(sp)
 4007484:	003cea06 	br	4006830 <__alt_mem_onchip_memory2_0+0xfc004830>
 4007488:	dd800f17 	ldw	r22,60(sp)
 400748c:	dcc01017 	ldw	r19,64(sp)
 4007490:	dc801217 	ldw	r18,72(sp)
 4007494:	003c6c06 	br	4006648 <__alt_mem_onchip_memory2_0+0xfc004648>
 4007498:	903e031e 	bne	r18,zero,4006ca8 <__alt_mem_onchip_memory2_0+0xfc004ca8>
 400749c:	003ebb06 	br	4006f8c <__alt_mem_onchip_memory2_0+0xfc004f8c>
 40074a0:	103e6c1e 	bne	r2,zero,4006e54 <__alt_mem_onchip_memory2_0+0xfc004e54>
 40074a4:	4080004c 	andi	r2,r8,1
 40074a8:	103e6a26 	beq	r2,zero,4006e54 <__alt_mem_onchip_memory2_0+0xfc004e54>
 40074ac:	003e6606 	br	4006e48 <__alt_mem_onchip_memory2_0+0xfc004e48>
 40074b0:	d8c00317 	ldw	r3,12(sp)
 40074b4:	00800084 	movi	r2,2
 40074b8:	10c02916 	blt	r2,r3,4007560 <_dtoa_r+0x167c>
 40074bc:	d9000c17 	ldw	r4,48(sp)
 40074c0:	003e8806 	br	4006ee4 <__alt_mem_onchip_memory2_0+0xfc004ee4>
 40074c4:	04000084 	movi	r16,2
 40074c8:	003b9d06 	br	4006340 <__alt_mem_onchip_memory2_0+0xfc004340>
 40074cc:	d9001317 	ldw	r4,76(sp)
 40074d0:	d9000515 	stw	r4,20(sp)
 40074d4:	003cd606 	br	4006830 <__alt_mem_onchip_memory2_0+0xfc004830>
 40074d8:	d8801317 	ldw	r2,76(sp)
 40074dc:	d8800515 	stw	r2,20(sp)
 40074e0:	003c2a06 	br	400658c <__alt_mem_onchip_memory2_0+0xfc00458c>
 40074e4:	d9800317 	ldw	r6,12(sp)
 40074e8:	00800084 	movi	r2,2
 40074ec:	11801516 	blt	r2,r6,4007544 <_dtoa_r+0x1660>
 40074f0:	d9c00c17 	ldw	r7,48(sp)
 40074f4:	d9c00615 	stw	r7,24(sp)
 40074f8:	003df706 	br	4006cd8 <__alt_mem_onchip_memory2_0+0xfc004cd8>
 40074fc:	193d3926 	beq	r3,r4,40069e4 <__alt_mem_onchip_memory2_0+0xfc0049e4>
 4007500:	00c00f04 	movi	r3,60
 4007504:	1885c83a 	sub	r2,r3,r2
 4007508:	003ddf06 	br	4006c88 <__alt_mem_onchip_memory2_0+0xfc004c88>
 400750c:	e009883a 	mov	r4,fp
 4007510:	e0001115 	stw	zero,68(fp)
 4007514:	000b883a 	mov	r5,zero
 4007518:	40095800 	call	4009580 <_Balloc>
 400751c:	d8800715 	stw	r2,28(sp)
 4007520:	d8c00717 	ldw	r3,28(sp)
 4007524:	00bfffc4 	movi	r2,-1
 4007528:	01000044 	movi	r4,1
 400752c:	d8800c15 	stw	r2,48(sp)
 4007530:	e0c01015 	stw	r3,64(fp)
 4007534:	d9000b15 	stw	r4,44(sp)
 4007538:	d8800615 	stw	r2,24(sp)
 400753c:	d8002215 	stw	zero,136(sp)
 4007540:	003c4106 	br	4006648 <__alt_mem_onchip_memory2_0+0xfc004648>
 4007544:	d8c00c17 	ldw	r3,48(sp)
 4007548:	d8c00615 	stw	r3,24(sp)
 400754c:	003e7006 	br	4006f10 <__alt_mem_onchip_memory2_0+0xfc004f10>
 4007550:	04400044 	movi	r17,1
 4007554:	003b2006 	br	40061d8 <__alt_mem_onchip_memory2_0+0xfc0041d8>
 4007558:	000b883a 	mov	r5,zero
 400755c:	003b3d06 	br	4006254 <__alt_mem_onchip_memory2_0+0xfc004254>
 4007560:	d8800c17 	ldw	r2,48(sp)
 4007564:	d8800615 	stw	r2,24(sp)
 4007568:	003e6906 	br	4006f10 <__alt_mem_onchip_memory2_0+0xfc004f10>

0400756c <__sflush_r>:
 400756c:	2880030b 	ldhu	r2,12(r5)
 4007570:	defffb04 	addi	sp,sp,-20
 4007574:	dcc00315 	stw	r19,12(sp)
 4007578:	dc400115 	stw	r17,4(sp)
 400757c:	dfc00415 	stw	ra,16(sp)
 4007580:	dc800215 	stw	r18,8(sp)
 4007584:	dc000015 	stw	r16,0(sp)
 4007588:	10c0020c 	andi	r3,r2,8
 400758c:	2823883a 	mov	r17,r5
 4007590:	2027883a 	mov	r19,r4
 4007594:	1800311e 	bne	r3,zero,400765c <__sflush_r+0xf0>
 4007598:	28c00117 	ldw	r3,4(r5)
 400759c:	10820014 	ori	r2,r2,2048
 40075a0:	2880030d 	sth	r2,12(r5)
 40075a4:	00c04b0e 	bge	zero,r3,40076d4 <__sflush_r+0x168>
 40075a8:	8a000a17 	ldw	r8,40(r17)
 40075ac:	40002326 	beq	r8,zero,400763c <__sflush_r+0xd0>
 40075b0:	9c000017 	ldw	r16,0(r19)
 40075b4:	10c4000c 	andi	r3,r2,4096
 40075b8:	98000015 	stw	zero,0(r19)
 40075bc:	18004826 	beq	r3,zero,40076e0 <__sflush_r+0x174>
 40075c0:	89801417 	ldw	r6,80(r17)
 40075c4:	10c0010c 	andi	r3,r2,4
 40075c8:	18000626 	beq	r3,zero,40075e4 <__sflush_r+0x78>
 40075cc:	88c00117 	ldw	r3,4(r17)
 40075d0:	88800c17 	ldw	r2,48(r17)
 40075d4:	30cdc83a 	sub	r6,r6,r3
 40075d8:	10000226 	beq	r2,zero,40075e4 <__sflush_r+0x78>
 40075dc:	88800f17 	ldw	r2,60(r17)
 40075e0:	308dc83a 	sub	r6,r6,r2
 40075e4:	89400717 	ldw	r5,28(r17)
 40075e8:	000f883a 	mov	r7,zero
 40075ec:	9809883a 	mov	r4,r19
 40075f0:	403ee83a 	callr	r8
 40075f4:	00ffffc4 	movi	r3,-1
 40075f8:	10c04426 	beq	r2,r3,400770c <__sflush_r+0x1a0>
 40075fc:	88c0030b 	ldhu	r3,12(r17)
 4007600:	89000417 	ldw	r4,16(r17)
 4007604:	88000115 	stw	zero,4(r17)
 4007608:	197dffcc 	andi	r5,r3,63487
 400760c:	8940030d 	sth	r5,12(r17)
 4007610:	89000015 	stw	r4,0(r17)
 4007614:	18c4000c 	andi	r3,r3,4096
 4007618:	18002c1e 	bne	r3,zero,40076cc <__sflush_r+0x160>
 400761c:	89400c17 	ldw	r5,48(r17)
 4007620:	9c000015 	stw	r16,0(r19)
 4007624:	28000526 	beq	r5,zero,400763c <__sflush_r+0xd0>
 4007628:	88801004 	addi	r2,r17,64
 400762c:	28800226 	beq	r5,r2,4007638 <__sflush_r+0xcc>
 4007630:	9809883a 	mov	r4,r19
 4007634:	4007cd80 	call	4007cd8 <_free_r>
 4007638:	88000c15 	stw	zero,48(r17)
 400763c:	0005883a 	mov	r2,zero
 4007640:	dfc00417 	ldw	ra,16(sp)
 4007644:	dcc00317 	ldw	r19,12(sp)
 4007648:	dc800217 	ldw	r18,8(sp)
 400764c:	dc400117 	ldw	r17,4(sp)
 4007650:	dc000017 	ldw	r16,0(sp)
 4007654:	dec00504 	addi	sp,sp,20
 4007658:	f800283a 	ret
 400765c:	2c800417 	ldw	r18,16(r5)
 4007660:	903ff626 	beq	r18,zero,400763c <__alt_mem_onchip_memory2_0+0xfc00563c>
 4007664:	2c000017 	ldw	r16,0(r5)
 4007668:	108000cc 	andi	r2,r2,3
 400766c:	2c800015 	stw	r18,0(r5)
 4007670:	84a1c83a 	sub	r16,r16,r18
 4007674:	1000131e 	bne	r2,zero,40076c4 <__sflush_r+0x158>
 4007678:	28800517 	ldw	r2,20(r5)
 400767c:	88800215 	stw	r2,8(r17)
 4007680:	04000316 	blt	zero,r16,4007690 <__sflush_r+0x124>
 4007684:	003fed06 	br	400763c <__alt_mem_onchip_memory2_0+0xfc00563c>
 4007688:	90a5883a 	add	r18,r18,r2
 400768c:	043feb0e 	bge	zero,r16,400763c <__alt_mem_onchip_memory2_0+0xfc00563c>
 4007690:	88800917 	ldw	r2,36(r17)
 4007694:	89400717 	ldw	r5,28(r17)
 4007698:	800f883a 	mov	r7,r16
 400769c:	900d883a 	mov	r6,r18
 40076a0:	9809883a 	mov	r4,r19
 40076a4:	103ee83a 	callr	r2
 40076a8:	80a1c83a 	sub	r16,r16,r2
 40076ac:	00bff616 	blt	zero,r2,4007688 <__alt_mem_onchip_memory2_0+0xfc005688>
 40076b0:	88c0030b 	ldhu	r3,12(r17)
 40076b4:	00bfffc4 	movi	r2,-1
 40076b8:	18c01014 	ori	r3,r3,64
 40076bc:	88c0030d 	sth	r3,12(r17)
 40076c0:	003fdf06 	br	4007640 <__alt_mem_onchip_memory2_0+0xfc005640>
 40076c4:	0005883a 	mov	r2,zero
 40076c8:	003fec06 	br	400767c <__alt_mem_onchip_memory2_0+0xfc00567c>
 40076cc:	88801415 	stw	r2,80(r17)
 40076d0:	003fd206 	br	400761c <__alt_mem_onchip_memory2_0+0xfc00561c>
 40076d4:	28c00f17 	ldw	r3,60(r5)
 40076d8:	00ffb316 	blt	zero,r3,40075a8 <__alt_mem_onchip_memory2_0+0xfc0055a8>
 40076dc:	003fd706 	br	400763c <__alt_mem_onchip_memory2_0+0xfc00563c>
 40076e0:	89400717 	ldw	r5,28(r17)
 40076e4:	000d883a 	mov	r6,zero
 40076e8:	01c00044 	movi	r7,1
 40076ec:	9809883a 	mov	r4,r19
 40076f0:	403ee83a 	callr	r8
 40076f4:	100d883a 	mov	r6,r2
 40076f8:	00bfffc4 	movi	r2,-1
 40076fc:	30801426 	beq	r6,r2,4007750 <__sflush_r+0x1e4>
 4007700:	8880030b 	ldhu	r2,12(r17)
 4007704:	8a000a17 	ldw	r8,40(r17)
 4007708:	003fae06 	br	40075c4 <__alt_mem_onchip_memory2_0+0xfc0055c4>
 400770c:	98c00017 	ldw	r3,0(r19)
 4007710:	183fba26 	beq	r3,zero,40075fc <__alt_mem_onchip_memory2_0+0xfc0055fc>
 4007714:	01000744 	movi	r4,29
 4007718:	19000626 	beq	r3,r4,4007734 <__sflush_r+0x1c8>
 400771c:	01000584 	movi	r4,22
 4007720:	19000426 	beq	r3,r4,4007734 <__sflush_r+0x1c8>
 4007724:	88c0030b 	ldhu	r3,12(r17)
 4007728:	18c01014 	ori	r3,r3,64
 400772c:	88c0030d 	sth	r3,12(r17)
 4007730:	003fc306 	br	4007640 <__alt_mem_onchip_memory2_0+0xfc005640>
 4007734:	8880030b 	ldhu	r2,12(r17)
 4007738:	88c00417 	ldw	r3,16(r17)
 400773c:	88000115 	stw	zero,4(r17)
 4007740:	10bdffcc 	andi	r2,r2,63487
 4007744:	8880030d 	sth	r2,12(r17)
 4007748:	88c00015 	stw	r3,0(r17)
 400774c:	003fb306 	br	400761c <__alt_mem_onchip_memory2_0+0xfc00561c>
 4007750:	98800017 	ldw	r2,0(r19)
 4007754:	103fea26 	beq	r2,zero,4007700 <__alt_mem_onchip_memory2_0+0xfc005700>
 4007758:	00c00744 	movi	r3,29
 400775c:	10c00226 	beq	r2,r3,4007768 <__sflush_r+0x1fc>
 4007760:	00c00584 	movi	r3,22
 4007764:	10c0031e 	bne	r2,r3,4007774 <__sflush_r+0x208>
 4007768:	9c000015 	stw	r16,0(r19)
 400776c:	0005883a 	mov	r2,zero
 4007770:	003fb306 	br	4007640 <__alt_mem_onchip_memory2_0+0xfc005640>
 4007774:	88c0030b 	ldhu	r3,12(r17)
 4007778:	3005883a 	mov	r2,r6
 400777c:	18c01014 	ori	r3,r3,64
 4007780:	88c0030d 	sth	r3,12(r17)
 4007784:	003fae06 	br	4007640 <__alt_mem_onchip_memory2_0+0xfc005640>

04007788 <_fflush_r>:
 4007788:	defffd04 	addi	sp,sp,-12
 400778c:	dc000115 	stw	r16,4(sp)
 4007790:	dfc00215 	stw	ra,8(sp)
 4007794:	2021883a 	mov	r16,r4
 4007798:	20000226 	beq	r4,zero,40077a4 <_fflush_r+0x1c>
 400779c:	20800e17 	ldw	r2,56(r4)
 40077a0:	10000c26 	beq	r2,zero,40077d4 <_fflush_r+0x4c>
 40077a4:	2880030f 	ldh	r2,12(r5)
 40077a8:	1000051e 	bne	r2,zero,40077c0 <_fflush_r+0x38>
 40077ac:	0005883a 	mov	r2,zero
 40077b0:	dfc00217 	ldw	ra,8(sp)
 40077b4:	dc000117 	ldw	r16,4(sp)
 40077b8:	dec00304 	addi	sp,sp,12
 40077bc:	f800283a 	ret
 40077c0:	8009883a 	mov	r4,r16
 40077c4:	dfc00217 	ldw	ra,8(sp)
 40077c8:	dc000117 	ldw	r16,4(sp)
 40077cc:	dec00304 	addi	sp,sp,12
 40077d0:	400756c1 	jmpi	400756c <__sflush_r>
 40077d4:	d9400015 	stw	r5,0(sp)
 40077d8:	4007b640 	call	4007b64 <__sinit>
 40077dc:	d9400017 	ldw	r5,0(sp)
 40077e0:	003ff006 	br	40077a4 <__alt_mem_onchip_memory2_0+0xfc0057a4>

040077e4 <fflush>:
 40077e4:	20000526 	beq	r4,zero,40077fc <fflush+0x18>
 40077e8:	008100b4 	movhi	r2,1026
 40077ec:	10ba3604 	addi	r2,r2,-5928
 40077f0:	200b883a 	mov	r5,r4
 40077f4:	11000017 	ldw	r4,0(r2)
 40077f8:	40077881 	jmpi	4007788 <_fflush_r>
 40077fc:	008100b4 	movhi	r2,1026
 4007800:	10ba3504 	addi	r2,r2,-5932
 4007804:	11000017 	ldw	r4,0(r2)
 4007808:	01410034 	movhi	r5,1024
 400780c:	295de204 	addi	r5,r5,30600
 4007810:	40085681 	jmpi	4008568 <_fwalk_reent>

04007814 <__fp_unlock>:
 4007814:	0005883a 	mov	r2,zero
 4007818:	f800283a 	ret

0400781c <_cleanup_r>:
 400781c:	01410074 	movhi	r5,1025
 4007820:	29766304 	addi	r5,r5,-9844
 4007824:	40085681 	jmpi	4008568 <_fwalk_reent>

04007828 <__sinit.part.1>:
 4007828:	defff704 	addi	sp,sp,-36
 400782c:	00c10034 	movhi	r3,1024
 4007830:	dfc00815 	stw	ra,32(sp)
 4007834:	ddc00715 	stw	r23,28(sp)
 4007838:	dd800615 	stw	r22,24(sp)
 400783c:	dd400515 	stw	r21,20(sp)
 4007840:	dd000415 	stw	r20,16(sp)
 4007844:	dcc00315 	stw	r19,12(sp)
 4007848:	dc800215 	stw	r18,8(sp)
 400784c:	dc400115 	stw	r17,4(sp)
 4007850:	dc000015 	stw	r16,0(sp)
 4007854:	18de0704 	addi	r3,r3,30748
 4007858:	24000117 	ldw	r16,4(r4)
 400785c:	20c00f15 	stw	r3,60(r4)
 4007860:	2080bb04 	addi	r2,r4,748
 4007864:	00c000c4 	movi	r3,3
 4007868:	20c0b915 	stw	r3,740(r4)
 400786c:	2080ba15 	stw	r2,744(r4)
 4007870:	2000b815 	stw	zero,736(r4)
 4007874:	05c00204 	movi	r23,8
 4007878:	00800104 	movi	r2,4
 400787c:	2025883a 	mov	r18,r4
 4007880:	b80d883a 	mov	r6,r23
 4007884:	81001704 	addi	r4,r16,92
 4007888:	000b883a 	mov	r5,zero
 400788c:	80000015 	stw	zero,0(r16)
 4007890:	80000115 	stw	zero,4(r16)
 4007894:	80000215 	stw	zero,8(r16)
 4007898:	8080030d 	sth	r2,12(r16)
 400789c:	80001915 	stw	zero,100(r16)
 40078a0:	8000038d 	sth	zero,14(r16)
 40078a4:	80000415 	stw	zero,16(r16)
 40078a8:	80000515 	stw	zero,20(r16)
 40078ac:	80000615 	stw	zero,24(r16)
 40078b0:	40094580 	call	4009458 <memset>
 40078b4:	05810074 	movhi	r22,1025
 40078b8:	94400217 	ldw	r17,8(r18)
 40078bc:	05410074 	movhi	r21,1025
 40078c0:	05010074 	movhi	r20,1025
 40078c4:	04c10074 	movhi	r19,1025
 40078c8:	b5aaea04 	addi	r22,r22,-21592
 40078cc:	ad6b0104 	addi	r21,r21,-21500
 40078d0:	a52b2004 	addi	r20,r20,-21376
 40078d4:	9ceb3704 	addi	r19,r19,-21284
 40078d8:	85800815 	stw	r22,32(r16)
 40078dc:	85400915 	stw	r21,36(r16)
 40078e0:	85000a15 	stw	r20,40(r16)
 40078e4:	84c00b15 	stw	r19,44(r16)
 40078e8:	84000715 	stw	r16,28(r16)
 40078ec:	00800284 	movi	r2,10
 40078f0:	8880030d 	sth	r2,12(r17)
 40078f4:	00800044 	movi	r2,1
 40078f8:	b80d883a 	mov	r6,r23
 40078fc:	89001704 	addi	r4,r17,92
 4007900:	000b883a 	mov	r5,zero
 4007904:	88000015 	stw	zero,0(r17)
 4007908:	88000115 	stw	zero,4(r17)
 400790c:	88000215 	stw	zero,8(r17)
 4007910:	88001915 	stw	zero,100(r17)
 4007914:	8880038d 	sth	r2,14(r17)
 4007918:	88000415 	stw	zero,16(r17)
 400791c:	88000515 	stw	zero,20(r17)
 4007920:	88000615 	stw	zero,24(r17)
 4007924:	40094580 	call	4009458 <memset>
 4007928:	94000317 	ldw	r16,12(r18)
 400792c:	00800484 	movi	r2,18
 4007930:	8c400715 	stw	r17,28(r17)
 4007934:	8d800815 	stw	r22,32(r17)
 4007938:	8d400915 	stw	r21,36(r17)
 400793c:	8d000a15 	stw	r20,40(r17)
 4007940:	8cc00b15 	stw	r19,44(r17)
 4007944:	8080030d 	sth	r2,12(r16)
 4007948:	00800084 	movi	r2,2
 400794c:	80000015 	stw	zero,0(r16)
 4007950:	80000115 	stw	zero,4(r16)
 4007954:	80000215 	stw	zero,8(r16)
 4007958:	80001915 	stw	zero,100(r16)
 400795c:	8080038d 	sth	r2,14(r16)
 4007960:	80000415 	stw	zero,16(r16)
 4007964:	80000515 	stw	zero,20(r16)
 4007968:	80000615 	stw	zero,24(r16)
 400796c:	b80d883a 	mov	r6,r23
 4007970:	000b883a 	mov	r5,zero
 4007974:	81001704 	addi	r4,r16,92
 4007978:	40094580 	call	4009458 <memset>
 400797c:	00800044 	movi	r2,1
 4007980:	84000715 	stw	r16,28(r16)
 4007984:	85800815 	stw	r22,32(r16)
 4007988:	85400915 	stw	r21,36(r16)
 400798c:	85000a15 	stw	r20,40(r16)
 4007990:	84c00b15 	stw	r19,44(r16)
 4007994:	90800e15 	stw	r2,56(r18)
 4007998:	dfc00817 	ldw	ra,32(sp)
 400799c:	ddc00717 	ldw	r23,28(sp)
 40079a0:	dd800617 	ldw	r22,24(sp)
 40079a4:	dd400517 	ldw	r21,20(sp)
 40079a8:	dd000417 	ldw	r20,16(sp)
 40079ac:	dcc00317 	ldw	r19,12(sp)
 40079b0:	dc800217 	ldw	r18,8(sp)
 40079b4:	dc400117 	ldw	r17,4(sp)
 40079b8:	dc000017 	ldw	r16,0(sp)
 40079bc:	dec00904 	addi	sp,sp,36
 40079c0:	f800283a 	ret

040079c4 <__fp_lock>:
 40079c4:	0005883a 	mov	r2,zero
 40079c8:	f800283a 	ret

040079cc <__sfmoreglue>:
 40079cc:	defffc04 	addi	sp,sp,-16
 40079d0:	dc400115 	stw	r17,4(sp)
 40079d4:	2c7fffc4 	addi	r17,r5,-1
 40079d8:	8c401a24 	muli	r17,r17,104
 40079dc:	dc800215 	stw	r18,8(sp)
 40079e0:	2825883a 	mov	r18,r5
 40079e4:	89401d04 	addi	r5,r17,116
 40079e8:	dc000015 	stw	r16,0(sp)
 40079ec:	dfc00315 	stw	ra,12(sp)
 40079f0:	40088c40 	call	40088c4 <_malloc_r>
 40079f4:	1021883a 	mov	r16,r2
 40079f8:	10000726 	beq	r2,zero,4007a18 <__sfmoreglue+0x4c>
 40079fc:	11000304 	addi	r4,r2,12
 4007a00:	10000015 	stw	zero,0(r2)
 4007a04:	14800115 	stw	r18,4(r2)
 4007a08:	11000215 	stw	r4,8(r2)
 4007a0c:	89801a04 	addi	r6,r17,104
 4007a10:	000b883a 	mov	r5,zero
 4007a14:	40094580 	call	4009458 <memset>
 4007a18:	8005883a 	mov	r2,r16
 4007a1c:	dfc00317 	ldw	ra,12(sp)
 4007a20:	dc800217 	ldw	r18,8(sp)
 4007a24:	dc400117 	ldw	r17,4(sp)
 4007a28:	dc000017 	ldw	r16,0(sp)
 4007a2c:	dec00404 	addi	sp,sp,16
 4007a30:	f800283a 	ret

04007a34 <__sfp>:
 4007a34:	defffb04 	addi	sp,sp,-20
 4007a38:	dc000015 	stw	r16,0(sp)
 4007a3c:	040100b4 	movhi	r16,1026
 4007a40:	843a3504 	addi	r16,r16,-5932
 4007a44:	dcc00315 	stw	r19,12(sp)
 4007a48:	2027883a 	mov	r19,r4
 4007a4c:	81000017 	ldw	r4,0(r16)
 4007a50:	dfc00415 	stw	ra,16(sp)
 4007a54:	dc800215 	stw	r18,8(sp)
 4007a58:	20800e17 	ldw	r2,56(r4)
 4007a5c:	dc400115 	stw	r17,4(sp)
 4007a60:	1000021e 	bne	r2,zero,4007a6c <__sfp+0x38>
 4007a64:	40078280 	call	4007828 <__sinit.part.1>
 4007a68:	81000017 	ldw	r4,0(r16)
 4007a6c:	2480b804 	addi	r18,r4,736
 4007a70:	047fffc4 	movi	r17,-1
 4007a74:	91000117 	ldw	r4,4(r18)
 4007a78:	94000217 	ldw	r16,8(r18)
 4007a7c:	213fffc4 	addi	r4,r4,-1
 4007a80:	20000a16 	blt	r4,zero,4007aac <__sfp+0x78>
 4007a84:	8080030f 	ldh	r2,12(r16)
 4007a88:	10000c26 	beq	r2,zero,4007abc <__sfp+0x88>
 4007a8c:	80c01d04 	addi	r3,r16,116
 4007a90:	00000206 	br	4007a9c <__sfp+0x68>
 4007a94:	18bfe60f 	ldh	r2,-104(r3)
 4007a98:	10000826 	beq	r2,zero,4007abc <__sfp+0x88>
 4007a9c:	213fffc4 	addi	r4,r4,-1
 4007aa0:	1c3ffd04 	addi	r16,r3,-12
 4007aa4:	18c01a04 	addi	r3,r3,104
 4007aa8:	247ffa1e 	bne	r4,r17,4007a94 <__alt_mem_onchip_memory2_0+0xfc005a94>
 4007aac:	90800017 	ldw	r2,0(r18)
 4007ab0:	10001d26 	beq	r2,zero,4007b28 <__sfp+0xf4>
 4007ab4:	1025883a 	mov	r18,r2
 4007ab8:	003fee06 	br	4007a74 <__alt_mem_onchip_memory2_0+0xfc005a74>
 4007abc:	00bfffc4 	movi	r2,-1
 4007ac0:	8080038d 	sth	r2,14(r16)
 4007ac4:	00800044 	movi	r2,1
 4007ac8:	8080030d 	sth	r2,12(r16)
 4007acc:	80001915 	stw	zero,100(r16)
 4007ad0:	80000015 	stw	zero,0(r16)
 4007ad4:	80000215 	stw	zero,8(r16)
 4007ad8:	80000115 	stw	zero,4(r16)
 4007adc:	80000415 	stw	zero,16(r16)
 4007ae0:	80000515 	stw	zero,20(r16)
 4007ae4:	80000615 	stw	zero,24(r16)
 4007ae8:	01800204 	movi	r6,8
 4007aec:	000b883a 	mov	r5,zero
 4007af0:	81001704 	addi	r4,r16,92
 4007af4:	40094580 	call	4009458 <memset>
 4007af8:	8005883a 	mov	r2,r16
 4007afc:	80000c15 	stw	zero,48(r16)
 4007b00:	80000d15 	stw	zero,52(r16)
 4007b04:	80001115 	stw	zero,68(r16)
 4007b08:	80001215 	stw	zero,72(r16)
 4007b0c:	dfc00417 	ldw	ra,16(sp)
 4007b10:	dcc00317 	ldw	r19,12(sp)
 4007b14:	dc800217 	ldw	r18,8(sp)
 4007b18:	dc400117 	ldw	r17,4(sp)
 4007b1c:	dc000017 	ldw	r16,0(sp)
 4007b20:	dec00504 	addi	sp,sp,20
 4007b24:	f800283a 	ret
 4007b28:	01400104 	movi	r5,4
 4007b2c:	9809883a 	mov	r4,r19
 4007b30:	40079cc0 	call	40079cc <__sfmoreglue>
 4007b34:	90800015 	stw	r2,0(r18)
 4007b38:	103fde1e 	bne	r2,zero,4007ab4 <__alt_mem_onchip_memory2_0+0xfc005ab4>
 4007b3c:	00800304 	movi	r2,12
 4007b40:	98800015 	stw	r2,0(r19)
 4007b44:	0005883a 	mov	r2,zero
 4007b48:	003ff006 	br	4007b0c <__alt_mem_onchip_memory2_0+0xfc005b0c>

04007b4c <_cleanup>:
 4007b4c:	008100b4 	movhi	r2,1026
 4007b50:	10ba3504 	addi	r2,r2,-5932
 4007b54:	11000017 	ldw	r4,0(r2)
 4007b58:	01410074 	movhi	r5,1025
 4007b5c:	29766304 	addi	r5,r5,-9844
 4007b60:	40085681 	jmpi	4008568 <_fwalk_reent>

04007b64 <__sinit>:
 4007b64:	20800e17 	ldw	r2,56(r4)
 4007b68:	10000126 	beq	r2,zero,4007b70 <__sinit+0xc>
 4007b6c:	f800283a 	ret
 4007b70:	40078281 	jmpi	4007828 <__sinit.part.1>

04007b74 <__sfp_lock_acquire>:
 4007b74:	f800283a 	ret

04007b78 <__sfp_lock_release>:
 4007b78:	f800283a 	ret

04007b7c <__sinit_lock_acquire>:
 4007b7c:	f800283a 	ret

04007b80 <__sinit_lock_release>:
 4007b80:	f800283a 	ret

04007b84 <__fp_lock_all>:
 4007b84:	008100b4 	movhi	r2,1026
 4007b88:	10ba3604 	addi	r2,r2,-5928
 4007b8c:	11000017 	ldw	r4,0(r2)
 4007b90:	01410034 	movhi	r5,1024
 4007b94:	295e7104 	addi	r5,r5,31172
 4007b98:	40084a41 	jmpi	40084a4 <_fwalk>

04007b9c <__fp_unlock_all>:
 4007b9c:	008100b4 	movhi	r2,1026
 4007ba0:	10ba3604 	addi	r2,r2,-5928
 4007ba4:	11000017 	ldw	r4,0(r2)
 4007ba8:	01410034 	movhi	r5,1024
 4007bac:	295e0504 	addi	r5,r5,30740
 4007bb0:	40084a41 	jmpi	40084a4 <_fwalk>

04007bb4 <_malloc_trim_r>:
 4007bb4:	defffb04 	addi	sp,sp,-20
 4007bb8:	dcc00315 	stw	r19,12(sp)
 4007bbc:	04c100b4 	movhi	r19,1026
 4007bc0:	dc800215 	stw	r18,8(sp)
 4007bc4:	dc400115 	stw	r17,4(sp)
 4007bc8:	dc000015 	stw	r16,0(sp)
 4007bcc:	dfc00415 	stw	ra,16(sp)
 4007bd0:	2821883a 	mov	r16,r5
 4007bd4:	9cf4a104 	addi	r19,r19,-11644
 4007bd8:	2025883a 	mov	r18,r4
 4007bdc:	4011ea80 	call	4011ea8 <__malloc_lock>
 4007be0:	98800217 	ldw	r2,8(r19)
 4007be4:	14400117 	ldw	r17,4(r2)
 4007be8:	00bfff04 	movi	r2,-4
 4007bec:	88a2703a 	and	r17,r17,r2
 4007bf0:	8c21c83a 	sub	r16,r17,r16
 4007bf4:	8403fbc4 	addi	r16,r16,4079
 4007bf8:	8020d33a 	srli	r16,r16,12
 4007bfc:	0083ffc4 	movi	r2,4095
 4007c00:	843fffc4 	addi	r16,r16,-1
 4007c04:	8020933a 	slli	r16,r16,12
 4007c08:	1400060e 	bge	r2,r16,4007c24 <_malloc_trim_r+0x70>
 4007c0c:	000b883a 	mov	r5,zero
 4007c10:	9009883a 	mov	r4,r18
 4007c14:	400ab540 	call	400ab54 <_sbrk_r>
 4007c18:	98c00217 	ldw	r3,8(r19)
 4007c1c:	1c47883a 	add	r3,r3,r17
 4007c20:	10c00a26 	beq	r2,r3,4007c4c <_malloc_trim_r+0x98>
 4007c24:	9009883a 	mov	r4,r18
 4007c28:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4007c2c:	0005883a 	mov	r2,zero
 4007c30:	dfc00417 	ldw	ra,16(sp)
 4007c34:	dcc00317 	ldw	r19,12(sp)
 4007c38:	dc800217 	ldw	r18,8(sp)
 4007c3c:	dc400117 	ldw	r17,4(sp)
 4007c40:	dc000017 	ldw	r16,0(sp)
 4007c44:	dec00504 	addi	sp,sp,20
 4007c48:	f800283a 	ret
 4007c4c:	040bc83a 	sub	r5,zero,r16
 4007c50:	9009883a 	mov	r4,r18
 4007c54:	400ab540 	call	400ab54 <_sbrk_r>
 4007c58:	00ffffc4 	movi	r3,-1
 4007c5c:	10c00d26 	beq	r2,r3,4007c94 <_malloc_trim_r+0xe0>
 4007c60:	00c100b4 	movhi	r3,1026
 4007c64:	18c18304 	addi	r3,r3,1548
 4007c68:	18800017 	ldw	r2,0(r3)
 4007c6c:	99000217 	ldw	r4,8(r19)
 4007c70:	8c23c83a 	sub	r17,r17,r16
 4007c74:	8c400054 	ori	r17,r17,1
 4007c78:	1421c83a 	sub	r16,r2,r16
 4007c7c:	24400115 	stw	r17,4(r4)
 4007c80:	9009883a 	mov	r4,r18
 4007c84:	1c000015 	stw	r16,0(r3)
 4007c88:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4007c8c:	00800044 	movi	r2,1
 4007c90:	003fe706 	br	4007c30 <__alt_mem_onchip_memory2_0+0xfc005c30>
 4007c94:	000b883a 	mov	r5,zero
 4007c98:	9009883a 	mov	r4,r18
 4007c9c:	400ab540 	call	400ab54 <_sbrk_r>
 4007ca0:	99000217 	ldw	r4,8(r19)
 4007ca4:	014003c4 	movi	r5,15
 4007ca8:	1107c83a 	sub	r3,r2,r4
 4007cac:	28ffdd0e 	bge	r5,r3,4007c24 <__alt_mem_onchip_memory2_0+0xfc005c24>
 4007cb0:	014100b4 	movhi	r5,1026
 4007cb4:	297a3804 	addi	r5,r5,-5920
 4007cb8:	29400017 	ldw	r5,0(r5)
 4007cbc:	18c00054 	ori	r3,r3,1
 4007cc0:	20c00115 	stw	r3,4(r4)
 4007cc4:	00c100b4 	movhi	r3,1026
 4007cc8:	1145c83a 	sub	r2,r2,r5
 4007ccc:	18c18304 	addi	r3,r3,1548
 4007cd0:	18800015 	stw	r2,0(r3)
 4007cd4:	003fd306 	br	4007c24 <__alt_mem_onchip_memory2_0+0xfc005c24>

04007cd8 <_free_r>:
 4007cd8:	28004126 	beq	r5,zero,4007de0 <_free_r+0x108>
 4007cdc:	defffd04 	addi	sp,sp,-12
 4007ce0:	dc400115 	stw	r17,4(sp)
 4007ce4:	dc000015 	stw	r16,0(sp)
 4007ce8:	2023883a 	mov	r17,r4
 4007cec:	2821883a 	mov	r16,r5
 4007cf0:	dfc00215 	stw	ra,8(sp)
 4007cf4:	4011ea80 	call	4011ea8 <__malloc_lock>
 4007cf8:	81ffff17 	ldw	r7,-4(r16)
 4007cfc:	00bfff84 	movi	r2,-2
 4007d00:	010100b4 	movhi	r4,1026
 4007d04:	81bffe04 	addi	r6,r16,-8
 4007d08:	3884703a 	and	r2,r7,r2
 4007d0c:	2134a104 	addi	r4,r4,-11644
 4007d10:	308b883a 	add	r5,r6,r2
 4007d14:	2a400117 	ldw	r9,4(r5)
 4007d18:	22000217 	ldw	r8,8(r4)
 4007d1c:	00ffff04 	movi	r3,-4
 4007d20:	48c6703a 	and	r3,r9,r3
 4007d24:	2a005726 	beq	r5,r8,4007e84 <_free_r+0x1ac>
 4007d28:	28c00115 	stw	r3,4(r5)
 4007d2c:	39c0004c 	andi	r7,r7,1
 4007d30:	3800091e 	bne	r7,zero,4007d58 <_free_r+0x80>
 4007d34:	823ffe17 	ldw	r8,-8(r16)
 4007d38:	22400204 	addi	r9,r4,8
 4007d3c:	320dc83a 	sub	r6,r6,r8
 4007d40:	31c00217 	ldw	r7,8(r6)
 4007d44:	1205883a 	add	r2,r2,r8
 4007d48:	3a406526 	beq	r7,r9,4007ee0 <_free_r+0x208>
 4007d4c:	32000317 	ldw	r8,12(r6)
 4007d50:	3a000315 	stw	r8,12(r7)
 4007d54:	41c00215 	stw	r7,8(r8)
 4007d58:	28cf883a 	add	r7,r5,r3
 4007d5c:	39c00117 	ldw	r7,4(r7)
 4007d60:	39c0004c 	andi	r7,r7,1
 4007d64:	38003a26 	beq	r7,zero,4007e50 <_free_r+0x178>
 4007d68:	10c00054 	ori	r3,r2,1
 4007d6c:	30c00115 	stw	r3,4(r6)
 4007d70:	3087883a 	add	r3,r6,r2
 4007d74:	18800015 	stw	r2,0(r3)
 4007d78:	00c07fc4 	movi	r3,511
 4007d7c:	18801936 	bltu	r3,r2,4007de4 <_free_r+0x10c>
 4007d80:	1004d0fa 	srli	r2,r2,3
 4007d84:	01c00044 	movi	r7,1
 4007d88:	21400117 	ldw	r5,4(r4)
 4007d8c:	10c00044 	addi	r3,r2,1
 4007d90:	18c7883a 	add	r3,r3,r3
 4007d94:	1005d0ba 	srai	r2,r2,2
 4007d98:	18c7883a 	add	r3,r3,r3
 4007d9c:	18c7883a 	add	r3,r3,r3
 4007da0:	1907883a 	add	r3,r3,r4
 4007da4:	3884983a 	sll	r2,r7,r2
 4007da8:	19c00017 	ldw	r7,0(r3)
 4007dac:	1a3ffe04 	addi	r8,r3,-8
 4007db0:	1144b03a 	or	r2,r2,r5
 4007db4:	32000315 	stw	r8,12(r6)
 4007db8:	31c00215 	stw	r7,8(r6)
 4007dbc:	20800115 	stw	r2,4(r4)
 4007dc0:	19800015 	stw	r6,0(r3)
 4007dc4:	39800315 	stw	r6,12(r7)
 4007dc8:	8809883a 	mov	r4,r17
 4007dcc:	dfc00217 	ldw	ra,8(sp)
 4007dd0:	dc400117 	ldw	r17,4(sp)
 4007dd4:	dc000017 	ldw	r16,0(sp)
 4007dd8:	dec00304 	addi	sp,sp,12
 4007ddc:	4011fc81 	jmpi	4011fc8 <__malloc_unlock>
 4007de0:	f800283a 	ret
 4007de4:	100ad27a 	srli	r5,r2,9
 4007de8:	00c00104 	movi	r3,4
 4007dec:	19404a36 	bltu	r3,r5,4007f18 <_free_r+0x240>
 4007df0:	100ad1ba 	srli	r5,r2,6
 4007df4:	28c00e44 	addi	r3,r5,57
 4007df8:	18c7883a 	add	r3,r3,r3
 4007dfc:	29400e04 	addi	r5,r5,56
 4007e00:	18c7883a 	add	r3,r3,r3
 4007e04:	18c7883a 	add	r3,r3,r3
 4007e08:	1909883a 	add	r4,r3,r4
 4007e0c:	20c00017 	ldw	r3,0(r4)
 4007e10:	01c100b4 	movhi	r7,1026
 4007e14:	213ffe04 	addi	r4,r4,-8
 4007e18:	39f4a104 	addi	r7,r7,-11644
 4007e1c:	20c04426 	beq	r4,r3,4007f30 <_free_r+0x258>
 4007e20:	01ffff04 	movi	r7,-4
 4007e24:	19400117 	ldw	r5,4(r3)
 4007e28:	29ca703a 	and	r5,r5,r7
 4007e2c:	1140022e 	bgeu	r2,r5,4007e38 <_free_r+0x160>
 4007e30:	18c00217 	ldw	r3,8(r3)
 4007e34:	20fffb1e 	bne	r4,r3,4007e24 <__alt_mem_onchip_memory2_0+0xfc005e24>
 4007e38:	19000317 	ldw	r4,12(r3)
 4007e3c:	31000315 	stw	r4,12(r6)
 4007e40:	30c00215 	stw	r3,8(r6)
 4007e44:	21800215 	stw	r6,8(r4)
 4007e48:	19800315 	stw	r6,12(r3)
 4007e4c:	003fde06 	br	4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>
 4007e50:	29c00217 	ldw	r7,8(r5)
 4007e54:	10c5883a 	add	r2,r2,r3
 4007e58:	00c100b4 	movhi	r3,1026
 4007e5c:	18f4a304 	addi	r3,r3,-11636
 4007e60:	38c03b26 	beq	r7,r3,4007f50 <_free_r+0x278>
 4007e64:	2a000317 	ldw	r8,12(r5)
 4007e68:	11400054 	ori	r5,r2,1
 4007e6c:	3087883a 	add	r3,r6,r2
 4007e70:	3a000315 	stw	r8,12(r7)
 4007e74:	41c00215 	stw	r7,8(r8)
 4007e78:	31400115 	stw	r5,4(r6)
 4007e7c:	18800015 	stw	r2,0(r3)
 4007e80:	003fbd06 	br	4007d78 <__alt_mem_onchip_memory2_0+0xfc005d78>
 4007e84:	39c0004c 	andi	r7,r7,1
 4007e88:	10c5883a 	add	r2,r2,r3
 4007e8c:	3800071e 	bne	r7,zero,4007eac <_free_r+0x1d4>
 4007e90:	81fffe17 	ldw	r7,-8(r16)
 4007e94:	31cdc83a 	sub	r6,r6,r7
 4007e98:	30c00317 	ldw	r3,12(r6)
 4007e9c:	31400217 	ldw	r5,8(r6)
 4007ea0:	11c5883a 	add	r2,r2,r7
 4007ea4:	28c00315 	stw	r3,12(r5)
 4007ea8:	19400215 	stw	r5,8(r3)
 4007eac:	10c00054 	ori	r3,r2,1
 4007eb0:	30c00115 	stw	r3,4(r6)
 4007eb4:	00c100b4 	movhi	r3,1026
 4007eb8:	18fa3904 	addi	r3,r3,-5916
 4007ebc:	18c00017 	ldw	r3,0(r3)
 4007ec0:	21800215 	stw	r6,8(r4)
 4007ec4:	10ffc036 	bltu	r2,r3,4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>
 4007ec8:	008100b4 	movhi	r2,1026
 4007ecc:	10816104 	addi	r2,r2,1412
 4007ed0:	11400017 	ldw	r5,0(r2)
 4007ed4:	8809883a 	mov	r4,r17
 4007ed8:	4007bb40 	call	4007bb4 <_malloc_trim_r>
 4007edc:	003fba06 	br	4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>
 4007ee0:	28c9883a 	add	r4,r5,r3
 4007ee4:	21000117 	ldw	r4,4(r4)
 4007ee8:	2100004c 	andi	r4,r4,1
 4007eec:	2000391e 	bne	r4,zero,4007fd4 <_free_r+0x2fc>
 4007ef0:	29c00217 	ldw	r7,8(r5)
 4007ef4:	29000317 	ldw	r4,12(r5)
 4007ef8:	1885883a 	add	r2,r3,r2
 4007efc:	10c00054 	ori	r3,r2,1
 4007f00:	39000315 	stw	r4,12(r7)
 4007f04:	21c00215 	stw	r7,8(r4)
 4007f08:	30c00115 	stw	r3,4(r6)
 4007f0c:	308d883a 	add	r6,r6,r2
 4007f10:	30800015 	stw	r2,0(r6)
 4007f14:	003fac06 	br	4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>
 4007f18:	00c00504 	movi	r3,20
 4007f1c:	19401536 	bltu	r3,r5,4007f74 <_free_r+0x29c>
 4007f20:	28c01704 	addi	r3,r5,92
 4007f24:	18c7883a 	add	r3,r3,r3
 4007f28:	294016c4 	addi	r5,r5,91
 4007f2c:	003fb406 	br	4007e00 <__alt_mem_onchip_memory2_0+0xfc005e00>
 4007f30:	280bd0ba 	srai	r5,r5,2
 4007f34:	00c00044 	movi	r3,1
 4007f38:	38800117 	ldw	r2,4(r7)
 4007f3c:	194a983a 	sll	r5,r3,r5
 4007f40:	2007883a 	mov	r3,r4
 4007f44:	2884b03a 	or	r2,r5,r2
 4007f48:	38800115 	stw	r2,4(r7)
 4007f4c:	003fbb06 	br	4007e3c <__alt_mem_onchip_memory2_0+0xfc005e3c>
 4007f50:	21800515 	stw	r6,20(r4)
 4007f54:	21800415 	stw	r6,16(r4)
 4007f58:	10c00054 	ori	r3,r2,1
 4007f5c:	31c00315 	stw	r7,12(r6)
 4007f60:	31c00215 	stw	r7,8(r6)
 4007f64:	30c00115 	stw	r3,4(r6)
 4007f68:	308d883a 	add	r6,r6,r2
 4007f6c:	30800015 	stw	r2,0(r6)
 4007f70:	003f9506 	br	4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>
 4007f74:	00c01504 	movi	r3,84
 4007f78:	19400536 	bltu	r3,r5,4007f90 <_free_r+0x2b8>
 4007f7c:	100ad33a 	srli	r5,r2,12
 4007f80:	28c01bc4 	addi	r3,r5,111
 4007f84:	18c7883a 	add	r3,r3,r3
 4007f88:	29401b84 	addi	r5,r5,110
 4007f8c:	003f9c06 	br	4007e00 <__alt_mem_onchip_memory2_0+0xfc005e00>
 4007f90:	00c05504 	movi	r3,340
 4007f94:	19400536 	bltu	r3,r5,4007fac <_free_r+0x2d4>
 4007f98:	100ad3fa 	srli	r5,r2,15
 4007f9c:	28c01e04 	addi	r3,r5,120
 4007fa0:	18c7883a 	add	r3,r3,r3
 4007fa4:	29401dc4 	addi	r5,r5,119
 4007fa8:	003f9506 	br	4007e00 <__alt_mem_onchip_memory2_0+0xfc005e00>
 4007fac:	00c15504 	movi	r3,1364
 4007fb0:	19400536 	bltu	r3,r5,4007fc8 <_free_r+0x2f0>
 4007fb4:	100ad4ba 	srli	r5,r2,18
 4007fb8:	28c01f44 	addi	r3,r5,125
 4007fbc:	18c7883a 	add	r3,r3,r3
 4007fc0:	29401f04 	addi	r5,r5,124
 4007fc4:	003f8e06 	br	4007e00 <__alt_mem_onchip_memory2_0+0xfc005e00>
 4007fc8:	00c03f84 	movi	r3,254
 4007fcc:	01401f84 	movi	r5,126
 4007fd0:	003f8b06 	br	4007e00 <__alt_mem_onchip_memory2_0+0xfc005e00>
 4007fd4:	10c00054 	ori	r3,r2,1
 4007fd8:	30c00115 	stw	r3,4(r6)
 4007fdc:	308d883a 	add	r6,r6,r2
 4007fe0:	30800015 	stw	r2,0(r6)
 4007fe4:	003f7806 	br	4007dc8 <__alt_mem_onchip_memory2_0+0xfc005dc8>

04007fe8 <__sfvwrite_r>:
 4007fe8:	30800217 	ldw	r2,8(r6)
 4007fec:	10006726 	beq	r2,zero,400818c <__sfvwrite_r+0x1a4>
 4007ff0:	28c0030b 	ldhu	r3,12(r5)
 4007ff4:	defff404 	addi	sp,sp,-48
 4007ff8:	dd400715 	stw	r21,28(sp)
 4007ffc:	dd000615 	stw	r20,24(sp)
 4008000:	dc000215 	stw	r16,8(sp)
 4008004:	dfc00b15 	stw	ra,44(sp)
 4008008:	df000a15 	stw	fp,40(sp)
 400800c:	ddc00915 	stw	r23,36(sp)
 4008010:	dd800815 	stw	r22,32(sp)
 4008014:	dcc00515 	stw	r19,20(sp)
 4008018:	dc800415 	stw	r18,16(sp)
 400801c:	dc400315 	stw	r17,12(sp)
 4008020:	1880020c 	andi	r2,r3,8
 4008024:	2821883a 	mov	r16,r5
 4008028:	202b883a 	mov	r21,r4
 400802c:	3029883a 	mov	r20,r6
 4008030:	10002726 	beq	r2,zero,40080d0 <__sfvwrite_r+0xe8>
 4008034:	28800417 	ldw	r2,16(r5)
 4008038:	10002526 	beq	r2,zero,40080d0 <__sfvwrite_r+0xe8>
 400803c:	1880008c 	andi	r2,r3,2
 4008040:	a4400017 	ldw	r17,0(r20)
 4008044:	10002a26 	beq	r2,zero,40080f0 <__sfvwrite_r+0x108>
 4008048:	05a00034 	movhi	r22,32768
 400804c:	0027883a 	mov	r19,zero
 4008050:	0025883a 	mov	r18,zero
 4008054:	b5bf0004 	addi	r22,r22,-1024
 4008058:	980d883a 	mov	r6,r19
 400805c:	a809883a 	mov	r4,r21
 4008060:	90004626 	beq	r18,zero,400817c <__sfvwrite_r+0x194>
 4008064:	900f883a 	mov	r7,r18
 4008068:	b480022e 	bgeu	r22,r18,4008074 <__sfvwrite_r+0x8c>
 400806c:	01e00034 	movhi	r7,32768
 4008070:	39ff0004 	addi	r7,r7,-1024
 4008074:	80800917 	ldw	r2,36(r16)
 4008078:	81400717 	ldw	r5,28(r16)
 400807c:	103ee83a 	callr	r2
 4008080:	0080570e 	bge	zero,r2,40081e0 <__sfvwrite_r+0x1f8>
 4008084:	a0c00217 	ldw	r3,8(r20)
 4008088:	98a7883a 	add	r19,r19,r2
 400808c:	90a5c83a 	sub	r18,r18,r2
 4008090:	1885c83a 	sub	r2,r3,r2
 4008094:	a0800215 	stw	r2,8(r20)
 4008098:	103fef1e 	bne	r2,zero,4008058 <__alt_mem_onchip_memory2_0+0xfc006058>
 400809c:	0005883a 	mov	r2,zero
 40080a0:	dfc00b17 	ldw	ra,44(sp)
 40080a4:	df000a17 	ldw	fp,40(sp)
 40080a8:	ddc00917 	ldw	r23,36(sp)
 40080ac:	dd800817 	ldw	r22,32(sp)
 40080b0:	dd400717 	ldw	r21,28(sp)
 40080b4:	dd000617 	ldw	r20,24(sp)
 40080b8:	dcc00517 	ldw	r19,20(sp)
 40080bc:	dc800417 	ldw	r18,16(sp)
 40080c0:	dc400317 	ldw	r17,12(sp)
 40080c4:	dc000217 	ldw	r16,8(sp)
 40080c8:	dec00c04 	addi	sp,sp,48
 40080cc:	f800283a 	ret
 40080d0:	800b883a 	mov	r5,r16
 40080d4:	a809883a 	mov	r4,r21
 40080d8:	4005b900 	call	4005b90 <__swsetup_r>
 40080dc:	1000eb1e 	bne	r2,zero,400848c <__sfvwrite_r+0x4a4>
 40080e0:	80c0030b 	ldhu	r3,12(r16)
 40080e4:	a4400017 	ldw	r17,0(r20)
 40080e8:	1880008c 	andi	r2,r3,2
 40080ec:	103fd61e 	bne	r2,zero,4008048 <__alt_mem_onchip_memory2_0+0xfc006048>
 40080f0:	1880004c 	andi	r2,r3,1
 40080f4:	10003f1e 	bne	r2,zero,40081f4 <__sfvwrite_r+0x20c>
 40080f8:	0039883a 	mov	fp,zero
 40080fc:	0025883a 	mov	r18,zero
 4008100:	90001a26 	beq	r18,zero,400816c <__sfvwrite_r+0x184>
 4008104:	1880800c 	andi	r2,r3,512
 4008108:	84c00217 	ldw	r19,8(r16)
 400810c:	10002126 	beq	r2,zero,4008194 <__sfvwrite_r+0x1ac>
 4008110:	982f883a 	mov	r23,r19
 4008114:	94c09336 	bltu	r18,r19,4008364 <__sfvwrite_r+0x37c>
 4008118:	1881200c 	andi	r2,r3,1152
 400811c:	10009e1e 	bne	r2,zero,4008398 <__sfvwrite_r+0x3b0>
 4008120:	81000017 	ldw	r4,0(r16)
 4008124:	b80d883a 	mov	r6,r23
 4008128:	e00b883a 	mov	r5,fp
 400812c:	40092fc0 	call	40092fc <memmove>
 4008130:	80c00217 	ldw	r3,8(r16)
 4008134:	81000017 	ldw	r4,0(r16)
 4008138:	9005883a 	mov	r2,r18
 400813c:	1ce7c83a 	sub	r19,r3,r19
 4008140:	25cf883a 	add	r7,r4,r23
 4008144:	84c00215 	stw	r19,8(r16)
 4008148:	81c00015 	stw	r7,0(r16)
 400814c:	a0c00217 	ldw	r3,8(r20)
 4008150:	e0b9883a 	add	fp,fp,r2
 4008154:	90a5c83a 	sub	r18,r18,r2
 4008158:	18a7c83a 	sub	r19,r3,r2
 400815c:	a4c00215 	stw	r19,8(r20)
 4008160:	983fce26 	beq	r19,zero,400809c <__alt_mem_onchip_memory2_0+0xfc00609c>
 4008164:	80c0030b 	ldhu	r3,12(r16)
 4008168:	903fe61e 	bne	r18,zero,4008104 <__alt_mem_onchip_memory2_0+0xfc006104>
 400816c:	8f000017 	ldw	fp,0(r17)
 4008170:	8c800117 	ldw	r18,4(r17)
 4008174:	8c400204 	addi	r17,r17,8
 4008178:	003fe106 	br	4008100 <__alt_mem_onchip_memory2_0+0xfc006100>
 400817c:	8cc00017 	ldw	r19,0(r17)
 4008180:	8c800117 	ldw	r18,4(r17)
 4008184:	8c400204 	addi	r17,r17,8
 4008188:	003fb306 	br	4008058 <__alt_mem_onchip_memory2_0+0xfc006058>
 400818c:	0005883a 	mov	r2,zero
 4008190:	f800283a 	ret
 4008194:	81000017 	ldw	r4,0(r16)
 4008198:	80800417 	ldw	r2,16(r16)
 400819c:	11005736 	bltu	r2,r4,40082fc <__sfvwrite_r+0x314>
 40081a0:	85c00517 	ldw	r23,20(r16)
 40081a4:	95c05536 	bltu	r18,r23,40082fc <__sfvwrite_r+0x314>
 40081a8:	00a00034 	movhi	r2,32768
 40081ac:	10bfffc4 	addi	r2,r2,-1
 40081b0:	9009883a 	mov	r4,r18
 40081b4:	1480012e 	bgeu	r2,r18,40081bc <__sfvwrite_r+0x1d4>
 40081b8:	1009883a 	mov	r4,r2
 40081bc:	b80b883a 	mov	r5,r23
 40081c0:	4000cc40 	call	4000cc4 <__divsi3>
 40081c4:	15cf383a 	mul	r7,r2,r23
 40081c8:	81400717 	ldw	r5,28(r16)
 40081cc:	80800917 	ldw	r2,36(r16)
 40081d0:	e00d883a 	mov	r6,fp
 40081d4:	a809883a 	mov	r4,r21
 40081d8:	103ee83a 	callr	r2
 40081dc:	00bfdb16 	blt	zero,r2,400814c <__alt_mem_onchip_memory2_0+0xfc00614c>
 40081e0:	8080030b 	ldhu	r2,12(r16)
 40081e4:	10801014 	ori	r2,r2,64
 40081e8:	8080030d 	sth	r2,12(r16)
 40081ec:	00bfffc4 	movi	r2,-1
 40081f0:	003fab06 	br	40080a0 <__alt_mem_onchip_memory2_0+0xfc0060a0>
 40081f4:	0027883a 	mov	r19,zero
 40081f8:	0011883a 	mov	r8,zero
 40081fc:	0039883a 	mov	fp,zero
 4008200:	0025883a 	mov	r18,zero
 4008204:	90001f26 	beq	r18,zero,4008284 <__sfvwrite_r+0x29c>
 4008208:	40005a26 	beq	r8,zero,4008374 <__sfvwrite_r+0x38c>
 400820c:	982d883a 	mov	r22,r19
 4008210:	94c0012e 	bgeu	r18,r19,4008218 <__sfvwrite_r+0x230>
 4008214:	902d883a 	mov	r22,r18
 4008218:	81000017 	ldw	r4,0(r16)
 400821c:	80800417 	ldw	r2,16(r16)
 4008220:	b02f883a 	mov	r23,r22
 4008224:	81c00517 	ldw	r7,20(r16)
 4008228:	1100032e 	bgeu	r2,r4,4008238 <__sfvwrite_r+0x250>
 400822c:	80c00217 	ldw	r3,8(r16)
 4008230:	38c7883a 	add	r3,r7,r3
 4008234:	1d801816 	blt	r3,r22,4008298 <__sfvwrite_r+0x2b0>
 4008238:	b1c03e16 	blt	r22,r7,4008334 <__sfvwrite_r+0x34c>
 400823c:	80800917 	ldw	r2,36(r16)
 4008240:	81400717 	ldw	r5,28(r16)
 4008244:	e00d883a 	mov	r6,fp
 4008248:	da000115 	stw	r8,4(sp)
 400824c:	a809883a 	mov	r4,r21
 4008250:	103ee83a 	callr	r2
 4008254:	102f883a 	mov	r23,r2
 4008258:	da000117 	ldw	r8,4(sp)
 400825c:	00bfe00e 	bge	zero,r2,40081e0 <__alt_mem_onchip_memory2_0+0xfc0061e0>
 4008260:	9de7c83a 	sub	r19,r19,r23
 4008264:	98001f26 	beq	r19,zero,40082e4 <__sfvwrite_r+0x2fc>
 4008268:	a0800217 	ldw	r2,8(r20)
 400826c:	e5f9883a 	add	fp,fp,r23
 4008270:	95e5c83a 	sub	r18,r18,r23
 4008274:	15efc83a 	sub	r23,r2,r23
 4008278:	a5c00215 	stw	r23,8(r20)
 400827c:	b83f8726 	beq	r23,zero,400809c <__alt_mem_onchip_memory2_0+0xfc00609c>
 4008280:	903fe11e 	bne	r18,zero,4008208 <__alt_mem_onchip_memory2_0+0xfc006208>
 4008284:	8f000017 	ldw	fp,0(r17)
 4008288:	8c800117 	ldw	r18,4(r17)
 400828c:	0011883a 	mov	r8,zero
 4008290:	8c400204 	addi	r17,r17,8
 4008294:	003fdb06 	br	4008204 <__alt_mem_onchip_memory2_0+0xfc006204>
 4008298:	180d883a 	mov	r6,r3
 400829c:	e00b883a 	mov	r5,fp
 40082a0:	da000115 	stw	r8,4(sp)
 40082a4:	d8c00015 	stw	r3,0(sp)
 40082a8:	40092fc0 	call	40092fc <memmove>
 40082ac:	d8c00017 	ldw	r3,0(sp)
 40082b0:	80800017 	ldw	r2,0(r16)
 40082b4:	800b883a 	mov	r5,r16
 40082b8:	a809883a 	mov	r4,r21
 40082bc:	10c5883a 	add	r2,r2,r3
 40082c0:	80800015 	stw	r2,0(r16)
 40082c4:	d8c00015 	stw	r3,0(sp)
 40082c8:	40077880 	call	4007788 <_fflush_r>
 40082cc:	d8c00017 	ldw	r3,0(sp)
 40082d0:	da000117 	ldw	r8,4(sp)
 40082d4:	103fc21e 	bne	r2,zero,40081e0 <__alt_mem_onchip_memory2_0+0xfc0061e0>
 40082d8:	182f883a 	mov	r23,r3
 40082dc:	9de7c83a 	sub	r19,r19,r23
 40082e0:	983fe11e 	bne	r19,zero,4008268 <__alt_mem_onchip_memory2_0+0xfc006268>
 40082e4:	800b883a 	mov	r5,r16
 40082e8:	a809883a 	mov	r4,r21
 40082ec:	40077880 	call	4007788 <_fflush_r>
 40082f0:	103fbb1e 	bne	r2,zero,40081e0 <__alt_mem_onchip_memory2_0+0xfc0061e0>
 40082f4:	0011883a 	mov	r8,zero
 40082f8:	003fdb06 	br	4008268 <__alt_mem_onchip_memory2_0+0xfc006268>
 40082fc:	94c0012e 	bgeu	r18,r19,4008304 <__sfvwrite_r+0x31c>
 4008300:	9027883a 	mov	r19,r18
 4008304:	980d883a 	mov	r6,r19
 4008308:	e00b883a 	mov	r5,fp
 400830c:	40092fc0 	call	40092fc <memmove>
 4008310:	80800217 	ldw	r2,8(r16)
 4008314:	80c00017 	ldw	r3,0(r16)
 4008318:	14c5c83a 	sub	r2,r2,r19
 400831c:	1cc7883a 	add	r3,r3,r19
 4008320:	80800215 	stw	r2,8(r16)
 4008324:	80c00015 	stw	r3,0(r16)
 4008328:	10004326 	beq	r2,zero,4008438 <__sfvwrite_r+0x450>
 400832c:	9805883a 	mov	r2,r19
 4008330:	003f8606 	br	400814c <__alt_mem_onchip_memory2_0+0xfc00614c>
 4008334:	b00d883a 	mov	r6,r22
 4008338:	e00b883a 	mov	r5,fp
 400833c:	da000115 	stw	r8,4(sp)
 4008340:	40092fc0 	call	40092fc <memmove>
 4008344:	80800217 	ldw	r2,8(r16)
 4008348:	80c00017 	ldw	r3,0(r16)
 400834c:	da000117 	ldw	r8,4(sp)
 4008350:	1585c83a 	sub	r2,r2,r22
 4008354:	1dad883a 	add	r22,r3,r22
 4008358:	80800215 	stw	r2,8(r16)
 400835c:	85800015 	stw	r22,0(r16)
 4008360:	003fbf06 	br	4008260 <__alt_mem_onchip_memory2_0+0xfc006260>
 4008364:	81000017 	ldw	r4,0(r16)
 4008368:	9027883a 	mov	r19,r18
 400836c:	902f883a 	mov	r23,r18
 4008370:	003f6c06 	br	4008124 <__alt_mem_onchip_memory2_0+0xfc006124>
 4008374:	900d883a 	mov	r6,r18
 4008378:	01400284 	movi	r5,10
 400837c:	e009883a 	mov	r4,fp
 4008380:	40090d00 	call	40090d0 <memchr>
 4008384:	10003e26 	beq	r2,zero,4008480 <__sfvwrite_r+0x498>
 4008388:	10800044 	addi	r2,r2,1
 400838c:	1727c83a 	sub	r19,r2,fp
 4008390:	02000044 	movi	r8,1
 4008394:	003f9d06 	br	400820c <__alt_mem_onchip_memory2_0+0xfc00620c>
 4008398:	80800517 	ldw	r2,20(r16)
 400839c:	81400417 	ldw	r5,16(r16)
 40083a0:	81c00017 	ldw	r7,0(r16)
 40083a4:	10a7883a 	add	r19,r2,r2
 40083a8:	9885883a 	add	r2,r19,r2
 40083ac:	1026d7fa 	srli	r19,r2,31
 40083b0:	396dc83a 	sub	r22,r7,r5
 40083b4:	b1000044 	addi	r4,r22,1
 40083b8:	9885883a 	add	r2,r19,r2
 40083bc:	1027d07a 	srai	r19,r2,1
 40083c0:	2485883a 	add	r2,r4,r18
 40083c4:	980d883a 	mov	r6,r19
 40083c8:	9880022e 	bgeu	r19,r2,40083d4 <__sfvwrite_r+0x3ec>
 40083cc:	1027883a 	mov	r19,r2
 40083d0:	100d883a 	mov	r6,r2
 40083d4:	18c1000c 	andi	r3,r3,1024
 40083d8:	18001c26 	beq	r3,zero,400844c <__sfvwrite_r+0x464>
 40083dc:	300b883a 	mov	r5,r6
 40083e0:	a809883a 	mov	r4,r21
 40083e4:	40088c40 	call	40088c4 <_malloc_r>
 40083e8:	102f883a 	mov	r23,r2
 40083ec:	10002926 	beq	r2,zero,4008494 <__sfvwrite_r+0x4ac>
 40083f0:	81400417 	ldw	r5,16(r16)
 40083f4:	b00d883a 	mov	r6,r22
 40083f8:	1009883a 	mov	r4,r2
 40083fc:	40091b40 	call	40091b4 <memcpy>
 4008400:	8080030b 	ldhu	r2,12(r16)
 4008404:	00fedfc4 	movi	r3,-1153
 4008408:	10c4703a 	and	r2,r2,r3
 400840c:	10802014 	ori	r2,r2,128
 4008410:	8080030d 	sth	r2,12(r16)
 4008414:	bd89883a 	add	r4,r23,r22
 4008418:	9d8fc83a 	sub	r7,r19,r22
 400841c:	85c00415 	stw	r23,16(r16)
 4008420:	84c00515 	stw	r19,20(r16)
 4008424:	81000015 	stw	r4,0(r16)
 4008428:	9027883a 	mov	r19,r18
 400842c:	81c00215 	stw	r7,8(r16)
 4008430:	902f883a 	mov	r23,r18
 4008434:	003f3b06 	br	4008124 <__alt_mem_onchip_memory2_0+0xfc006124>
 4008438:	800b883a 	mov	r5,r16
 400843c:	a809883a 	mov	r4,r21
 4008440:	40077880 	call	4007788 <_fflush_r>
 4008444:	103fb926 	beq	r2,zero,400832c <__alt_mem_onchip_memory2_0+0xfc00632c>
 4008448:	003f6506 	br	40081e0 <__alt_mem_onchip_memory2_0+0xfc0061e0>
 400844c:	a809883a 	mov	r4,r21
 4008450:	400a57c0 	call	400a57c <_realloc_r>
 4008454:	102f883a 	mov	r23,r2
 4008458:	103fee1e 	bne	r2,zero,4008414 <__alt_mem_onchip_memory2_0+0xfc006414>
 400845c:	81400417 	ldw	r5,16(r16)
 4008460:	a809883a 	mov	r4,r21
 4008464:	4007cd80 	call	4007cd8 <_free_r>
 4008468:	8080030b 	ldhu	r2,12(r16)
 400846c:	00ffdfc4 	movi	r3,-129
 4008470:	1884703a 	and	r2,r3,r2
 4008474:	00c00304 	movi	r3,12
 4008478:	a8c00015 	stw	r3,0(r21)
 400847c:	003f5906 	br	40081e4 <__alt_mem_onchip_memory2_0+0xfc0061e4>
 4008480:	94c00044 	addi	r19,r18,1
 4008484:	02000044 	movi	r8,1
 4008488:	003f6006 	br	400820c <__alt_mem_onchip_memory2_0+0xfc00620c>
 400848c:	00bfffc4 	movi	r2,-1
 4008490:	003f0306 	br	40080a0 <__alt_mem_onchip_memory2_0+0xfc0060a0>
 4008494:	00800304 	movi	r2,12
 4008498:	a8800015 	stw	r2,0(r21)
 400849c:	8080030b 	ldhu	r2,12(r16)
 40084a0:	003f5006 	br	40081e4 <__alt_mem_onchip_memory2_0+0xfc0061e4>

040084a4 <_fwalk>:
 40084a4:	defff704 	addi	sp,sp,-36
 40084a8:	dd000415 	stw	r20,16(sp)
 40084ac:	dfc00815 	stw	ra,32(sp)
 40084b0:	ddc00715 	stw	r23,28(sp)
 40084b4:	dd800615 	stw	r22,24(sp)
 40084b8:	dd400515 	stw	r21,20(sp)
 40084bc:	dcc00315 	stw	r19,12(sp)
 40084c0:	dc800215 	stw	r18,8(sp)
 40084c4:	dc400115 	stw	r17,4(sp)
 40084c8:	dc000015 	stw	r16,0(sp)
 40084cc:	2500b804 	addi	r20,r4,736
 40084d0:	a0002326 	beq	r20,zero,4008560 <_fwalk+0xbc>
 40084d4:	282b883a 	mov	r21,r5
 40084d8:	002f883a 	mov	r23,zero
 40084dc:	05800044 	movi	r22,1
 40084e0:	04ffffc4 	movi	r19,-1
 40084e4:	a4400117 	ldw	r17,4(r20)
 40084e8:	a4800217 	ldw	r18,8(r20)
 40084ec:	8c7fffc4 	addi	r17,r17,-1
 40084f0:	88000d16 	blt	r17,zero,4008528 <_fwalk+0x84>
 40084f4:	94000304 	addi	r16,r18,12
 40084f8:	94800384 	addi	r18,r18,14
 40084fc:	8080000b 	ldhu	r2,0(r16)
 4008500:	8c7fffc4 	addi	r17,r17,-1
 4008504:	813ffd04 	addi	r4,r16,-12
 4008508:	b080042e 	bgeu	r22,r2,400851c <_fwalk+0x78>
 400850c:	9080000f 	ldh	r2,0(r18)
 4008510:	14c00226 	beq	r2,r19,400851c <_fwalk+0x78>
 4008514:	a83ee83a 	callr	r21
 4008518:	b8aeb03a 	or	r23,r23,r2
 400851c:	84001a04 	addi	r16,r16,104
 4008520:	94801a04 	addi	r18,r18,104
 4008524:	8cfff51e 	bne	r17,r19,40084fc <__alt_mem_onchip_memory2_0+0xfc0064fc>
 4008528:	a5000017 	ldw	r20,0(r20)
 400852c:	a03fed1e 	bne	r20,zero,40084e4 <__alt_mem_onchip_memory2_0+0xfc0064e4>
 4008530:	b805883a 	mov	r2,r23
 4008534:	dfc00817 	ldw	ra,32(sp)
 4008538:	ddc00717 	ldw	r23,28(sp)
 400853c:	dd800617 	ldw	r22,24(sp)
 4008540:	dd400517 	ldw	r21,20(sp)
 4008544:	dd000417 	ldw	r20,16(sp)
 4008548:	dcc00317 	ldw	r19,12(sp)
 400854c:	dc800217 	ldw	r18,8(sp)
 4008550:	dc400117 	ldw	r17,4(sp)
 4008554:	dc000017 	ldw	r16,0(sp)
 4008558:	dec00904 	addi	sp,sp,36
 400855c:	f800283a 	ret
 4008560:	002f883a 	mov	r23,zero
 4008564:	003ff206 	br	4008530 <__alt_mem_onchip_memory2_0+0xfc006530>

04008568 <_fwalk_reent>:
 4008568:	defff704 	addi	sp,sp,-36
 400856c:	dd000415 	stw	r20,16(sp)
 4008570:	dfc00815 	stw	ra,32(sp)
 4008574:	ddc00715 	stw	r23,28(sp)
 4008578:	dd800615 	stw	r22,24(sp)
 400857c:	dd400515 	stw	r21,20(sp)
 4008580:	dcc00315 	stw	r19,12(sp)
 4008584:	dc800215 	stw	r18,8(sp)
 4008588:	dc400115 	stw	r17,4(sp)
 400858c:	dc000015 	stw	r16,0(sp)
 4008590:	2500b804 	addi	r20,r4,736
 4008594:	a0002326 	beq	r20,zero,4008624 <_fwalk_reent+0xbc>
 4008598:	282b883a 	mov	r21,r5
 400859c:	2027883a 	mov	r19,r4
 40085a0:	002f883a 	mov	r23,zero
 40085a4:	05800044 	movi	r22,1
 40085a8:	04bfffc4 	movi	r18,-1
 40085ac:	a4400117 	ldw	r17,4(r20)
 40085b0:	a4000217 	ldw	r16,8(r20)
 40085b4:	8c7fffc4 	addi	r17,r17,-1
 40085b8:	88000c16 	blt	r17,zero,40085ec <_fwalk_reent+0x84>
 40085bc:	84000304 	addi	r16,r16,12
 40085c0:	8080000b 	ldhu	r2,0(r16)
 40085c4:	8c7fffc4 	addi	r17,r17,-1
 40085c8:	817ffd04 	addi	r5,r16,-12
 40085cc:	b080052e 	bgeu	r22,r2,40085e4 <_fwalk_reent+0x7c>
 40085d0:	8080008f 	ldh	r2,2(r16)
 40085d4:	9809883a 	mov	r4,r19
 40085d8:	14800226 	beq	r2,r18,40085e4 <_fwalk_reent+0x7c>
 40085dc:	a83ee83a 	callr	r21
 40085e0:	b8aeb03a 	or	r23,r23,r2
 40085e4:	84001a04 	addi	r16,r16,104
 40085e8:	8cbff51e 	bne	r17,r18,40085c0 <__alt_mem_onchip_memory2_0+0xfc0065c0>
 40085ec:	a5000017 	ldw	r20,0(r20)
 40085f0:	a03fee1e 	bne	r20,zero,40085ac <__alt_mem_onchip_memory2_0+0xfc0065ac>
 40085f4:	b805883a 	mov	r2,r23
 40085f8:	dfc00817 	ldw	ra,32(sp)
 40085fc:	ddc00717 	ldw	r23,28(sp)
 4008600:	dd800617 	ldw	r22,24(sp)
 4008604:	dd400517 	ldw	r21,20(sp)
 4008608:	dd000417 	ldw	r20,16(sp)
 400860c:	dcc00317 	ldw	r19,12(sp)
 4008610:	dc800217 	ldw	r18,8(sp)
 4008614:	dc400117 	ldw	r17,4(sp)
 4008618:	dc000017 	ldw	r16,0(sp)
 400861c:	dec00904 	addi	sp,sp,36
 4008620:	f800283a 	ret
 4008624:	002f883a 	mov	r23,zero
 4008628:	003ff206 	br	40085f4 <__alt_mem_onchip_memory2_0+0xfc0065f4>

0400862c <_setlocale_r>:
 400862c:	30001b26 	beq	r6,zero,400869c <_setlocale_r+0x70>
 4008630:	014100b4 	movhi	r5,1026
 4008634:	defffe04 	addi	sp,sp,-8
 4008638:	2972ca04 	addi	r5,r5,-13528
 400863c:	3009883a 	mov	r4,r6
 4008640:	dc000015 	stw	r16,0(sp)
 4008644:	dfc00115 	stw	ra,4(sp)
 4008648:	3021883a 	mov	r16,r6
 400864c:	400ace40 	call	400ace4 <strcmp>
 4008650:	1000061e 	bne	r2,zero,400866c <_setlocale_r+0x40>
 4008654:	008100b4 	movhi	r2,1026
 4008658:	10b2c904 	addi	r2,r2,-13532
 400865c:	dfc00117 	ldw	ra,4(sp)
 4008660:	dc000017 	ldw	r16,0(sp)
 4008664:	dec00204 	addi	sp,sp,8
 4008668:	f800283a 	ret
 400866c:	014100b4 	movhi	r5,1026
 4008670:	2972c904 	addi	r5,r5,-13532
 4008674:	8009883a 	mov	r4,r16
 4008678:	400ace40 	call	400ace4 <strcmp>
 400867c:	103ff526 	beq	r2,zero,4008654 <__alt_mem_onchip_memory2_0+0xfc006654>
 4008680:	014100b4 	movhi	r5,1026
 4008684:	2972ac04 	addi	r5,r5,-13648
 4008688:	8009883a 	mov	r4,r16
 400868c:	400ace40 	call	400ace4 <strcmp>
 4008690:	103ff026 	beq	r2,zero,4008654 <__alt_mem_onchip_memory2_0+0xfc006654>
 4008694:	0005883a 	mov	r2,zero
 4008698:	003ff006 	br	400865c <__alt_mem_onchip_memory2_0+0xfc00665c>
 400869c:	008100b4 	movhi	r2,1026
 40086a0:	10b2c904 	addi	r2,r2,-13532
 40086a4:	f800283a 	ret

040086a8 <__locale_charset>:
 40086a8:	008100b4 	movhi	r2,1026
 40086ac:	10b48b04 	addi	r2,r2,-11732
 40086b0:	f800283a 	ret

040086b4 <__locale_mb_cur_max>:
 40086b4:	008100b4 	movhi	r2,1026
 40086b8:	10ba3704 	addi	r2,r2,-5924
 40086bc:	10800017 	ldw	r2,0(r2)
 40086c0:	f800283a 	ret

040086c4 <__locale_msgcharset>:
 40086c4:	008100b4 	movhi	r2,1026
 40086c8:	10b48304 	addi	r2,r2,-11764
 40086cc:	f800283a 	ret

040086d0 <__locale_cjk_lang>:
 40086d0:	0005883a 	mov	r2,zero
 40086d4:	f800283a 	ret

040086d8 <_localeconv_r>:
 40086d8:	008100b4 	movhi	r2,1026
 40086dc:	10b49304 	addi	r2,r2,-11700
 40086e0:	f800283a 	ret

040086e4 <setlocale>:
 40086e4:	008100b4 	movhi	r2,1026
 40086e8:	10ba3604 	addi	r2,r2,-5928
 40086ec:	280d883a 	mov	r6,r5
 40086f0:	200b883a 	mov	r5,r4
 40086f4:	11000017 	ldw	r4,0(r2)
 40086f8:	400862c1 	jmpi	400862c <_setlocale_r>

040086fc <localeconv>:
 40086fc:	008100b4 	movhi	r2,1026
 4008700:	10b49304 	addi	r2,r2,-11700
 4008704:	f800283a 	ret

04008708 <__smakebuf_r>:
 4008708:	2880030b 	ldhu	r2,12(r5)
 400870c:	10c0008c 	andi	r3,r2,2
 4008710:	1800411e 	bne	r3,zero,4008818 <__smakebuf_r+0x110>
 4008714:	deffec04 	addi	sp,sp,-80
 4008718:	dc000f15 	stw	r16,60(sp)
 400871c:	2821883a 	mov	r16,r5
 4008720:	2940038f 	ldh	r5,14(r5)
 4008724:	dc401015 	stw	r17,64(sp)
 4008728:	dfc01315 	stw	ra,76(sp)
 400872c:	dcc01215 	stw	r19,72(sp)
 4008730:	dc801115 	stw	r18,68(sp)
 4008734:	2023883a 	mov	r17,r4
 4008738:	28001c16 	blt	r5,zero,40087ac <__smakebuf_r+0xa4>
 400873c:	d80d883a 	mov	r6,sp
 4008740:	400dc980 	call	400dc98 <_fstat_r>
 4008744:	10001816 	blt	r2,zero,40087a8 <__smakebuf_r+0xa0>
 4008748:	d8800117 	ldw	r2,4(sp)
 400874c:	00e00014 	movui	r3,32768
 4008750:	10bc000c 	andi	r2,r2,61440
 4008754:	14c80020 	cmpeqi	r19,r2,8192
 4008758:	10c03726 	beq	r2,r3,4008838 <__smakebuf_r+0x130>
 400875c:	80c0030b 	ldhu	r3,12(r16)
 4008760:	18c20014 	ori	r3,r3,2048
 4008764:	80c0030d 	sth	r3,12(r16)
 4008768:	00c80004 	movi	r3,8192
 400876c:	10c0521e 	bne	r2,r3,40088b8 <__smakebuf_r+0x1b0>
 4008770:	8140038f 	ldh	r5,14(r16)
 4008774:	8809883a 	mov	r4,r17
 4008778:	400dcf40 	call	400dcf4 <_isatty_r>
 400877c:	10004c26 	beq	r2,zero,40088b0 <__smakebuf_r+0x1a8>
 4008780:	8080030b 	ldhu	r2,12(r16)
 4008784:	80c010c4 	addi	r3,r16,67
 4008788:	80c00015 	stw	r3,0(r16)
 400878c:	10800054 	ori	r2,r2,1
 4008790:	8080030d 	sth	r2,12(r16)
 4008794:	00800044 	movi	r2,1
 4008798:	80c00415 	stw	r3,16(r16)
 400879c:	80800515 	stw	r2,20(r16)
 40087a0:	04810004 	movi	r18,1024
 40087a4:	00000706 	br	40087c4 <__smakebuf_r+0xbc>
 40087a8:	8080030b 	ldhu	r2,12(r16)
 40087ac:	10c0200c 	andi	r3,r2,128
 40087b0:	18001f1e 	bne	r3,zero,4008830 <__smakebuf_r+0x128>
 40087b4:	04810004 	movi	r18,1024
 40087b8:	10820014 	ori	r2,r2,2048
 40087bc:	8080030d 	sth	r2,12(r16)
 40087c0:	0027883a 	mov	r19,zero
 40087c4:	900b883a 	mov	r5,r18
 40087c8:	8809883a 	mov	r4,r17
 40087cc:	40088c40 	call	40088c4 <_malloc_r>
 40087d0:	10002c26 	beq	r2,zero,4008884 <__smakebuf_r+0x17c>
 40087d4:	80c0030b 	ldhu	r3,12(r16)
 40087d8:	01010034 	movhi	r4,1024
 40087dc:	211e0704 	addi	r4,r4,30748
 40087e0:	89000f15 	stw	r4,60(r17)
 40087e4:	18c02014 	ori	r3,r3,128
 40087e8:	80c0030d 	sth	r3,12(r16)
 40087ec:	80800015 	stw	r2,0(r16)
 40087f0:	80800415 	stw	r2,16(r16)
 40087f4:	84800515 	stw	r18,20(r16)
 40087f8:	98001a1e 	bne	r19,zero,4008864 <__smakebuf_r+0x15c>
 40087fc:	dfc01317 	ldw	ra,76(sp)
 4008800:	dcc01217 	ldw	r19,72(sp)
 4008804:	dc801117 	ldw	r18,68(sp)
 4008808:	dc401017 	ldw	r17,64(sp)
 400880c:	dc000f17 	ldw	r16,60(sp)
 4008810:	dec01404 	addi	sp,sp,80
 4008814:	f800283a 	ret
 4008818:	288010c4 	addi	r2,r5,67
 400881c:	28800015 	stw	r2,0(r5)
 4008820:	28800415 	stw	r2,16(r5)
 4008824:	00800044 	movi	r2,1
 4008828:	28800515 	stw	r2,20(r5)
 400882c:	f800283a 	ret
 4008830:	04801004 	movi	r18,64
 4008834:	003fe006 	br	40087b8 <__alt_mem_onchip_memory2_0+0xfc0067b8>
 4008838:	81000a17 	ldw	r4,40(r16)
 400883c:	00c10074 	movhi	r3,1025
 4008840:	18eb2004 	addi	r3,r3,-21376
 4008844:	20ffc51e 	bne	r4,r3,400875c <__alt_mem_onchip_memory2_0+0xfc00675c>
 4008848:	8080030b 	ldhu	r2,12(r16)
 400884c:	04810004 	movi	r18,1024
 4008850:	84801315 	stw	r18,76(r16)
 4008854:	1484b03a 	or	r2,r2,r18
 4008858:	8080030d 	sth	r2,12(r16)
 400885c:	0027883a 	mov	r19,zero
 4008860:	003fd806 	br	40087c4 <__alt_mem_onchip_memory2_0+0xfc0067c4>
 4008864:	8140038f 	ldh	r5,14(r16)
 4008868:	8809883a 	mov	r4,r17
 400886c:	400dcf40 	call	400dcf4 <_isatty_r>
 4008870:	103fe226 	beq	r2,zero,40087fc <__alt_mem_onchip_memory2_0+0xfc0067fc>
 4008874:	8080030b 	ldhu	r2,12(r16)
 4008878:	10800054 	ori	r2,r2,1
 400887c:	8080030d 	sth	r2,12(r16)
 4008880:	003fde06 	br	40087fc <__alt_mem_onchip_memory2_0+0xfc0067fc>
 4008884:	8080030b 	ldhu	r2,12(r16)
 4008888:	10c0800c 	andi	r3,r2,512
 400888c:	183fdb1e 	bne	r3,zero,40087fc <__alt_mem_onchip_memory2_0+0xfc0067fc>
 4008890:	10800094 	ori	r2,r2,2
 4008894:	80c010c4 	addi	r3,r16,67
 4008898:	8080030d 	sth	r2,12(r16)
 400889c:	00800044 	movi	r2,1
 40088a0:	80c00015 	stw	r3,0(r16)
 40088a4:	80c00415 	stw	r3,16(r16)
 40088a8:	80800515 	stw	r2,20(r16)
 40088ac:	003fd306 	br	40087fc <__alt_mem_onchip_memory2_0+0xfc0067fc>
 40088b0:	04810004 	movi	r18,1024
 40088b4:	003fc306 	br	40087c4 <__alt_mem_onchip_memory2_0+0xfc0067c4>
 40088b8:	0027883a 	mov	r19,zero
 40088bc:	04810004 	movi	r18,1024
 40088c0:	003fc006 	br	40087c4 <__alt_mem_onchip_memory2_0+0xfc0067c4>

040088c4 <_malloc_r>:
 40088c4:	defff504 	addi	sp,sp,-44
 40088c8:	dc800315 	stw	r18,12(sp)
 40088cc:	dfc00a15 	stw	ra,40(sp)
 40088d0:	df000915 	stw	fp,36(sp)
 40088d4:	ddc00815 	stw	r23,32(sp)
 40088d8:	dd800715 	stw	r22,28(sp)
 40088dc:	dd400615 	stw	r21,24(sp)
 40088e0:	dd000515 	stw	r20,20(sp)
 40088e4:	dcc00415 	stw	r19,16(sp)
 40088e8:	dc400215 	stw	r17,8(sp)
 40088ec:	dc000115 	stw	r16,4(sp)
 40088f0:	288002c4 	addi	r2,r5,11
 40088f4:	00c00584 	movi	r3,22
 40088f8:	2025883a 	mov	r18,r4
 40088fc:	18807f2e 	bgeu	r3,r2,4008afc <_malloc_r+0x238>
 4008900:	047ffe04 	movi	r17,-8
 4008904:	1462703a 	and	r17,r2,r17
 4008908:	8800a316 	blt	r17,zero,4008b98 <_malloc_r+0x2d4>
 400890c:	8940a236 	bltu	r17,r5,4008b98 <_malloc_r+0x2d4>
 4008910:	4011ea80 	call	4011ea8 <__malloc_lock>
 4008914:	00807dc4 	movi	r2,503
 4008918:	1441e92e 	bgeu	r2,r17,40090c0 <_malloc_r+0x7fc>
 400891c:	8804d27a 	srli	r2,r17,9
 4008920:	1000a126 	beq	r2,zero,4008ba8 <_malloc_r+0x2e4>
 4008924:	00c00104 	movi	r3,4
 4008928:	18811e36 	bltu	r3,r2,4008da4 <_malloc_r+0x4e0>
 400892c:	8804d1ba 	srli	r2,r17,6
 4008930:	12000e44 	addi	r8,r2,57
 4008934:	11c00e04 	addi	r7,r2,56
 4008938:	4209883a 	add	r4,r8,r8
 400893c:	04c100b4 	movhi	r19,1026
 4008940:	2109883a 	add	r4,r4,r4
 4008944:	9cf4a104 	addi	r19,r19,-11644
 4008948:	2109883a 	add	r4,r4,r4
 400894c:	9909883a 	add	r4,r19,r4
 4008950:	24000117 	ldw	r16,4(r4)
 4008954:	213ffe04 	addi	r4,r4,-8
 4008958:	24009726 	beq	r4,r16,4008bb8 <_malloc_r+0x2f4>
 400895c:	80800117 	ldw	r2,4(r16)
 4008960:	01bfff04 	movi	r6,-4
 4008964:	014003c4 	movi	r5,15
 4008968:	1184703a 	and	r2,r2,r6
 400896c:	1447c83a 	sub	r3,r2,r17
 4008970:	28c00716 	blt	r5,r3,4008990 <_malloc_r+0xcc>
 4008974:	1800920e 	bge	r3,zero,4008bc0 <_malloc_r+0x2fc>
 4008978:	84000317 	ldw	r16,12(r16)
 400897c:	24008e26 	beq	r4,r16,4008bb8 <_malloc_r+0x2f4>
 4008980:	80800117 	ldw	r2,4(r16)
 4008984:	1184703a 	and	r2,r2,r6
 4008988:	1447c83a 	sub	r3,r2,r17
 400898c:	28fff90e 	bge	r5,r3,4008974 <__alt_mem_onchip_memory2_0+0xfc006974>
 4008990:	3809883a 	mov	r4,r7
 4008994:	018100b4 	movhi	r6,1026
 4008998:	9c000417 	ldw	r16,16(r19)
 400899c:	31b4a104 	addi	r6,r6,-11644
 40089a0:	32000204 	addi	r8,r6,8
 40089a4:	82013426 	beq	r16,r8,4008e78 <_malloc_r+0x5b4>
 40089a8:	80c00117 	ldw	r3,4(r16)
 40089ac:	00bfff04 	movi	r2,-4
 40089b0:	188e703a 	and	r7,r3,r2
 40089b4:	3c45c83a 	sub	r2,r7,r17
 40089b8:	00c003c4 	movi	r3,15
 40089bc:	18811f16 	blt	r3,r2,4008e3c <_malloc_r+0x578>
 40089c0:	32000515 	stw	r8,20(r6)
 40089c4:	32000415 	stw	r8,16(r6)
 40089c8:	10007f0e 	bge	r2,zero,4008bc8 <_malloc_r+0x304>
 40089cc:	00807fc4 	movi	r2,511
 40089d0:	11c0fd36 	bltu	r2,r7,4008dc8 <_malloc_r+0x504>
 40089d4:	3806d0fa 	srli	r3,r7,3
 40089d8:	01c00044 	movi	r7,1
 40089dc:	30800117 	ldw	r2,4(r6)
 40089e0:	19400044 	addi	r5,r3,1
 40089e4:	294b883a 	add	r5,r5,r5
 40089e8:	1807d0ba 	srai	r3,r3,2
 40089ec:	294b883a 	add	r5,r5,r5
 40089f0:	294b883a 	add	r5,r5,r5
 40089f4:	298b883a 	add	r5,r5,r6
 40089f8:	38c6983a 	sll	r3,r7,r3
 40089fc:	29c00017 	ldw	r7,0(r5)
 4008a00:	2a7ffe04 	addi	r9,r5,-8
 4008a04:	1886b03a 	or	r3,r3,r2
 4008a08:	82400315 	stw	r9,12(r16)
 4008a0c:	81c00215 	stw	r7,8(r16)
 4008a10:	30c00115 	stw	r3,4(r6)
 4008a14:	2c000015 	stw	r16,0(r5)
 4008a18:	3c000315 	stw	r16,12(r7)
 4008a1c:	2005d0ba 	srai	r2,r4,2
 4008a20:	01400044 	movi	r5,1
 4008a24:	288a983a 	sll	r5,r5,r2
 4008a28:	19406f36 	bltu	r3,r5,4008be8 <_malloc_r+0x324>
 4008a2c:	28c4703a 	and	r2,r5,r3
 4008a30:	10000a1e 	bne	r2,zero,4008a5c <_malloc_r+0x198>
 4008a34:	00bfff04 	movi	r2,-4
 4008a38:	294b883a 	add	r5,r5,r5
 4008a3c:	2088703a 	and	r4,r4,r2
 4008a40:	28c4703a 	and	r2,r5,r3
 4008a44:	21000104 	addi	r4,r4,4
 4008a48:	1000041e 	bne	r2,zero,4008a5c <_malloc_r+0x198>
 4008a4c:	294b883a 	add	r5,r5,r5
 4008a50:	28c4703a 	and	r2,r5,r3
 4008a54:	21000104 	addi	r4,r4,4
 4008a58:	103ffc26 	beq	r2,zero,4008a4c <__alt_mem_onchip_memory2_0+0xfc006a4c>
 4008a5c:	02bfff04 	movi	r10,-4
 4008a60:	024003c4 	movi	r9,15
 4008a64:	21800044 	addi	r6,r4,1
 4008a68:	318d883a 	add	r6,r6,r6
 4008a6c:	318d883a 	add	r6,r6,r6
 4008a70:	318d883a 	add	r6,r6,r6
 4008a74:	998d883a 	add	r6,r19,r6
 4008a78:	333ffe04 	addi	r12,r6,-8
 4008a7c:	2017883a 	mov	r11,r4
 4008a80:	31800104 	addi	r6,r6,4
 4008a84:	34000017 	ldw	r16,0(r6)
 4008a88:	31fffd04 	addi	r7,r6,-12
 4008a8c:	81c0041e 	bne	r16,r7,4008aa0 <_malloc_r+0x1dc>
 4008a90:	0000fb06 	br	4008e80 <_malloc_r+0x5bc>
 4008a94:	1801030e 	bge	r3,zero,4008ea4 <_malloc_r+0x5e0>
 4008a98:	84000317 	ldw	r16,12(r16)
 4008a9c:	81c0f826 	beq	r16,r7,4008e80 <_malloc_r+0x5bc>
 4008aa0:	80800117 	ldw	r2,4(r16)
 4008aa4:	1284703a 	and	r2,r2,r10
 4008aa8:	1447c83a 	sub	r3,r2,r17
 4008aac:	48fff90e 	bge	r9,r3,4008a94 <__alt_mem_onchip_memory2_0+0xfc006a94>
 4008ab0:	80800317 	ldw	r2,12(r16)
 4008ab4:	81000217 	ldw	r4,8(r16)
 4008ab8:	89400054 	ori	r5,r17,1
 4008abc:	81400115 	stw	r5,4(r16)
 4008ac0:	20800315 	stw	r2,12(r4)
 4008ac4:	11000215 	stw	r4,8(r2)
 4008ac8:	8463883a 	add	r17,r16,r17
 4008acc:	9c400515 	stw	r17,20(r19)
 4008ad0:	9c400415 	stw	r17,16(r19)
 4008ad4:	18800054 	ori	r2,r3,1
 4008ad8:	88800115 	stw	r2,4(r17)
 4008adc:	8a000315 	stw	r8,12(r17)
 4008ae0:	8a000215 	stw	r8,8(r17)
 4008ae4:	88e3883a 	add	r17,r17,r3
 4008ae8:	88c00015 	stw	r3,0(r17)
 4008aec:	9009883a 	mov	r4,r18
 4008af0:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008af4:	80800204 	addi	r2,r16,8
 4008af8:	00001b06 	br	4008b68 <_malloc_r+0x2a4>
 4008afc:	04400404 	movi	r17,16
 4008b00:	89402536 	bltu	r17,r5,4008b98 <_malloc_r+0x2d4>
 4008b04:	4011ea80 	call	4011ea8 <__malloc_lock>
 4008b08:	00800184 	movi	r2,6
 4008b0c:	01000084 	movi	r4,2
 4008b10:	04c100b4 	movhi	r19,1026
 4008b14:	1085883a 	add	r2,r2,r2
 4008b18:	9cf4a104 	addi	r19,r19,-11644
 4008b1c:	1085883a 	add	r2,r2,r2
 4008b20:	9885883a 	add	r2,r19,r2
 4008b24:	14000117 	ldw	r16,4(r2)
 4008b28:	10fffe04 	addi	r3,r2,-8
 4008b2c:	80c0d926 	beq	r16,r3,4008e94 <_malloc_r+0x5d0>
 4008b30:	80c00117 	ldw	r3,4(r16)
 4008b34:	81000317 	ldw	r4,12(r16)
 4008b38:	00bfff04 	movi	r2,-4
 4008b3c:	1884703a 	and	r2,r3,r2
 4008b40:	81400217 	ldw	r5,8(r16)
 4008b44:	8085883a 	add	r2,r16,r2
 4008b48:	10c00117 	ldw	r3,4(r2)
 4008b4c:	29000315 	stw	r4,12(r5)
 4008b50:	21400215 	stw	r5,8(r4)
 4008b54:	18c00054 	ori	r3,r3,1
 4008b58:	10c00115 	stw	r3,4(r2)
 4008b5c:	9009883a 	mov	r4,r18
 4008b60:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008b64:	80800204 	addi	r2,r16,8
 4008b68:	dfc00a17 	ldw	ra,40(sp)
 4008b6c:	df000917 	ldw	fp,36(sp)
 4008b70:	ddc00817 	ldw	r23,32(sp)
 4008b74:	dd800717 	ldw	r22,28(sp)
 4008b78:	dd400617 	ldw	r21,24(sp)
 4008b7c:	dd000517 	ldw	r20,20(sp)
 4008b80:	dcc00417 	ldw	r19,16(sp)
 4008b84:	dc800317 	ldw	r18,12(sp)
 4008b88:	dc400217 	ldw	r17,8(sp)
 4008b8c:	dc000117 	ldw	r16,4(sp)
 4008b90:	dec00b04 	addi	sp,sp,44
 4008b94:	f800283a 	ret
 4008b98:	00800304 	movi	r2,12
 4008b9c:	90800015 	stw	r2,0(r18)
 4008ba0:	0005883a 	mov	r2,zero
 4008ba4:	003ff006 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008ba8:	01002004 	movi	r4,128
 4008bac:	02001004 	movi	r8,64
 4008bb0:	01c00fc4 	movi	r7,63
 4008bb4:	003f6106 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 4008bb8:	4009883a 	mov	r4,r8
 4008bbc:	003f7506 	br	4008994 <__alt_mem_onchip_memory2_0+0xfc006994>
 4008bc0:	81000317 	ldw	r4,12(r16)
 4008bc4:	003fde06 	br	4008b40 <__alt_mem_onchip_memory2_0+0xfc006b40>
 4008bc8:	81c5883a 	add	r2,r16,r7
 4008bcc:	11400117 	ldw	r5,4(r2)
 4008bd0:	9009883a 	mov	r4,r18
 4008bd4:	29400054 	ori	r5,r5,1
 4008bd8:	11400115 	stw	r5,4(r2)
 4008bdc:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008be0:	80800204 	addi	r2,r16,8
 4008be4:	003fe006 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008be8:	9c000217 	ldw	r16,8(r19)
 4008bec:	00bfff04 	movi	r2,-4
 4008bf0:	85800117 	ldw	r22,4(r16)
 4008bf4:	b0ac703a 	and	r22,r22,r2
 4008bf8:	b4400336 	bltu	r22,r17,4008c08 <_malloc_r+0x344>
 4008bfc:	b445c83a 	sub	r2,r22,r17
 4008c00:	00c003c4 	movi	r3,15
 4008c04:	18805d16 	blt	r3,r2,4008d7c <_malloc_r+0x4b8>
 4008c08:	05c100b4 	movhi	r23,1026
 4008c0c:	008100b4 	movhi	r2,1026
 4008c10:	10816104 	addi	r2,r2,1412
 4008c14:	bdfa3804 	addi	r23,r23,-5920
 4008c18:	15400017 	ldw	r21,0(r2)
 4008c1c:	b8c00017 	ldw	r3,0(r23)
 4008c20:	00bfffc4 	movi	r2,-1
 4008c24:	858d883a 	add	r6,r16,r22
 4008c28:	8d6b883a 	add	r21,r17,r21
 4008c2c:	1880ea26 	beq	r3,r2,4008fd8 <_malloc_r+0x714>
 4008c30:	ad4403c4 	addi	r21,r21,4111
 4008c34:	00bc0004 	movi	r2,-4096
 4008c38:	a8aa703a 	and	r21,r21,r2
 4008c3c:	a80b883a 	mov	r5,r21
 4008c40:	9009883a 	mov	r4,r18
 4008c44:	d9800015 	stw	r6,0(sp)
 4008c48:	400ab540 	call	400ab54 <_sbrk_r>
 4008c4c:	1029883a 	mov	r20,r2
 4008c50:	00bfffc4 	movi	r2,-1
 4008c54:	d9800017 	ldw	r6,0(sp)
 4008c58:	a080e826 	beq	r20,r2,4008ffc <_malloc_r+0x738>
 4008c5c:	a180a636 	bltu	r20,r6,4008ef8 <_malloc_r+0x634>
 4008c60:	070100b4 	movhi	fp,1026
 4008c64:	e7018304 	addi	fp,fp,1548
 4008c68:	e0800017 	ldw	r2,0(fp)
 4008c6c:	a887883a 	add	r3,r21,r2
 4008c70:	e0c00015 	stw	r3,0(fp)
 4008c74:	3500e626 	beq	r6,r20,4009010 <_malloc_r+0x74c>
 4008c78:	b9000017 	ldw	r4,0(r23)
 4008c7c:	00bfffc4 	movi	r2,-1
 4008c80:	2080ee26 	beq	r4,r2,400903c <_malloc_r+0x778>
 4008c84:	a185c83a 	sub	r2,r20,r6
 4008c88:	10c5883a 	add	r2,r2,r3
 4008c8c:	e0800015 	stw	r2,0(fp)
 4008c90:	a0c001cc 	andi	r3,r20,7
 4008c94:	1800bc26 	beq	r3,zero,4008f88 <_malloc_r+0x6c4>
 4008c98:	a0e9c83a 	sub	r20,r20,r3
 4008c9c:	00840204 	movi	r2,4104
 4008ca0:	a5000204 	addi	r20,r20,8
 4008ca4:	10c7c83a 	sub	r3,r2,r3
 4008ca8:	a545883a 	add	r2,r20,r21
 4008cac:	1083ffcc 	andi	r2,r2,4095
 4008cb0:	18abc83a 	sub	r21,r3,r2
 4008cb4:	a80b883a 	mov	r5,r21
 4008cb8:	9009883a 	mov	r4,r18
 4008cbc:	400ab540 	call	400ab54 <_sbrk_r>
 4008cc0:	00ffffc4 	movi	r3,-1
 4008cc4:	10c0e126 	beq	r2,r3,400904c <_malloc_r+0x788>
 4008cc8:	1505c83a 	sub	r2,r2,r20
 4008ccc:	1545883a 	add	r2,r2,r21
 4008cd0:	10800054 	ori	r2,r2,1
 4008cd4:	e0c00017 	ldw	r3,0(fp)
 4008cd8:	9d000215 	stw	r20,8(r19)
 4008cdc:	a0800115 	stw	r2,4(r20)
 4008ce0:	a8c7883a 	add	r3,r21,r3
 4008ce4:	e0c00015 	stw	r3,0(fp)
 4008ce8:	84c00e26 	beq	r16,r19,4008d24 <_malloc_r+0x460>
 4008cec:	018003c4 	movi	r6,15
 4008cf0:	3580a72e 	bgeu	r6,r22,4008f90 <_malloc_r+0x6cc>
 4008cf4:	81400117 	ldw	r5,4(r16)
 4008cf8:	013ffe04 	movi	r4,-8
 4008cfc:	b0bffd04 	addi	r2,r22,-12
 4008d00:	1104703a 	and	r2,r2,r4
 4008d04:	2900004c 	andi	r4,r5,1
 4008d08:	2088b03a 	or	r4,r4,r2
 4008d0c:	81000115 	stw	r4,4(r16)
 4008d10:	01400144 	movi	r5,5
 4008d14:	8089883a 	add	r4,r16,r2
 4008d18:	21400115 	stw	r5,4(r4)
 4008d1c:	21400215 	stw	r5,8(r4)
 4008d20:	3080cd36 	bltu	r6,r2,4009058 <_malloc_r+0x794>
 4008d24:	008100b4 	movhi	r2,1026
 4008d28:	10816004 	addi	r2,r2,1408
 4008d2c:	11000017 	ldw	r4,0(r2)
 4008d30:	20c0012e 	bgeu	r4,r3,4008d38 <_malloc_r+0x474>
 4008d34:	10c00015 	stw	r3,0(r2)
 4008d38:	008100b4 	movhi	r2,1026
 4008d3c:	10815f04 	addi	r2,r2,1404
 4008d40:	11000017 	ldw	r4,0(r2)
 4008d44:	9c000217 	ldw	r16,8(r19)
 4008d48:	20c0012e 	bgeu	r4,r3,4008d50 <_malloc_r+0x48c>
 4008d4c:	10c00015 	stw	r3,0(r2)
 4008d50:	80c00117 	ldw	r3,4(r16)
 4008d54:	00bfff04 	movi	r2,-4
 4008d58:	1886703a 	and	r3,r3,r2
 4008d5c:	1c45c83a 	sub	r2,r3,r17
 4008d60:	1c400236 	bltu	r3,r17,4008d6c <_malloc_r+0x4a8>
 4008d64:	00c003c4 	movi	r3,15
 4008d68:	18800416 	blt	r3,r2,4008d7c <_malloc_r+0x4b8>
 4008d6c:	9009883a 	mov	r4,r18
 4008d70:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008d74:	0005883a 	mov	r2,zero
 4008d78:	003f7b06 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008d7c:	88c00054 	ori	r3,r17,1
 4008d80:	80c00115 	stw	r3,4(r16)
 4008d84:	8463883a 	add	r17,r16,r17
 4008d88:	10800054 	ori	r2,r2,1
 4008d8c:	9c400215 	stw	r17,8(r19)
 4008d90:	88800115 	stw	r2,4(r17)
 4008d94:	9009883a 	mov	r4,r18
 4008d98:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008d9c:	80800204 	addi	r2,r16,8
 4008da0:	003f7106 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008da4:	00c00504 	movi	r3,20
 4008da8:	18804a2e 	bgeu	r3,r2,4008ed4 <_malloc_r+0x610>
 4008dac:	00c01504 	movi	r3,84
 4008db0:	18806e36 	bltu	r3,r2,4008f6c <_malloc_r+0x6a8>
 4008db4:	8804d33a 	srli	r2,r17,12
 4008db8:	12001bc4 	addi	r8,r2,111
 4008dbc:	11c01b84 	addi	r7,r2,110
 4008dc0:	4209883a 	add	r4,r8,r8
 4008dc4:	003edd06 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 4008dc8:	3804d27a 	srli	r2,r7,9
 4008dcc:	00c00104 	movi	r3,4
 4008dd0:	1880442e 	bgeu	r3,r2,4008ee4 <_malloc_r+0x620>
 4008dd4:	00c00504 	movi	r3,20
 4008dd8:	18808136 	bltu	r3,r2,4008fe0 <_malloc_r+0x71c>
 4008ddc:	11401704 	addi	r5,r2,92
 4008de0:	10c016c4 	addi	r3,r2,91
 4008de4:	294b883a 	add	r5,r5,r5
 4008de8:	294b883a 	add	r5,r5,r5
 4008dec:	294b883a 	add	r5,r5,r5
 4008df0:	994b883a 	add	r5,r19,r5
 4008df4:	28800017 	ldw	r2,0(r5)
 4008df8:	018100b4 	movhi	r6,1026
 4008dfc:	297ffe04 	addi	r5,r5,-8
 4008e00:	31b4a104 	addi	r6,r6,-11644
 4008e04:	28806526 	beq	r5,r2,4008f9c <_malloc_r+0x6d8>
 4008e08:	01bfff04 	movi	r6,-4
 4008e0c:	10c00117 	ldw	r3,4(r2)
 4008e10:	1986703a 	and	r3,r3,r6
 4008e14:	38c0022e 	bgeu	r7,r3,4008e20 <_malloc_r+0x55c>
 4008e18:	10800217 	ldw	r2,8(r2)
 4008e1c:	28bffb1e 	bne	r5,r2,4008e0c <__alt_mem_onchip_memory2_0+0xfc006e0c>
 4008e20:	11400317 	ldw	r5,12(r2)
 4008e24:	98c00117 	ldw	r3,4(r19)
 4008e28:	81400315 	stw	r5,12(r16)
 4008e2c:	80800215 	stw	r2,8(r16)
 4008e30:	2c000215 	stw	r16,8(r5)
 4008e34:	14000315 	stw	r16,12(r2)
 4008e38:	003ef806 	br	4008a1c <__alt_mem_onchip_memory2_0+0xfc006a1c>
 4008e3c:	88c00054 	ori	r3,r17,1
 4008e40:	80c00115 	stw	r3,4(r16)
 4008e44:	8463883a 	add	r17,r16,r17
 4008e48:	34400515 	stw	r17,20(r6)
 4008e4c:	34400415 	stw	r17,16(r6)
 4008e50:	10c00054 	ori	r3,r2,1
 4008e54:	8a000315 	stw	r8,12(r17)
 4008e58:	8a000215 	stw	r8,8(r17)
 4008e5c:	88c00115 	stw	r3,4(r17)
 4008e60:	88a3883a 	add	r17,r17,r2
 4008e64:	88800015 	stw	r2,0(r17)
 4008e68:	9009883a 	mov	r4,r18
 4008e6c:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008e70:	80800204 	addi	r2,r16,8
 4008e74:	003f3c06 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008e78:	30c00117 	ldw	r3,4(r6)
 4008e7c:	003ee706 	br	4008a1c <__alt_mem_onchip_memory2_0+0xfc006a1c>
 4008e80:	5ac00044 	addi	r11,r11,1
 4008e84:	588000cc 	andi	r2,r11,3
 4008e88:	31800204 	addi	r6,r6,8
 4008e8c:	103efd1e 	bne	r2,zero,4008a84 <__alt_mem_onchip_memory2_0+0xfc006a84>
 4008e90:	00002406 	br	4008f24 <_malloc_r+0x660>
 4008e94:	14000317 	ldw	r16,12(r2)
 4008e98:	143f251e 	bne	r2,r16,4008b30 <__alt_mem_onchip_memory2_0+0xfc006b30>
 4008e9c:	21000084 	addi	r4,r4,2
 4008ea0:	003ebc06 	br	4008994 <__alt_mem_onchip_memory2_0+0xfc006994>
 4008ea4:	8085883a 	add	r2,r16,r2
 4008ea8:	10c00117 	ldw	r3,4(r2)
 4008eac:	81000317 	ldw	r4,12(r16)
 4008eb0:	81400217 	ldw	r5,8(r16)
 4008eb4:	18c00054 	ori	r3,r3,1
 4008eb8:	10c00115 	stw	r3,4(r2)
 4008ebc:	29000315 	stw	r4,12(r5)
 4008ec0:	21400215 	stw	r5,8(r4)
 4008ec4:	9009883a 	mov	r4,r18
 4008ec8:	4011fc80 	call	4011fc8 <__malloc_unlock>
 4008ecc:	80800204 	addi	r2,r16,8
 4008ed0:	003f2506 	br	4008b68 <__alt_mem_onchip_memory2_0+0xfc006b68>
 4008ed4:	12001704 	addi	r8,r2,92
 4008ed8:	11c016c4 	addi	r7,r2,91
 4008edc:	4209883a 	add	r4,r8,r8
 4008ee0:	003e9606 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 4008ee4:	3804d1ba 	srli	r2,r7,6
 4008ee8:	11400e44 	addi	r5,r2,57
 4008eec:	10c00e04 	addi	r3,r2,56
 4008ef0:	294b883a 	add	r5,r5,r5
 4008ef4:	003fbc06 	br	4008de8 <__alt_mem_onchip_memory2_0+0xfc006de8>
 4008ef8:	84ff5926 	beq	r16,r19,4008c60 <__alt_mem_onchip_memory2_0+0xfc006c60>
 4008efc:	008100b4 	movhi	r2,1026
 4008f00:	10b4a104 	addi	r2,r2,-11644
 4008f04:	14000217 	ldw	r16,8(r2)
 4008f08:	00bfff04 	movi	r2,-4
 4008f0c:	80c00117 	ldw	r3,4(r16)
 4008f10:	1886703a 	and	r3,r3,r2
 4008f14:	003f9106 	br	4008d5c <__alt_mem_onchip_memory2_0+0xfc006d5c>
 4008f18:	60800217 	ldw	r2,8(r12)
 4008f1c:	213fffc4 	addi	r4,r4,-1
 4008f20:	1300651e 	bne	r2,r12,40090b8 <_malloc_r+0x7f4>
 4008f24:	208000cc 	andi	r2,r4,3
 4008f28:	633ffe04 	addi	r12,r12,-8
 4008f2c:	103ffa1e 	bne	r2,zero,4008f18 <__alt_mem_onchip_memory2_0+0xfc006f18>
 4008f30:	98800117 	ldw	r2,4(r19)
 4008f34:	0146303a 	nor	r3,zero,r5
 4008f38:	1884703a 	and	r2,r3,r2
 4008f3c:	98800115 	stw	r2,4(r19)
 4008f40:	294b883a 	add	r5,r5,r5
 4008f44:	117f2836 	bltu	r2,r5,4008be8 <__alt_mem_onchip_memory2_0+0xfc006be8>
 4008f48:	283f2726 	beq	r5,zero,4008be8 <__alt_mem_onchip_memory2_0+0xfc006be8>
 4008f4c:	2886703a 	and	r3,r5,r2
 4008f50:	5809883a 	mov	r4,r11
 4008f54:	183ec31e 	bne	r3,zero,4008a64 <__alt_mem_onchip_memory2_0+0xfc006a64>
 4008f58:	294b883a 	add	r5,r5,r5
 4008f5c:	2886703a 	and	r3,r5,r2
 4008f60:	21000104 	addi	r4,r4,4
 4008f64:	183ffc26 	beq	r3,zero,4008f58 <__alt_mem_onchip_memory2_0+0xfc006f58>
 4008f68:	003ebe06 	br	4008a64 <__alt_mem_onchip_memory2_0+0xfc006a64>
 4008f6c:	00c05504 	movi	r3,340
 4008f70:	18801236 	bltu	r3,r2,4008fbc <_malloc_r+0x6f8>
 4008f74:	8804d3fa 	srli	r2,r17,15
 4008f78:	12001e04 	addi	r8,r2,120
 4008f7c:	11c01dc4 	addi	r7,r2,119
 4008f80:	4209883a 	add	r4,r8,r8
 4008f84:	003e6d06 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 4008f88:	00c40004 	movi	r3,4096
 4008f8c:	003f4606 	br	4008ca8 <__alt_mem_onchip_memory2_0+0xfc006ca8>
 4008f90:	00800044 	movi	r2,1
 4008f94:	a0800115 	stw	r2,4(r20)
 4008f98:	003f7406 	br	4008d6c <__alt_mem_onchip_memory2_0+0xfc006d6c>
 4008f9c:	1805d0ba 	srai	r2,r3,2
 4008fa0:	01c00044 	movi	r7,1
 4008fa4:	30c00117 	ldw	r3,4(r6)
 4008fa8:	388e983a 	sll	r7,r7,r2
 4008fac:	2805883a 	mov	r2,r5
 4008fb0:	38c6b03a 	or	r3,r7,r3
 4008fb4:	30c00115 	stw	r3,4(r6)
 4008fb8:	003f9b06 	br	4008e28 <__alt_mem_onchip_memory2_0+0xfc006e28>
 4008fbc:	00c15504 	movi	r3,1364
 4008fc0:	18801a36 	bltu	r3,r2,400902c <_malloc_r+0x768>
 4008fc4:	8804d4ba 	srli	r2,r17,18
 4008fc8:	12001f44 	addi	r8,r2,125
 4008fcc:	11c01f04 	addi	r7,r2,124
 4008fd0:	4209883a 	add	r4,r8,r8
 4008fd4:	003e5906 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 4008fd8:	ad400404 	addi	r21,r21,16
 4008fdc:	003f1706 	br	4008c3c <__alt_mem_onchip_memory2_0+0xfc006c3c>
 4008fe0:	00c01504 	movi	r3,84
 4008fe4:	18802336 	bltu	r3,r2,4009074 <_malloc_r+0x7b0>
 4008fe8:	3804d33a 	srli	r2,r7,12
 4008fec:	11401bc4 	addi	r5,r2,111
 4008ff0:	10c01b84 	addi	r3,r2,110
 4008ff4:	294b883a 	add	r5,r5,r5
 4008ff8:	003f7b06 	br	4008de8 <__alt_mem_onchip_memory2_0+0xfc006de8>
 4008ffc:	9c000217 	ldw	r16,8(r19)
 4009000:	00bfff04 	movi	r2,-4
 4009004:	80c00117 	ldw	r3,4(r16)
 4009008:	1886703a 	and	r3,r3,r2
 400900c:	003f5306 	br	4008d5c <__alt_mem_onchip_memory2_0+0xfc006d5c>
 4009010:	3083ffcc 	andi	r2,r6,4095
 4009014:	103f181e 	bne	r2,zero,4008c78 <__alt_mem_onchip_memory2_0+0xfc006c78>
 4009018:	99000217 	ldw	r4,8(r19)
 400901c:	b545883a 	add	r2,r22,r21
 4009020:	10800054 	ori	r2,r2,1
 4009024:	20800115 	stw	r2,4(r4)
 4009028:	003f3e06 	br	4008d24 <__alt_mem_onchip_memory2_0+0xfc006d24>
 400902c:	01003f84 	movi	r4,254
 4009030:	02001fc4 	movi	r8,127
 4009034:	01c01f84 	movi	r7,126
 4009038:	003e4006 	br	400893c <__alt_mem_onchip_memory2_0+0xfc00693c>
 400903c:	008100b4 	movhi	r2,1026
 4009040:	10ba3804 	addi	r2,r2,-5920
 4009044:	15000015 	stw	r20,0(r2)
 4009048:	003f1106 	br	4008c90 <__alt_mem_onchip_memory2_0+0xfc006c90>
 400904c:	00800044 	movi	r2,1
 4009050:	002b883a 	mov	r21,zero
 4009054:	003f1f06 	br	4008cd4 <__alt_mem_onchip_memory2_0+0xfc006cd4>
 4009058:	81400204 	addi	r5,r16,8
 400905c:	9009883a 	mov	r4,r18
 4009060:	4007cd80 	call	4007cd8 <_free_r>
 4009064:	008100b4 	movhi	r2,1026
 4009068:	10818304 	addi	r2,r2,1548
 400906c:	10c00017 	ldw	r3,0(r2)
 4009070:	003f2c06 	br	4008d24 <__alt_mem_onchip_memory2_0+0xfc006d24>
 4009074:	00c05504 	movi	r3,340
 4009078:	18800536 	bltu	r3,r2,4009090 <_malloc_r+0x7cc>
 400907c:	3804d3fa 	srli	r2,r7,15
 4009080:	11401e04 	addi	r5,r2,120
 4009084:	10c01dc4 	addi	r3,r2,119
 4009088:	294b883a 	add	r5,r5,r5
 400908c:	003f5606 	br	4008de8 <__alt_mem_onchip_memory2_0+0xfc006de8>
 4009090:	00c15504 	movi	r3,1364
 4009094:	18800536 	bltu	r3,r2,40090ac <_malloc_r+0x7e8>
 4009098:	3804d4ba 	srli	r2,r7,18
 400909c:	11401f44 	addi	r5,r2,125
 40090a0:	10c01f04 	addi	r3,r2,124
 40090a4:	294b883a 	add	r5,r5,r5
 40090a8:	003f4f06 	br	4008de8 <__alt_mem_onchip_memory2_0+0xfc006de8>
 40090ac:	01403f84 	movi	r5,254
 40090b0:	00c01f84 	movi	r3,126
 40090b4:	003f4c06 	br	4008de8 <__alt_mem_onchip_memory2_0+0xfc006de8>
 40090b8:	98800117 	ldw	r2,4(r19)
 40090bc:	003fa006 	br	4008f40 <__alt_mem_onchip_memory2_0+0xfc006f40>
 40090c0:	8808d0fa 	srli	r4,r17,3
 40090c4:	20800044 	addi	r2,r4,1
 40090c8:	1085883a 	add	r2,r2,r2
 40090cc:	003e9006 	br	4008b10 <__alt_mem_onchip_memory2_0+0xfc006b10>

040090d0 <memchr>:
 40090d0:	208000cc 	andi	r2,r4,3
 40090d4:	280f883a 	mov	r7,r5
 40090d8:	10003426 	beq	r2,zero,40091ac <memchr+0xdc>
 40090dc:	30bfffc4 	addi	r2,r6,-1
 40090e0:	30001a26 	beq	r6,zero,400914c <memchr+0x7c>
 40090e4:	20c00003 	ldbu	r3,0(r4)
 40090e8:	29803fcc 	andi	r6,r5,255
 40090ec:	30c0051e 	bne	r6,r3,4009104 <memchr+0x34>
 40090f0:	00001806 	br	4009154 <memchr+0x84>
 40090f4:	10001526 	beq	r2,zero,400914c <memchr+0x7c>
 40090f8:	20c00003 	ldbu	r3,0(r4)
 40090fc:	10bfffc4 	addi	r2,r2,-1
 4009100:	30c01426 	beq	r6,r3,4009154 <memchr+0x84>
 4009104:	21000044 	addi	r4,r4,1
 4009108:	20c000cc 	andi	r3,r4,3
 400910c:	183ff91e 	bne	r3,zero,40090f4 <__alt_mem_onchip_memory2_0+0xfc0070f4>
 4009110:	020000c4 	movi	r8,3
 4009114:	40801136 	bltu	r8,r2,400915c <memchr+0x8c>
 4009118:	10000c26 	beq	r2,zero,400914c <memchr+0x7c>
 400911c:	20c00003 	ldbu	r3,0(r4)
 4009120:	29403fcc 	andi	r5,r5,255
 4009124:	28c00b26 	beq	r5,r3,4009154 <memchr+0x84>
 4009128:	20c00044 	addi	r3,r4,1
 400912c:	39803fcc 	andi	r6,r7,255
 4009130:	2089883a 	add	r4,r4,r2
 4009134:	00000306 	br	4009144 <memchr+0x74>
 4009138:	18c00044 	addi	r3,r3,1
 400913c:	197fffc3 	ldbu	r5,-1(r3)
 4009140:	31400526 	beq	r6,r5,4009158 <memchr+0x88>
 4009144:	1805883a 	mov	r2,r3
 4009148:	20fffb1e 	bne	r4,r3,4009138 <__alt_mem_onchip_memory2_0+0xfc007138>
 400914c:	0005883a 	mov	r2,zero
 4009150:	f800283a 	ret
 4009154:	2005883a 	mov	r2,r4
 4009158:	f800283a 	ret
 400915c:	28c03fcc 	andi	r3,r5,255
 4009160:	1812923a 	slli	r9,r3,8
 4009164:	02ffbff4 	movhi	r11,65279
 4009168:	02a02074 	movhi	r10,32897
 400916c:	48d2b03a 	or	r9,r9,r3
 4009170:	4806943a 	slli	r3,r9,16
 4009174:	5affbfc4 	addi	r11,r11,-257
 4009178:	52a02004 	addi	r10,r10,-32640
 400917c:	48d2b03a 	or	r9,r9,r3
 4009180:	20c00017 	ldw	r3,0(r4)
 4009184:	48c6f03a 	xor	r3,r9,r3
 4009188:	1acd883a 	add	r6,r3,r11
 400918c:	00c6303a 	nor	r3,zero,r3
 4009190:	30c6703a 	and	r3,r6,r3
 4009194:	1a86703a 	and	r3,r3,r10
 4009198:	183fe01e 	bne	r3,zero,400911c <__alt_mem_onchip_memory2_0+0xfc00711c>
 400919c:	10bfff04 	addi	r2,r2,-4
 40091a0:	21000104 	addi	r4,r4,4
 40091a4:	40bff636 	bltu	r8,r2,4009180 <__alt_mem_onchip_memory2_0+0xfc007180>
 40091a8:	003fdb06 	br	4009118 <__alt_mem_onchip_memory2_0+0xfc007118>
 40091ac:	3005883a 	mov	r2,r6
 40091b0:	003fd706 	br	4009110 <__alt_mem_onchip_memory2_0+0xfc007110>

040091b4 <memcpy>:
 40091b4:	defffd04 	addi	sp,sp,-12
 40091b8:	dfc00215 	stw	ra,8(sp)
 40091bc:	dc400115 	stw	r17,4(sp)
 40091c0:	dc000015 	stw	r16,0(sp)
 40091c4:	00c003c4 	movi	r3,15
 40091c8:	2005883a 	mov	r2,r4
 40091cc:	1980452e 	bgeu	r3,r6,40092e4 <memcpy+0x130>
 40091d0:	2906b03a 	or	r3,r5,r4
 40091d4:	18c000cc 	andi	r3,r3,3
 40091d8:	1800441e 	bne	r3,zero,40092ec <memcpy+0x138>
 40091dc:	347ffc04 	addi	r17,r6,-16
 40091e0:	8822d13a 	srli	r17,r17,4
 40091e4:	28c00104 	addi	r3,r5,4
 40091e8:	23400104 	addi	r13,r4,4
 40091ec:	8820913a 	slli	r16,r17,4
 40091f0:	2b000204 	addi	r12,r5,8
 40091f4:	22c00204 	addi	r11,r4,8
 40091f8:	84000504 	addi	r16,r16,20
 40091fc:	2a800304 	addi	r10,r5,12
 4009200:	22400304 	addi	r9,r4,12
 4009204:	2c21883a 	add	r16,r5,r16
 4009208:	2811883a 	mov	r8,r5
 400920c:	200f883a 	mov	r7,r4
 4009210:	41000017 	ldw	r4,0(r8)
 4009214:	1fc00017 	ldw	ra,0(r3)
 4009218:	63c00017 	ldw	r15,0(r12)
 400921c:	39000015 	stw	r4,0(r7)
 4009220:	53800017 	ldw	r14,0(r10)
 4009224:	6fc00015 	stw	ra,0(r13)
 4009228:	5bc00015 	stw	r15,0(r11)
 400922c:	4b800015 	stw	r14,0(r9)
 4009230:	18c00404 	addi	r3,r3,16
 4009234:	39c00404 	addi	r7,r7,16
 4009238:	42000404 	addi	r8,r8,16
 400923c:	6b400404 	addi	r13,r13,16
 4009240:	63000404 	addi	r12,r12,16
 4009244:	5ac00404 	addi	r11,r11,16
 4009248:	52800404 	addi	r10,r10,16
 400924c:	4a400404 	addi	r9,r9,16
 4009250:	1c3fef1e 	bne	r3,r16,4009210 <__alt_mem_onchip_memory2_0+0xfc007210>
 4009254:	89c00044 	addi	r7,r17,1
 4009258:	380e913a 	slli	r7,r7,4
 400925c:	310003cc 	andi	r4,r6,15
 4009260:	02c000c4 	movi	r11,3
 4009264:	11c7883a 	add	r3,r2,r7
 4009268:	29cb883a 	add	r5,r5,r7
 400926c:	5900212e 	bgeu	r11,r4,40092f4 <memcpy+0x140>
 4009270:	1813883a 	mov	r9,r3
 4009274:	2811883a 	mov	r8,r5
 4009278:	200f883a 	mov	r7,r4
 400927c:	42800017 	ldw	r10,0(r8)
 4009280:	4a400104 	addi	r9,r9,4
 4009284:	39ffff04 	addi	r7,r7,-4
 4009288:	4abfff15 	stw	r10,-4(r9)
 400928c:	42000104 	addi	r8,r8,4
 4009290:	59fffa36 	bltu	r11,r7,400927c <__alt_mem_onchip_memory2_0+0xfc00727c>
 4009294:	213fff04 	addi	r4,r4,-4
 4009298:	2008d0ba 	srli	r4,r4,2
 400929c:	318000cc 	andi	r6,r6,3
 40092a0:	21000044 	addi	r4,r4,1
 40092a4:	2109883a 	add	r4,r4,r4
 40092a8:	2109883a 	add	r4,r4,r4
 40092ac:	1907883a 	add	r3,r3,r4
 40092b0:	290b883a 	add	r5,r5,r4
 40092b4:	30000626 	beq	r6,zero,40092d0 <memcpy+0x11c>
 40092b8:	198d883a 	add	r6,r3,r6
 40092bc:	29c00003 	ldbu	r7,0(r5)
 40092c0:	18c00044 	addi	r3,r3,1
 40092c4:	29400044 	addi	r5,r5,1
 40092c8:	19ffffc5 	stb	r7,-1(r3)
 40092cc:	19bffb1e 	bne	r3,r6,40092bc <__alt_mem_onchip_memory2_0+0xfc0072bc>
 40092d0:	dfc00217 	ldw	ra,8(sp)
 40092d4:	dc400117 	ldw	r17,4(sp)
 40092d8:	dc000017 	ldw	r16,0(sp)
 40092dc:	dec00304 	addi	sp,sp,12
 40092e0:	f800283a 	ret
 40092e4:	2007883a 	mov	r3,r4
 40092e8:	003ff206 	br	40092b4 <__alt_mem_onchip_memory2_0+0xfc0072b4>
 40092ec:	2007883a 	mov	r3,r4
 40092f0:	003ff106 	br	40092b8 <__alt_mem_onchip_memory2_0+0xfc0072b8>
 40092f4:	200d883a 	mov	r6,r4
 40092f8:	003fee06 	br	40092b4 <__alt_mem_onchip_memory2_0+0xfc0072b4>

040092fc <memmove>:
 40092fc:	2005883a 	mov	r2,r4
 4009300:	29000b2e 	bgeu	r5,r4,4009330 <memmove+0x34>
 4009304:	298f883a 	add	r7,r5,r6
 4009308:	21c0092e 	bgeu	r4,r7,4009330 <memmove+0x34>
 400930c:	2187883a 	add	r3,r4,r6
 4009310:	198bc83a 	sub	r5,r3,r6
 4009314:	30004826 	beq	r6,zero,4009438 <memmove+0x13c>
 4009318:	39ffffc4 	addi	r7,r7,-1
 400931c:	39000003 	ldbu	r4,0(r7)
 4009320:	18ffffc4 	addi	r3,r3,-1
 4009324:	19000005 	stb	r4,0(r3)
 4009328:	28fffb1e 	bne	r5,r3,4009318 <__alt_mem_onchip_memory2_0+0xfc007318>
 400932c:	f800283a 	ret
 4009330:	00c003c4 	movi	r3,15
 4009334:	1980412e 	bgeu	r3,r6,400943c <memmove+0x140>
 4009338:	2886b03a 	or	r3,r5,r2
 400933c:	18c000cc 	andi	r3,r3,3
 4009340:	1800401e 	bne	r3,zero,4009444 <memmove+0x148>
 4009344:	33fffc04 	addi	r15,r6,-16
 4009348:	781ed13a 	srli	r15,r15,4
 400934c:	28c00104 	addi	r3,r5,4
 4009350:	13400104 	addi	r13,r2,4
 4009354:	781c913a 	slli	r14,r15,4
 4009358:	2b000204 	addi	r12,r5,8
 400935c:	12c00204 	addi	r11,r2,8
 4009360:	73800504 	addi	r14,r14,20
 4009364:	2a800304 	addi	r10,r5,12
 4009368:	12400304 	addi	r9,r2,12
 400936c:	2b9d883a 	add	r14,r5,r14
 4009370:	2811883a 	mov	r8,r5
 4009374:	100f883a 	mov	r7,r2
 4009378:	41000017 	ldw	r4,0(r8)
 400937c:	39c00404 	addi	r7,r7,16
 4009380:	18c00404 	addi	r3,r3,16
 4009384:	393ffc15 	stw	r4,-16(r7)
 4009388:	193ffc17 	ldw	r4,-16(r3)
 400938c:	6b400404 	addi	r13,r13,16
 4009390:	5ac00404 	addi	r11,r11,16
 4009394:	693ffc15 	stw	r4,-16(r13)
 4009398:	61000017 	ldw	r4,0(r12)
 400939c:	4a400404 	addi	r9,r9,16
 40093a0:	42000404 	addi	r8,r8,16
 40093a4:	593ffc15 	stw	r4,-16(r11)
 40093a8:	51000017 	ldw	r4,0(r10)
 40093ac:	63000404 	addi	r12,r12,16
 40093b0:	52800404 	addi	r10,r10,16
 40093b4:	493ffc15 	stw	r4,-16(r9)
 40093b8:	1bbfef1e 	bne	r3,r14,4009378 <__alt_mem_onchip_memory2_0+0xfc007378>
 40093bc:	79000044 	addi	r4,r15,1
 40093c0:	2008913a 	slli	r4,r4,4
 40093c4:	328003cc 	andi	r10,r6,15
 40093c8:	02c000c4 	movi	r11,3
 40093cc:	1107883a 	add	r3,r2,r4
 40093d0:	290b883a 	add	r5,r5,r4
 40093d4:	5a801e2e 	bgeu	r11,r10,4009450 <memmove+0x154>
 40093d8:	1813883a 	mov	r9,r3
 40093dc:	2811883a 	mov	r8,r5
 40093e0:	500f883a 	mov	r7,r10
 40093e4:	41000017 	ldw	r4,0(r8)
 40093e8:	4a400104 	addi	r9,r9,4
 40093ec:	39ffff04 	addi	r7,r7,-4
 40093f0:	493fff15 	stw	r4,-4(r9)
 40093f4:	42000104 	addi	r8,r8,4
 40093f8:	59fffa36 	bltu	r11,r7,40093e4 <__alt_mem_onchip_memory2_0+0xfc0073e4>
 40093fc:	513fff04 	addi	r4,r10,-4
 4009400:	2008d0ba 	srli	r4,r4,2
 4009404:	318000cc 	andi	r6,r6,3
 4009408:	21000044 	addi	r4,r4,1
 400940c:	2109883a 	add	r4,r4,r4
 4009410:	2109883a 	add	r4,r4,r4
 4009414:	1907883a 	add	r3,r3,r4
 4009418:	290b883a 	add	r5,r5,r4
 400941c:	30000b26 	beq	r6,zero,400944c <memmove+0x150>
 4009420:	198d883a 	add	r6,r3,r6
 4009424:	29c00003 	ldbu	r7,0(r5)
 4009428:	18c00044 	addi	r3,r3,1
 400942c:	29400044 	addi	r5,r5,1
 4009430:	19ffffc5 	stb	r7,-1(r3)
 4009434:	19bffb1e 	bne	r3,r6,4009424 <__alt_mem_onchip_memory2_0+0xfc007424>
 4009438:	f800283a 	ret
 400943c:	1007883a 	mov	r3,r2
 4009440:	003ff606 	br	400941c <__alt_mem_onchip_memory2_0+0xfc00741c>
 4009444:	1007883a 	mov	r3,r2
 4009448:	003ff506 	br	4009420 <__alt_mem_onchip_memory2_0+0xfc007420>
 400944c:	f800283a 	ret
 4009450:	500d883a 	mov	r6,r10
 4009454:	003ff106 	br	400941c <__alt_mem_onchip_memory2_0+0xfc00741c>

04009458 <memset>:
 4009458:	20c000cc 	andi	r3,r4,3
 400945c:	2005883a 	mov	r2,r4
 4009460:	18004426 	beq	r3,zero,4009574 <memset+0x11c>
 4009464:	31ffffc4 	addi	r7,r6,-1
 4009468:	30004026 	beq	r6,zero,400956c <memset+0x114>
 400946c:	2813883a 	mov	r9,r5
 4009470:	200d883a 	mov	r6,r4
 4009474:	2007883a 	mov	r3,r4
 4009478:	00000406 	br	400948c <memset+0x34>
 400947c:	3a3fffc4 	addi	r8,r7,-1
 4009480:	31800044 	addi	r6,r6,1
 4009484:	38003926 	beq	r7,zero,400956c <memset+0x114>
 4009488:	400f883a 	mov	r7,r8
 400948c:	18c00044 	addi	r3,r3,1
 4009490:	32400005 	stb	r9,0(r6)
 4009494:	1a0000cc 	andi	r8,r3,3
 4009498:	403ff81e 	bne	r8,zero,400947c <__alt_mem_onchip_memory2_0+0xfc00747c>
 400949c:	010000c4 	movi	r4,3
 40094a0:	21c02d2e 	bgeu	r4,r7,4009558 <memset+0x100>
 40094a4:	29003fcc 	andi	r4,r5,255
 40094a8:	200c923a 	slli	r6,r4,8
 40094ac:	3108b03a 	or	r4,r6,r4
 40094b0:	200c943a 	slli	r6,r4,16
 40094b4:	218cb03a 	or	r6,r4,r6
 40094b8:	010003c4 	movi	r4,15
 40094bc:	21c0182e 	bgeu	r4,r7,4009520 <memset+0xc8>
 40094c0:	3b3ffc04 	addi	r12,r7,-16
 40094c4:	6018d13a 	srli	r12,r12,4
 40094c8:	1a000104 	addi	r8,r3,4
 40094cc:	1ac00204 	addi	r11,r3,8
 40094d0:	6008913a 	slli	r4,r12,4
 40094d4:	1a800304 	addi	r10,r3,12
 40094d8:	1813883a 	mov	r9,r3
 40094dc:	21000504 	addi	r4,r4,20
 40094e0:	1909883a 	add	r4,r3,r4
 40094e4:	49800015 	stw	r6,0(r9)
 40094e8:	41800015 	stw	r6,0(r8)
 40094ec:	59800015 	stw	r6,0(r11)
 40094f0:	51800015 	stw	r6,0(r10)
 40094f4:	42000404 	addi	r8,r8,16
 40094f8:	4a400404 	addi	r9,r9,16
 40094fc:	5ac00404 	addi	r11,r11,16
 4009500:	52800404 	addi	r10,r10,16
 4009504:	413ff71e 	bne	r8,r4,40094e4 <__alt_mem_onchip_memory2_0+0xfc0074e4>
 4009508:	63000044 	addi	r12,r12,1
 400950c:	6018913a 	slli	r12,r12,4
 4009510:	39c003cc 	andi	r7,r7,15
 4009514:	010000c4 	movi	r4,3
 4009518:	1b07883a 	add	r3,r3,r12
 400951c:	21c00e2e 	bgeu	r4,r7,4009558 <memset+0x100>
 4009520:	1813883a 	mov	r9,r3
 4009524:	3811883a 	mov	r8,r7
 4009528:	010000c4 	movi	r4,3
 400952c:	49800015 	stw	r6,0(r9)
 4009530:	423fff04 	addi	r8,r8,-4
 4009534:	4a400104 	addi	r9,r9,4
 4009538:	223ffc36 	bltu	r4,r8,400952c <__alt_mem_onchip_memory2_0+0xfc00752c>
 400953c:	393fff04 	addi	r4,r7,-4
 4009540:	2008d0ba 	srli	r4,r4,2
 4009544:	39c000cc 	andi	r7,r7,3
 4009548:	21000044 	addi	r4,r4,1
 400954c:	2109883a 	add	r4,r4,r4
 4009550:	2109883a 	add	r4,r4,r4
 4009554:	1907883a 	add	r3,r3,r4
 4009558:	38000526 	beq	r7,zero,4009570 <memset+0x118>
 400955c:	19cf883a 	add	r7,r3,r7
 4009560:	19400005 	stb	r5,0(r3)
 4009564:	18c00044 	addi	r3,r3,1
 4009568:	38fffd1e 	bne	r7,r3,4009560 <__alt_mem_onchip_memory2_0+0xfc007560>
 400956c:	f800283a 	ret
 4009570:	f800283a 	ret
 4009574:	2007883a 	mov	r3,r4
 4009578:	300f883a 	mov	r7,r6
 400957c:	003fc706 	br	400949c <__alt_mem_onchip_memory2_0+0xfc00749c>

04009580 <_Balloc>:
 4009580:	20801317 	ldw	r2,76(r4)
 4009584:	defffc04 	addi	sp,sp,-16
 4009588:	dc400115 	stw	r17,4(sp)
 400958c:	dc000015 	stw	r16,0(sp)
 4009590:	dfc00315 	stw	ra,12(sp)
 4009594:	dc800215 	stw	r18,8(sp)
 4009598:	2023883a 	mov	r17,r4
 400959c:	2821883a 	mov	r16,r5
 40095a0:	10000f26 	beq	r2,zero,40095e0 <_Balloc+0x60>
 40095a4:	8407883a 	add	r3,r16,r16
 40095a8:	18c7883a 	add	r3,r3,r3
 40095ac:	10c7883a 	add	r3,r2,r3
 40095b0:	18800017 	ldw	r2,0(r3)
 40095b4:	10001126 	beq	r2,zero,40095fc <_Balloc+0x7c>
 40095b8:	11000017 	ldw	r4,0(r2)
 40095bc:	19000015 	stw	r4,0(r3)
 40095c0:	10000415 	stw	zero,16(r2)
 40095c4:	10000315 	stw	zero,12(r2)
 40095c8:	dfc00317 	ldw	ra,12(sp)
 40095cc:	dc800217 	ldw	r18,8(sp)
 40095d0:	dc400117 	ldw	r17,4(sp)
 40095d4:	dc000017 	ldw	r16,0(sp)
 40095d8:	dec00404 	addi	sp,sp,16
 40095dc:	f800283a 	ret
 40095e0:	01800844 	movi	r6,33
 40095e4:	01400104 	movi	r5,4
 40095e8:	400d8c80 	call	400d8c8 <_calloc_r>
 40095ec:	88801315 	stw	r2,76(r17)
 40095f0:	103fec1e 	bne	r2,zero,40095a4 <__alt_mem_onchip_memory2_0+0xfc0075a4>
 40095f4:	0005883a 	mov	r2,zero
 40095f8:	003ff306 	br	40095c8 <__alt_mem_onchip_memory2_0+0xfc0075c8>
 40095fc:	01400044 	movi	r5,1
 4009600:	2c24983a 	sll	r18,r5,r16
 4009604:	8809883a 	mov	r4,r17
 4009608:	91800144 	addi	r6,r18,5
 400960c:	318d883a 	add	r6,r6,r6
 4009610:	318d883a 	add	r6,r6,r6
 4009614:	400d8c80 	call	400d8c8 <_calloc_r>
 4009618:	103ff626 	beq	r2,zero,40095f4 <__alt_mem_onchip_memory2_0+0xfc0075f4>
 400961c:	14000115 	stw	r16,4(r2)
 4009620:	14800215 	stw	r18,8(r2)
 4009624:	003fe606 	br	40095c0 <__alt_mem_onchip_memory2_0+0xfc0075c0>

04009628 <_Bfree>:
 4009628:	28000826 	beq	r5,zero,400964c <_Bfree+0x24>
 400962c:	28c00117 	ldw	r3,4(r5)
 4009630:	20801317 	ldw	r2,76(r4)
 4009634:	18c7883a 	add	r3,r3,r3
 4009638:	18c7883a 	add	r3,r3,r3
 400963c:	10c5883a 	add	r2,r2,r3
 4009640:	10c00017 	ldw	r3,0(r2)
 4009644:	28c00015 	stw	r3,0(r5)
 4009648:	11400015 	stw	r5,0(r2)
 400964c:	f800283a 	ret

04009650 <__multadd>:
 4009650:	defffa04 	addi	sp,sp,-24
 4009654:	dc800315 	stw	r18,12(sp)
 4009658:	dc400215 	stw	r17,8(sp)
 400965c:	dc000115 	stw	r16,4(sp)
 4009660:	2823883a 	mov	r17,r5
 4009664:	2c000417 	ldw	r16,16(r5)
 4009668:	dfc00515 	stw	ra,20(sp)
 400966c:	dcc00415 	stw	r19,16(sp)
 4009670:	2025883a 	mov	r18,r4
 4009674:	29400504 	addi	r5,r5,20
 4009678:	0011883a 	mov	r8,zero
 400967c:	28c00017 	ldw	r3,0(r5)
 4009680:	29400104 	addi	r5,r5,4
 4009684:	42000044 	addi	r8,r8,1
 4009688:	18bfffcc 	andi	r2,r3,65535
 400968c:	1185383a 	mul	r2,r2,r6
 4009690:	1806d43a 	srli	r3,r3,16
 4009694:	11cf883a 	add	r7,r2,r7
 4009698:	3808d43a 	srli	r4,r7,16
 400969c:	1987383a 	mul	r3,r3,r6
 40096a0:	38bfffcc 	andi	r2,r7,65535
 40096a4:	1907883a 	add	r3,r3,r4
 40096a8:	1808943a 	slli	r4,r3,16
 40096ac:	180ed43a 	srli	r7,r3,16
 40096b0:	2085883a 	add	r2,r4,r2
 40096b4:	28bfff15 	stw	r2,-4(r5)
 40096b8:	443ff016 	blt	r8,r16,400967c <__alt_mem_onchip_memory2_0+0xfc00767c>
 40096bc:	38000926 	beq	r7,zero,40096e4 <__multadd+0x94>
 40096c0:	88800217 	ldw	r2,8(r17)
 40096c4:	80800f0e 	bge	r16,r2,4009704 <__multadd+0xb4>
 40096c8:	80800144 	addi	r2,r16,5
 40096cc:	1085883a 	add	r2,r2,r2
 40096d0:	1085883a 	add	r2,r2,r2
 40096d4:	8885883a 	add	r2,r17,r2
 40096d8:	11c00015 	stw	r7,0(r2)
 40096dc:	84000044 	addi	r16,r16,1
 40096e0:	8c000415 	stw	r16,16(r17)
 40096e4:	8805883a 	mov	r2,r17
 40096e8:	dfc00517 	ldw	ra,20(sp)
 40096ec:	dcc00417 	ldw	r19,16(sp)
 40096f0:	dc800317 	ldw	r18,12(sp)
 40096f4:	dc400217 	ldw	r17,8(sp)
 40096f8:	dc000117 	ldw	r16,4(sp)
 40096fc:	dec00604 	addi	sp,sp,24
 4009700:	f800283a 	ret
 4009704:	89400117 	ldw	r5,4(r17)
 4009708:	9009883a 	mov	r4,r18
 400970c:	d9c00015 	stw	r7,0(sp)
 4009710:	29400044 	addi	r5,r5,1
 4009714:	40095800 	call	4009580 <_Balloc>
 4009718:	89800417 	ldw	r6,16(r17)
 400971c:	89400304 	addi	r5,r17,12
 4009720:	11000304 	addi	r4,r2,12
 4009724:	31800084 	addi	r6,r6,2
 4009728:	318d883a 	add	r6,r6,r6
 400972c:	318d883a 	add	r6,r6,r6
 4009730:	1027883a 	mov	r19,r2
 4009734:	40091b40 	call	40091b4 <memcpy>
 4009738:	d9c00017 	ldw	r7,0(sp)
 400973c:	88000a26 	beq	r17,zero,4009768 <__multadd+0x118>
 4009740:	88c00117 	ldw	r3,4(r17)
 4009744:	90801317 	ldw	r2,76(r18)
 4009748:	18c7883a 	add	r3,r3,r3
 400974c:	18c7883a 	add	r3,r3,r3
 4009750:	10c5883a 	add	r2,r2,r3
 4009754:	10c00017 	ldw	r3,0(r2)
 4009758:	88c00015 	stw	r3,0(r17)
 400975c:	14400015 	stw	r17,0(r2)
 4009760:	9823883a 	mov	r17,r19
 4009764:	003fd806 	br	40096c8 <__alt_mem_onchip_memory2_0+0xfc0076c8>
 4009768:	9823883a 	mov	r17,r19
 400976c:	003fd606 	br	40096c8 <__alt_mem_onchip_memory2_0+0xfc0076c8>

04009770 <__s2b>:
 4009770:	defff904 	addi	sp,sp,-28
 4009774:	dc400115 	stw	r17,4(sp)
 4009778:	dc000015 	stw	r16,0(sp)
 400977c:	2023883a 	mov	r17,r4
 4009780:	2821883a 	mov	r16,r5
 4009784:	39000204 	addi	r4,r7,8
 4009788:	01400244 	movi	r5,9
 400978c:	dcc00315 	stw	r19,12(sp)
 4009790:	dc800215 	stw	r18,8(sp)
 4009794:	dfc00615 	stw	ra,24(sp)
 4009798:	dd400515 	stw	r21,20(sp)
 400979c:	dd000415 	stw	r20,16(sp)
 40097a0:	3825883a 	mov	r18,r7
 40097a4:	3027883a 	mov	r19,r6
 40097a8:	4000cc40 	call	4000cc4 <__divsi3>
 40097ac:	00c00044 	movi	r3,1
 40097b0:	000b883a 	mov	r5,zero
 40097b4:	1880030e 	bge	r3,r2,40097c4 <__s2b+0x54>
 40097b8:	18c7883a 	add	r3,r3,r3
 40097bc:	29400044 	addi	r5,r5,1
 40097c0:	18bffd16 	blt	r3,r2,40097b8 <__alt_mem_onchip_memory2_0+0xfc0077b8>
 40097c4:	8809883a 	mov	r4,r17
 40097c8:	40095800 	call	4009580 <_Balloc>
 40097cc:	d8c00717 	ldw	r3,28(sp)
 40097d0:	10c00515 	stw	r3,20(r2)
 40097d4:	00c00044 	movi	r3,1
 40097d8:	10c00415 	stw	r3,16(r2)
 40097dc:	00c00244 	movi	r3,9
 40097e0:	1cc0210e 	bge	r3,r19,4009868 <__s2b+0xf8>
 40097e4:	80eb883a 	add	r21,r16,r3
 40097e8:	a829883a 	mov	r20,r21
 40097ec:	84e1883a 	add	r16,r16,r19
 40097f0:	a1c00007 	ldb	r7,0(r20)
 40097f4:	01800284 	movi	r6,10
 40097f8:	a5000044 	addi	r20,r20,1
 40097fc:	100b883a 	mov	r5,r2
 4009800:	39fff404 	addi	r7,r7,-48
 4009804:	8809883a 	mov	r4,r17
 4009808:	40096500 	call	4009650 <__multadd>
 400980c:	a43ff81e 	bne	r20,r16,40097f0 <__alt_mem_onchip_memory2_0+0xfc0077f0>
 4009810:	ace1883a 	add	r16,r21,r19
 4009814:	843ffe04 	addi	r16,r16,-8
 4009818:	9c800a0e 	bge	r19,r18,4009844 <__s2b+0xd4>
 400981c:	94e5c83a 	sub	r18,r18,r19
 4009820:	84a5883a 	add	r18,r16,r18
 4009824:	81c00007 	ldb	r7,0(r16)
 4009828:	01800284 	movi	r6,10
 400982c:	84000044 	addi	r16,r16,1
 4009830:	100b883a 	mov	r5,r2
 4009834:	39fff404 	addi	r7,r7,-48
 4009838:	8809883a 	mov	r4,r17
 400983c:	40096500 	call	4009650 <__multadd>
 4009840:	84bff81e 	bne	r16,r18,4009824 <__alt_mem_onchip_memory2_0+0xfc007824>
 4009844:	dfc00617 	ldw	ra,24(sp)
 4009848:	dd400517 	ldw	r21,20(sp)
 400984c:	dd000417 	ldw	r20,16(sp)
 4009850:	dcc00317 	ldw	r19,12(sp)
 4009854:	dc800217 	ldw	r18,8(sp)
 4009858:	dc400117 	ldw	r17,4(sp)
 400985c:	dc000017 	ldw	r16,0(sp)
 4009860:	dec00704 	addi	sp,sp,28
 4009864:	f800283a 	ret
 4009868:	84000284 	addi	r16,r16,10
 400986c:	1827883a 	mov	r19,r3
 4009870:	003fe906 	br	4009818 <__alt_mem_onchip_memory2_0+0xfc007818>

04009874 <__hi0bits>:
 4009874:	20bfffec 	andhi	r2,r4,65535
 4009878:	1000141e 	bne	r2,zero,40098cc <__hi0bits+0x58>
 400987c:	2008943a 	slli	r4,r4,16
 4009880:	00800404 	movi	r2,16
 4009884:	20ffc02c 	andhi	r3,r4,65280
 4009888:	1800021e 	bne	r3,zero,4009894 <__hi0bits+0x20>
 400988c:	2008923a 	slli	r4,r4,8
 4009890:	10800204 	addi	r2,r2,8
 4009894:	20fc002c 	andhi	r3,r4,61440
 4009898:	1800021e 	bne	r3,zero,40098a4 <__hi0bits+0x30>
 400989c:	2008913a 	slli	r4,r4,4
 40098a0:	10800104 	addi	r2,r2,4
 40098a4:	20f0002c 	andhi	r3,r4,49152
 40098a8:	1800031e 	bne	r3,zero,40098b8 <__hi0bits+0x44>
 40098ac:	2109883a 	add	r4,r4,r4
 40098b0:	10800084 	addi	r2,r2,2
 40098b4:	2109883a 	add	r4,r4,r4
 40098b8:	20000316 	blt	r4,zero,40098c8 <__hi0bits+0x54>
 40098bc:	2110002c 	andhi	r4,r4,16384
 40098c0:	2000041e 	bne	r4,zero,40098d4 <__hi0bits+0x60>
 40098c4:	00800804 	movi	r2,32
 40098c8:	f800283a 	ret
 40098cc:	0005883a 	mov	r2,zero
 40098d0:	003fec06 	br	4009884 <__alt_mem_onchip_memory2_0+0xfc007884>
 40098d4:	10800044 	addi	r2,r2,1
 40098d8:	f800283a 	ret

040098dc <__lo0bits>:
 40098dc:	20c00017 	ldw	r3,0(r4)
 40098e0:	188001cc 	andi	r2,r3,7
 40098e4:	10000826 	beq	r2,zero,4009908 <__lo0bits+0x2c>
 40098e8:	1880004c 	andi	r2,r3,1
 40098ec:	1000211e 	bne	r2,zero,4009974 <__lo0bits+0x98>
 40098f0:	1880008c 	andi	r2,r3,2
 40098f4:	1000211e 	bne	r2,zero,400997c <__lo0bits+0xa0>
 40098f8:	1806d0ba 	srli	r3,r3,2
 40098fc:	00800084 	movi	r2,2
 4009900:	20c00015 	stw	r3,0(r4)
 4009904:	f800283a 	ret
 4009908:	18bfffcc 	andi	r2,r3,65535
 400990c:	10001326 	beq	r2,zero,400995c <__lo0bits+0x80>
 4009910:	0005883a 	mov	r2,zero
 4009914:	19403fcc 	andi	r5,r3,255
 4009918:	2800021e 	bne	r5,zero,4009924 <__lo0bits+0x48>
 400991c:	1806d23a 	srli	r3,r3,8
 4009920:	10800204 	addi	r2,r2,8
 4009924:	194003cc 	andi	r5,r3,15
 4009928:	2800021e 	bne	r5,zero,4009934 <__lo0bits+0x58>
 400992c:	1806d13a 	srli	r3,r3,4
 4009930:	10800104 	addi	r2,r2,4
 4009934:	194000cc 	andi	r5,r3,3
 4009938:	2800021e 	bne	r5,zero,4009944 <__lo0bits+0x68>
 400993c:	1806d0ba 	srli	r3,r3,2
 4009940:	10800084 	addi	r2,r2,2
 4009944:	1940004c 	andi	r5,r3,1
 4009948:	2800081e 	bne	r5,zero,400996c <__lo0bits+0x90>
 400994c:	1806d07a 	srli	r3,r3,1
 4009950:	1800051e 	bne	r3,zero,4009968 <__lo0bits+0x8c>
 4009954:	00800804 	movi	r2,32
 4009958:	f800283a 	ret
 400995c:	1806d43a 	srli	r3,r3,16
 4009960:	00800404 	movi	r2,16
 4009964:	003feb06 	br	4009914 <__alt_mem_onchip_memory2_0+0xfc007914>
 4009968:	10800044 	addi	r2,r2,1
 400996c:	20c00015 	stw	r3,0(r4)
 4009970:	f800283a 	ret
 4009974:	0005883a 	mov	r2,zero
 4009978:	f800283a 	ret
 400997c:	1806d07a 	srli	r3,r3,1
 4009980:	00800044 	movi	r2,1
 4009984:	20c00015 	stw	r3,0(r4)
 4009988:	f800283a 	ret

0400998c <__i2b>:
 400998c:	defffd04 	addi	sp,sp,-12
 4009990:	dc000015 	stw	r16,0(sp)
 4009994:	04000044 	movi	r16,1
 4009998:	dc400115 	stw	r17,4(sp)
 400999c:	2823883a 	mov	r17,r5
 40099a0:	800b883a 	mov	r5,r16
 40099a4:	dfc00215 	stw	ra,8(sp)
 40099a8:	40095800 	call	4009580 <_Balloc>
 40099ac:	14400515 	stw	r17,20(r2)
 40099b0:	14000415 	stw	r16,16(r2)
 40099b4:	dfc00217 	ldw	ra,8(sp)
 40099b8:	dc400117 	ldw	r17,4(sp)
 40099bc:	dc000017 	ldw	r16,0(sp)
 40099c0:	dec00304 	addi	sp,sp,12
 40099c4:	f800283a 	ret

040099c8 <__multiply>:
 40099c8:	defffa04 	addi	sp,sp,-24
 40099cc:	dcc00315 	stw	r19,12(sp)
 40099d0:	dc800215 	stw	r18,8(sp)
 40099d4:	34c00417 	ldw	r19,16(r6)
 40099d8:	2c800417 	ldw	r18,16(r5)
 40099dc:	dd000415 	stw	r20,16(sp)
 40099e0:	dc400115 	stw	r17,4(sp)
 40099e4:	dfc00515 	stw	ra,20(sp)
 40099e8:	dc000015 	stw	r16,0(sp)
 40099ec:	2829883a 	mov	r20,r5
 40099f0:	3023883a 	mov	r17,r6
 40099f4:	94c0050e 	bge	r18,r19,4009a0c <__multiply+0x44>
 40099f8:	9007883a 	mov	r3,r18
 40099fc:	3029883a 	mov	r20,r6
 4009a00:	9825883a 	mov	r18,r19
 4009a04:	2823883a 	mov	r17,r5
 4009a08:	1827883a 	mov	r19,r3
 4009a0c:	a0800217 	ldw	r2,8(r20)
 4009a10:	94e1883a 	add	r16,r18,r19
 4009a14:	a1400117 	ldw	r5,4(r20)
 4009a18:	1400010e 	bge	r2,r16,4009a20 <__multiply+0x58>
 4009a1c:	29400044 	addi	r5,r5,1
 4009a20:	40095800 	call	4009580 <_Balloc>
 4009a24:	8415883a 	add	r10,r16,r16
 4009a28:	12c00504 	addi	r11,r2,20
 4009a2c:	5295883a 	add	r10,r10,r10
 4009a30:	5a95883a 	add	r10,r11,r10
 4009a34:	5807883a 	mov	r3,r11
 4009a38:	5a80032e 	bgeu	r11,r10,4009a48 <__multiply+0x80>
 4009a3c:	18000015 	stw	zero,0(r3)
 4009a40:	18c00104 	addi	r3,r3,4
 4009a44:	1abffd36 	bltu	r3,r10,4009a3c <__alt_mem_onchip_memory2_0+0xfc007a3c>
 4009a48:	9ce7883a 	add	r19,r19,r19
 4009a4c:	94a5883a 	add	r18,r18,r18
 4009a50:	89800504 	addi	r6,r17,20
 4009a54:	9ce7883a 	add	r19,r19,r19
 4009a58:	a3400504 	addi	r13,r20,20
 4009a5c:	94a5883a 	add	r18,r18,r18
 4009a60:	34d9883a 	add	r12,r6,r19
 4009a64:	6c93883a 	add	r9,r13,r18
 4009a68:	3300422e 	bgeu	r6,r12,4009b74 <__multiply+0x1ac>
 4009a6c:	37c00017 	ldw	ra,0(r6)
 4009a70:	fbffffcc 	andi	r15,ra,65535
 4009a74:	78001b26 	beq	r15,zero,4009ae4 <__multiply+0x11c>
 4009a78:	5811883a 	mov	r8,r11
 4009a7c:	681d883a 	mov	r14,r13
 4009a80:	000f883a 	mov	r7,zero
 4009a84:	71000017 	ldw	r4,0(r14)
 4009a88:	40c00017 	ldw	r3,0(r8)
 4009a8c:	73800104 	addi	r14,r14,4
 4009a90:	217fffcc 	andi	r5,r4,65535
 4009a94:	2bcb383a 	mul	r5,r5,r15
 4009a98:	2008d43a 	srli	r4,r4,16
 4009a9c:	1c7fffcc 	andi	r17,r3,65535
 4009aa0:	2c4b883a 	add	r5,r5,r17
 4009aa4:	29cb883a 	add	r5,r5,r7
 4009aa8:	23c9383a 	mul	r4,r4,r15
 4009aac:	1806d43a 	srli	r3,r3,16
 4009ab0:	280ed43a 	srli	r7,r5,16
 4009ab4:	297fffcc 	andi	r5,r5,65535
 4009ab8:	20c7883a 	add	r3,r4,r3
 4009abc:	19c7883a 	add	r3,r3,r7
 4009ac0:	1808943a 	slli	r4,r3,16
 4009ac4:	4023883a 	mov	r17,r8
 4009ac8:	180ed43a 	srli	r7,r3,16
 4009acc:	214ab03a 	or	r5,r4,r5
 4009ad0:	41400015 	stw	r5,0(r8)
 4009ad4:	42000104 	addi	r8,r8,4
 4009ad8:	727fea36 	bltu	r14,r9,4009a84 <__alt_mem_onchip_memory2_0+0xfc007a84>
 4009adc:	89c00115 	stw	r7,4(r17)
 4009ae0:	37c00017 	ldw	ra,0(r6)
 4009ae4:	f83ed43a 	srli	ra,ra,16
 4009ae8:	f8001f26 	beq	ra,zero,4009b68 <__multiply+0x1a0>
 4009aec:	58c00017 	ldw	r3,0(r11)
 4009af0:	681d883a 	mov	r14,r13
 4009af4:	581f883a 	mov	r15,r11
 4009af8:	1811883a 	mov	r8,r3
 4009afc:	5825883a 	mov	r18,r11
 4009b00:	000f883a 	mov	r7,zero
 4009b04:	00000106 	br	4009b0c <__multiply+0x144>
 4009b08:	8825883a 	mov	r18,r17
 4009b0c:	7140000b 	ldhu	r5,0(r14)
 4009b10:	4010d43a 	srli	r8,r8,16
 4009b14:	193fffcc 	andi	r4,r3,65535
 4009b18:	2fcb383a 	mul	r5,r5,ra
 4009b1c:	7bc00104 	addi	r15,r15,4
 4009b20:	73800104 	addi	r14,r14,4
 4009b24:	2a0b883a 	add	r5,r5,r8
 4009b28:	29cb883a 	add	r5,r5,r7
 4009b2c:	2806943a 	slli	r3,r5,16
 4009b30:	94400104 	addi	r17,r18,4
 4009b34:	280ad43a 	srli	r5,r5,16
 4009b38:	1908b03a 	or	r4,r3,r4
 4009b3c:	793fff15 	stw	r4,-4(r15)
 4009b40:	70ffff17 	ldw	r3,-4(r14)
 4009b44:	8a000017 	ldw	r8,0(r17)
 4009b48:	1806d43a 	srli	r3,r3,16
 4009b4c:	413fffcc 	andi	r4,r8,65535
 4009b50:	1fc7383a 	mul	r3,r3,ra
 4009b54:	1907883a 	add	r3,r3,r4
 4009b58:	1947883a 	add	r3,r3,r5
 4009b5c:	180ed43a 	srli	r7,r3,16
 4009b60:	727fe936 	bltu	r14,r9,4009b08 <__alt_mem_onchip_memory2_0+0xfc007b08>
 4009b64:	90c00115 	stw	r3,4(r18)
 4009b68:	31800104 	addi	r6,r6,4
 4009b6c:	5ac00104 	addi	r11,r11,4
 4009b70:	333fbe36 	bltu	r6,r12,4009a6c <__alt_mem_onchip_memory2_0+0xfc007a6c>
 4009b74:	0400090e 	bge	zero,r16,4009b9c <__multiply+0x1d4>
 4009b78:	50ffff17 	ldw	r3,-4(r10)
 4009b7c:	52bfff04 	addi	r10,r10,-4
 4009b80:	18000326 	beq	r3,zero,4009b90 <__multiply+0x1c8>
 4009b84:	00000506 	br	4009b9c <__multiply+0x1d4>
 4009b88:	50c00017 	ldw	r3,0(r10)
 4009b8c:	1800031e 	bne	r3,zero,4009b9c <__multiply+0x1d4>
 4009b90:	843fffc4 	addi	r16,r16,-1
 4009b94:	52bfff04 	addi	r10,r10,-4
 4009b98:	803ffb1e 	bne	r16,zero,4009b88 <__alt_mem_onchip_memory2_0+0xfc007b88>
 4009b9c:	14000415 	stw	r16,16(r2)
 4009ba0:	dfc00517 	ldw	ra,20(sp)
 4009ba4:	dd000417 	ldw	r20,16(sp)
 4009ba8:	dcc00317 	ldw	r19,12(sp)
 4009bac:	dc800217 	ldw	r18,8(sp)
 4009bb0:	dc400117 	ldw	r17,4(sp)
 4009bb4:	dc000017 	ldw	r16,0(sp)
 4009bb8:	dec00604 	addi	sp,sp,24
 4009bbc:	f800283a 	ret

04009bc0 <__pow5mult>:
 4009bc0:	defffa04 	addi	sp,sp,-24
 4009bc4:	dcc00315 	stw	r19,12(sp)
 4009bc8:	dc000015 	stw	r16,0(sp)
 4009bcc:	dfc00515 	stw	ra,20(sp)
 4009bd0:	dd000415 	stw	r20,16(sp)
 4009bd4:	dc800215 	stw	r18,8(sp)
 4009bd8:	dc400115 	stw	r17,4(sp)
 4009bdc:	308000cc 	andi	r2,r6,3
 4009be0:	3021883a 	mov	r16,r6
 4009be4:	2027883a 	mov	r19,r4
 4009be8:	10002f1e 	bne	r2,zero,4009ca8 <__pow5mult+0xe8>
 4009bec:	2825883a 	mov	r18,r5
 4009bf0:	8021d0ba 	srai	r16,r16,2
 4009bf4:	80001a26 	beq	r16,zero,4009c60 <__pow5mult+0xa0>
 4009bf8:	9c401217 	ldw	r17,72(r19)
 4009bfc:	8800061e 	bne	r17,zero,4009c18 <__pow5mult+0x58>
 4009c00:	00003406 	br	4009cd4 <__pow5mult+0x114>
 4009c04:	8021d07a 	srai	r16,r16,1
 4009c08:	80001526 	beq	r16,zero,4009c60 <__pow5mult+0xa0>
 4009c0c:	88800017 	ldw	r2,0(r17)
 4009c10:	10001c26 	beq	r2,zero,4009c84 <__pow5mult+0xc4>
 4009c14:	1023883a 	mov	r17,r2
 4009c18:	8080004c 	andi	r2,r16,1
 4009c1c:	103ff926 	beq	r2,zero,4009c04 <__alt_mem_onchip_memory2_0+0xfc007c04>
 4009c20:	880d883a 	mov	r6,r17
 4009c24:	900b883a 	mov	r5,r18
 4009c28:	9809883a 	mov	r4,r19
 4009c2c:	40099c80 	call	40099c8 <__multiply>
 4009c30:	90001b26 	beq	r18,zero,4009ca0 <__pow5mult+0xe0>
 4009c34:	91000117 	ldw	r4,4(r18)
 4009c38:	98c01317 	ldw	r3,76(r19)
 4009c3c:	8021d07a 	srai	r16,r16,1
 4009c40:	2109883a 	add	r4,r4,r4
 4009c44:	2109883a 	add	r4,r4,r4
 4009c48:	1907883a 	add	r3,r3,r4
 4009c4c:	19000017 	ldw	r4,0(r3)
 4009c50:	91000015 	stw	r4,0(r18)
 4009c54:	1c800015 	stw	r18,0(r3)
 4009c58:	1025883a 	mov	r18,r2
 4009c5c:	803feb1e 	bne	r16,zero,4009c0c <__alt_mem_onchip_memory2_0+0xfc007c0c>
 4009c60:	9005883a 	mov	r2,r18
 4009c64:	dfc00517 	ldw	ra,20(sp)
 4009c68:	dd000417 	ldw	r20,16(sp)
 4009c6c:	dcc00317 	ldw	r19,12(sp)
 4009c70:	dc800217 	ldw	r18,8(sp)
 4009c74:	dc400117 	ldw	r17,4(sp)
 4009c78:	dc000017 	ldw	r16,0(sp)
 4009c7c:	dec00604 	addi	sp,sp,24
 4009c80:	f800283a 	ret
 4009c84:	880d883a 	mov	r6,r17
 4009c88:	880b883a 	mov	r5,r17
 4009c8c:	9809883a 	mov	r4,r19
 4009c90:	40099c80 	call	40099c8 <__multiply>
 4009c94:	88800015 	stw	r2,0(r17)
 4009c98:	10000015 	stw	zero,0(r2)
 4009c9c:	003fdd06 	br	4009c14 <__alt_mem_onchip_memory2_0+0xfc007c14>
 4009ca0:	1025883a 	mov	r18,r2
 4009ca4:	003fd706 	br	4009c04 <__alt_mem_onchip_memory2_0+0xfc007c04>
 4009ca8:	10bfffc4 	addi	r2,r2,-1
 4009cac:	1085883a 	add	r2,r2,r2
 4009cb0:	00c100b4 	movhi	r3,1026
 4009cb4:	18f2cd04 	addi	r3,r3,-13516
 4009cb8:	1085883a 	add	r2,r2,r2
 4009cbc:	1885883a 	add	r2,r3,r2
 4009cc0:	11800017 	ldw	r6,0(r2)
 4009cc4:	000f883a 	mov	r7,zero
 4009cc8:	40096500 	call	4009650 <__multadd>
 4009ccc:	1025883a 	mov	r18,r2
 4009cd0:	003fc706 	br	4009bf0 <__alt_mem_onchip_memory2_0+0xfc007bf0>
 4009cd4:	05000044 	movi	r20,1
 4009cd8:	a00b883a 	mov	r5,r20
 4009cdc:	9809883a 	mov	r4,r19
 4009ce0:	40095800 	call	4009580 <_Balloc>
 4009ce4:	1023883a 	mov	r17,r2
 4009ce8:	00809c44 	movi	r2,625
 4009cec:	88800515 	stw	r2,20(r17)
 4009cf0:	8d000415 	stw	r20,16(r17)
 4009cf4:	9c401215 	stw	r17,72(r19)
 4009cf8:	88000015 	stw	zero,0(r17)
 4009cfc:	003fc606 	br	4009c18 <__alt_mem_onchip_memory2_0+0xfc007c18>

04009d00 <__lshift>:
 4009d00:	defff904 	addi	sp,sp,-28
 4009d04:	dd400515 	stw	r21,20(sp)
 4009d08:	dcc00315 	stw	r19,12(sp)
 4009d0c:	302bd17a 	srai	r21,r6,5
 4009d10:	2cc00417 	ldw	r19,16(r5)
 4009d14:	28800217 	ldw	r2,8(r5)
 4009d18:	dd000415 	stw	r20,16(sp)
 4009d1c:	ace7883a 	add	r19,r21,r19
 4009d20:	dc800215 	stw	r18,8(sp)
 4009d24:	dc400115 	stw	r17,4(sp)
 4009d28:	dc000015 	stw	r16,0(sp)
 4009d2c:	dfc00615 	stw	ra,24(sp)
 4009d30:	9c000044 	addi	r16,r19,1
 4009d34:	2823883a 	mov	r17,r5
 4009d38:	3029883a 	mov	r20,r6
 4009d3c:	2025883a 	mov	r18,r4
 4009d40:	29400117 	ldw	r5,4(r5)
 4009d44:	1400030e 	bge	r2,r16,4009d54 <__lshift+0x54>
 4009d48:	1085883a 	add	r2,r2,r2
 4009d4c:	29400044 	addi	r5,r5,1
 4009d50:	143ffd16 	blt	r2,r16,4009d48 <__alt_mem_onchip_memory2_0+0xfc007d48>
 4009d54:	9009883a 	mov	r4,r18
 4009d58:	40095800 	call	4009580 <_Balloc>
 4009d5c:	10c00504 	addi	r3,r2,20
 4009d60:	0540070e 	bge	zero,r21,4009d80 <__lshift+0x80>
 4009d64:	ad6b883a 	add	r21,r21,r21
 4009d68:	ad6b883a 	add	r21,r21,r21
 4009d6c:	1809883a 	mov	r4,r3
 4009d70:	1d47883a 	add	r3,r3,r21
 4009d74:	20000015 	stw	zero,0(r4)
 4009d78:	21000104 	addi	r4,r4,4
 4009d7c:	193ffd1e 	bne	r3,r4,4009d74 <__alt_mem_onchip_memory2_0+0xfc007d74>
 4009d80:	8a000417 	ldw	r8,16(r17)
 4009d84:	89000504 	addi	r4,r17,20
 4009d88:	a18007cc 	andi	r6,r20,31
 4009d8c:	4211883a 	add	r8,r8,r8
 4009d90:	4211883a 	add	r8,r8,r8
 4009d94:	2211883a 	add	r8,r4,r8
 4009d98:	30002326 	beq	r6,zero,4009e28 <__lshift+0x128>
 4009d9c:	02400804 	movi	r9,32
 4009da0:	4993c83a 	sub	r9,r9,r6
 4009da4:	000b883a 	mov	r5,zero
 4009da8:	21c00017 	ldw	r7,0(r4)
 4009dac:	1815883a 	mov	r10,r3
 4009db0:	18c00104 	addi	r3,r3,4
 4009db4:	398e983a 	sll	r7,r7,r6
 4009db8:	21000104 	addi	r4,r4,4
 4009dbc:	394ab03a 	or	r5,r7,r5
 4009dc0:	197fff15 	stw	r5,-4(r3)
 4009dc4:	217fff17 	ldw	r5,-4(r4)
 4009dc8:	2a4ad83a 	srl	r5,r5,r9
 4009dcc:	223ff636 	bltu	r4,r8,4009da8 <__alt_mem_onchip_memory2_0+0xfc007da8>
 4009dd0:	51400115 	stw	r5,4(r10)
 4009dd4:	28001a1e 	bne	r5,zero,4009e40 <__lshift+0x140>
 4009dd8:	843fffc4 	addi	r16,r16,-1
 4009ddc:	14000415 	stw	r16,16(r2)
 4009de0:	88000826 	beq	r17,zero,4009e04 <__lshift+0x104>
 4009de4:	89000117 	ldw	r4,4(r17)
 4009de8:	90c01317 	ldw	r3,76(r18)
 4009dec:	2109883a 	add	r4,r4,r4
 4009df0:	2109883a 	add	r4,r4,r4
 4009df4:	1907883a 	add	r3,r3,r4
 4009df8:	19000017 	ldw	r4,0(r3)
 4009dfc:	89000015 	stw	r4,0(r17)
 4009e00:	1c400015 	stw	r17,0(r3)
 4009e04:	dfc00617 	ldw	ra,24(sp)
 4009e08:	dd400517 	ldw	r21,20(sp)
 4009e0c:	dd000417 	ldw	r20,16(sp)
 4009e10:	dcc00317 	ldw	r19,12(sp)
 4009e14:	dc800217 	ldw	r18,8(sp)
 4009e18:	dc400117 	ldw	r17,4(sp)
 4009e1c:	dc000017 	ldw	r16,0(sp)
 4009e20:	dec00704 	addi	sp,sp,28
 4009e24:	f800283a 	ret
 4009e28:	21400017 	ldw	r5,0(r4)
 4009e2c:	18c00104 	addi	r3,r3,4
 4009e30:	21000104 	addi	r4,r4,4
 4009e34:	197fff15 	stw	r5,-4(r3)
 4009e38:	223ffb36 	bltu	r4,r8,4009e28 <__alt_mem_onchip_memory2_0+0xfc007e28>
 4009e3c:	003fe606 	br	4009dd8 <__alt_mem_onchip_memory2_0+0xfc007dd8>
 4009e40:	9c000084 	addi	r16,r19,2
 4009e44:	003fe406 	br	4009dd8 <__alt_mem_onchip_memory2_0+0xfc007dd8>

04009e48 <__mcmp>:
 4009e48:	20800417 	ldw	r2,16(r4)
 4009e4c:	28c00417 	ldw	r3,16(r5)
 4009e50:	10c5c83a 	sub	r2,r2,r3
 4009e54:	1000111e 	bne	r2,zero,4009e9c <__mcmp+0x54>
 4009e58:	18c7883a 	add	r3,r3,r3
 4009e5c:	18c7883a 	add	r3,r3,r3
 4009e60:	21000504 	addi	r4,r4,20
 4009e64:	29400504 	addi	r5,r5,20
 4009e68:	20c5883a 	add	r2,r4,r3
 4009e6c:	28cb883a 	add	r5,r5,r3
 4009e70:	00000106 	br	4009e78 <__mcmp+0x30>
 4009e74:	20800a2e 	bgeu	r4,r2,4009ea0 <__mcmp+0x58>
 4009e78:	10bfff04 	addi	r2,r2,-4
 4009e7c:	297fff04 	addi	r5,r5,-4
 4009e80:	11800017 	ldw	r6,0(r2)
 4009e84:	28c00017 	ldw	r3,0(r5)
 4009e88:	30fffa26 	beq	r6,r3,4009e74 <__alt_mem_onchip_memory2_0+0xfc007e74>
 4009e8c:	30c00236 	bltu	r6,r3,4009e98 <__mcmp+0x50>
 4009e90:	00800044 	movi	r2,1
 4009e94:	f800283a 	ret
 4009e98:	00bfffc4 	movi	r2,-1
 4009e9c:	f800283a 	ret
 4009ea0:	0005883a 	mov	r2,zero
 4009ea4:	f800283a 	ret

04009ea8 <__mdiff>:
 4009ea8:	28c00417 	ldw	r3,16(r5)
 4009eac:	30800417 	ldw	r2,16(r6)
 4009eb0:	defffa04 	addi	sp,sp,-24
 4009eb4:	dcc00315 	stw	r19,12(sp)
 4009eb8:	dc800215 	stw	r18,8(sp)
 4009ebc:	dfc00515 	stw	ra,20(sp)
 4009ec0:	dd000415 	stw	r20,16(sp)
 4009ec4:	dc400115 	stw	r17,4(sp)
 4009ec8:	dc000015 	stw	r16,0(sp)
 4009ecc:	1887c83a 	sub	r3,r3,r2
 4009ed0:	2825883a 	mov	r18,r5
 4009ed4:	3027883a 	mov	r19,r6
 4009ed8:	1800141e 	bne	r3,zero,4009f2c <__mdiff+0x84>
 4009edc:	1085883a 	add	r2,r2,r2
 4009ee0:	1085883a 	add	r2,r2,r2
 4009ee4:	2a000504 	addi	r8,r5,20
 4009ee8:	34000504 	addi	r16,r6,20
 4009eec:	4087883a 	add	r3,r8,r2
 4009ef0:	8085883a 	add	r2,r16,r2
 4009ef4:	00000106 	br	4009efc <__mdiff+0x54>
 4009ef8:	40c0592e 	bgeu	r8,r3,400a060 <__mdiff+0x1b8>
 4009efc:	18ffff04 	addi	r3,r3,-4
 4009f00:	10bfff04 	addi	r2,r2,-4
 4009f04:	19c00017 	ldw	r7,0(r3)
 4009f08:	11400017 	ldw	r5,0(r2)
 4009f0c:	397ffa26 	beq	r7,r5,4009ef8 <__alt_mem_onchip_memory2_0+0xfc007ef8>
 4009f10:	3940592e 	bgeu	r7,r5,400a078 <__mdiff+0x1d0>
 4009f14:	9005883a 	mov	r2,r18
 4009f18:	4023883a 	mov	r17,r8
 4009f1c:	9825883a 	mov	r18,r19
 4009f20:	05000044 	movi	r20,1
 4009f24:	1027883a 	mov	r19,r2
 4009f28:	00000406 	br	4009f3c <__mdiff+0x94>
 4009f2c:	18005616 	blt	r3,zero,400a088 <__mdiff+0x1e0>
 4009f30:	34400504 	addi	r17,r6,20
 4009f34:	2c000504 	addi	r16,r5,20
 4009f38:	0029883a 	mov	r20,zero
 4009f3c:	91400117 	ldw	r5,4(r18)
 4009f40:	40095800 	call	4009580 <_Balloc>
 4009f44:	92400417 	ldw	r9,16(r18)
 4009f48:	9b000417 	ldw	r12,16(r19)
 4009f4c:	12c00504 	addi	r11,r2,20
 4009f50:	4a51883a 	add	r8,r9,r9
 4009f54:	6319883a 	add	r12,r12,r12
 4009f58:	4211883a 	add	r8,r8,r8
 4009f5c:	6319883a 	add	r12,r12,r12
 4009f60:	15000315 	stw	r20,12(r2)
 4009f64:	8211883a 	add	r8,r16,r8
 4009f68:	8b19883a 	add	r12,r17,r12
 4009f6c:	0007883a 	mov	r3,zero
 4009f70:	81400017 	ldw	r5,0(r16)
 4009f74:	89c00017 	ldw	r7,0(r17)
 4009f78:	59800104 	addi	r6,r11,4
 4009f7c:	293fffcc 	andi	r4,r5,65535
 4009f80:	20c7883a 	add	r3,r4,r3
 4009f84:	393fffcc 	andi	r4,r7,65535
 4009f88:	1909c83a 	sub	r4,r3,r4
 4009f8c:	280ad43a 	srli	r5,r5,16
 4009f90:	380ed43a 	srli	r7,r7,16
 4009f94:	2007d43a 	srai	r3,r4,16
 4009f98:	213fffcc 	andi	r4,r4,65535
 4009f9c:	29cbc83a 	sub	r5,r5,r7
 4009fa0:	28c7883a 	add	r3,r5,r3
 4009fa4:	180a943a 	slli	r5,r3,16
 4009fa8:	8c400104 	addi	r17,r17,4
 4009fac:	84000104 	addi	r16,r16,4
 4009fb0:	2908b03a 	or	r4,r5,r4
 4009fb4:	59000015 	stw	r4,0(r11)
 4009fb8:	1807d43a 	srai	r3,r3,16
 4009fbc:	3015883a 	mov	r10,r6
 4009fc0:	3017883a 	mov	r11,r6
 4009fc4:	8b3fea36 	bltu	r17,r12,4009f70 <__alt_mem_onchip_memory2_0+0xfc007f70>
 4009fc8:	8200162e 	bgeu	r16,r8,400a024 <__mdiff+0x17c>
 4009fcc:	8017883a 	mov	r11,r16
 4009fd0:	59400017 	ldw	r5,0(r11)
 4009fd4:	31800104 	addi	r6,r6,4
 4009fd8:	5ac00104 	addi	r11,r11,4
 4009fdc:	293fffcc 	andi	r4,r5,65535
 4009fe0:	20c7883a 	add	r3,r4,r3
 4009fe4:	280ed43a 	srli	r7,r5,16
 4009fe8:	180bd43a 	srai	r5,r3,16
 4009fec:	193fffcc 	andi	r4,r3,65535
 4009ff0:	3947883a 	add	r3,r7,r5
 4009ff4:	180a943a 	slli	r5,r3,16
 4009ff8:	1807d43a 	srai	r3,r3,16
 4009ffc:	2908b03a 	or	r4,r5,r4
 400a000:	313fff15 	stw	r4,-4(r6)
 400a004:	5a3ff236 	bltu	r11,r8,4009fd0 <__alt_mem_onchip_memory2_0+0xfc007fd0>
 400a008:	0406303a 	nor	r3,zero,r16
 400a00c:	1a07883a 	add	r3,r3,r8
 400a010:	1806d0ba 	srli	r3,r3,2
 400a014:	18c00044 	addi	r3,r3,1
 400a018:	18c7883a 	add	r3,r3,r3
 400a01c:	18c7883a 	add	r3,r3,r3
 400a020:	50d5883a 	add	r10,r10,r3
 400a024:	50ffff04 	addi	r3,r10,-4
 400a028:	2000041e 	bne	r4,zero,400a03c <__mdiff+0x194>
 400a02c:	18ffff04 	addi	r3,r3,-4
 400a030:	19000017 	ldw	r4,0(r3)
 400a034:	4a7fffc4 	addi	r9,r9,-1
 400a038:	203ffc26 	beq	r4,zero,400a02c <__alt_mem_onchip_memory2_0+0xfc00802c>
 400a03c:	12400415 	stw	r9,16(r2)
 400a040:	dfc00517 	ldw	ra,20(sp)
 400a044:	dd000417 	ldw	r20,16(sp)
 400a048:	dcc00317 	ldw	r19,12(sp)
 400a04c:	dc800217 	ldw	r18,8(sp)
 400a050:	dc400117 	ldw	r17,4(sp)
 400a054:	dc000017 	ldw	r16,0(sp)
 400a058:	dec00604 	addi	sp,sp,24
 400a05c:	f800283a 	ret
 400a060:	000b883a 	mov	r5,zero
 400a064:	40095800 	call	4009580 <_Balloc>
 400a068:	00c00044 	movi	r3,1
 400a06c:	10c00415 	stw	r3,16(r2)
 400a070:	10000515 	stw	zero,20(r2)
 400a074:	003ff206 	br	400a040 <__alt_mem_onchip_memory2_0+0xfc008040>
 400a078:	8023883a 	mov	r17,r16
 400a07c:	0029883a 	mov	r20,zero
 400a080:	4021883a 	mov	r16,r8
 400a084:	003fad06 	br	4009f3c <__alt_mem_onchip_memory2_0+0xfc007f3c>
 400a088:	9005883a 	mov	r2,r18
 400a08c:	94400504 	addi	r17,r18,20
 400a090:	9c000504 	addi	r16,r19,20
 400a094:	9825883a 	mov	r18,r19
 400a098:	05000044 	movi	r20,1
 400a09c:	1027883a 	mov	r19,r2
 400a0a0:	003fa606 	br	4009f3c <__alt_mem_onchip_memory2_0+0xfc007f3c>

0400a0a4 <__ulp>:
 400a0a4:	295ffc2c 	andhi	r5,r5,32752
 400a0a8:	00bf3034 	movhi	r2,64704
 400a0ac:	2887883a 	add	r3,r5,r2
 400a0b0:	00c0020e 	bge	zero,r3,400a0bc <__ulp+0x18>
 400a0b4:	0005883a 	mov	r2,zero
 400a0b8:	f800283a 	ret
 400a0bc:	00c7c83a 	sub	r3,zero,r3
 400a0c0:	1807d53a 	srai	r3,r3,20
 400a0c4:	008004c4 	movi	r2,19
 400a0c8:	10c00b0e 	bge	r2,r3,400a0f8 <__ulp+0x54>
 400a0cc:	18bffb04 	addi	r2,r3,-20
 400a0d0:	01000784 	movi	r4,30
 400a0d4:	0007883a 	mov	r3,zero
 400a0d8:	20800516 	blt	r4,r2,400a0f0 <__ulp+0x4c>
 400a0dc:	010007c4 	movi	r4,31
 400a0e0:	2089c83a 	sub	r4,r4,r2
 400a0e4:	00800044 	movi	r2,1
 400a0e8:	1104983a 	sll	r2,r2,r4
 400a0ec:	f800283a 	ret
 400a0f0:	00800044 	movi	r2,1
 400a0f4:	f800283a 	ret
 400a0f8:	01400234 	movhi	r5,8
 400a0fc:	28c7d83a 	sra	r3,r5,r3
 400a100:	0005883a 	mov	r2,zero
 400a104:	f800283a 	ret

0400a108 <__b2d>:
 400a108:	defffa04 	addi	sp,sp,-24
 400a10c:	dc000015 	stw	r16,0(sp)
 400a110:	24000417 	ldw	r16,16(r4)
 400a114:	dc400115 	stw	r17,4(sp)
 400a118:	24400504 	addi	r17,r4,20
 400a11c:	8421883a 	add	r16,r16,r16
 400a120:	8421883a 	add	r16,r16,r16
 400a124:	8c21883a 	add	r16,r17,r16
 400a128:	dc800215 	stw	r18,8(sp)
 400a12c:	84bfff17 	ldw	r18,-4(r16)
 400a130:	dd000415 	stw	r20,16(sp)
 400a134:	dcc00315 	stw	r19,12(sp)
 400a138:	9009883a 	mov	r4,r18
 400a13c:	2829883a 	mov	r20,r5
 400a140:	dfc00515 	stw	ra,20(sp)
 400a144:	40098740 	call	4009874 <__hi0bits>
 400a148:	00c00804 	movi	r3,32
 400a14c:	1889c83a 	sub	r4,r3,r2
 400a150:	a1000015 	stw	r4,0(r20)
 400a154:	01000284 	movi	r4,10
 400a158:	84ffff04 	addi	r19,r16,-4
 400a15c:	20801216 	blt	r4,r2,400a1a8 <__b2d+0xa0>
 400a160:	018002c4 	movi	r6,11
 400a164:	308dc83a 	sub	r6,r6,r2
 400a168:	9186d83a 	srl	r3,r18,r6
 400a16c:	18cffc34 	orhi	r3,r3,16368
 400a170:	8cc0212e 	bgeu	r17,r19,400a1f8 <__b2d+0xf0>
 400a174:	813ffe17 	ldw	r4,-8(r16)
 400a178:	218cd83a 	srl	r6,r4,r6
 400a17c:	10800544 	addi	r2,r2,21
 400a180:	9084983a 	sll	r2,r18,r2
 400a184:	1184b03a 	or	r2,r2,r6
 400a188:	dfc00517 	ldw	ra,20(sp)
 400a18c:	dd000417 	ldw	r20,16(sp)
 400a190:	dcc00317 	ldw	r19,12(sp)
 400a194:	dc800217 	ldw	r18,8(sp)
 400a198:	dc400117 	ldw	r17,4(sp)
 400a19c:	dc000017 	ldw	r16,0(sp)
 400a1a0:	dec00604 	addi	sp,sp,24
 400a1a4:	f800283a 	ret
 400a1a8:	8cc00f2e 	bgeu	r17,r19,400a1e8 <__b2d+0xe0>
 400a1ac:	117ffd44 	addi	r5,r2,-11
 400a1b0:	80bffe17 	ldw	r2,-8(r16)
 400a1b4:	28000e26 	beq	r5,zero,400a1f0 <__b2d+0xe8>
 400a1b8:	1949c83a 	sub	r4,r3,r5
 400a1bc:	9164983a 	sll	r18,r18,r5
 400a1c0:	1106d83a 	srl	r3,r2,r4
 400a1c4:	81bffe04 	addi	r6,r16,-8
 400a1c8:	948ffc34 	orhi	r18,r18,16368
 400a1cc:	90c6b03a 	or	r3,r18,r3
 400a1d0:	89800e2e 	bgeu	r17,r6,400a20c <__b2d+0x104>
 400a1d4:	81bffd17 	ldw	r6,-12(r16)
 400a1d8:	1144983a 	sll	r2,r2,r5
 400a1dc:	310ad83a 	srl	r5,r6,r4
 400a1e0:	2884b03a 	or	r2,r5,r2
 400a1e4:	003fe806 	br	400a188 <__alt_mem_onchip_memory2_0+0xfc008188>
 400a1e8:	10bffd44 	addi	r2,r2,-11
 400a1ec:	1000041e 	bne	r2,zero,400a200 <__b2d+0xf8>
 400a1f0:	90cffc34 	orhi	r3,r18,16368
 400a1f4:	003fe406 	br	400a188 <__alt_mem_onchip_memory2_0+0xfc008188>
 400a1f8:	000d883a 	mov	r6,zero
 400a1fc:	003fdf06 	br	400a17c <__alt_mem_onchip_memory2_0+0xfc00817c>
 400a200:	90a4983a 	sll	r18,r18,r2
 400a204:	0005883a 	mov	r2,zero
 400a208:	003ff906 	br	400a1f0 <__alt_mem_onchip_memory2_0+0xfc0081f0>
 400a20c:	1144983a 	sll	r2,r2,r5
 400a210:	003fdd06 	br	400a188 <__alt_mem_onchip_memory2_0+0xfc008188>

0400a214 <__d2b>:
 400a214:	defff804 	addi	sp,sp,-32
 400a218:	dc000215 	stw	r16,8(sp)
 400a21c:	3021883a 	mov	r16,r6
 400a220:	dc400315 	stw	r17,12(sp)
 400a224:	8022907a 	slli	r17,r16,1
 400a228:	dd000615 	stw	r20,24(sp)
 400a22c:	2829883a 	mov	r20,r5
 400a230:	01400044 	movi	r5,1
 400a234:	dcc00515 	stw	r19,20(sp)
 400a238:	dc800415 	stw	r18,16(sp)
 400a23c:	dfc00715 	stw	ra,28(sp)
 400a240:	3825883a 	mov	r18,r7
 400a244:	8822d57a 	srli	r17,r17,21
 400a248:	40095800 	call	4009580 <_Balloc>
 400a24c:	1027883a 	mov	r19,r2
 400a250:	00800434 	movhi	r2,16
 400a254:	10bfffc4 	addi	r2,r2,-1
 400a258:	808c703a 	and	r6,r16,r2
 400a25c:	88000126 	beq	r17,zero,400a264 <__d2b+0x50>
 400a260:	31800434 	orhi	r6,r6,16
 400a264:	d9800015 	stw	r6,0(sp)
 400a268:	a0002426 	beq	r20,zero,400a2fc <__d2b+0xe8>
 400a26c:	d9000104 	addi	r4,sp,4
 400a270:	dd000115 	stw	r20,4(sp)
 400a274:	40098dc0 	call	40098dc <__lo0bits>
 400a278:	d8c00017 	ldw	r3,0(sp)
 400a27c:	10002f1e 	bne	r2,zero,400a33c <__d2b+0x128>
 400a280:	d9000117 	ldw	r4,4(sp)
 400a284:	99000515 	stw	r4,20(r19)
 400a288:	1821003a 	cmpeq	r16,r3,zero
 400a28c:	01000084 	movi	r4,2
 400a290:	2421c83a 	sub	r16,r4,r16
 400a294:	98c00615 	stw	r3,24(r19)
 400a298:	9c000415 	stw	r16,16(r19)
 400a29c:	88001f1e 	bne	r17,zero,400a31c <__d2b+0x108>
 400a2a0:	10bef384 	addi	r2,r2,-1074
 400a2a4:	90800015 	stw	r2,0(r18)
 400a2a8:	00900034 	movhi	r2,16384
 400a2ac:	10bfffc4 	addi	r2,r2,-1
 400a2b0:	8085883a 	add	r2,r16,r2
 400a2b4:	1085883a 	add	r2,r2,r2
 400a2b8:	1085883a 	add	r2,r2,r2
 400a2bc:	9885883a 	add	r2,r19,r2
 400a2c0:	11000517 	ldw	r4,20(r2)
 400a2c4:	8020917a 	slli	r16,r16,5
 400a2c8:	40098740 	call	4009874 <__hi0bits>
 400a2cc:	d8c00817 	ldw	r3,32(sp)
 400a2d0:	8085c83a 	sub	r2,r16,r2
 400a2d4:	18800015 	stw	r2,0(r3)
 400a2d8:	9805883a 	mov	r2,r19
 400a2dc:	dfc00717 	ldw	ra,28(sp)
 400a2e0:	dd000617 	ldw	r20,24(sp)
 400a2e4:	dcc00517 	ldw	r19,20(sp)
 400a2e8:	dc800417 	ldw	r18,16(sp)
 400a2ec:	dc400317 	ldw	r17,12(sp)
 400a2f0:	dc000217 	ldw	r16,8(sp)
 400a2f4:	dec00804 	addi	sp,sp,32
 400a2f8:	f800283a 	ret
 400a2fc:	d809883a 	mov	r4,sp
 400a300:	40098dc0 	call	40098dc <__lo0bits>
 400a304:	d8c00017 	ldw	r3,0(sp)
 400a308:	04000044 	movi	r16,1
 400a30c:	9c000415 	stw	r16,16(r19)
 400a310:	98c00515 	stw	r3,20(r19)
 400a314:	10800804 	addi	r2,r2,32
 400a318:	883fe126 	beq	r17,zero,400a2a0 <__alt_mem_onchip_memory2_0+0xfc0082a0>
 400a31c:	00c00d44 	movi	r3,53
 400a320:	8c7ef344 	addi	r17,r17,-1075
 400a324:	88a3883a 	add	r17,r17,r2
 400a328:	1885c83a 	sub	r2,r3,r2
 400a32c:	d8c00817 	ldw	r3,32(sp)
 400a330:	94400015 	stw	r17,0(r18)
 400a334:	18800015 	stw	r2,0(r3)
 400a338:	003fe706 	br	400a2d8 <__alt_mem_onchip_memory2_0+0xfc0082d8>
 400a33c:	01000804 	movi	r4,32
 400a340:	2089c83a 	sub	r4,r4,r2
 400a344:	1908983a 	sll	r4,r3,r4
 400a348:	d9400117 	ldw	r5,4(sp)
 400a34c:	1886d83a 	srl	r3,r3,r2
 400a350:	2148b03a 	or	r4,r4,r5
 400a354:	99000515 	stw	r4,20(r19)
 400a358:	d8c00015 	stw	r3,0(sp)
 400a35c:	003fca06 	br	400a288 <__alt_mem_onchip_memory2_0+0xfc008288>

0400a360 <__ratio>:
 400a360:	defff904 	addi	sp,sp,-28
 400a364:	dc400315 	stw	r17,12(sp)
 400a368:	2823883a 	mov	r17,r5
 400a36c:	d9400104 	addi	r5,sp,4
 400a370:	dfc00615 	stw	ra,24(sp)
 400a374:	dcc00515 	stw	r19,20(sp)
 400a378:	dc800415 	stw	r18,16(sp)
 400a37c:	2027883a 	mov	r19,r4
 400a380:	dc000215 	stw	r16,8(sp)
 400a384:	400a1080 	call	400a108 <__b2d>
 400a388:	d80b883a 	mov	r5,sp
 400a38c:	8809883a 	mov	r4,r17
 400a390:	1025883a 	mov	r18,r2
 400a394:	1821883a 	mov	r16,r3
 400a398:	400a1080 	call	400a108 <__b2d>
 400a39c:	8a000417 	ldw	r8,16(r17)
 400a3a0:	99000417 	ldw	r4,16(r19)
 400a3a4:	d9400117 	ldw	r5,4(sp)
 400a3a8:	2209c83a 	sub	r4,r4,r8
 400a3ac:	2010917a 	slli	r8,r4,5
 400a3b0:	d9000017 	ldw	r4,0(sp)
 400a3b4:	2909c83a 	sub	r4,r5,r4
 400a3b8:	4109883a 	add	r4,r8,r4
 400a3bc:	01000e0e 	bge	zero,r4,400a3f8 <__ratio+0x98>
 400a3c0:	2008953a 	slli	r4,r4,20
 400a3c4:	2421883a 	add	r16,r4,r16
 400a3c8:	100d883a 	mov	r6,r2
 400a3cc:	180f883a 	mov	r7,r3
 400a3d0:	9009883a 	mov	r4,r18
 400a3d4:	800b883a 	mov	r5,r16
 400a3d8:	400f5040 	call	400f504 <__divdf3>
 400a3dc:	dfc00617 	ldw	ra,24(sp)
 400a3e0:	dcc00517 	ldw	r19,20(sp)
 400a3e4:	dc800417 	ldw	r18,16(sp)
 400a3e8:	dc400317 	ldw	r17,12(sp)
 400a3ec:	dc000217 	ldw	r16,8(sp)
 400a3f0:	dec00704 	addi	sp,sp,28
 400a3f4:	f800283a 	ret
 400a3f8:	2008953a 	slli	r4,r4,20
 400a3fc:	1907c83a 	sub	r3,r3,r4
 400a400:	003ff106 	br	400a3c8 <__alt_mem_onchip_memory2_0+0xfc0083c8>

0400a404 <_mprec_log10>:
 400a404:	defffe04 	addi	sp,sp,-8
 400a408:	dc000015 	stw	r16,0(sp)
 400a40c:	dfc00115 	stw	ra,4(sp)
 400a410:	008005c4 	movi	r2,23
 400a414:	2021883a 	mov	r16,r4
 400a418:	11000d0e 	bge	r2,r4,400a450 <_mprec_log10+0x4c>
 400a41c:	0005883a 	mov	r2,zero
 400a420:	00cffc34 	movhi	r3,16368
 400a424:	843fffc4 	addi	r16,r16,-1
 400a428:	000d883a 	mov	r6,zero
 400a42c:	01d00934 	movhi	r7,16420
 400a430:	1009883a 	mov	r4,r2
 400a434:	180b883a 	mov	r5,r3
 400a438:	40100440 	call	4010044 <__muldf3>
 400a43c:	803ff91e 	bne	r16,zero,400a424 <__alt_mem_onchip_memory2_0+0xfc008424>
 400a440:	dfc00117 	ldw	ra,4(sp)
 400a444:	dc000017 	ldw	r16,0(sp)
 400a448:	dec00204 	addi	sp,sp,8
 400a44c:	f800283a 	ret
 400a450:	202090fa 	slli	r16,r4,3
 400a454:	008100b4 	movhi	r2,1026
 400a458:	10b2e404 	addi	r2,r2,-13424
 400a45c:	1421883a 	add	r16,r2,r16
 400a460:	80800017 	ldw	r2,0(r16)
 400a464:	80c00117 	ldw	r3,4(r16)
 400a468:	dfc00117 	ldw	ra,4(sp)
 400a46c:	dc000017 	ldw	r16,0(sp)
 400a470:	dec00204 	addi	sp,sp,8
 400a474:	f800283a 	ret

0400a478 <__copybits>:
 400a478:	297fffc4 	addi	r5,r5,-1
 400a47c:	280fd17a 	srai	r7,r5,5
 400a480:	30c00417 	ldw	r3,16(r6)
 400a484:	30800504 	addi	r2,r6,20
 400a488:	39c00044 	addi	r7,r7,1
 400a48c:	18c7883a 	add	r3,r3,r3
 400a490:	39cf883a 	add	r7,r7,r7
 400a494:	18c7883a 	add	r3,r3,r3
 400a498:	39cf883a 	add	r7,r7,r7
 400a49c:	10c7883a 	add	r3,r2,r3
 400a4a0:	21cf883a 	add	r7,r4,r7
 400a4a4:	10c00d2e 	bgeu	r2,r3,400a4dc <__copybits+0x64>
 400a4a8:	200b883a 	mov	r5,r4
 400a4ac:	12000017 	ldw	r8,0(r2)
 400a4b0:	29400104 	addi	r5,r5,4
 400a4b4:	10800104 	addi	r2,r2,4
 400a4b8:	2a3fff15 	stw	r8,-4(r5)
 400a4bc:	10fffb36 	bltu	r2,r3,400a4ac <__alt_mem_onchip_memory2_0+0xfc0084ac>
 400a4c0:	1985c83a 	sub	r2,r3,r6
 400a4c4:	10bffac4 	addi	r2,r2,-21
 400a4c8:	1004d0ba 	srli	r2,r2,2
 400a4cc:	10800044 	addi	r2,r2,1
 400a4d0:	1085883a 	add	r2,r2,r2
 400a4d4:	1085883a 	add	r2,r2,r2
 400a4d8:	2089883a 	add	r4,r4,r2
 400a4dc:	21c0032e 	bgeu	r4,r7,400a4ec <__copybits+0x74>
 400a4e0:	20000015 	stw	zero,0(r4)
 400a4e4:	21000104 	addi	r4,r4,4
 400a4e8:	21fffd36 	bltu	r4,r7,400a4e0 <__alt_mem_onchip_memory2_0+0xfc0084e0>
 400a4ec:	f800283a 	ret

0400a4f0 <__any_on>:
 400a4f0:	20c00417 	ldw	r3,16(r4)
 400a4f4:	2805d17a 	srai	r2,r5,5
 400a4f8:	21000504 	addi	r4,r4,20
 400a4fc:	18800d0e 	bge	r3,r2,400a534 <__any_on+0x44>
 400a500:	18c7883a 	add	r3,r3,r3
 400a504:	18c7883a 	add	r3,r3,r3
 400a508:	20c7883a 	add	r3,r4,r3
 400a50c:	20c0192e 	bgeu	r4,r3,400a574 <__any_on+0x84>
 400a510:	18bfff17 	ldw	r2,-4(r3)
 400a514:	18ffff04 	addi	r3,r3,-4
 400a518:	1000041e 	bne	r2,zero,400a52c <__any_on+0x3c>
 400a51c:	20c0142e 	bgeu	r4,r3,400a570 <__any_on+0x80>
 400a520:	18ffff04 	addi	r3,r3,-4
 400a524:	19400017 	ldw	r5,0(r3)
 400a528:	283ffc26 	beq	r5,zero,400a51c <__alt_mem_onchip_memory2_0+0xfc00851c>
 400a52c:	00800044 	movi	r2,1
 400a530:	f800283a 	ret
 400a534:	10c00a0e 	bge	r2,r3,400a560 <__any_on+0x70>
 400a538:	1085883a 	add	r2,r2,r2
 400a53c:	1085883a 	add	r2,r2,r2
 400a540:	294007cc 	andi	r5,r5,31
 400a544:	2087883a 	add	r3,r4,r2
 400a548:	283ff026 	beq	r5,zero,400a50c <__alt_mem_onchip_memory2_0+0xfc00850c>
 400a54c:	19800017 	ldw	r6,0(r3)
 400a550:	3144d83a 	srl	r2,r6,r5
 400a554:	114a983a 	sll	r5,r2,r5
 400a558:	317ff41e 	bne	r6,r5,400a52c <__alt_mem_onchip_memory2_0+0xfc00852c>
 400a55c:	003feb06 	br	400a50c <__alt_mem_onchip_memory2_0+0xfc00850c>
 400a560:	1085883a 	add	r2,r2,r2
 400a564:	1085883a 	add	r2,r2,r2
 400a568:	2087883a 	add	r3,r4,r2
 400a56c:	003fe706 	br	400a50c <__alt_mem_onchip_memory2_0+0xfc00850c>
 400a570:	f800283a 	ret
 400a574:	0005883a 	mov	r2,zero
 400a578:	f800283a 	ret

0400a57c <_realloc_r>:
 400a57c:	defff604 	addi	sp,sp,-40
 400a580:	dc800215 	stw	r18,8(sp)
 400a584:	dfc00915 	stw	ra,36(sp)
 400a588:	df000815 	stw	fp,32(sp)
 400a58c:	ddc00715 	stw	r23,28(sp)
 400a590:	dd800615 	stw	r22,24(sp)
 400a594:	dd400515 	stw	r21,20(sp)
 400a598:	dd000415 	stw	r20,16(sp)
 400a59c:	dcc00315 	stw	r19,12(sp)
 400a5a0:	dc400115 	stw	r17,4(sp)
 400a5a4:	dc000015 	stw	r16,0(sp)
 400a5a8:	3025883a 	mov	r18,r6
 400a5ac:	2800b726 	beq	r5,zero,400a88c <_realloc_r+0x310>
 400a5b0:	282b883a 	mov	r21,r5
 400a5b4:	2029883a 	mov	r20,r4
 400a5b8:	4011ea80 	call	4011ea8 <__malloc_lock>
 400a5bc:	a8bfff17 	ldw	r2,-4(r21)
 400a5c0:	043fff04 	movi	r16,-4
 400a5c4:	90c002c4 	addi	r3,r18,11
 400a5c8:	01000584 	movi	r4,22
 400a5cc:	acfffe04 	addi	r19,r21,-8
 400a5d0:	1420703a 	and	r16,r2,r16
 400a5d4:	20c0332e 	bgeu	r4,r3,400a6a4 <_realloc_r+0x128>
 400a5d8:	047ffe04 	movi	r17,-8
 400a5dc:	1c62703a 	and	r17,r3,r17
 400a5e0:	8807883a 	mov	r3,r17
 400a5e4:	88005816 	blt	r17,zero,400a748 <_realloc_r+0x1cc>
 400a5e8:	8c805736 	bltu	r17,r18,400a748 <_realloc_r+0x1cc>
 400a5ec:	80c0300e 	bge	r16,r3,400a6b0 <_realloc_r+0x134>
 400a5f0:	070100b4 	movhi	fp,1026
 400a5f4:	e734a104 	addi	fp,fp,-11644
 400a5f8:	e1c00217 	ldw	r7,8(fp)
 400a5fc:	9c09883a 	add	r4,r19,r16
 400a600:	22000117 	ldw	r8,4(r4)
 400a604:	21c06326 	beq	r4,r7,400a794 <_realloc_r+0x218>
 400a608:	017fff84 	movi	r5,-2
 400a60c:	414a703a 	and	r5,r8,r5
 400a610:	214b883a 	add	r5,r4,r5
 400a614:	29800117 	ldw	r6,4(r5)
 400a618:	3180004c 	andi	r6,r6,1
 400a61c:	30003f26 	beq	r6,zero,400a71c <_realloc_r+0x1a0>
 400a620:	1080004c 	andi	r2,r2,1
 400a624:	10008326 	beq	r2,zero,400a834 <_realloc_r+0x2b8>
 400a628:	900b883a 	mov	r5,r18
 400a62c:	a009883a 	mov	r4,r20
 400a630:	40088c40 	call	40088c4 <_malloc_r>
 400a634:	1025883a 	mov	r18,r2
 400a638:	10011e26 	beq	r2,zero,400aab4 <_realloc_r+0x538>
 400a63c:	a93fff17 	ldw	r4,-4(r21)
 400a640:	10fffe04 	addi	r3,r2,-8
 400a644:	00bfff84 	movi	r2,-2
 400a648:	2084703a 	and	r2,r4,r2
 400a64c:	9885883a 	add	r2,r19,r2
 400a650:	1880ee26 	beq	r3,r2,400aa0c <_realloc_r+0x490>
 400a654:	81bfff04 	addi	r6,r16,-4
 400a658:	00800904 	movi	r2,36
 400a65c:	1180b836 	bltu	r2,r6,400a940 <_realloc_r+0x3c4>
 400a660:	00c004c4 	movi	r3,19
 400a664:	19809636 	bltu	r3,r6,400a8c0 <_realloc_r+0x344>
 400a668:	9005883a 	mov	r2,r18
 400a66c:	a807883a 	mov	r3,r21
 400a670:	19000017 	ldw	r4,0(r3)
 400a674:	11000015 	stw	r4,0(r2)
 400a678:	19000117 	ldw	r4,4(r3)
 400a67c:	11000115 	stw	r4,4(r2)
 400a680:	18c00217 	ldw	r3,8(r3)
 400a684:	10c00215 	stw	r3,8(r2)
 400a688:	a80b883a 	mov	r5,r21
 400a68c:	a009883a 	mov	r4,r20
 400a690:	4007cd80 	call	4007cd8 <_free_r>
 400a694:	a009883a 	mov	r4,r20
 400a698:	4011fc80 	call	4011fc8 <__malloc_unlock>
 400a69c:	9005883a 	mov	r2,r18
 400a6a0:	00001206 	br	400a6ec <_realloc_r+0x170>
 400a6a4:	00c00404 	movi	r3,16
 400a6a8:	1823883a 	mov	r17,r3
 400a6ac:	003fce06 	br	400a5e8 <__alt_mem_onchip_memory2_0+0xfc0085e8>
 400a6b0:	a825883a 	mov	r18,r21
 400a6b4:	8445c83a 	sub	r2,r16,r17
 400a6b8:	00c003c4 	movi	r3,15
 400a6bc:	18802636 	bltu	r3,r2,400a758 <_realloc_r+0x1dc>
 400a6c0:	99800117 	ldw	r6,4(r19)
 400a6c4:	9c07883a 	add	r3,r19,r16
 400a6c8:	3180004c 	andi	r6,r6,1
 400a6cc:	3420b03a 	or	r16,r6,r16
 400a6d0:	9c000115 	stw	r16,4(r19)
 400a6d4:	18800117 	ldw	r2,4(r3)
 400a6d8:	10800054 	ori	r2,r2,1
 400a6dc:	18800115 	stw	r2,4(r3)
 400a6e0:	a009883a 	mov	r4,r20
 400a6e4:	4011fc80 	call	4011fc8 <__malloc_unlock>
 400a6e8:	9005883a 	mov	r2,r18
 400a6ec:	dfc00917 	ldw	ra,36(sp)
 400a6f0:	df000817 	ldw	fp,32(sp)
 400a6f4:	ddc00717 	ldw	r23,28(sp)
 400a6f8:	dd800617 	ldw	r22,24(sp)
 400a6fc:	dd400517 	ldw	r21,20(sp)
 400a700:	dd000417 	ldw	r20,16(sp)
 400a704:	dcc00317 	ldw	r19,12(sp)
 400a708:	dc800217 	ldw	r18,8(sp)
 400a70c:	dc400117 	ldw	r17,4(sp)
 400a710:	dc000017 	ldw	r16,0(sp)
 400a714:	dec00a04 	addi	sp,sp,40
 400a718:	f800283a 	ret
 400a71c:	017fff04 	movi	r5,-4
 400a720:	414a703a 	and	r5,r8,r5
 400a724:	814d883a 	add	r6,r16,r5
 400a728:	30c01f16 	blt	r6,r3,400a7a8 <_realloc_r+0x22c>
 400a72c:	20800317 	ldw	r2,12(r4)
 400a730:	20c00217 	ldw	r3,8(r4)
 400a734:	a825883a 	mov	r18,r21
 400a738:	3021883a 	mov	r16,r6
 400a73c:	18800315 	stw	r2,12(r3)
 400a740:	10c00215 	stw	r3,8(r2)
 400a744:	003fdb06 	br	400a6b4 <__alt_mem_onchip_memory2_0+0xfc0086b4>
 400a748:	00800304 	movi	r2,12
 400a74c:	a0800015 	stw	r2,0(r20)
 400a750:	0005883a 	mov	r2,zero
 400a754:	003fe506 	br	400a6ec <__alt_mem_onchip_memory2_0+0xfc0086ec>
 400a758:	98c00117 	ldw	r3,4(r19)
 400a75c:	9c4b883a 	add	r5,r19,r17
 400a760:	11000054 	ori	r4,r2,1
 400a764:	18c0004c 	andi	r3,r3,1
 400a768:	1c62b03a 	or	r17,r3,r17
 400a76c:	9c400115 	stw	r17,4(r19)
 400a770:	29000115 	stw	r4,4(r5)
 400a774:	2885883a 	add	r2,r5,r2
 400a778:	10c00117 	ldw	r3,4(r2)
 400a77c:	29400204 	addi	r5,r5,8
 400a780:	a009883a 	mov	r4,r20
 400a784:	18c00054 	ori	r3,r3,1
 400a788:	10c00115 	stw	r3,4(r2)
 400a78c:	4007cd80 	call	4007cd8 <_free_r>
 400a790:	003fd306 	br	400a6e0 <__alt_mem_onchip_memory2_0+0xfc0086e0>
 400a794:	017fff04 	movi	r5,-4
 400a798:	414a703a 	and	r5,r8,r5
 400a79c:	89800404 	addi	r6,r17,16
 400a7a0:	8151883a 	add	r8,r16,r5
 400a7a4:	4180590e 	bge	r8,r6,400a90c <_realloc_r+0x390>
 400a7a8:	1080004c 	andi	r2,r2,1
 400a7ac:	103f9e1e 	bne	r2,zero,400a628 <__alt_mem_onchip_memory2_0+0xfc008628>
 400a7b0:	adbffe17 	ldw	r22,-8(r21)
 400a7b4:	00bfff04 	movi	r2,-4
 400a7b8:	9dadc83a 	sub	r22,r19,r22
 400a7bc:	b1800117 	ldw	r6,4(r22)
 400a7c0:	3084703a 	and	r2,r6,r2
 400a7c4:	20002026 	beq	r4,zero,400a848 <_realloc_r+0x2cc>
 400a7c8:	80af883a 	add	r23,r16,r2
 400a7cc:	b96f883a 	add	r23,r23,r5
 400a7d0:	21c05f26 	beq	r4,r7,400a950 <_realloc_r+0x3d4>
 400a7d4:	b8c01c16 	blt	r23,r3,400a848 <_realloc_r+0x2cc>
 400a7d8:	20800317 	ldw	r2,12(r4)
 400a7dc:	20c00217 	ldw	r3,8(r4)
 400a7e0:	81bfff04 	addi	r6,r16,-4
 400a7e4:	01000904 	movi	r4,36
 400a7e8:	18800315 	stw	r2,12(r3)
 400a7ec:	10c00215 	stw	r3,8(r2)
 400a7f0:	b0c00217 	ldw	r3,8(r22)
 400a7f4:	b0800317 	ldw	r2,12(r22)
 400a7f8:	b4800204 	addi	r18,r22,8
 400a7fc:	18800315 	stw	r2,12(r3)
 400a800:	10c00215 	stw	r3,8(r2)
 400a804:	21801b36 	bltu	r4,r6,400a874 <_realloc_r+0x2f8>
 400a808:	008004c4 	movi	r2,19
 400a80c:	1180352e 	bgeu	r2,r6,400a8e4 <_realloc_r+0x368>
 400a810:	a8800017 	ldw	r2,0(r21)
 400a814:	b0800215 	stw	r2,8(r22)
 400a818:	a8800117 	ldw	r2,4(r21)
 400a81c:	b0800315 	stw	r2,12(r22)
 400a820:	008006c4 	movi	r2,27
 400a824:	11807f36 	bltu	r2,r6,400aa24 <_realloc_r+0x4a8>
 400a828:	b0800404 	addi	r2,r22,16
 400a82c:	ad400204 	addi	r21,r21,8
 400a830:	00002d06 	br	400a8e8 <_realloc_r+0x36c>
 400a834:	adbffe17 	ldw	r22,-8(r21)
 400a838:	00bfff04 	movi	r2,-4
 400a83c:	9dadc83a 	sub	r22,r19,r22
 400a840:	b1000117 	ldw	r4,4(r22)
 400a844:	2084703a 	and	r2,r4,r2
 400a848:	b03f7726 	beq	r22,zero,400a628 <__alt_mem_onchip_memory2_0+0xfc008628>
 400a84c:	80af883a 	add	r23,r16,r2
 400a850:	b8ff7516 	blt	r23,r3,400a628 <__alt_mem_onchip_memory2_0+0xfc008628>
 400a854:	b0800317 	ldw	r2,12(r22)
 400a858:	b0c00217 	ldw	r3,8(r22)
 400a85c:	81bfff04 	addi	r6,r16,-4
 400a860:	01000904 	movi	r4,36
 400a864:	18800315 	stw	r2,12(r3)
 400a868:	10c00215 	stw	r3,8(r2)
 400a86c:	b4800204 	addi	r18,r22,8
 400a870:	21bfe52e 	bgeu	r4,r6,400a808 <__alt_mem_onchip_memory2_0+0xfc008808>
 400a874:	a80b883a 	mov	r5,r21
 400a878:	9009883a 	mov	r4,r18
 400a87c:	40092fc0 	call	40092fc <memmove>
 400a880:	b821883a 	mov	r16,r23
 400a884:	b027883a 	mov	r19,r22
 400a888:	003f8a06 	br	400a6b4 <__alt_mem_onchip_memory2_0+0xfc0086b4>
 400a88c:	300b883a 	mov	r5,r6
 400a890:	dfc00917 	ldw	ra,36(sp)
 400a894:	df000817 	ldw	fp,32(sp)
 400a898:	ddc00717 	ldw	r23,28(sp)
 400a89c:	dd800617 	ldw	r22,24(sp)
 400a8a0:	dd400517 	ldw	r21,20(sp)
 400a8a4:	dd000417 	ldw	r20,16(sp)
 400a8a8:	dcc00317 	ldw	r19,12(sp)
 400a8ac:	dc800217 	ldw	r18,8(sp)
 400a8b0:	dc400117 	ldw	r17,4(sp)
 400a8b4:	dc000017 	ldw	r16,0(sp)
 400a8b8:	dec00a04 	addi	sp,sp,40
 400a8bc:	40088c41 	jmpi	40088c4 <_malloc_r>
 400a8c0:	a8c00017 	ldw	r3,0(r21)
 400a8c4:	90c00015 	stw	r3,0(r18)
 400a8c8:	a8c00117 	ldw	r3,4(r21)
 400a8cc:	90c00115 	stw	r3,4(r18)
 400a8d0:	00c006c4 	movi	r3,27
 400a8d4:	19804536 	bltu	r3,r6,400a9ec <_realloc_r+0x470>
 400a8d8:	90800204 	addi	r2,r18,8
 400a8dc:	a8c00204 	addi	r3,r21,8
 400a8e0:	003f6306 	br	400a670 <__alt_mem_onchip_memory2_0+0xfc008670>
 400a8e4:	9005883a 	mov	r2,r18
 400a8e8:	a8c00017 	ldw	r3,0(r21)
 400a8ec:	b821883a 	mov	r16,r23
 400a8f0:	b027883a 	mov	r19,r22
 400a8f4:	10c00015 	stw	r3,0(r2)
 400a8f8:	a8c00117 	ldw	r3,4(r21)
 400a8fc:	10c00115 	stw	r3,4(r2)
 400a900:	a8c00217 	ldw	r3,8(r21)
 400a904:	10c00215 	stw	r3,8(r2)
 400a908:	003f6a06 	br	400a6b4 <__alt_mem_onchip_memory2_0+0xfc0086b4>
 400a90c:	9c67883a 	add	r19,r19,r17
 400a910:	4445c83a 	sub	r2,r8,r17
 400a914:	e4c00215 	stw	r19,8(fp)
 400a918:	10800054 	ori	r2,r2,1
 400a91c:	98800115 	stw	r2,4(r19)
 400a920:	a8bfff17 	ldw	r2,-4(r21)
 400a924:	a009883a 	mov	r4,r20
 400a928:	1080004c 	andi	r2,r2,1
 400a92c:	1462b03a 	or	r17,r2,r17
 400a930:	ac7fff15 	stw	r17,-4(r21)
 400a934:	4011fc80 	call	4011fc8 <__malloc_unlock>
 400a938:	a805883a 	mov	r2,r21
 400a93c:	003f6b06 	br	400a6ec <__alt_mem_onchip_memory2_0+0xfc0086ec>
 400a940:	a80b883a 	mov	r5,r21
 400a944:	9009883a 	mov	r4,r18
 400a948:	40092fc0 	call	40092fc <memmove>
 400a94c:	003f4e06 	br	400a688 <__alt_mem_onchip_memory2_0+0xfc008688>
 400a950:	89000404 	addi	r4,r17,16
 400a954:	b93fbc16 	blt	r23,r4,400a848 <__alt_mem_onchip_memory2_0+0xfc008848>
 400a958:	b0800317 	ldw	r2,12(r22)
 400a95c:	b0c00217 	ldw	r3,8(r22)
 400a960:	81bfff04 	addi	r6,r16,-4
 400a964:	01000904 	movi	r4,36
 400a968:	18800315 	stw	r2,12(r3)
 400a96c:	10c00215 	stw	r3,8(r2)
 400a970:	b4800204 	addi	r18,r22,8
 400a974:	21804336 	bltu	r4,r6,400aa84 <_realloc_r+0x508>
 400a978:	008004c4 	movi	r2,19
 400a97c:	11803f2e 	bgeu	r2,r6,400aa7c <_realloc_r+0x500>
 400a980:	a8800017 	ldw	r2,0(r21)
 400a984:	b0800215 	stw	r2,8(r22)
 400a988:	a8800117 	ldw	r2,4(r21)
 400a98c:	b0800315 	stw	r2,12(r22)
 400a990:	008006c4 	movi	r2,27
 400a994:	11803f36 	bltu	r2,r6,400aa94 <_realloc_r+0x518>
 400a998:	b0800404 	addi	r2,r22,16
 400a99c:	ad400204 	addi	r21,r21,8
 400a9a0:	a8c00017 	ldw	r3,0(r21)
 400a9a4:	10c00015 	stw	r3,0(r2)
 400a9a8:	a8c00117 	ldw	r3,4(r21)
 400a9ac:	10c00115 	stw	r3,4(r2)
 400a9b0:	a8c00217 	ldw	r3,8(r21)
 400a9b4:	10c00215 	stw	r3,8(r2)
 400a9b8:	b447883a 	add	r3,r22,r17
 400a9bc:	bc45c83a 	sub	r2,r23,r17
 400a9c0:	e0c00215 	stw	r3,8(fp)
 400a9c4:	10800054 	ori	r2,r2,1
 400a9c8:	18800115 	stw	r2,4(r3)
 400a9cc:	b0800117 	ldw	r2,4(r22)
 400a9d0:	a009883a 	mov	r4,r20
 400a9d4:	1080004c 	andi	r2,r2,1
 400a9d8:	1462b03a 	or	r17,r2,r17
 400a9dc:	b4400115 	stw	r17,4(r22)
 400a9e0:	4011fc80 	call	4011fc8 <__malloc_unlock>
 400a9e4:	9005883a 	mov	r2,r18
 400a9e8:	003f4006 	br	400a6ec <__alt_mem_onchip_memory2_0+0xfc0086ec>
 400a9ec:	a8c00217 	ldw	r3,8(r21)
 400a9f0:	90c00215 	stw	r3,8(r18)
 400a9f4:	a8c00317 	ldw	r3,12(r21)
 400a9f8:	90c00315 	stw	r3,12(r18)
 400a9fc:	30801126 	beq	r6,r2,400aa44 <_realloc_r+0x4c8>
 400aa00:	90800404 	addi	r2,r18,16
 400aa04:	a8c00404 	addi	r3,r21,16
 400aa08:	003f1906 	br	400a670 <__alt_mem_onchip_memory2_0+0xfc008670>
 400aa0c:	90ffff17 	ldw	r3,-4(r18)
 400aa10:	00bfff04 	movi	r2,-4
 400aa14:	a825883a 	mov	r18,r21
 400aa18:	1884703a 	and	r2,r3,r2
 400aa1c:	80a1883a 	add	r16,r16,r2
 400aa20:	003f2406 	br	400a6b4 <__alt_mem_onchip_memory2_0+0xfc0086b4>
 400aa24:	a8800217 	ldw	r2,8(r21)
 400aa28:	b0800415 	stw	r2,16(r22)
 400aa2c:	a8800317 	ldw	r2,12(r21)
 400aa30:	b0800515 	stw	r2,20(r22)
 400aa34:	31000a26 	beq	r6,r4,400aa60 <_realloc_r+0x4e4>
 400aa38:	b0800604 	addi	r2,r22,24
 400aa3c:	ad400404 	addi	r21,r21,16
 400aa40:	003fa906 	br	400a8e8 <__alt_mem_onchip_memory2_0+0xfc0088e8>
 400aa44:	a9000417 	ldw	r4,16(r21)
 400aa48:	90800604 	addi	r2,r18,24
 400aa4c:	a8c00604 	addi	r3,r21,24
 400aa50:	91000415 	stw	r4,16(r18)
 400aa54:	a9000517 	ldw	r4,20(r21)
 400aa58:	91000515 	stw	r4,20(r18)
 400aa5c:	003f0406 	br	400a670 <__alt_mem_onchip_memory2_0+0xfc008670>
 400aa60:	a8c00417 	ldw	r3,16(r21)
 400aa64:	ad400604 	addi	r21,r21,24
 400aa68:	b0800804 	addi	r2,r22,32
 400aa6c:	b0c00615 	stw	r3,24(r22)
 400aa70:	a8ffff17 	ldw	r3,-4(r21)
 400aa74:	b0c00715 	stw	r3,28(r22)
 400aa78:	003f9b06 	br	400a8e8 <__alt_mem_onchip_memory2_0+0xfc0088e8>
 400aa7c:	9005883a 	mov	r2,r18
 400aa80:	003fc706 	br	400a9a0 <__alt_mem_onchip_memory2_0+0xfc0089a0>
 400aa84:	a80b883a 	mov	r5,r21
 400aa88:	9009883a 	mov	r4,r18
 400aa8c:	40092fc0 	call	40092fc <memmove>
 400aa90:	003fc906 	br	400a9b8 <__alt_mem_onchip_memory2_0+0xfc0089b8>
 400aa94:	a8800217 	ldw	r2,8(r21)
 400aa98:	b0800415 	stw	r2,16(r22)
 400aa9c:	a8800317 	ldw	r2,12(r21)
 400aaa0:	b0800515 	stw	r2,20(r22)
 400aaa4:	31000726 	beq	r6,r4,400aac4 <_realloc_r+0x548>
 400aaa8:	b0800604 	addi	r2,r22,24
 400aaac:	ad400404 	addi	r21,r21,16
 400aab0:	003fbb06 	br	400a9a0 <__alt_mem_onchip_memory2_0+0xfc0089a0>
 400aab4:	a009883a 	mov	r4,r20
 400aab8:	4011fc80 	call	4011fc8 <__malloc_unlock>
 400aabc:	0005883a 	mov	r2,zero
 400aac0:	003f0a06 	br	400a6ec <__alt_mem_onchip_memory2_0+0xfc0086ec>
 400aac4:	a8c00417 	ldw	r3,16(r21)
 400aac8:	ad400604 	addi	r21,r21,24
 400aacc:	b0800804 	addi	r2,r22,32
 400aad0:	b0c00615 	stw	r3,24(r22)
 400aad4:	a8ffff17 	ldw	r3,-4(r21)
 400aad8:	b0c00715 	stw	r3,28(r22)
 400aadc:	003fb006 	br	400a9a0 <__alt_mem_onchip_memory2_0+0xfc0089a0>

0400aae0 <__fpclassifyd>:
 400aae0:	00a00034 	movhi	r2,32768
 400aae4:	10bfffc4 	addi	r2,r2,-1
 400aae8:	2884703a 	and	r2,r5,r2
 400aaec:	10000726 	beq	r2,zero,400ab0c <__fpclassifyd+0x2c>
 400aaf0:	00fffc34 	movhi	r3,65520
 400aaf4:	019ff834 	movhi	r6,32736
 400aaf8:	28c7883a 	add	r3,r5,r3
 400aafc:	31bfffc4 	addi	r6,r6,-1
 400ab00:	30c00536 	bltu	r6,r3,400ab18 <__fpclassifyd+0x38>
 400ab04:	00800104 	movi	r2,4
 400ab08:	f800283a 	ret
 400ab0c:	2000021e 	bne	r4,zero,400ab18 <__fpclassifyd+0x38>
 400ab10:	00800084 	movi	r2,2
 400ab14:	f800283a 	ret
 400ab18:	00dffc34 	movhi	r3,32752
 400ab1c:	019ff834 	movhi	r6,32736
 400ab20:	28cb883a 	add	r5,r5,r3
 400ab24:	31bfffc4 	addi	r6,r6,-1
 400ab28:	317ff62e 	bgeu	r6,r5,400ab04 <__alt_mem_onchip_memory2_0+0xfc008b04>
 400ab2c:	01400434 	movhi	r5,16
 400ab30:	297fffc4 	addi	r5,r5,-1
 400ab34:	28800236 	bltu	r5,r2,400ab40 <__fpclassifyd+0x60>
 400ab38:	008000c4 	movi	r2,3
 400ab3c:	f800283a 	ret
 400ab40:	10c00226 	beq	r2,r3,400ab4c <__fpclassifyd+0x6c>
 400ab44:	0005883a 	mov	r2,zero
 400ab48:	f800283a 	ret
 400ab4c:	2005003a 	cmpeq	r2,r4,zero
 400ab50:	f800283a 	ret

0400ab54 <_sbrk_r>:
 400ab54:	defffd04 	addi	sp,sp,-12
 400ab58:	dc000015 	stw	r16,0(sp)
 400ab5c:	040100b4 	movhi	r16,1026
 400ab60:	dc400115 	stw	r17,4(sp)
 400ab64:	84016204 	addi	r16,r16,1416
 400ab68:	2023883a 	mov	r17,r4
 400ab6c:	2809883a 	mov	r4,r5
 400ab70:	dfc00215 	stw	ra,8(sp)
 400ab74:	80000015 	stw	zero,0(r16)
 400ab78:	4011a8c0 	call	4011a8c <sbrk>
 400ab7c:	00ffffc4 	movi	r3,-1
 400ab80:	10c00526 	beq	r2,r3,400ab98 <_sbrk_r+0x44>
 400ab84:	dfc00217 	ldw	ra,8(sp)
 400ab88:	dc400117 	ldw	r17,4(sp)
 400ab8c:	dc000017 	ldw	r16,0(sp)
 400ab90:	dec00304 	addi	sp,sp,12
 400ab94:	f800283a 	ret
 400ab98:	80c00017 	ldw	r3,0(r16)
 400ab9c:	183ff926 	beq	r3,zero,400ab84 <__alt_mem_onchip_memory2_0+0xfc008b84>
 400aba0:	88c00015 	stw	r3,0(r17)
 400aba4:	003ff706 	br	400ab84 <__alt_mem_onchip_memory2_0+0xfc008b84>

0400aba8 <__sread>:
 400aba8:	defffe04 	addi	sp,sp,-8
 400abac:	dc000015 	stw	r16,0(sp)
 400abb0:	2821883a 	mov	r16,r5
 400abb4:	2940038f 	ldh	r5,14(r5)
 400abb8:	dfc00115 	stw	ra,4(sp)
 400abbc:	400dda80 	call	400dda8 <_read_r>
 400abc0:	10000716 	blt	r2,zero,400abe0 <__sread+0x38>
 400abc4:	80c01417 	ldw	r3,80(r16)
 400abc8:	1887883a 	add	r3,r3,r2
 400abcc:	80c01415 	stw	r3,80(r16)
 400abd0:	dfc00117 	ldw	ra,4(sp)
 400abd4:	dc000017 	ldw	r16,0(sp)
 400abd8:	dec00204 	addi	sp,sp,8
 400abdc:	f800283a 	ret
 400abe0:	80c0030b 	ldhu	r3,12(r16)
 400abe4:	18fbffcc 	andi	r3,r3,61439
 400abe8:	80c0030d 	sth	r3,12(r16)
 400abec:	dfc00117 	ldw	ra,4(sp)
 400abf0:	dc000017 	ldw	r16,0(sp)
 400abf4:	dec00204 	addi	sp,sp,8
 400abf8:	f800283a 	ret

0400abfc <__seofread>:
 400abfc:	0005883a 	mov	r2,zero
 400ac00:	f800283a 	ret

0400ac04 <__swrite>:
 400ac04:	2880030b 	ldhu	r2,12(r5)
 400ac08:	defffb04 	addi	sp,sp,-20
 400ac0c:	dcc00315 	stw	r19,12(sp)
 400ac10:	dc800215 	stw	r18,8(sp)
 400ac14:	dc400115 	stw	r17,4(sp)
 400ac18:	dc000015 	stw	r16,0(sp)
 400ac1c:	dfc00415 	stw	ra,16(sp)
 400ac20:	10c0400c 	andi	r3,r2,256
 400ac24:	2821883a 	mov	r16,r5
 400ac28:	2023883a 	mov	r17,r4
 400ac2c:	3025883a 	mov	r18,r6
 400ac30:	3827883a 	mov	r19,r7
 400ac34:	18000526 	beq	r3,zero,400ac4c <__swrite+0x48>
 400ac38:	2940038f 	ldh	r5,14(r5)
 400ac3c:	01c00084 	movi	r7,2
 400ac40:	000d883a 	mov	r6,zero
 400ac44:	400dd480 	call	400dd48 <_lseek_r>
 400ac48:	8080030b 	ldhu	r2,12(r16)
 400ac4c:	8140038f 	ldh	r5,14(r16)
 400ac50:	10bbffcc 	andi	r2,r2,61439
 400ac54:	980f883a 	mov	r7,r19
 400ac58:	900d883a 	mov	r6,r18
 400ac5c:	8809883a 	mov	r4,r17
 400ac60:	8080030d 	sth	r2,12(r16)
 400ac64:	dfc00417 	ldw	ra,16(sp)
 400ac68:	dcc00317 	ldw	r19,12(sp)
 400ac6c:	dc800217 	ldw	r18,8(sp)
 400ac70:	dc400117 	ldw	r17,4(sp)
 400ac74:	dc000017 	ldw	r16,0(sp)
 400ac78:	dec00504 	addi	sp,sp,20
 400ac7c:	400d8141 	jmpi	400d814 <_write_r>

0400ac80 <__sseek>:
 400ac80:	defffe04 	addi	sp,sp,-8
 400ac84:	dc000015 	stw	r16,0(sp)
 400ac88:	2821883a 	mov	r16,r5
 400ac8c:	2940038f 	ldh	r5,14(r5)
 400ac90:	dfc00115 	stw	ra,4(sp)
 400ac94:	400dd480 	call	400dd48 <_lseek_r>
 400ac98:	00ffffc4 	movi	r3,-1
 400ac9c:	10c00826 	beq	r2,r3,400acc0 <__sseek+0x40>
 400aca0:	80c0030b 	ldhu	r3,12(r16)
 400aca4:	80801415 	stw	r2,80(r16)
 400aca8:	18c40014 	ori	r3,r3,4096
 400acac:	80c0030d 	sth	r3,12(r16)
 400acb0:	dfc00117 	ldw	ra,4(sp)
 400acb4:	dc000017 	ldw	r16,0(sp)
 400acb8:	dec00204 	addi	sp,sp,8
 400acbc:	f800283a 	ret
 400acc0:	80c0030b 	ldhu	r3,12(r16)
 400acc4:	18fbffcc 	andi	r3,r3,61439
 400acc8:	80c0030d 	sth	r3,12(r16)
 400accc:	dfc00117 	ldw	ra,4(sp)
 400acd0:	dc000017 	ldw	r16,0(sp)
 400acd4:	dec00204 	addi	sp,sp,8
 400acd8:	f800283a 	ret

0400acdc <__sclose>:
 400acdc:	2940038f 	ldh	r5,14(r5)
 400ace0:	400d8741 	jmpi	400d874 <_close_r>

0400ace4 <strcmp>:
 400ace4:	2144b03a 	or	r2,r4,r5
 400ace8:	108000cc 	andi	r2,r2,3
 400acec:	1000171e 	bne	r2,zero,400ad4c <strcmp+0x68>
 400acf0:	20800017 	ldw	r2,0(r4)
 400acf4:	28c00017 	ldw	r3,0(r5)
 400acf8:	10c0141e 	bne	r2,r3,400ad4c <strcmp+0x68>
 400acfc:	027fbff4 	movhi	r9,65279
 400ad00:	4a7fbfc4 	addi	r9,r9,-257
 400ad04:	0086303a 	nor	r3,zero,r2
 400ad08:	02202074 	movhi	r8,32897
 400ad0c:	1245883a 	add	r2,r2,r9
 400ad10:	42202004 	addi	r8,r8,-32640
 400ad14:	10c4703a 	and	r2,r2,r3
 400ad18:	1204703a 	and	r2,r2,r8
 400ad1c:	10000226 	beq	r2,zero,400ad28 <strcmp+0x44>
 400ad20:	00002306 	br	400adb0 <strcmp+0xcc>
 400ad24:	1000221e 	bne	r2,zero,400adb0 <strcmp+0xcc>
 400ad28:	21000104 	addi	r4,r4,4
 400ad2c:	20c00017 	ldw	r3,0(r4)
 400ad30:	29400104 	addi	r5,r5,4
 400ad34:	29800017 	ldw	r6,0(r5)
 400ad38:	1a4f883a 	add	r7,r3,r9
 400ad3c:	00c4303a 	nor	r2,zero,r3
 400ad40:	3884703a 	and	r2,r7,r2
 400ad44:	1204703a 	and	r2,r2,r8
 400ad48:	19bff626 	beq	r3,r6,400ad24 <__alt_mem_onchip_memory2_0+0xfc008d24>
 400ad4c:	20800003 	ldbu	r2,0(r4)
 400ad50:	10c03fcc 	andi	r3,r2,255
 400ad54:	18c0201c 	xori	r3,r3,128
 400ad58:	18ffe004 	addi	r3,r3,-128
 400ad5c:	18000c26 	beq	r3,zero,400ad90 <strcmp+0xac>
 400ad60:	29800007 	ldb	r6,0(r5)
 400ad64:	19800326 	beq	r3,r6,400ad74 <strcmp+0x90>
 400ad68:	00001306 	br	400adb8 <strcmp+0xd4>
 400ad6c:	29800007 	ldb	r6,0(r5)
 400ad70:	11800b1e 	bne	r2,r6,400ada0 <strcmp+0xbc>
 400ad74:	21000044 	addi	r4,r4,1
 400ad78:	20c00003 	ldbu	r3,0(r4)
 400ad7c:	29400044 	addi	r5,r5,1
 400ad80:	18803fcc 	andi	r2,r3,255
 400ad84:	1080201c 	xori	r2,r2,128
 400ad88:	10bfe004 	addi	r2,r2,-128
 400ad8c:	103ff71e 	bne	r2,zero,400ad6c <__alt_mem_onchip_memory2_0+0xfc008d6c>
 400ad90:	0007883a 	mov	r3,zero
 400ad94:	28800003 	ldbu	r2,0(r5)
 400ad98:	1885c83a 	sub	r2,r3,r2
 400ad9c:	f800283a 	ret
 400ada0:	28800003 	ldbu	r2,0(r5)
 400ada4:	18c03fcc 	andi	r3,r3,255
 400ada8:	1885c83a 	sub	r2,r3,r2
 400adac:	f800283a 	ret
 400adb0:	0005883a 	mov	r2,zero
 400adb4:	f800283a 	ret
 400adb8:	10c03fcc 	andi	r3,r2,255
 400adbc:	003ff506 	br	400ad94 <__alt_mem_onchip_memory2_0+0xfc008d94>

0400adc0 <__ssprint_r>:
 400adc0:	30800217 	ldw	r2,8(r6)
 400adc4:	defff604 	addi	sp,sp,-40
 400adc8:	dc800215 	stw	r18,8(sp)
 400adcc:	dfc00915 	stw	ra,36(sp)
 400add0:	df000815 	stw	fp,32(sp)
 400add4:	ddc00715 	stw	r23,28(sp)
 400add8:	dd800615 	stw	r22,24(sp)
 400addc:	dd400515 	stw	r21,20(sp)
 400ade0:	dd000415 	stw	r20,16(sp)
 400ade4:	dcc00315 	stw	r19,12(sp)
 400ade8:	dc400115 	stw	r17,4(sp)
 400adec:	dc000015 	stw	r16,0(sp)
 400adf0:	3025883a 	mov	r18,r6
 400adf4:	10005826 	beq	r2,zero,400af58 <__ssprint_r+0x198>
 400adf8:	2027883a 	mov	r19,r4
 400adfc:	35c00017 	ldw	r23,0(r6)
 400ae00:	29000017 	ldw	r4,0(r5)
 400ae04:	28800217 	ldw	r2,8(r5)
 400ae08:	2823883a 	mov	r17,r5
 400ae0c:	0039883a 	mov	fp,zero
 400ae10:	0021883a 	mov	r16,zero
 400ae14:	80003926 	beq	r16,zero,400aefc <__ssprint_r+0x13c>
 400ae18:	102b883a 	mov	r21,r2
 400ae1c:	102d883a 	mov	r22,r2
 400ae20:	80803a36 	bltu	r16,r2,400af0c <__ssprint_r+0x14c>
 400ae24:	88c0030b 	ldhu	r3,12(r17)
 400ae28:	1881200c 	andi	r2,r3,1152
 400ae2c:	10002626 	beq	r2,zero,400aec8 <__ssprint_r+0x108>
 400ae30:	88800517 	ldw	r2,20(r17)
 400ae34:	89400417 	ldw	r5,16(r17)
 400ae38:	81800044 	addi	r6,r16,1
 400ae3c:	108f883a 	add	r7,r2,r2
 400ae40:	3885883a 	add	r2,r7,r2
 400ae44:	100ed7fa 	srli	r7,r2,31
 400ae48:	216dc83a 	sub	r22,r4,r5
 400ae4c:	3589883a 	add	r4,r6,r22
 400ae50:	3885883a 	add	r2,r7,r2
 400ae54:	102bd07a 	srai	r21,r2,1
 400ae58:	a80d883a 	mov	r6,r21
 400ae5c:	a900022e 	bgeu	r21,r4,400ae68 <__ssprint_r+0xa8>
 400ae60:	202b883a 	mov	r21,r4
 400ae64:	200d883a 	mov	r6,r4
 400ae68:	18c1000c 	andi	r3,r3,1024
 400ae6c:	18002a26 	beq	r3,zero,400af18 <__ssprint_r+0x158>
 400ae70:	300b883a 	mov	r5,r6
 400ae74:	9809883a 	mov	r4,r19
 400ae78:	40088c40 	call	40088c4 <_malloc_r>
 400ae7c:	1029883a 	mov	r20,r2
 400ae80:	10002c26 	beq	r2,zero,400af34 <__ssprint_r+0x174>
 400ae84:	89400417 	ldw	r5,16(r17)
 400ae88:	b00d883a 	mov	r6,r22
 400ae8c:	1009883a 	mov	r4,r2
 400ae90:	40091b40 	call	40091b4 <memcpy>
 400ae94:	8880030b 	ldhu	r2,12(r17)
 400ae98:	00fedfc4 	movi	r3,-1153
 400ae9c:	10c4703a 	and	r2,r2,r3
 400aea0:	10802014 	ori	r2,r2,128
 400aea4:	8880030d 	sth	r2,12(r17)
 400aea8:	a589883a 	add	r4,r20,r22
 400aeac:	adadc83a 	sub	r22,r21,r22
 400aeb0:	8d400515 	stw	r21,20(r17)
 400aeb4:	8d800215 	stw	r22,8(r17)
 400aeb8:	8d000415 	stw	r20,16(r17)
 400aebc:	89000015 	stw	r4,0(r17)
 400aec0:	802b883a 	mov	r21,r16
 400aec4:	802d883a 	mov	r22,r16
 400aec8:	b00d883a 	mov	r6,r22
 400aecc:	e00b883a 	mov	r5,fp
 400aed0:	40092fc0 	call	40092fc <memmove>
 400aed4:	88800217 	ldw	r2,8(r17)
 400aed8:	89000017 	ldw	r4,0(r17)
 400aedc:	90c00217 	ldw	r3,8(r18)
 400aee0:	1545c83a 	sub	r2,r2,r21
 400aee4:	2589883a 	add	r4,r4,r22
 400aee8:	88800215 	stw	r2,8(r17)
 400aeec:	89000015 	stw	r4,0(r17)
 400aef0:	1c21c83a 	sub	r16,r3,r16
 400aef4:	94000215 	stw	r16,8(r18)
 400aef8:	80001726 	beq	r16,zero,400af58 <__ssprint_r+0x198>
 400aefc:	bf000017 	ldw	fp,0(r23)
 400af00:	bc000117 	ldw	r16,4(r23)
 400af04:	bdc00204 	addi	r23,r23,8
 400af08:	003fc206 	br	400ae14 <__alt_mem_onchip_memory2_0+0xfc008e14>
 400af0c:	802b883a 	mov	r21,r16
 400af10:	802d883a 	mov	r22,r16
 400af14:	003fec06 	br	400aec8 <__alt_mem_onchip_memory2_0+0xfc008ec8>
 400af18:	9809883a 	mov	r4,r19
 400af1c:	400a57c0 	call	400a57c <_realloc_r>
 400af20:	1029883a 	mov	r20,r2
 400af24:	103fe01e 	bne	r2,zero,400aea8 <__alt_mem_onchip_memory2_0+0xfc008ea8>
 400af28:	89400417 	ldw	r5,16(r17)
 400af2c:	9809883a 	mov	r4,r19
 400af30:	4007cd80 	call	4007cd8 <_free_r>
 400af34:	88c0030b 	ldhu	r3,12(r17)
 400af38:	00800304 	movi	r2,12
 400af3c:	98800015 	stw	r2,0(r19)
 400af40:	18c01014 	ori	r3,r3,64
 400af44:	88c0030d 	sth	r3,12(r17)
 400af48:	00bfffc4 	movi	r2,-1
 400af4c:	90000215 	stw	zero,8(r18)
 400af50:	90000115 	stw	zero,4(r18)
 400af54:	00000206 	br	400af60 <__ssprint_r+0x1a0>
 400af58:	90000115 	stw	zero,4(r18)
 400af5c:	0005883a 	mov	r2,zero
 400af60:	dfc00917 	ldw	ra,36(sp)
 400af64:	df000817 	ldw	fp,32(sp)
 400af68:	ddc00717 	ldw	r23,28(sp)
 400af6c:	dd800617 	ldw	r22,24(sp)
 400af70:	dd400517 	ldw	r21,20(sp)
 400af74:	dd000417 	ldw	r20,16(sp)
 400af78:	dcc00317 	ldw	r19,12(sp)
 400af7c:	dc800217 	ldw	r18,8(sp)
 400af80:	dc400117 	ldw	r17,4(sp)
 400af84:	dc000017 	ldw	r16,0(sp)
 400af88:	dec00a04 	addi	sp,sp,40
 400af8c:	f800283a 	ret

0400af90 <___svfiprintf_internal_r>:
 400af90:	2880030b 	ldhu	r2,12(r5)
 400af94:	deffc804 	addi	sp,sp,-224
 400af98:	dcc03115 	stw	r19,196(sp)
 400af9c:	dfc03715 	stw	ra,220(sp)
 400afa0:	df003615 	stw	fp,216(sp)
 400afa4:	ddc03515 	stw	r23,212(sp)
 400afa8:	dd803415 	stw	r22,208(sp)
 400afac:	dd403315 	stw	r21,204(sp)
 400afb0:	dd003215 	stw	r20,200(sp)
 400afb4:	dc803015 	stw	r18,192(sp)
 400afb8:	dc402f15 	stw	r17,188(sp)
 400afbc:	dc002e15 	stw	r16,184(sp)
 400afc0:	d9402715 	stw	r5,156(sp)
 400afc4:	d9002a15 	stw	r4,168(sp)
 400afc8:	1080200c 	andi	r2,r2,128
 400afcc:	d9c02315 	stw	r7,140(sp)
 400afd0:	3027883a 	mov	r19,r6
 400afd4:	10000226 	beq	r2,zero,400afe0 <___svfiprintf_internal_r+0x50>
 400afd8:	28800417 	ldw	r2,16(r5)
 400afdc:	10041d26 	beq	r2,zero,400c054 <___svfiprintf_internal_r+0x10c4>
 400afe0:	dac01a04 	addi	r11,sp,104
 400afe4:	dac01e15 	stw	r11,120(sp)
 400afe8:	d8801e17 	ldw	r2,120(sp)
 400afec:	dac019c4 	addi	r11,sp,103
 400aff0:	dd402a17 	ldw	r21,168(sp)
 400aff4:	ddc02717 	ldw	r23,156(sp)
 400aff8:	058100b4 	movhi	r22,1026
 400affc:	050100b4 	movhi	r20,1026
 400b000:	dac01f15 	stw	r11,124(sp)
 400b004:	12d7c83a 	sub	r11,r2,r11
 400b008:	b5b31a04 	addi	r22,r22,-13208
 400b00c:	a5331604 	addi	r20,r20,-13224
 400b010:	dec01a15 	stw	sp,104(sp)
 400b014:	d8001c15 	stw	zero,112(sp)
 400b018:	d8001b15 	stw	zero,108(sp)
 400b01c:	d811883a 	mov	r8,sp
 400b020:	d8002915 	stw	zero,164(sp)
 400b024:	d8002515 	stw	zero,148(sp)
 400b028:	dac02b15 	stw	r11,172(sp)
 400b02c:	98800007 	ldb	r2,0(r19)
 400b030:	1002dd26 	beq	r2,zero,400bba8 <___svfiprintf_internal_r+0xc18>
 400b034:	00c00944 	movi	r3,37
 400b038:	9823883a 	mov	r17,r19
 400b03c:	10c0021e 	bne	r2,r3,400b048 <___svfiprintf_internal_r+0xb8>
 400b040:	00001406 	br	400b094 <___svfiprintf_internal_r+0x104>
 400b044:	10c00326 	beq	r2,r3,400b054 <___svfiprintf_internal_r+0xc4>
 400b048:	8c400044 	addi	r17,r17,1
 400b04c:	88800007 	ldb	r2,0(r17)
 400b050:	103ffc1e 	bne	r2,zero,400b044 <__alt_mem_onchip_memory2_0+0xfc009044>
 400b054:	8ce1c83a 	sub	r16,r17,r19
 400b058:	80000e26 	beq	r16,zero,400b094 <___svfiprintf_internal_r+0x104>
 400b05c:	d8c01c17 	ldw	r3,112(sp)
 400b060:	d8801b17 	ldw	r2,108(sp)
 400b064:	44c00015 	stw	r19,0(r8)
 400b068:	1c07883a 	add	r3,r3,r16
 400b06c:	10800044 	addi	r2,r2,1
 400b070:	d8c01c15 	stw	r3,112(sp)
 400b074:	44000115 	stw	r16,4(r8)
 400b078:	d8801b15 	stw	r2,108(sp)
 400b07c:	00c001c4 	movi	r3,7
 400b080:	18831e16 	blt	r3,r2,400bcfc <___svfiprintf_internal_r+0xd6c>
 400b084:	42000204 	addi	r8,r8,8
 400b088:	dac02517 	ldw	r11,148(sp)
 400b08c:	5c17883a 	add	r11,r11,r16
 400b090:	dac02515 	stw	r11,148(sp)
 400b094:	88800007 	ldb	r2,0(r17)
 400b098:	1002c526 	beq	r2,zero,400bbb0 <___svfiprintf_internal_r+0xc20>
 400b09c:	88c00047 	ldb	r3,1(r17)
 400b0a0:	8cc00044 	addi	r19,r17,1
 400b0a4:	d8001d85 	stb	zero,118(sp)
 400b0a8:	0009883a 	mov	r4,zero
 400b0ac:	000f883a 	mov	r7,zero
 400b0b0:	043fffc4 	movi	r16,-1
 400b0b4:	d8002415 	stw	zero,144(sp)
 400b0b8:	0025883a 	mov	r18,zero
 400b0bc:	01401604 	movi	r5,88
 400b0c0:	01800244 	movi	r6,9
 400b0c4:	02800a84 	movi	r10,42
 400b0c8:	02401b04 	movi	r9,108
 400b0cc:	9cc00044 	addi	r19,r19,1
 400b0d0:	18bff804 	addi	r2,r3,-32
 400b0d4:	2881dd36 	bltu	r5,r2,400b84c <___svfiprintf_internal_r+0x8bc>
 400b0d8:	100490ba 	slli	r2,r2,2
 400b0dc:	02c10074 	movhi	r11,1025
 400b0e0:	5aec3c04 	addi	r11,r11,-20240
 400b0e4:	12c5883a 	add	r2,r2,r11
 400b0e8:	10800017 	ldw	r2,0(r2)
 400b0ec:	1000683a 	jmp	r2
 400b0f0:	0400b2ec 	andhi	r16,zero,715
 400b0f4:	0400b84c 	andi	r16,zero,737
 400b0f8:	0400b84c 	andi	r16,zero,737
 400b0fc:	0400b2e0 	cmpeqi	r16,zero,715
 400b100:	0400b84c 	andi	r16,zero,737
 400b104:	0400b84c 	andi	r16,zero,737
 400b108:	0400b84c 	andi	r16,zero,737
 400b10c:	0400b84c 	andi	r16,zero,737
 400b110:	0400b84c 	andi	r16,zero,737
 400b114:	0400b84c 	andi	r16,zero,737
 400b118:	0400b254 	movui	r16,713
 400b11c:	0400b430 	cmpltui	r16,zero,720
 400b120:	0400b84c 	andi	r16,zero,737
 400b124:	0400b280 	call	400b28 <OSCtxSw_SWITCH_PC+0x400ae8>
 400b128:	0400b880 	call	400b88 <OSCtxSw_SWITCH_PC+0x400b48>
 400b12c:	0400b84c 	andi	r16,zero,737
 400b130:	0400b874 	movhi	r16,737
 400b134:	0400b814 	movui	r16,736
 400b138:	0400b814 	movui	r16,736
 400b13c:	0400b814 	movui	r16,736
 400b140:	0400b814 	movui	r16,736
 400b144:	0400b814 	movui	r16,736
 400b148:	0400b814 	movui	r16,736
 400b14c:	0400b814 	movui	r16,736
 400b150:	0400b814 	movui	r16,736
 400b154:	0400b814 	movui	r16,736
 400b158:	0400b84c 	andi	r16,zero,737
 400b15c:	0400b84c 	andi	r16,zero,737
 400b160:	0400b84c 	andi	r16,zero,737
 400b164:	0400b84c 	andi	r16,zero,737
 400b168:	0400b84c 	andi	r16,zero,737
 400b16c:	0400b84c 	andi	r16,zero,737
 400b170:	0400b84c 	andi	r16,zero,737
 400b174:	0400b84c 	andi	r16,zero,737
 400b178:	0400b84c 	andi	r16,zero,737
 400b17c:	0400b84c 	andi	r16,zero,737
 400b180:	0400b7b0 	cmpltui	r16,zero,734
 400b184:	0400b84c 	andi	r16,zero,737
 400b188:	0400b84c 	andi	r16,zero,737
 400b18c:	0400b84c 	andi	r16,zero,737
 400b190:	0400b84c 	andi	r16,zero,737
 400b194:	0400b84c 	andi	r16,zero,737
 400b198:	0400b84c 	andi	r16,zero,737
 400b19c:	0400b84c 	andi	r16,zero,737
 400b1a0:	0400b84c 	andi	r16,zero,737
 400b1a4:	0400b84c 	andi	r16,zero,737
 400b1a8:	0400b84c 	andi	r16,zero,737
 400b1ac:	0400b928 	cmpgeui	r16,zero,740
 400b1b0:	0400b84c 	andi	r16,zero,737
 400b1b4:	0400b84c 	andi	r16,zero,737
 400b1b8:	0400b84c 	andi	r16,zero,737
 400b1bc:	0400b84c 	andi	r16,zero,737
 400b1c0:	0400b84c 	andi	r16,zero,737
 400b1c4:	0400b8c0 	call	400b8c <OSCtxSw_SWITCH_PC+0x400b4c>
 400b1c8:	0400b84c 	andi	r16,zero,737
 400b1cc:	0400b84c 	andi	r16,zero,737
 400b1d0:	0400b5f4 	movhi	r16,727
 400b1d4:	0400b84c 	andi	r16,zero,737
 400b1d8:	0400b84c 	andi	r16,zero,737
 400b1dc:	0400b84c 	andi	r16,zero,737
 400b1e0:	0400b84c 	andi	r16,zero,737
 400b1e4:	0400b84c 	andi	r16,zero,737
 400b1e8:	0400b84c 	andi	r16,zero,737
 400b1ec:	0400b84c 	andi	r16,zero,737
 400b1f0:	0400b84c 	andi	r16,zero,737
 400b1f4:	0400b84c 	andi	r16,zero,737
 400b1f8:	0400b84c 	andi	r16,zero,737
 400b1fc:	0400b4e4 	muli	r16,zero,723
 400b200:	0400b690 	cmplti	r16,zero,730
 400b204:	0400b84c 	andi	r16,zero,737
 400b208:	0400b84c 	andi	r16,zero,737
 400b20c:	0400b84c 	andi	r16,zero,737
 400b210:	0400b684 	movi	r16,730
 400b214:	0400b690 	cmplti	r16,zero,730
 400b218:	0400b84c 	andi	r16,zero,737
 400b21c:	0400b84c 	andi	r16,zero,737
 400b220:	0400b674 	movhi	r16,729
 400b224:	0400b84c 	andi	r16,zero,737
 400b228:	0400b638 	rdprs	r16,zero,728
 400b22c:	0400b440 	call	400b44 <OSCtxSw_SWITCH_PC+0x400b04>
 400b230:	0400b28c 	andi	r16,zero,714
 400b234:	0400b7a4 	muli	r16,zero,734
 400b238:	0400b84c 	andi	r16,zero,737
 400b23c:	0400b758 	cmpnei	r16,zero,733
 400b240:	0400b84c 	andi	r16,zero,737
 400b244:	0400b3b0 	cmpltui	r16,zero,718
 400b248:	0400b84c 	andi	r16,zero,737
 400b24c:	0400b84c 	andi	r16,zero,737
 400b250:	0400b30c 	andi	r16,zero,716
 400b254:	dac02317 	ldw	r11,140(sp)
 400b258:	5ac00017 	ldw	r11,0(r11)
 400b25c:	dac02415 	stw	r11,144(sp)
 400b260:	dac02317 	ldw	r11,140(sp)
 400b264:	58800104 	addi	r2,r11,4
 400b268:	dac02417 	ldw	r11,144(sp)
 400b26c:	5802e90e 	bge	r11,zero,400be14 <___svfiprintf_internal_r+0xe84>
 400b270:	dac02417 	ldw	r11,144(sp)
 400b274:	d8802315 	stw	r2,140(sp)
 400b278:	02d7c83a 	sub	r11,zero,r11
 400b27c:	dac02415 	stw	r11,144(sp)
 400b280:	94800114 	ori	r18,r18,4
 400b284:	98c00007 	ldb	r3,0(r19)
 400b288:	003f9006 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b28c:	00800c04 	movi	r2,48
 400b290:	dac02317 	ldw	r11,140(sp)
 400b294:	d8801d05 	stb	r2,116(sp)
 400b298:	00801e04 	movi	r2,120
 400b29c:	d8801d45 	stb	r2,117(sp)
 400b2a0:	d8001d85 	stb	zero,118(sp)
 400b2a4:	58c00104 	addi	r3,r11,4
 400b2a8:	5f000017 	ldw	fp,0(r11)
 400b2ac:	0013883a 	mov	r9,zero
 400b2b0:	90800094 	ori	r2,r18,2
 400b2b4:	80032b16 	blt	r16,zero,400bf64 <___svfiprintf_internal_r+0xfd4>
 400b2b8:	00bfdfc4 	movi	r2,-129
 400b2bc:	90a4703a 	and	r18,r18,r2
 400b2c0:	d8c02315 	stw	r3,140(sp)
 400b2c4:	94800094 	ori	r18,r18,2
 400b2c8:	e002dc26 	beq	fp,zero,400be3c <___svfiprintf_internal_r+0xeac>
 400b2cc:	010100b4 	movhi	r4,1026
 400b2d0:	2132ad04 	addi	r4,r4,-13644
 400b2d4:	0015883a 	mov	r10,zero
 400b2d8:	d9002915 	stw	r4,164(sp)
 400b2dc:	00002306 	br	400b36c <___svfiprintf_internal_r+0x3dc>
 400b2e0:	94800054 	ori	r18,r18,1
 400b2e4:	98c00007 	ldb	r3,0(r19)
 400b2e8:	003f7806 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b2ec:	38803fcc 	andi	r2,r7,255
 400b2f0:	1080201c 	xori	r2,r2,128
 400b2f4:	10bfe004 	addi	r2,r2,-128
 400b2f8:	1002f31e 	bne	r2,zero,400bec8 <___svfiprintf_internal_r+0xf38>
 400b2fc:	01000044 	movi	r4,1
 400b300:	01c00804 	movi	r7,32
 400b304:	98c00007 	ldb	r3,0(r19)
 400b308:	003f7006 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b30c:	21003fcc 	andi	r4,r4,255
 400b310:	2003aa1e 	bne	r4,zero,400c1bc <___svfiprintf_internal_r+0x122c>
 400b314:	008100b4 	movhi	r2,1026
 400b318:	10b2ad04 	addi	r2,r2,-13644
 400b31c:	d8802915 	stw	r2,164(sp)
 400b320:	9080080c 	andi	r2,r18,32
 400b324:	1000ba26 	beq	r2,zero,400b610 <___svfiprintf_internal_r+0x680>
 400b328:	dac02317 	ldw	r11,140(sp)
 400b32c:	5f000017 	ldw	fp,0(r11)
 400b330:	5a400117 	ldw	r9,4(r11)
 400b334:	5ac00204 	addi	r11,r11,8
 400b338:	dac02315 	stw	r11,140(sp)
 400b33c:	9080004c 	andi	r2,r18,1
 400b340:	10029026 	beq	r2,zero,400bd84 <___svfiprintf_internal_r+0xdf4>
 400b344:	e244b03a 	or	r2,fp,r9
 400b348:	1002d41e 	bne	r2,zero,400be9c <___svfiprintf_internal_r+0xf0c>
 400b34c:	d8001d85 	stb	zero,118(sp)
 400b350:	80030b16 	blt	r16,zero,400bf80 <___svfiprintf_internal_r+0xff0>
 400b354:	00bfdfc4 	movi	r2,-129
 400b358:	90a4703a 	and	r18,r18,r2
 400b35c:	0015883a 	mov	r10,zero
 400b360:	80002426 	beq	r16,zero,400b3f4 <___svfiprintf_internal_r+0x464>
 400b364:	0039883a 	mov	fp,zero
 400b368:	0013883a 	mov	r9,zero
 400b36c:	d9002917 	ldw	r4,164(sp)
 400b370:	dc401a04 	addi	r17,sp,104
 400b374:	e08003cc 	andi	r2,fp,15
 400b378:	4806973a 	slli	r3,r9,28
 400b37c:	2085883a 	add	r2,r4,r2
 400b380:	e038d13a 	srli	fp,fp,4
 400b384:	10800003 	ldbu	r2,0(r2)
 400b388:	4812d13a 	srli	r9,r9,4
 400b38c:	8c7fffc4 	addi	r17,r17,-1
 400b390:	1f38b03a 	or	fp,r3,fp
 400b394:	88800005 	stb	r2,0(r17)
 400b398:	e244b03a 	or	r2,fp,r9
 400b39c:	103ff51e 	bne	r2,zero,400b374 <__alt_mem_onchip_memory2_0+0xfc009374>
 400b3a0:	dac01e17 	ldw	r11,120(sp)
 400b3a4:	5c57c83a 	sub	r11,r11,r17
 400b3a8:	dac02115 	stw	r11,132(sp)
 400b3ac:	00001406 	br	400b400 <___svfiprintf_internal_r+0x470>
 400b3b0:	21003fcc 	andi	r4,r4,255
 400b3b4:	2003741e 	bne	r4,zero,400c188 <___svfiprintf_internal_r+0x11f8>
 400b3b8:	9080080c 	andi	r2,r18,32
 400b3bc:	10014526 	beq	r2,zero,400b8d4 <___svfiprintf_internal_r+0x944>
 400b3c0:	dac02317 	ldw	r11,140(sp)
 400b3c4:	d8001d85 	stb	zero,118(sp)
 400b3c8:	58c00204 	addi	r3,r11,8
 400b3cc:	5f000017 	ldw	fp,0(r11)
 400b3d0:	5a400117 	ldw	r9,4(r11)
 400b3d4:	8002d916 	blt	r16,zero,400bf3c <___svfiprintf_internal_r+0xfac>
 400b3d8:	013fdfc4 	movi	r4,-129
 400b3dc:	e244b03a 	or	r2,fp,r9
 400b3e0:	d8c02315 	stw	r3,140(sp)
 400b3e4:	9124703a 	and	r18,r18,r4
 400b3e8:	0015883a 	mov	r10,zero
 400b3ec:	1000b91e 	bne	r2,zero,400b6d4 <___svfiprintf_internal_r+0x744>
 400b3f0:	8002e61e 	bne	r16,zero,400bf8c <___svfiprintf_internal_r+0xffc>
 400b3f4:	0021883a 	mov	r16,zero
 400b3f8:	d8002115 	stw	zero,132(sp)
 400b3fc:	dc401a04 	addi	r17,sp,104
 400b400:	d8c02117 	ldw	r3,132(sp)
 400b404:	dc002015 	stw	r16,128(sp)
 400b408:	80c0010e 	bge	r16,r3,400b410 <___svfiprintf_internal_r+0x480>
 400b40c:	d8c02015 	stw	r3,128(sp)
 400b410:	52803fcc 	andi	r10,r10,255
 400b414:	5280201c 	xori	r10,r10,128
 400b418:	52bfe004 	addi	r10,r10,-128
 400b41c:	50003c26 	beq	r10,zero,400b510 <___svfiprintf_internal_r+0x580>
 400b420:	dac02017 	ldw	r11,128(sp)
 400b424:	5ac00044 	addi	r11,r11,1
 400b428:	dac02015 	stw	r11,128(sp)
 400b42c:	00003806 	br	400b510 <___svfiprintf_internal_r+0x580>
 400b430:	01000044 	movi	r4,1
 400b434:	01c00ac4 	movi	r7,43
 400b438:	98c00007 	ldb	r3,0(r19)
 400b43c:	003f2306 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b440:	21003fcc 	andi	r4,r4,255
 400b444:	2003481e 	bne	r4,zero,400c168 <___svfiprintf_internal_r+0x11d8>
 400b448:	9080080c 	andi	r2,r18,32
 400b44c:	10013b26 	beq	r2,zero,400b93c <___svfiprintf_internal_r+0x9ac>
 400b450:	dac02317 	ldw	r11,140(sp)
 400b454:	d8001d85 	stb	zero,118(sp)
 400b458:	58800204 	addi	r2,r11,8
 400b45c:	5f000017 	ldw	fp,0(r11)
 400b460:	5a400117 	ldw	r9,4(r11)
 400b464:	8002a816 	blt	r16,zero,400bf08 <___svfiprintf_internal_r+0xf78>
 400b468:	013fdfc4 	movi	r4,-129
 400b46c:	e246b03a 	or	r3,fp,r9
 400b470:	d8802315 	stw	r2,140(sp)
 400b474:	9124703a 	and	r18,r18,r4
 400b478:	18013c26 	beq	r3,zero,400b96c <___svfiprintf_internal_r+0x9dc>
 400b47c:	0015883a 	mov	r10,zero
 400b480:	dc401a04 	addi	r17,sp,104
 400b484:	e006d0fa 	srli	r3,fp,3
 400b488:	4808977a 	slli	r4,r9,29
 400b48c:	4812d0fa 	srli	r9,r9,3
 400b490:	e70001cc 	andi	fp,fp,7
 400b494:	e0800c04 	addi	r2,fp,48
 400b498:	8c7fffc4 	addi	r17,r17,-1
 400b49c:	20f8b03a 	or	fp,r4,r3
 400b4a0:	88800005 	stb	r2,0(r17)
 400b4a4:	e246b03a 	or	r3,fp,r9
 400b4a8:	183ff61e 	bne	r3,zero,400b484 <__alt_mem_onchip_memory2_0+0xfc009484>
 400b4ac:	90c0004c 	andi	r3,r18,1
 400b4b0:	1800a526 	beq	r3,zero,400b748 <___svfiprintf_internal_r+0x7b8>
 400b4b4:	10803fcc 	andi	r2,r2,255
 400b4b8:	1080201c 	xori	r2,r2,128
 400b4bc:	10bfe004 	addi	r2,r2,-128
 400b4c0:	00c00c04 	movi	r3,48
 400b4c4:	10ffb626 	beq	r2,r3,400b3a0 <__alt_mem_onchip_memory2_0+0xfc0093a0>
 400b4c8:	88ffffc5 	stb	r3,-1(r17)
 400b4cc:	d8c01e17 	ldw	r3,120(sp)
 400b4d0:	88bfffc4 	addi	r2,r17,-1
 400b4d4:	1023883a 	mov	r17,r2
 400b4d8:	1887c83a 	sub	r3,r3,r2
 400b4dc:	d8c02115 	stw	r3,132(sp)
 400b4e0:	003fc706 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400b4e4:	dac02317 	ldw	r11,140(sp)
 400b4e8:	00c00044 	movi	r3,1
 400b4ec:	d8c02015 	stw	r3,128(sp)
 400b4f0:	58800017 	ldw	r2,0(r11)
 400b4f4:	5ac00104 	addi	r11,r11,4
 400b4f8:	d8001d85 	stb	zero,118(sp)
 400b4fc:	d8801005 	stb	r2,64(sp)
 400b500:	dac02315 	stw	r11,140(sp)
 400b504:	d8c02115 	stw	r3,132(sp)
 400b508:	dc401004 	addi	r17,sp,64
 400b50c:	0021883a 	mov	r16,zero
 400b510:	90c0008c 	andi	r3,r18,2
 400b514:	d8c02215 	stw	r3,136(sp)
 400b518:	18000326 	beq	r3,zero,400b528 <___svfiprintf_internal_r+0x598>
 400b51c:	dac02017 	ldw	r11,128(sp)
 400b520:	5ac00084 	addi	r11,r11,2
 400b524:	dac02015 	stw	r11,128(sp)
 400b528:	90c0210c 	andi	r3,r18,132
 400b52c:	d8c02615 	stw	r3,152(sp)
 400b530:	1801131e 	bne	r3,zero,400b980 <___svfiprintf_internal_r+0x9f0>
 400b534:	dac02417 	ldw	r11,144(sp)
 400b538:	d8c02017 	ldw	r3,128(sp)
 400b53c:	58f9c83a 	sub	fp,r11,r3
 400b540:	07010f0e 	bge	zero,fp,400b980 <___svfiprintf_internal_r+0x9f0>
 400b544:	02400404 	movi	r9,16
 400b548:	d8c01c17 	ldw	r3,112(sp)
 400b54c:	d8801b17 	ldw	r2,108(sp)
 400b550:	4f02d60e 	bge	r9,fp,400c0ac <___svfiprintf_internal_r+0x111c>
 400b554:	014100b4 	movhi	r5,1026
 400b558:	29731a04 	addi	r5,r5,-13208
 400b55c:	d9402815 	stw	r5,160(sp)
 400b560:	028001c4 	movi	r10,7
 400b564:	00000306 	br	400b574 <___svfiprintf_internal_r+0x5e4>
 400b568:	e73ffc04 	addi	fp,fp,-16
 400b56c:	42000204 	addi	r8,r8,8
 400b570:	4f00150e 	bge	r9,fp,400b5c8 <___svfiprintf_internal_r+0x638>
 400b574:	18c00404 	addi	r3,r3,16
 400b578:	10800044 	addi	r2,r2,1
 400b57c:	45800015 	stw	r22,0(r8)
 400b580:	42400115 	stw	r9,4(r8)
 400b584:	d8c01c15 	stw	r3,112(sp)
 400b588:	d8801b15 	stw	r2,108(sp)
 400b58c:	50bff60e 	bge	r10,r2,400b568 <__alt_mem_onchip_memory2_0+0xfc009568>
 400b590:	d9801a04 	addi	r6,sp,104
 400b594:	b80b883a 	mov	r5,r23
 400b598:	a809883a 	mov	r4,r21
 400b59c:	da402c15 	stw	r9,176(sp)
 400b5a0:	da802d15 	stw	r10,180(sp)
 400b5a4:	400adc00 	call	400adc0 <__ssprint_r>
 400b5a8:	da402c17 	ldw	r9,176(sp)
 400b5ac:	da802d17 	ldw	r10,180(sp)
 400b5b0:	1001851e 	bne	r2,zero,400bbc8 <___svfiprintf_internal_r+0xc38>
 400b5b4:	e73ffc04 	addi	fp,fp,-16
 400b5b8:	d8c01c17 	ldw	r3,112(sp)
 400b5bc:	d8801b17 	ldw	r2,108(sp)
 400b5c0:	d811883a 	mov	r8,sp
 400b5c4:	4f3feb16 	blt	r9,fp,400b574 <__alt_mem_onchip_memory2_0+0xfc009574>
 400b5c8:	dac02817 	ldw	r11,160(sp)
 400b5cc:	e0c7883a 	add	r3,fp,r3
 400b5d0:	10800044 	addi	r2,r2,1
 400b5d4:	42c00015 	stw	r11,0(r8)
 400b5d8:	47000115 	stw	fp,4(r8)
 400b5dc:	d8c01c15 	stw	r3,112(sp)
 400b5e0:	d8801b15 	stw	r2,108(sp)
 400b5e4:	010001c4 	movi	r4,7
 400b5e8:	2081ee16 	blt	r4,r2,400bda4 <___svfiprintf_internal_r+0xe14>
 400b5ec:	42000204 	addi	r8,r8,8
 400b5f0:	0000e506 	br	400b988 <___svfiprintf_internal_r+0x9f8>
 400b5f4:	21003fcc 	andi	r4,r4,255
 400b5f8:	2002dd1e 	bne	r4,zero,400c170 <___svfiprintf_internal_r+0x11e0>
 400b5fc:	008100b4 	movhi	r2,1026
 400b600:	10b2a804 	addi	r2,r2,-13664
 400b604:	d8802915 	stw	r2,164(sp)
 400b608:	9080080c 	andi	r2,r18,32
 400b60c:	103f461e 	bne	r2,zero,400b328 <__alt_mem_onchip_memory2_0+0xfc009328>
 400b610:	9080040c 	andi	r2,r18,16
 400b614:	10022e1e 	bne	r2,zero,400bed0 <___svfiprintf_internal_r+0xf40>
 400b618:	9080100c 	andi	r2,r18,64
 400b61c:	dac02317 	ldw	r11,140(sp)
 400b620:	10027326 	beq	r2,zero,400bff0 <___svfiprintf_internal_r+0x1060>
 400b624:	5f00000b 	ldhu	fp,0(r11)
 400b628:	5ac00104 	addi	r11,r11,4
 400b62c:	0013883a 	mov	r9,zero
 400b630:	dac02315 	stw	r11,140(sp)
 400b634:	003f4106 	br	400b33c <__alt_mem_onchip_memory2_0+0xfc00933c>
 400b638:	21003fcc 	andi	r4,r4,255
 400b63c:	2002e11e 	bne	r4,zero,400c1c4 <___svfiprintf_internal_r+0x1234>
 400b640:	9080080c 	andi	r2,r18,32
 400b644:	1002011e 	bne	r2,zero,400be4c <___svfiprintf_internal_r+0xebc>
 400b648:	9080040c 	andi	r2,r18,16
 400b64c:	10023e1e 	bne	r2,zero,400bf48 <___svfiprintf_internal_r+0xfb8>
 400b650:	9480100c 	andi	r18,r18,64
 400b654:	90023c26 	beq	r18,zero,400bf48 <___svfiprintf_internal_r+0xfb8>
 400b658:	dac02317 	ldw	r11,140(sp)
 400b65c:	58800017 	ldw	r2,0(r11)
 400b660:	5ac00104 	addi	r11,r11,4
 400b664:	dac02315 	stw	r11,140(sp)
 400b668:	dac02517 	ldw	r11,148(sp)
 400b66c:	12c0000d 	sth	r11,0(r2)
 400b670:	003e6e06 	br	400b02c <__alt_mem_onchip_memory2_0+0xfc00902c>
 400b674:	98c00007 	ldb	r3,0(r19)
 400b678:	1a422926 	beq	r3,r9,400bf20 <___svfiprintf_internal_r+0xf90>
 400b67c:	94800414 	ori	r18,r18,16
 400b680:	003e9206 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b684:	94801014 	ori	r18,r18,64
 400b688:	98c00007 	ldb	r3,0(r19)
 400b68c:	003e8f06 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b690:	21003fcc 	andi	r4,r4,255
 400b694:	2002c71e 	bne	r4,zero,400c1b4 <___svfiprintf_internal_r+0x1224>
 400b698:	9080080c 	andi	r2,r18,32
 400b69c:	10004926 	beq	r2,zero,400b7c4 <___svfiprintf_internal_r+0x834>
 400b6a0:	dac02317 	ldw	r11,140(sp)
 400b6a4:	58800117 	ldw	r2,4(r11)
 400b6a8:	5f000017 	ldw	fp,0(r11)
 400b6ac:	5ac00204 	addi	r11,r11,8
 400b6b0:	dac02315 	stw	r11,140(sp)
 400b6b4:	1013883a 	mov	r9,r2
 400b6b8:	10004b16 	blt	r2,zero,400b7e8 <___svfiprintf_internal_r+0x858>
 400b6bc:	da801d83 	ldbu	r10,118(sp)
 400b6c0:	8001cb16 	blt	r16,zero,400bdf0 <___svfiprintf_internal_r+0xe60>
 400b6c4:	00ffdfc4 	movi	r3,-129
 400b6c8:	e244b03a 	or	r2,fp,r9
 400b6cc:	90e4703a 	and	r18,r18,r3
 400b6d0:	103f4726 	beq	r2,zero,400b3f0 <__alt_mem_onchip_memory2_0+0xfc0093f0>
 400b6d4:	48008c26 	beq	r9,zero,400b908 <___svfiprintf_internal_r+0x978>
 400b6d8:	dc802015 	stw	r18,128(sp)
 400b6dc:	dc002115 	stw	r16,132(sp)
 400b6e0:	dc401a04 	addi	r17,sp,104
 400b6e4:	e021883a 	mov	r16,fp
 400b6e8:	da002215 	stw	r8,136(sp)
 400b6ec:	5039883a 	mov	fp,r10
 400b6f0:	4825883a 	mov	r18,r9
 400b6f4:	8009883a 	mov	r4,r16
 400b6f8:	900b883a 	mov	r5,r18
 400b6fc:	01800284 	movi	r6,10
 400b700:	000f883a 	mov	r7,zero
 400b704:	400e7200 	call	400e720 <__umoddi3>
 400b708:	10800c04 	addi	r2,r2,48
 400b70c:	8c7fffc4 	addi	r17,r17,-1
 400b710:	8009883a 	mov	r4,r16
 400b714:	900b883a 	mov	r5,r18
 400b718:	88800005 	stb	r2,0(r17)
 400b71c:	01800284 	movi	r6,10
 400b720:	000f883a 	mov	r7,zero
 400b724:	400e1a80 	call	400e1a8 <__udivdi3>
 400b728:	1021883a 	mov	r16,r2
 400b72c:	10c4b03a 	or	r2,r2,r3
 400b730:	1825883a 	mov	r18,r3
 400b734:	103fef1e 	bne	r2,zero,400b6f4 <__alt_mem_onchip_memory2_0+0xfc0096f4>
 400b738:	dc802017 	ldw	r18,128(sp)
 400b73c:	dc002117 	ldw	r16,132(sp)
 400b740:	da002217 	ldw	r8,136(sp)
 400b744:	e015883a 	mov	r10,fp
 400b748:	d8c01e17 	ldw	r3,120(sp)
 400b74c:	1c47c83a 	sub	r3,r3,r17
 400b750:	d8c02115 	stw	r3,132(sp)
 400b754:	003f2a06 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400b758:	dac02317 	ldw	r11,140(sp)
 400b75c:	d8001d85 	stb	zero,118(sp)
 400b760:	5c400017 	ldw	r17,0(r11)
 400b764:	5f000104 	addi	fp,r11,4
 400b768:	88022f26 	beq	r17,zero,400c028 <___svfiprintf_internal_r+0x1098>
 400b76c:	80022516 	blt	r16,zero,400c004 <___svfiprintf_internal_r+0x1074>
 400b770:	800d883a 	mov	r6,r16
 400b774:	000b883a 	mov	r5,zero
 400b778:	8809883a 	mov	r4,r17
 400b77c:	da002c15 	stw	r8,176(sp)
 400b780:	40090d00 	call	40090d0 <memchr>
 400b784:	da002c17 	ldw	r8,176(sp)
 400b788:	10026426 	beq	r2,zero,400c11c <___svfiprintf_internal_r+0x118c>
 400b78c:	1445c83a 	sub	r2,r2,r17
 400b790:	d8802115 	stw	r2,132(sp)
 400b794:	da801d83 	ldbu	r10,118(sp)
 400b798:	df002315 	stw	fp,140(sp)
 400b79c:	0021883a 	mov	r16,zero
 400b7a0:	003f1706 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400b7a4:	94800814 	ori	r18,r18,32
 400b7a8:	98c00007 	ldb	r3,0(r19)
 400b7ac:	003e4706 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b7b0:	21003fcc 	andi	r4,r4,255
 400b7b4:	2002701e 	bne	r4,zero,400c178 <___svfiprintf_internal_r+0x11e8>
 400b7b8:	94800414 	ori	r18,r18,16
 400b7bc:	9080080c 	andi	r2,r18,32
 400b7c0:	103fb71e 	bne	r2,zero,400b6a0 <__alt_mem_onchip_memory2_0+0xfc0096a0>
 400b7c4:	9080040c 	andi	r2,r18,16
 400b7c8:	1001ab26 	beq	r2,zero,400be78 <___svfiprintf_internal_r+0xee8>
 400b7cc:	dac02317 	ldw	r11,140(sp)
 400b7d0:	5f000017 	ldw	fp,0(r11)
 400b7d4:	5ac00104 	addi	r11,r11,4
 400b7d8:	dac02315 	stw	r11,140(sp)
 400b7dc:	e013d7fa 	srai	r9,fp,31
 400b7e0:	4805883a 	mov	r2,r9
 400b7e4:	103fb50e 	bge	r2,zero,400b6bc <__alt_mem_onchip_memory2_0+0xfc0096bc>
 400b7e8:	0739c83a 	sub	fp,zero,fp
 400b7ec:	02800b44 	movi	r10,45
 400b7f0:	e004c03a 	cmpne	r2,fp,zero
 400b7f4:	0253c83a 	sub	r9,zero,r9
 400b7f8:	da801d85 	stb	r10,118(sp)
 400b7fc:	4893c83a 	sub	r9,r9,r2
 400b800:	80023016 	blt	r16,zero,400c0c4 <___svfiprintf_internal_r+0x1134>
 400b804:	00bfdfc4 	movi	r2,-129
 400b808:	90a4703a 	and	r18,r18,r2
 400b80c:	483fb21e 	bne	r9,zero,400b6d8 <__alt_mem_onchip_memory2_0+0xfc0096d8>
 400b810:	00003d06 	br	400b908 <___svfiprintf_internal_r+0x978>
 400b814:	9817883a 	mov	r11,r19
 400b818:	d8002415 	stw	zero,144(sp)
 400b81c:	18bff404 	addi	r2,r3,-48
 400b820:	0019883a 	mov	r12,zero
 400b824:	58c00007 	ldb	r3,0(r11)
 400b828:	630002a4 	muli	r12,r12,10
 400b82c:	9cc00044 	addi	r19,r19,1
 400b830:	9817883a 	mov	r11,r19
 400b834:	1319883a 	add	r12,r2,r12
 400b838:	18bff404 	addi	r2,r3,-48
 400b83c:	30bff92e 	bgeu	r6,r2,400b824 <__alt_mem_onchip_memory2_0+0xfc009824>
 400b840:	db002415 	stw	r12,144(sp)
 400b844:	18bff804 	addi	r2,r3,-32
 400b848:	28be232e 	bgeu	r5,r2,400b0d8 <__alt_mem_onchip_memory2_0+0xfc0090d8>
 400b84c:	21003fcc 	andi	r4,r4,255
 400b850:	20024b1e 	bne	r4,zero,400c180 <___svfiprintf_internal_r+0x11f0>
 400b854:	1800d626 	beq	r3,zero,400bbb0 <___svfiprintf_internal_r+0xc20>
 400b858:	02c00044 	movi	r11,1
 400b85c:	dac02015 	stw	r11,128(sp)
 400b860:	d8c01005 	stb	r3,64(sp)
 400b864:	d8001d85 	stb	zero,118(sp)
 400b868:	dac02115 	stw	r11,132(sp)
 400b86c:	dc401004 	addi	r17,sp,64
 400b870:	003f2606 	br	400b50c <__alt_mem_onchip_memory2_0+0xfc00950c>
 400b874:	94802014 	ori	r18,r18,128
 400b878:	98c00007 	ldb	r3,0(r19)
 400b87c:	003e1306 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400b880:	98c00007 	ldb	r3,0(r19)
 400b884:	9ac00044 	addi	r11,r19,1
 400b888:	1a822b26 	beq	r3,r10,400c138 <___svfiprintf_internal_r+0x11a8>
 400b88c:	18bff404 	addi	r2,r3,-48
 400b890:	0021883a 	mov	r16,zero
 400b894:	30821e36 	bltu	r6,r2,400c110 <___svfiprintf_internal_r+0x1180>
 400b898:	58c00007 	ldb	r3,0(r11)
 400b89c:	840002a4 	muli	r16,r16,10
 400b8a0:	5cc00044 	addi	r19,r11,1
 400b8a4:	9817883a 	mov	r11,r19
 400b8a8:	80a1883a 	add	r16,r16,r2
 400b8ac:	18bff404 	addi	r2,r3,-48
 400b8b0:	30bff92e 	bgeu	r6,r2,400b898 <__alt_mem_onchip_memory2_0+0xfc009898>
 400b8b4:	803e060e 	bge	r16,zero,400b0d0 <__alt_mem_onchip_memory2_0+0xfc0090d0>
 400b8b8:	043fffc4 	movi	r16,-1
 400b8bc:	003e0406 	br	400b0d0 <__alt_mem_onchip_memory2_0+0xfc0090d0>
 400b8c0:	21003fcc 	andi	r4,r4,255
 400b8c4:	2002371e 	bne	r4,zero,400c1a4 <___svfiprintf_internal_r+0x1214>
 400b8c8:	94800414 	ori	r18,r18,16
 400b8cc:	9080080c 	andi	r2,r18,32
 400b8d0:	103ebb1e 	bne	r2,zero,400b3c0 <__alt_mem_onchip_memory2_0+0xfc0093c0>
 400b8d4:	9080040c 	andi	r2,r18,16
 400b8d8:	10013b26 	beq	r2,zero,400bdc8 <___svfiprintf_internal_r+0xe38>
 400b8dc:	dac02317 	ldw	r11,140(sp)
 400b8e0:	d8001d85 	stb	zero,118(sp)
 400b8e4:	0013883a 	mov	r9,zero
 400b8e8:	58800104 	addi	r2,r11,4
 400b8ec:	5f000017 	ldw	fp,0(r11)
 400b8f0:	80013d16 	blt	r16,zero,400bde8 <___svfiprintf_internal_r+0xe58>
 400b8f4:	00ffdfc4 	movi	r3,-129
 400b8f8:	d8802315 	stw	r2,140(sp)
 400b8fc:	90e4703a 	and	r18,r18,r3
 400b900:	0015883a 	mov	r10,zero
 400b904:	e03eba26 	beq	fp,zero,400b3f0 <__alt_mem_onchip_memory2_0+0xfc0093f0>
 400b908:	00800244 	movi	r2,9
 400b90c:	173f7236 	bltu	r2,fp,400b6d8 <__alt_mem_onchip_memory2_0+0xfc0096d8>
 400b910:	dac02b17 	ldw	r11,172(sp)
 400b914:	e7000c04 	addi	fp,fp,48
 400b918:	df0019c5 	stb	fp,103(sp)
 400b91c:	dac02115 	stw	r11,132(sp)
 400b920:	dc4019c4 	addi	r17,sp,103
 400b924:	003eb606 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400b928:	21003fcc 	andi	r4,r4,255
 400b92c:	20021f1e 	bne	r4,zero,400c1ac <___svfiprintf_internal_r+0x121c>
 400b930:	94800414 	ori	r18,r18,16
 400b934:	9080080c 	andi	r2,r18,32
 400b938:	103ec51e 	bne	r2,zero,400b450 <__alt_mem_onchip_memory2_0+0xfc009450>
 400b93c:	9080040c 	andi	r2,r18,16
 400b940:	10016926 	beq	r2,zero,400bee8 <___svfiprintf_internal_r+0xf58>
 400b944:	dac02317 	ldw	r11,140(sp)
 400b948:	d8001d85 	stb	zero,118(sp)
 400b94c:	0013883a 	mov	r9,zero
 400b950:	58800104 	addi	r2,r11,4
 400b954:	5f000017 	ldw	fp,0(r11)
 400b958:	80016b16 	blt	r16,zero,400bf08 <___svfiprintf_internal_r+0xf78>
 400b95c:	00ffdfc4 	movi	r3,-129
 400b960:	d8802315 	stw	r2,140(sp)
 400b964:	90e4703a 	and	r18,r18,r3
 400b968:	e03ec41e 	bne	fp,zero,400b47c <__alt_mem_onchip_memory2_0+0xfc00947c>
 400b96c:	0015883a 	mov	r10,zero
 400b970:	8001c226 	beq	r16,zero,400c07c <___svfiprintf_internal_r+0x10ec>
 400b974:	0039883a 	mov	fp,zero
 400b978:	0013883a 	mov	r9,zero
 400b97c:	003ec006 	br	400b480 <__alt_mem_onchip_memory2_0+0xfc009480>
 400b980:	d8c01c17 	ldw	r3,112(sp)
 400b984:	d8801b17 	ldw	r2,108(sp)
 400b988:	d9001d87 	ldb	r4,118(sp)
 400b98c:	20000b26 	beq	r4,zero,400b9bc <___svfiprintf_internal_r+0xa2c>
 400b990:	d9001d84 	addi	r4,sp,118
 400b994:	18c00044 	addi	r3,r3,1
 400b998:	10800044 	addi	r2,r2,1
 400b99c:	41000015 	stw	r4,0(r8)
 400b9a0:	01000044 	movi	r4,1
 400b9a4:	41000115 	stw	r4,4(r8)
 400b9a8:	d8c01c15 	stw	r3,112(sp)
 400b9ac:	d8801b15 	stw	r2,108(sp)
 400b9b0:	010001c4 	movi	r4,7
 400b9b4:	2080e116 	blt	r4,r2,400bd3c <___svfiprintf_internal_r+0xdac>
 400b9b8:	42000204 	addi	r8,r8,8
 400b9bc:	dac02217 	ldw	r11,136(sp)
 400b9c0:	58000b26 	beq	r11,zero,400b9f0 <___svfiprintf_internal_r+0xa60>
 400b9c4:	d9001d04 	addi	r4,sp,116
 400b9c8:	18c00084 	addi	r3,r3,2
 400b9cc:	10800044 	addi	r2,r2,1
 400b9d0:	41000015 	stw	r4,0(r8)
 400b9d4:	01000084 	movi	r4,2
 400b9d8:	41000115 	stw	r4,4(r8)
 400b9dc:	d8c01c15 	stw	r3,112(sp)
 400b9e0:	d8801b15 	stw	r2,108(sp)
 400b9e4:	010001c4 	movi	r4,7
 400b9e8:	2080dd16 	blt	r4,r2,400bd60 <___svfiprintf_internal_r+0xdd0>
 400b9ec:	42000204 	addi	r8,r8,8
 400b9f0:	dac02617 	ldw	r11,152(sp)
 400b9f4:	01002004 	movi	r4,128
 400b9f8:	59008426 	beq	r11,r4,400bc0c <___svfiprintf_internal_r+0xc7c>
 400b9fc:	dac02117 	ldw	r11,132(sp)
 400ba00:	82e1c83a 	sub	r16,r16,r11
 400ba04:	0400270e 	bge	zero,r16,400baa4 <___svfiprintf_internal_r+0xb14>
 400ba08:	01c00404 	movi	r7,16
 400ba0c:	3c016a0e 	bge	r7,r16,400bfb8 <___svfiprintf_internal_r+0x1028>
 400ba10:	014100b4 	movhi	r5,1026
 400ba14:	29731604 	addi	r5,r5,-13224
 400ba18:	d9402215 	stw	r5,136(sp)
 400ba1c:	070001c4 	movi	fp,7
 400ba20:	00000306 	br	400ba30 <___svfiprintf_internal_r+0xaa0>
 400ba24:	843ffc04 	addi	r16,r16,-16
 400ba28:	42000204 	addi	r8,r8,8
 400ba2c:	3c00130e 	bge	r7,r16,400ba7c <___svfiprintf_internal_r+0xaec>
 400ba30:	18c00404 	addi	r3,r3,16
 400ba34:	10800044 	addi	r2,r2,1
 400ba38:	45000015 	stw	r20,0(r8)
 400ba3c:	41c00115 	stw	r7,4(r8)
 400ba40:	d8c01c15 	stw	r3,112(sp)
 400ba44:	d8801b15 	stw	r2,108(sp)
 400ba48:	e0bff60e 	bge	fp,r2,400ba24 <__alt_mem_onchip_memory2_0+0xfc009a24>
 400ba4c:	d9801a04 	addi	r6,sp,104
 400ba50:	b80b883a 	mov	r5,r23
 400ba54:	a809883a 	mov	r4,r21
 400ba58:	d9c02c15 	stw	r7,176(sp)
 400ba5c:	400adc00 	call	400adc0 <__ssprint_r>
 400ba60:	d9c02c17 	ldw	r7,176(sp)
 400ba64:	1000581e 	bne	r2,zero,400bbc8 <___svfiprintf_internal_r+0xc38>
 400ba68:	843ffc04 	addi	r16,r16,-16
 400ba6c:	d8c01c17 	ldw	r3,112(sp)
 400ba70:	d8801b17 	ldw	r2,108(sp)
 400ba74:	d811883a 	mov	r8,sp
 400ba78:	3c3fed16 	blt	r7,r16,400ba30 <__alt_mem_onchip_memory2_0+0xfc009a30>
 400ba7c:	dac02217 	ldw	r11,136(sp)
 400ba80:	1c07883a 	add	r3,r3,r16
 400ba84:	10800044 	addi	r2,r2,1
 400ba88:	42c00015 	stw	r11,0(r8)
 400ba8c:	44000115 	stw	r16,4(r8)
 400ba90:	d8c01c15 	stw	r3,112(sp)
 400ba94:	d8801b15 	stw	r2,108(sp)
 400ba98:	010001c4 	movi	r4,7
 400ba9c:	20809e16 	blt	r4,r2,400bd18 <___svfiprintf_internal_r+0xd88>
 400baa0:	42000204 	addi	r8,r8,8
 400baa4:	dac02117 	ldw	r11,132(sp)
 400baa8:	10800044 	addi	r2,r2,1
 400baac:	44400015 	stw	r17,0(r8)
 400bab0:	58c7883a 	add	r3,r11,r3
 400bab4:	42c00115 	stw	r11,4(r8)
 400bab8:	d8c01c15 	stw	r3,112(sp)
 400babc:	d8801b15 	stw	r2,108(sp)
 400bac0:	010001c4 	movi	r4,7
 400bac4:	20807f16 	blt	r4,r2,400bcc4 <___svfiprintf_internal_r+0xd34>
 400bac8:	42000204 	addi	r8,r8,8
 400bacc:	9480010c 	andi	r18,r18,4
 400bad0:	90002926 	beq	r18,zero,400bb78 <___svfiprintf_internal_r+0xbe8>
 400bad4:	dac02417 	ldw	r11,144(sp)
 400bad8:	d8802017 	ldw	r2,128(sp)
 400badc:	58a1c83a 	sub	r16,r11,r2
 400bae0:	0400250e 	bge	zero,r16,400bb78 <___svfiprintf_internal_r+0xbe8>
 400bae4:	04400404 	movi	r17,16
 400bae8:	d8801b17 	ldw	r2,108(sp)
 400baec:	8c017c0e 	bge	r17,r16,400c0e0 <___svfiprintf_internal_r+0x1150>
 400baf0:	014100b4 	movhi	r5,1026
 400baf4:	29731a04 	addi	r5,r5,-13208
 400baf8:	d9402815 	stw	r5,160(sp)
 400bafc:	048001c4 	movi	r18,7
 400bb00:	00000306 	br	400bb10 <___svfiprintf_internal_r+0xb80>
 400bb04:	843ffc04 	addi	r16,r16,-16
 400bb08:	42000204 	addi	r8,r8,8
 400bb0c:	8c00110e 	bge	r17,r16,400bb54 <___svfiprintf_internal_r+0xbc4>
 400bb10:	18c00404 	addi	r3,r3,16
 400bb14:	10800044 	addi	r2,r2,1
 400bb18:	45800015 	stw	r22,0(r8)
 400bb1c:	44400115 	stw	r17,4(r8)
 400bb20:	d8c01c15 	stw	r3,112(sp)
 400bb24:	d8801b15 	stw	r2,108(sp)
 400bb28:	90bff60e 	bge	r18,r2,400bb04 <__alt_mem_onchip_memory2_0+0xfc009b04>
 400bb2c:	d9801a04 	addi	r6,sp,104
 400bb30:	b80b883a 	mov	r5,r23
 400bb34:	a809883a 	mov	r4,r21
 400bb38:	400adc00 	call	400adc0 <__ssprint_r>
 400bb3c:	1000221e 	bne	r2,zero,400bbc8 <___svfiprintf_internal_r+0xc38>
 400bb40:	843ffc04 	addi	r16,r16,-16
 400bb44:	d8c01c17 	ldw	r3,112(sp)
 400bb48:	d8801b17 	ldw	r2,108(sp)
 400bb4c:	d811883a 	mov	r8,sp
 400bb50:	8c3fef16 	blt	r17,r16,400bb10 <__alt_mem_onchip_memory2_0+0xfc009b10>
 400bb54:	dac02817 	ldw	r11,160(sp)
 400bb58:	1c07883a 	add	r3,r3,r16
 400bb5c:	10800044 	addi	r2,r2,1
 400bb60:	42c00015 	stw	r11,0(r8)
 400bb64:	44000115 	stw	r16,4(r8)
 400bb68:	d8c01c15 	stw	r3,112(sp)
 400bb6c:	d8801b15 	stw	r2,108(sp)
 400bb70:	010001c4 	movi	r4,7
 400bb74:	2080aa16 	blt	r4,r2,400be20 <___svfiprintf_internal_r+0xe90>
 400bb78:	d8802417 	ldw	r2,144(sp)
 400bb7c:	dac02017 	ldw	r11,128(sp)
 400bb80:	12c0010e 	bge	r2,r11,400bb88 <___svfiprintf_internal_r+0xbf8>
 400bb84:	5805883a 	mov	r2,r11
 400bb88:	dac02517 	ldw	r11,148(sp)
 400bb8c:	5897883a 	add	r11,r11,r2
 400bb90:	dac02515 	stw	r11,148(sp)
 400bb94:	1800531e 	bne	r3,zero,400bce4 <___svfiprintf_internal_r+0xd54>
 400bb98:	98800007 	ldb	r2,0(r19)
 400bb9c:	d8001b15 	stw	zero,108(sp)
 400bba0:	d811883a 	mov	r8,sp
 400bba4:	103d231e 	bne	r2,zero,400b034 <__alt_mem_onchip_memory2_0+0xfc009034>
 400bba8:	9823883a 	mov	r17,r19
 400bbac:	003d3906 	br	400b094 <__alt_mem_onchip_memory2_0+0xfc009094>
 400bbb0:	d8801c17 	ldw	r2,112(sp)
 400bbb4:	10000426 	beq	r2,zero,400bbc8 <___svfiprintf_internal_r+0xc38>
 400bbb8:	d9402717 	ldw	r5,156(sp)
 400bbbc:	d9002a17 	ldw	r4,168(sp)
 400bbc0:	d9801a04 	addi	r6,sp,104
 400bbc4:	400adc00 	call	400adc0 <__ssprint_r>
 400bbc8:	dac02717 	ldw	r11,156(sp)
 400bbcc:	d8802517 	ldw	r2,148(sp)
 400bbd0:	58c0030b 	ldhu	r3,12(r11)
 400bbd4:	18c0100c 	andi	r3,r3,64
 400bbd8:	1801381e 	bne	r3,zero,400c0bc <___svfiprintf_internal_r+0x112c>
 400bbdc:	dfc03717 	ldw	ra,220(sp)
 400bbe0:	df003617 	ldw	fp,216(sp)
 400bbe4:	ddc03517 	ldw	r23,212(sp)
 400bbe8:	dd803417 	ldw	r22,208(sp)
 400bbec:	dd403317 	ldw	r21,204(sp)
 400bbf0:	dd003217 	ldw	r20,200(sp)
 400bbf4:	dcc03117 	ldw	r19,196(sp)
 400bbf8:	dc803017 	ldw	r18,192(sp)
 400bbfc:	dc402f17 	ldw	r17,188(sp)
 400bc00:	dc002e17 	ldw	r16,184(sp)
 400bc04:	dec03804 	addi	sp,sp,224
 400bc08:	f800283a 	ret
 400bc0c:	dac02417 	ldw	r11,144(sp)
 400bc10:	d9002017 	ldw	r4,128(sp)
 400bc14:	5939c83a 	sub	fp,r11,r4
 400bc18:	073f780e 	bge	zero,fp,400b9fc <__alt_mem_onchip_memory2_0+0xfc0099fc>
 400bc1c:	02400404 	movi	r9,16
 400bc20:	4f01370e 	bge	r9,fp,400c100 <___svfiprintf_internal_r+0x1170>
 400bc24:	02c100b4 	movhi	r11,1026
 400bc28:	5af31604 	addi	r11,r11,-13224
 400bc2c:	dac02215 	stw	r11,136(sp)
 400bc30:	028001c4 	movi	r10,7
 400bc34:	00000306 	br	400bc44 <___svfiprintf_internal_r+0xcb4>
 400bc38:	e73ffc04 	addi	fp,fp,-16
 400bc3c:	42000204 	addi	r8,r8,8
 400bc40:	4f00150e 	bge	r9,fp,400bc98 <___svfiprintf_internal_r+0xd08>
 400bc44:	18c00404 	addi	r3,r3,16
 400bc48:	10800044 	addi	r2,r2,1
 400bc4c:	45000015 	stw	r20,0(r8)
 400bc50:	42400115 	stw	r9,4(r8)
 400bc54:	d8c01c15 	stw	r3,112(sp)
 400bc58:	d8801b15 	stw	r2,108(sp)
 400bc5c:	50bff60e 	bge	r10,r2,400bc38 <__alt_mem_onchip_memory2_0+0xfc009c38>
 400bc60:	d9801a04 	addi	r6,sp,104
 400bc64:	b80b883a 	mov	r5,r23
 400bc68:	a809883a 	mov	r4,r21
 400bc6c:	da402c15 	stw	r9,176(sp)
 400bc70:	da802d15 	stw	r10,180(sp)
 400bc74:	400adc00 	call	400adc0 <__ssprint_r>
 400bc78:	da402c17 	ldw	r9,176(sp)
 400bc7c:	da802d17 	ldw	r10,180(sp)
 400bc80:	103fd11e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bc84:	e73ffc04 	addi	fp,fp,-16
 400bc88:	d8c01c17 	ldw	r3,112(sp)
 400bc8c:	d8801b17 	ldw	r2,108(sp)
 400bc90:	d811883a 	mov	r8,sp
 400bc94:	4f3feb16 	blt	r9,fp,400bc44 <__alt_mem_onchip_memory2_0+0xfc009c44>
 400bc98:	dac02217 	ldw	r11,136(sp)
 400bc9c:	1f07883a 	add	r3,r3,fp
 400bca0:	10800044 	addi	r2,r2,1
 400bca4:	42c00015 	stw	r11,0(r8)
 400bca8:	47000115 	stw	fp,4(r8)
 400bcac:	d8c01c15 	stw	r3,112(sp)
 400bcb0:	d8801b15 	stw	r2,108(sp)
 400bcb4:	010001c4 	movi	r4,7
 400bcb8:	2080b616 	blt	r4,r2,400bf94 <___svfiprintf_internal_r+0x1004>
 400bcbc:	42000204 	addi	r8,r8,8
 400bcc0:	003f4e06 	br	400b9fc <__alt_mem_onchip_memory2_0+0xfc0099fc>
 400bcc4:	d9801a04 	addi	r6,sp,104
 400bcc8:	b80b883a 	mov	r5,r23
 400bccc:	a809883a 	mov	r4,r21
 400bcd0:	400adc00 	call	400adc0 <__ssprint_r>
 400bcd4:	103fbc1e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bcd8:	d8c01c17 	ldw	r3,112(sp)
 400bcdc:	d811883a 	mov	r8,sp
 400bce0:	003f7a06 	br	400bacc <__alt_mem_onchip_memory2_0+0xfc009acc>
 400bce4:	d9801a04 	addi	r6,sp,104
 400bce8:	b80b883a 	mov	r5,r23
 400bcec:	a809883a 	mov	r4,r21
 400bcf0:	400adc00 	call	400adc0 <__ssprint_r>
 400bcf4:	103fa826 	beq	r2,zero,400bb98 <__alt_mem_onchip_memory2_0+0xfc009b98>
 400bcf8:	003fb306 	br	400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bcfc:	d9801a04 	addi	r6,sp,104
 400bd00:	b80b883a 	mov	r5,r23
 400bd04:	a809883a 	mov	r4,r21
 400bd08:	400adc00 	call	400adc0 <__ssprint_r>
 400bd0c:	103fae1e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bd10:	d811883a 	mov	r8,sp
 400bd14:	003cdc06 	br	400b088 <__alt_mem_onchip_memory2_0+0xfc009088>
 400bd18:	d9801a04 	addi	r6,sp,104
 400bd1c:	b80b883a 	mov	r5,r23
 400bd20:	a809883a 	mov	r4,r21
 400bd24:	400adc00 	call	400adc0 <__ssprint_r>
 400bd28:	103fa71e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bd2c:	d8c01c17 	ldw	r3,112(sp)
 400bd30:	d8801b17 	ldw	r2,108(sp)
 400bd34:	d811883a 	mov	r8,sp
 400bd38:	003f5a06 	br	400baa4 <__alt_mem_onchip_memory2_0+0xfc009aa4>
 400bd3c:	d9801a04 	addi	r6,sp,104
 400bd40:	b80b883a 	mov	r5,r23
 400bd44:	a809883a 	mov	r4,r21
 400bd48:	400adc00 	call	400adc0 <__ssprint_r>
 400bd4c:	103f9e1e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bd50:	d8c01c17 	ldw	r3,112(sp)
 400bd54:	d8801b17 	ldw	r2,108(sp)
 400bd58:	d811883a 	mov	r8,sp
 400bd5c:	003f1706 	br	400b9bc <__alt_mem_onchip_memory2_0+0xfc0099bc>
 400bd60:	d9801a04 	addi	r6,sp,104
 400bd64:	b80b883a 	mov	r5,r23
 400bd68:	a809883a 	mov	r4,r21
 400bd6c:	400adc00 	call	400adc0 <__ssprint_r>
 400bd70:	103f951e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bd74:	d8c01c17 	ldw	r3,112(sp)
 400bd78:	d8801b17 	ldw	r2,108(sp)
 400bd7c:	d811883a 	mov	r8,sp
 400bd80:	003f1b06 	br	400b9f0 <__alt_mem_onchip_memory2_0+0xfc0099f0>
 400bd84:	d8001d85 	stb	zero,118(sp)
 400bd88:	80007b16 	blt	r16,zero,400bf78 <___svfiprintf_internal_r+0xfe8>
 400bd8c:	00ffdfc4 	movi	r3,-129
 400bd90:	e244b03a 	or	r2,fp,r9
 400bd94:	90e4703a 	and	r18,r18,r3
 400bd98:	103d7026 	beq	r2,zero,400b35c <__alt_mem_onchip_memory2_0+0xfc00935c>
 400bd9c:	0015883a 	mov	r10,zero
 400bda0:	003d7206 	br	400b36c <__alt_mem_onchip_memory2_0+0xfc00936c>
 400bda4:	d9801a04 	addi	r6,sp,104
 400bda8:	b80b883a 	mov	r5,r23
 400bdac:	a809883a 	mov	r4,r21
 400bdb0:	400adc00 	call	400adc0 <__ssprint_r>
 400bdb4:	103f841e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bdb8:	d8c01c17 	ldw	r3,112(sp)
 400bdbc:	d8801b17 	ldw	r2,108(sp)
 400bdc0:	d811883a 	mov	r8,sp
 400bdc4:	003ef006 	br	400b988 <__alt_mem_onchip_memory2_0+0xfc009988>
 400bdc8:	9080100c 	andi	r2,r18,64
 400bdcc:	d8001d85 	stb	zero,118(sp)
 400bdd0:	dac02317 	ldw	r11,140(sp)
 400bdd4:	10008126 	beq	r2,zero,400bfdc <___svfiprintf_internal_r+0x104c>
 400bdd8:	58800104 	addi	r2,r11,4
 400bddc:	5f00000b 	ldhu	fp,0(r11)
 400bde0:	0013883a 	mov	r9,zero
 400bde4:	803ec30e 	bge	r16,zero,400b8f4 <__alt_mem_onchip_memory2_0+0xfc0098f4>
 400bde8:	d8802315 	stw	r2,140(sp)
 400bdec:	0015883a 	mov	r10,zero
 400bdf0:	e244b03a 	or	r2,fp,r9
 400bdf4:	103e371e 	bne	r2,zero,400b6d4 <__alt_mem_onchip_memory2_0+0xfc0096d4>
 400bdf8:	00800044 	movi	r2,1
 400bdfc:	10803fcc 	andi	r2,r2,255
 400be00:	00c00044 	movi	r3,1
 400be04:	10c06126 	beq	r2,r3,400bf8c <___svfiprintf_internal_r+0xffc>
 400be08:	00c00084 	movi	r3,2
 400be0c:	10fd5526 	beq	r2,r3,400b364 <__alt_mem_onchip_memory2_0+0xfc009364>
 400be10:	003ed806 	br	400b974 <__alt_mem_onchip_memory2_0+0xfc009974>
 400be14:	d8802315 	stw	r2,140(sp)
 400be18:	98c00007 	ldb	r3,0(r19)
 400be1c:	003cab06 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400be20:	d9801a04 	addi	r6,sp,104
 400be24:	b80b883a 	mov	r5,r23
 400be28:	a809883a 	mov	r4,r21
 400be2c:	400adc00 	call	400adc0 <__ssprint_r>
 400be30:	103f651e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400be34:	d8c01c17 	ldw	r3,112(sp)
 400be38:	003f4f06 	br	400bb78 <__alt_mem_onchip_memory2_0+0xfc009b78>
 400be3c:	008100b4 	movhi	r2,1026
 400be40:	10b2ad04 	addi	r2,r2,-13644
 400be44:	d8802915 	stw	r2,164(sp)
 400be48:	003d4406 	br	400b35c <__alt_mem_onchip_memory2_0+0xfc00935c>
 400be4c:	dac02317 	ldw	r11,140(sp)
 400be50:	58800017 	ldw	r2,0(r11)
 400be54:	dac02517 	ldw	r11,148(sp)
 400be58:	5807d7fa 	srai	r3,r11,31
 400be5c:	dac02317 	ldw	r11,140(sp)
 400be60:	10c00115 	stw	r3,4(r2)
 400be64:	5ac00104 	addi	r11,r11,4
 400be68:	dac02315 	stw	r11,140(sp)
 400be6c:	dac02517 	ldw	r11,148(sp)
 400be70:	12c00015 	stw	r11,0(r2)
 400be74:	003c6d06 	br	400b02c <__alt_mem_onchip_memory2_0+0xfc00902c>
 400be78:	9080100c 	andi	r2,r18,64
 400be7c:	dac02317 	ldw	r11,140(sp)
 400be80:	103e5326 	beq	r2,zero,400b7d0 <__alt_mem_onchip_memory2_0+0xfc0097d0>
 400be84:	5f00000f 	ldh	fp,0(r11)
 400be88:	5ac00104 	addi	r11,r11,4
 400be8c:	dac02315 	stw	r11,140(sp)
 400be90:	e013d7fa 	srai	r9,fp,31
 400be94:	4805883a 	mov	r2,r9
 400be98:	003e0706 	br	400b6b8 <__alt_mem_onchip_memory2_0+0xfc0096b8>
 400be9c:	00800c04 	movi	r2,48
 400bea0:	d8801d05 	stb	r2,116(sp)
 400bea4:	d8c01d45 	stb	r3,117(sp)
 400bea8:	d8001d85 	stb	zero,118(sp)
 400beac:	90800094 	ori	r2,r18,2
 400beb0:	80008f16 	blt	r16,zero,400c0f0 <___svfiprintf_internal_r+0x1160>
 400beb4:	00bfdfc4 	movi	r2,-129
 400beb8:	90a4703a 	and	r18,r18,r2
 400bebc:	94800094 	ori	r18,r18,2
 400bec0:	0015883a 	mov	r10,zero
 400bec4:	003d2906 	br	400b36c <__alt_mem_onchip_memory2_0+0xfc00936c>
 400bec8:	98c00007 	ldb	r3,0(r19)
 400becc:	003c7f06 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400bed0:	dac02317 	ldw	r11,140(sp)
 400bed4:	0013883a 	mov	r9,zero
 400bed8:	5f000017 	ldw	fp,0(r11)
 400bedc:	5ac00104 	addi	r11,r11,4
 400bee0:	dac02315 	stw	r11,140(sp)
 400bee4:	003d1506 	br	400b33c <__alt_mem_onchip_memory2_0+0xfc00933c>
 400bee8:	9080100c 	andi	r2,r18,64
 400beec:	d8001d85 	stb	zero,118(sp)
 400bef0:	dac02317 	ldw	r11,140(sp)
 400bef4:	10003426 	beq	r2,zero,400bfc8 <___svfiprintf_internal_r+0x1038>
 400bef8:	58800104 	addi	r2,r11,4
 400befc:	5f00000b 	ldhu	fp,0(r11)
 400bf00:	0013883a 	mov	r9,zero
 400bf04:	803e950e 	bge	r16,zero,400b95c <__alt_mem_onchip_memory2_0+0xfc00995c>
 400bf08:	e246b03a 	or	r3,fp,r9
 400bf0c:	d8802315 	stw	r2,140(sp)
 400bf10:	183d5a1e 	bne	r3,zero,400b47c <__alt_mem_onchip_memory2_0+0xfc00947c>
 400bf14:	0015883a 	mov	r10,zero
 400bf18:	0005883a 	mov	r2,zero
 400bf1c:	003fb706 	br	400bdfc <__alt_mem_onchip_memory2_0+0xfc009dfc>
 400bf20:	98c00043 	ldbu	r3,1(r19)
 400bf24:	94800814 	ori	r18,r18,32
 400bf28:	9cc00044 	addi	r19,r19,1
 400bf2c:	18c03fcc 	andi	r3,r3,255
 400bf30:	18c0201c 	xori	r3,r3,128
 400bf34:	18ffe004 	addi	r3,r3,-128
 400bf38:	003c6406 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400bf3c:	d8c02315 	stw	r3,140(sp)
 400bf40:	0015883a 	mov	r10,zero
 400bf44:	003faa06 	br	400bdf0 <__alt_mem_onchip_memory2_0+0xfc009df0>
 400bf48:	dac02317 	ldw	r11,140(sp)
 400bf4c:	58800017 	ldw	r2,0(r11)
 400bf50:	5ac00104 	addi	r11,r11,4
 400bf54:	dac02315 	stw	r11,140(sp)
 400bf58:	dac02517 	ldw	r11,148(sp)
 400bf5c:	12c00015 	stw	r11,0(r2)
 400bf60:	003c3206 	br	400b02c <__alt_mem_onchip_memory2_0+0xfc00902c>
 400bf64:	010100b4 	movhi	r4,1026
 400bf68:	2132ad04 	addi	r4,r4,-13644
 400bf6c:	d9002915 	stw	r4,164(sp)
 400bf70:	d8c02315 	stw	r3,140(sp)
 400bf74:	1025883a 	mov	r18,r2
 400bf78:	e244b03a 	or	r2,fp,r9
 400bf7c:	103f871e 	bne	r2,zero,400bd9c <__alt_mem_onchip_memory2_0+0xfc009d9c>
 400bf80:	0015883a 	mov	r10,zero
 400bf84:	00800084 	movi	r2,2
 400bf88:	003f9c06 	br	400bdfc <__alt_mem_onchip_memory2_0+0xfc009dfc>
 400bf8c:	0039883a 	mov	fp,zero
 400bf90:	003e5f06 	br	400b910 <__alt_mem_onchip_memory2_0+0xfc009910>
 400bf94:	d9801a04 	addi	r6,sp,104
 400bf98:	b80b883a 	mov	r5,r23
 400bf9c:	a809883a 	mov	r4,r21
 400bfa0:	400adc00 	call	400adc0 <__ssprint_r>
 400bfa4:	103f081e 	bne	r2,zero,400bbc8 <__alt_mem_onchip_memory2_0+0xfc009bc8>
 400bfa8:	d8c01c17 	ldw	r3,112(sp)
 400bfac:	d8801b17 	ldw	r2,108(sp)
 400bfb0:	d811883a 	mov	r8,sp
 400bfb4:	003e9106 	br	400b9fc <__alt_mem_onchip_memory2_0+0xfc0099fc>
 400bfb8:	010100b4 	movhi	r4,1026
 400bfbc:	21331604 	addi	r4,r4,-13224
 400bfc0:	d9002215 	stw	r4,136(sp)
 400bfc4:	003ead06 	br	400ba7c <__alt_mem_onchip_memory2_0+0xfc009a7c>
 400bfc8:	58800104 	addi	r2,r11,4
 400bfcc:	5f000017 	ldw	fp,0(r11)
 400bfd0:	0013883a 	mov	r9,zero
 400bfd4:	803e610e 	bge	r16,zero,400b95c <__alt_mem_onchip_memory2_0+0xfc00995c>
 400bfd8:	003fcb06 	br	400bf08 <__alt_mem_onchip_memory2_0+0xfc009f08>
 400bfdc:	58800104 	addi	r2,r11,4
 400bfe0:	5f000017 	ldw	fp,0(r11)
 400bfe4:	0013883a 	mov	r9,zero
 400bfe8:	803e420e 	bge	r16,zero,400b8f4 <__alt_mem_onchip_memory2_0+0xfc0098f4>
 400bfec:	003f7e06 	br	400bde8 <__alt_mem_onchip_memory2_0+0xfc009de8>
 400bff0:	5f000017 	ldw	fp,0(r11)
 400bff4:	5ac00104 	addi	r11,r11,4
 400bff8:	0013883a 	mov	r9,zero
 400bffc:	dac02315 	stw	r11,140(sp)
 400c000:	003cce06 	br	400b33c <__alt_mem_onchip_memory2_0+0xfc00933c>
 400c004:	8809883a 	mov	r4,r17
 400c008:	da002c15 	stw	r8,176(sp)
 400c00c:	40016500 	call	4001650 <strlen>
 400c010:	d8802115 	stw	r2,132(sp)
 400c014:	da801d83 	ldbu	r10,118(sp)
 400c018:	df002315 	stw	fp,140(sp)
 400c01c:	0021883a 	mov	r16,zero
 400c020:	da002c17 	ldw	r8,176(sp)
 400c024:	003cf606 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400c028:	00800184 	movi	r2,6
 400c02c:	1400012e 	bgeu	r2,r16,400c034 <___svfiprintf_internal_r+0x10a4>
 400c030:	1021883a 	mov	r16,r2
 400c034:	dc002115 	stw	r16,132(sp)
 400c038:	8005883a 	mov	r2,r16
 400c03c:	80003c16 	blt	r16,zero,400c130 <___svfiprintf_internal_r+0x11a0>
 400c040:	044100b4 	movhi	r17,1026
 400c044:	d8802015 	stw	r2,128(sp)
 400c048:	df002315 	stw	fp,140(sp)
 400c04c:	8c72b204 	addi	r17,r17,-13624
 400c050:	003d2e06 	br	400b50c <__alt_mem_onchip_memory2_0+0xfc00950c>
 400c054:	04001004 	movi	r16,64
 400c058:	800b883a 	mov	r5,r16
 400c05c:	40088c40 	call	40088c4 <_malloc_r>
 400c060:	dac02717 	ldw	r11,156(sp)
 400c064:	58800015 	stw	r2,0(r11)
 400c068:	58800415 	stw	r2,16(r11)
 400c06c:	10004826 	beq	r2,zero,400c190 <___svfiprintf_internal_r+0x1200>
 400c070:	dac02717 	ldw	r11,156(sp)
 400c074:	5c000515 	stw	r16,20(r11)
 400c078:	003bd906 	br	400afe0 <__alt_mem_onchip_memory2_0+0xfc008fe0>
 400c07c:	9080004c 	andi	r2,r18,1
 400c080:	0015883a 	mov	r10,zero
 400c084:	10000626 	beq	r2,zero,400c0a0 <___svfiprintf_internal_r+0x1110>
 400c088:	dac02b17 	ldw	r11,172(sp)
 400c08c:	00800c04 	movi	r2,48
 400c090:	d88019c5 	stb	r2,103(sp)
 400c094:	dac02115 	stw	r11,132(sp)
 400c098:	dc4019c4 	addi	r17,sp,103
 400c09c:	003cd806 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400c0a0:	d8002115 	stw	zero,132(sp)
 400c0a4:	dc401a04 	addi	r17,sp,104
 400c0a8:	003cd506 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400c0ac:	010100b4 	movhi	r4,1026
 400c0b0:	21331a04 	addi	r4,r4,-13208
 400c0b4:	d9002815 	stw	r4,160(sp)
 400c0b8:	003d4306 	br	400b5c8 <__alt_mem_onchip_memory2_0+0xfc0095c8>
 400c0bc:	00bfffc4 	movi	r2,-1
 400c0c0:	003ec606 	br	400bbdc <__alt_mem_onchip_memory2_0+0xfc009bdc>
 400c0c4:	00800044 	movi	r2,1
 400c0c8:	10803fcc 	andi	r2,r2,255
 400c0cc:	00c00044 	movi	r3,1
 400c0d0:	10fd8026 	beq	r2,r3,400b6d4 <__alt_mem_onchip_memory2_0+0xfc0096d4>
 400c0d4:	00c00084 	movi	r3,2
 400c0d8:	10fca426 	beq	r2,r3,400b36c <__alt_mem_onchip_memory2_0+0xfc00936c>
 400c0dc:	003ce806 	br	400b480 <__alt_mem_onchip_memory2_0+0xfc009480>
 400c0e0:	010100b4 	movhi	r4,1026
 400c0e4:	21331a04 	addi	r4,r4,-13208
 400c0e8:	d9002815 	stw	r4,160(sp)
 400c0ec:	003e9906 	br	400bb54 <__alt_mem_onchip_memory2_0+0xfc009b54>
 400c0f0:	1025883a 	mov	r18,r2
 400c0f4:	0015883a 	mov	r10,zero
 400c0f8:	00800084 	movi	r2,2
 400c0fc:	003ff206 	br	400c0c8 <__alt_mem_onchip_memory2_0+0xfc00a0c8>
 400c100:	014100b4 	movhi	r5,1026
 400c104:	29731604 	addi	r5,r5,-13224
 400c108:	d9402215 	stw	r5,136(sp)
 400c10c:	003ee206 	br	400bc98 <__alt_mem_onchip_memory2_0+0xfc009c98>
 400c110:	5827883a 	mov	r19,r11
 400c114:	0021883a 	mov	r16,zero
 400c118:	003bed06 	br	400b0d0 <__alt_mem_onchip_memory2_0+0xfc0090d0>
 400c11c:	dc002115 	stw	r16,132(sp)
 400c120:	da801d83 	ldbu	r10,118(sp)
 400c124:	df002315 	stw	fp,140(sp)
 400c128:	0021883a 	mov	r16,zero
 400c12c:	003cb406 	br	400b400 <__alt_mem_onchip_memory2_0+0xfc009400>
 400c130:	0005883a 	mov	r2,zero
 400c134:	003fc206 	br	400c040 <__alt_mem_onchip_memory2_0+0xfc00a040>
 400c138:	d8802317 	ldw	r2,140(sp)
 400c13c:	98c00043 	ldbu	r3,1(r19)
 400c140:	5827883a 	mov	r19,r11
 400c144:	14000017 	ldw	r16,0(r2)
 400c148:	10800104 	addi	r2,r2,4
 400c14c:	d8802315 	stw	r2,140(sp)
 400c150:	803f760e 	bge	r16,zero,400bf2c <__alt_mem_onchip_memory2_0+0xfc009f2c>
 400c154:	18c03fcc 	andi	r3,r3,255
 400c158:	18c0201c 	xori	r3,r3,128
 400c15c:	043fffc4 	movi	r16,-1
 400c160:	18ffe004 	addi	r3,r3,-128
 400c164:	003bd906 	br	400b0cc <__alt_mem_onchip_memory2_0+0xfc0090cc>
 400c168:	d9c01d85 	stb	r7,118(sp)
 400c16c:	003cb606 	br	400b448 <__alt_mem_onchip_memory2_0+0xfc009448>
 400c170:	d9c01d85 	stb	r7,118(sp)
 400c174:	003d2106 	br	400b5fc <__alt_mem_onchip_memory2_0+0xfc0095fc>
 400c178:	d9c01d85 	stb	r7,118(sp)
 400c17c:	003d8e06 	br	400b7b8 <__alt_mem_onchip_memory2_0+0xfc0097b8>
 400c180:	d9c01d85 	stb	r7,118(sp)
 400c184:	003db306 	br	400b854 <__alt_mem_onchip_memory2_0+0xfc009854>
 400c188:	d9c01d85 	stb	r7,118(sp)
 400c18c:	003c8a06 	br	400b3b8 <__alt_mem_onchip_memory2_0+0xfc0093b8>
 400c190:	dac02a17 	ldw	r11,168(sp)
 400c194:	00800304 	movi	r2,12
 400c198:	58800015 	stw	r2,0(r11)
 400c19c:	00bfffc4 	movi	r2,-1
 400c1a0:	003e8e06 	br	400bbdc <__alt_mem_onchip_memory2_0+0xfc009bdc>
 400c1a4:	d9c01d85 	stb	r7,118(sp)
 400c1a8:	003dc706 	br	400b8c8 <__alt_mem_onchip_memory2_0+0xfc0098c8>
 400c1ac:	d9c01d85 	stb	r7,118(sp)
 400c1b0:	003ddf06 	br	400b930 <__alt_mem_onchip_memory2_0+0xfc009930>
 400c1b4:	d9c01d85 	stb	r7,118(sp)
 400c1b8:	003d3706 	br	400b698 <__alt_mem_onchip_memory2_0+0xfc009698>
 400c1bc:	d9c01d85 	stb	r7,118(sp)
 400c1c0:	003c5406 	br	400b314 <__alt_mem_onchip_memory2_0+0xfc009314>
 400c1c4:	d9c01d85 	stb	r7,118(sp)
 400c1c8:	003d1d06 	br	400b640 <__alt_mem_onchip_memory2_0+0xfc009640>

0400c1cc <__sprint_r.part.0>:
 400c1cc:	28801917 	ldw	r2,100(r5)
 400c1d0:	defff604 	addi	sp,sp,-40
 400c1d4:	dd400515 	stw	r21,20(sp)
 400c1d8:	dfc00915 	stw	ra,36(sp)
 400c1dc:	df000815 	stw	fp,32(sp)
 400c1e0:	ddc00715 	stw	r23,28(sp)
 400c1e4:	dd800615 	stw	r22,24(sp)
 400c1e8:	dd000415 	stw	r20,16(sp)
 400c1ec:	dcc00315 	stw	r19,12(sp)
 400c1f0:	dc800215 	stw	r18,8(sp)
 400c1f4:	dc400115 	stw	r17,4(sp)
 400c1f8:	dc000015 	stw	r16,0(sp)
 400c1fc:	1088000c 	andi	r2,r2,8192
 400c200:	302b883a 	mov	r21,r6
 400c204:	10002e26 	beq	r2,zero,400c2c0 <__sprint_r.part.0+0xf4>
 400c208:	30800217 	ldw	r2,8(r6)
 400c20c:	35800017 	ldw	r22,0(r6)
 400c210:	10002926 	beq	r2,zero,400c2b8 <__sprint_r.part.0+0xec>
 400c214:	2827883a 	mov	r19,r5
 400c218:	2029883a 	mov	r20,r4
 400c21c:	b5c00104 	addi	r23,r22,4
 400c220:	04bfffc4 	movi	r18,-1
 400c224:	bc400017 	ldw	r17,0(r23)
 400c228:	b4000017 	ldw	r16,0(r22)
 400c22c:	0039883a 	mov	fp,zero
 400c230:	8822d0ba 	srli	r17,r17,2
 400c234:	8800031e 	bne	r17,zero,400c244 <__sprint_r.part.0+0x78>
 400c238:	00001806 	br	400c29c <__sprint_r.part.0+0xd0>
 400c23c:	84000104 	addi	r16,r16,4
 400c240:	8f001526 	beq	r17,fp,400c298 <__sprint_r.part.0+0xcc>
 400c244:	81400017 	ldw	r5,0(r16)
 400c248:	980d883a 	mov	r6,r19
 400c24c:	a009883a 	mov	r4,r20
 400c250:	400dbf40 	call	400dbf4 <_fputwc_r>
 400c254:	e7000044 	addi	fp,fp,1
 400c258:	14bff81e 	bne	r2,r18,400c23c <__alt_mem_onchip_memory2_0+0xfc00a23c>
 400c25c:	9005883a 	mov	r2,r18
 400c260:	a8000215 	stw	zero,8(r21)
 400c264:	a8000115 	stw	zero,4(r21)
 400c268:	dfc00917 	ldw	ra,36(sp)
 400c26c:	df000817 	ldw	fp,32(sp)
 400c270:	ddc00717 	ldw	r23,28(sp)
 400c274:	dd800617 	ldw	r22,24(sp)
 400c278:	dd400517 	ldw	r21,20(sp)
 400c27c:	dd000417 	ldw	r20,16(sp)
 400c280:	dcc00317 	ldw	r19,12(sp)
 400c284:	dc800217 	ldw	r18,8(sp)
 400c288:	dc400117 	ldw	r17,4(sp)
 400c28c:	dc000017 	ldw	r16,0(sp)
 400c290:	dec00a04 	addi	sp,sp,40
 400c294:	f800283a 	ret
 400c298:	a8800217 	ldw	r2,8(r21)
 400c29c:	8c63883a 	add	r17,r17,r17
 400c2a0:	8c63883a 	add	r17,r17,r17
 400c2a4:	1445c83a 	sub	r2,r2,r17
 400c2a8:	a8800215 	stw	r2,8(r21)
 400c2ac:	b5800204 	addi	r22,r22,8
 400c2b0:	bdc00204 	addi	r23,r23,8
 400c2b4:	103fdb1e 	bne	r2,zero,400c224 <__alt_mem_onchip_memory2_0+0xfc00a224>
 400c2b8:	0005883a 	mov	r2,zero
 400c2bc:	003fe806 	br	400c260 <__alt_mem_onchip_memory2_0+0xfc00a260>
 400c2c0:	4007fe80 	call	4007fe8 <__sfvwrite_r>
 400c2c4:	003fe606 	br	400c260 <__alt_mem_onchip_memory2_0+0xfc00a260>

0400c2c8 <__sprint_r>:
 400c2c8:	30c00217 	ldw	r3,8(r6)
 400c2cc:	18000126 	beq	r3,zero,400c2d4 <__sprint_r+0xc>
 400c2d0:	400c1cc1 	jmpi	400c1cc <__sprint_r.part.0>
 400c2d4:	30000115 	stw	zero,4(r6)
 400c2d8:	0005883a 	mov	r2,zero
 400c2dc:	f800283a 	ret

0400c2e0 <___vfiprintf_internal_r>:
 400c2e0:	deffc904 	addi	sp,sp,-220
 400c2e4:	df003515 	stw	fp,212(sp)
 400c2e8:	dd003115 	stw	r20,196(sp)
 400c2ec:	dfc03615 	stw	ra,216(sp)
 400c2f0:	ddc03415 	stw	r23,208(sp)
 400c2f4:	dd803315 	stw	r22,204(sp)
 400c2f8:	dd403215 	stw	r21,200(sp)
 400c2fc:	dcc03015 	stw	r19,192(sp)
 400c300:	dc802f15 	stw	r18,188(sp)
 400c304:	dc402e15 	stw	r17,184(sp)
 400c308:	dc002d15 	stw	r16,180(sp)
 400c30c:	d9002015 	stw	r4,128(sp)
 400c310:	d9c02215 	stw	r7,136(sp)
 400c314:	2829883a 	mov	r20,r5
 400c318:	3039883a 	mov	fp,r6
 400c31c:	20000226 	beq	r4,zero,400c328 <___vfiprintf_internal_r+0x48>
 400c320:	20800e17 	ldw	r2,56(r4)
 400c324:	1000cf26 	beq	r2,zero,400c664 <___vfiprintf_internal_r+0x384>
 400c328:	a080030b 	ldhu	r2,12(r20)
 400c32c:	10c8000c 	andi	r3,r2,8192
 400c330:	1800061e 	bne	r3,zero,400c34c <___vfiprintf_internal_r+0x6c>
 400c334:	a1001917 	ldw	r4,100(r20)
 400c338:	00f7ffc4 	movi	r3,-8193
 400c33c:	10880014 	ori	r2,r2,8192
 400c340:	20c6703a 	and	r3,r4,r3
 400c344:	a080030d 	sth	r2,12(r20)
 400c348:	a0c01915 	stw	r3,100(r20)
 400c34c:	10c0020c 	andi	r3,r2,8
 400c350:	1800a926 	beq	r3,zero,400c5f8 <___vfiprintf_internal_r+0x318>
 400c354:	a0c00417 	ldw	r3,16(r20)
 400c358:	1800a726 	beq	r3,zero,400c5f8 <___vfiprintf_internal_r+0x318>
 400c35c:	1080068c 	andi	r2,r2,26
 400c360:	00c00284 	movi	r3,10
 400c364:	10c0ac26 	beq	r2,r3,400c618 <___vfiprintf_internal_r+0x338>
 400c368:	da801a04 	addi	r10,sp,104
 400c36c:	da801e15 	stw	r10,120(sp)
 400c370:	d8801e17 	ldw	r2,120(sp)
 400c374:	da8019c4 	addi	r10,sp,103
 400c378:	058100b4 	movhi	r22,1026
 400c37c:	05c100b4 	movhi	r23,1026
 400c380:	da801f15 	stw	r10,124(sp)
 400c384:	1295c83a 	sub	r10,r2,r10
 400c388:	b5b32204 	addi	r22,r22,-13176
 400c38c:	bdf31e04 	addi	r23,r23,-13192
 400c390:	dec01a15 	stw	sp,104(sp)
 400c394:	d8001c15 	stw	zero,112(sp)
 400c398:	d8001b15 	stw	zero,108(sp)
 400c39c:	d8002615 	stw	zero,152(sp)
 400c3a0:	d8002315 	stw	zero,140(sp)
 400c3a4:	da802715 	stw	r10,156(sp)
 400c3a8:	d811883a 	mov	r8,sp
 400c3ac:	dd002115 	stw	r20,132(sp)
 400c3b0:	e021883a 	mov	r16,fp
 400c3b4:	80800007 	ldb	r2,0(r16)
 400c3b8:	1003ea26 	beq	r2,zero,400d364 <___vfiprintf_internal_r+0x1084>
 400c3bc:	00c00944 	movi	r3,37
 400c3c0:	8025883a 	mov	r18,r16
 400c3c4:	10c0021e 	bne	r2,r3,400c3d0 <___vfiprintf_internal_r+0xf0>
 400c3c8:	00001606 	br	400c424 <___vfiprintf_internal_r+0x144>
 400c3cc:	10c00326 	beq	r2,r3,400c3dc <___vfiprintf_internal_r+0xfc>
 400c3d0:	94800044 	addi	r18,r18,1
 400c3d4:	90800007 	ldb	r2,0(r18)
 400c3d8:	103ffc1e 	bne	r2,zero,400c3cc <__alt_mem_onchip_memory2_0+0xfc00a3cc>
 400c3dc:	9423c83a 	sub	r17,r18,r16
 400c3e0:	88001026 	beq	r17,zero,400c424 <___vfiprintf_internal_r+0x144>
 400c3e4:	d8c01c17 	ldw	r3,112(sp)
 400c3e8:	d8801b17 	ldw	r2,108(sp)
 400c3ec:	44000015 	stw	r16,0(r8)
 400c3f0:	88c7883a 	add	r3,r17,r3
 400c3f4:	10800044 	addi	r2,r2,1
 400c3f8:	44400115 	stw	r17,4(r8)
 400c3fc:	d8c01c15 	stw	r3,112(sp)
 400c400:	d8801b15 	stw	r2,108(sp)
 400c404:	010001c4 	movi	r4,7
 400c408:	2080760e 	bge	r4,r2,400c5e4 <___vfiprintf_internal_r+0x304>
 400c40c:	1803821e 	bne	r3,zero,400d218 <___vfiprintf_internal_r+0xf38>
 400c410:	da802317 	ldw	r10,140(sp)
 400c414:	d8001b15 	stw	zero,108(sp)
 400c418:	d811883a 	mov	r8,sp
 400c41c:	5455883a 	add	r10,r10,r17
 400c420:	da802315 	stw	r10,140(sp)
 400c424:	90800007 	ldb	r2,0(r18)
 400c428:	10044626 	beq	r2,zero,400d544 <___vfiprintf_internal_r+0x1264>
 400c42c:	90c00047 	ldb	r3,1(r18)
 400c430:	94000044 	addi	r16,r18,1
 400c434:	d8001d85 	stb	zero,118(sp)
 400c438:	0009883a 	mov	r4,zero
 400c43c:	000f883a 	mov	r7,zero
 400c440:	027fffc4 	movi	r9,-1
 400c444:	0023883a 	mov	r17,zero
 400c448:	0029883a 	mov	r20,zero
 400c44c:	01401604 	movi	r5,88
 400c450:	01800244 	movi	r6,9
 400c454:	03400a84 	movi	r13,42
 400c458:	03001b04 	movi	r12,108
 400c45c:	84000044 	addi	r16,r16,1
 400c460:	18bff804 	addi	r2,r3,-32
 400c464:	28827336 	bltu	r5,r2,400ce34 <___vfiprintf_internal_r+0xb54>
 400c468:	100490ba 	slli	r2,r2,2
 400c46c:	02810074 	movhi	r10,1025
 400c470:	52b12004 	addi	r10,r10,-15232
 400c474:	1285883a 	add	r2,r2,r10
 400c478:	10800017 	ldw	r2,0(r2)
 400c47c:	1000683a 	jmp	r2
 400c480:	0400cb68 	cmpgeui	r16,zero,813
 400c484:	0400ce34 	movhi	r16,824
 400c488:	0400ce34 	movhi	r16,824
 400c48c:	0400cb88 	cmpgei	r16,zero,814
 400c490:	0400ce34 	movhi	r16,824
 400c494:	0400ce34 	movhi	r16,824
 400c498:	0400ce34 	movhi	r16,824
 400c49c:	0400ce34 	movhi	r16,824
 400c4a0:	0400ce34 	movhi	r16,824
 400c4a4:	0400ce34 	movhi	r16,824
 400c4a8:	0400cd70 	cmpltui	r16,zero,821
 400c4ac:	0400cd8c 	andi	r16,zero,822
 400c4b0:	0400ce34 	movhi	r16,824
 400c4b4:	0400c674 	movhi	r16,793
 400c4b8:	0400cd9c 	xori	r16,zero,822
 400c4bc:	0400ce34 	movhi	r16,824
 400c4c0:	0400cb94 	movui	r16,814
 400c4c4:	0400cba0 	cmpeqi	r16,zero,814
 400c4c8:	0400cba0 	cmpeqi	r16,zero,814
 400c4cc:	0400cba0 	cmpeqi	r16,zero,814
 400c4d0:	0400cba0 	cmpeqi	r16,zero,814
 400c4d4:	0400cba0 	cmpeqi	r16,zero,814
 400c4d8:	0400cba0 	cmpeqi	r16,zero,814
 400c4dc:	0400cba0 	cmpeqi	r16,zero,814
 400c4e0:	0400cba0 	cmpeqi	r16,zero,814
 400c4e4:	0400cba0 	cmpeqi	r16,zero,814
 400c4e8:	0400ce34 	movhi	r16,824
 400c4ec:	0400ce34 	movhi	r16,824
 400c4f0:	0400ce34 	movhi	r16,824
 400c4f4:	0400ce34 	movhi	r16,824
 400c4f8:	0400ce34 	movhi	r16,824
 400c4fc:	0400ce34 	movhi	r16,824
 400c500:	0400ce34 	movhi	r16,824
 400c504:	0400ce34 	movhi	r16,824
 400c508:	0400ce34 	movhi	r16,824
 400c50c:	0400ce34 	movhi	r16,824
 400c510:	0400cbcc 	andi	r16,zero,815
 400c514:	0400ce34 	movhi	r16,824
 400c518:	0400ce34 	movhi	r16,824
 400c51c:	0400ce34 	movhi	r16,824
 400c520:	0400ce34 	movhi	r16,824
 400c524:	0400ce34 	movhi	r16,824
 400c528:	0400ce34 	movhi	r16,824
 400c52c:	0400ce34 	movhi	r16,824
 400c530:	0400ce34 	movhi	r16,824
 400c534:	0400ce34 	movhi	r16,824
 400c538:	0400ce34 	movhi	r16,824
 400c53c:	0400cc04 	movi	r16,816
 400c540:	0400ce34 	movhi	r16,824
 400c544:	0400ce34 	movhi	r16,824
 400c548:	0400ce34 	movhi	r16,824
 400c54c:	0400ce34 	movhi	r16,824
 400c550:	0400ce34 	movhi	r16,824
 400c554:	0400cc5c 	xori	r16,zero,817
 400c558:	0400ce34 	movhi	r16,824
 400c55c:	0400ce34 	movhi	r16,824
 400c560:	0400cccc 	andi	r16,zero,819
 400c564:	0400ce34 	movhi	r16,824
 400c568:	0400ce34 	movhi	r16,824
 400c56c:	0400ce34 	movhi	r16,824
 400c570:	0400ce34 	movhi	r16,824
 400c574:	0400ce34 	movhi	r16,824
 400c578:	0400ce34 	movhi	r16,824
 400c57c:	0400ce34 	movhi	r16,824
 400c580:	0400ce34 	movhi	r16,824
 400c584:	0400ce34 	movhi	r16,824
 400c588:	0400ce34 	movhi	r16,824
 400c58c:	0400ca78 	rdprs	r16,zero,809
 400c590:	0400caa4 	muli	r16,zero,810
 400c594:	0400ce34 	movhi	r16,824
 400c598:	0400ce34 	movhi	r16,824
 400c59c:	0400ce34 	movhi	r16,824
 400c5a0:	0400cddc 	xori	r16,zero,823
 400c5a4:	0400caa4 	muli	r16,zero,810
 400c5a8:	0400ce34 	movhi	r16,824
 400c5ac:	0400ce34 	movhi	r16,824
 400c5b0:	0400c938 	rdprs	r16,zero,804
 400c5b4:	0400ce34 	movhi	r16,824
 400c5b8:	0400c948 	cmpgei	r16,zero,805
 400c5bc:	0400c984 	movi	r16,806
 400c5c0:	0400c680 	call	400c68 <OSCtxSw_SWITCH_PC+0x400c28>
 400c5c4:	0400c92c 	andhi	r16,zero,804
 400c5c8:	0400ce34 	movhi	r16,824
 400c5cc:	0400cd08 	cmpgei	r16,zero,820
 400c5d0:	0400ce34 	movhi	r16,824
 400c5d4:	0400cd60 	cmpeqi	r16,zero,821
 400c5d8:	0400ce34 	movhi	r16,824
 400c5dc:	0400ce34 	movhi	r16,824
 400c5e0:	0400ca24 	muli	r16,zero,808
 400c5e4:	42000204 	addi	r8,r8,8
 400c5e8:	da802317 	ldw	r10,140(sp)
 400c5ec:	5455883a 	add	r10,r10,r17
 400c5f0:	da802315 	stw	r10,140(sp)
 400c5f4:	003f8b06 	br	400c424 <__alt_mem_onchip_memory2_0+0xfc00a424>
 400c5f8:	d9002017 	ldw	r4,128(sp)
 400c5fc:	a00b883a 	mov	r5,r20
 400c600:	4005b900 	call	4005b90 <__swsetup_r>
 400c604:	1003b11e 	bne	r2,zero,400d4cc <___vfiprintf_internal_r+0x11ec>
 400c608:	a080030b 	ldhu	r2,12(r20)
 400c60c:	00c00284 	movi	r3,10
 400c610:	1080068c 	andi	r2,r2,26
 400c614:	10ff541e 	bne	r2,r3,400c368 <__alt_mem_onchip_memory2_0+0xfc00a368>
 400c618:	a080038f 	ldh	r2,14(r20)
 400c61c:	103f5216 	blt	r2,zero,400c368 <__alt_mem_onchip_memory2_0+0xfc00a368>
 400c620:	d9c02217 	ldw	r7,136(sp)
 400c624:	d9002017 	ldw	r4,128(sp)
 400c628:	e00d883a 	mov	r6,fp
 400c62c:	a00b883a 	mov	r5,r20
 400c630:	400d7580 	call	400d758 <__sbprintf>
 400c634:	dfc03617 	ldw	ra,216(sp)
 400c638:	df003517 	ldw	fp,212(sp)
 400c63c:	ddc03417 	ldw	r23,208(sp)
 400c640:	dd803317 	ldw	r22,204(sp)
 400c644:	dd403217 	ldw	r21,200(sp)
 400c648:	dd003117 	ldw	r20,196(sp)
 400c64c:	dcc03017 	ldw	r19,192(sp)
 400c650:	dc802f17 	ldw	r18,188(sp)
 400c654:	dc402e17 	ldw	r17,184(sp)
 400c658:	dc002d17 	ldw	r16,180(sp)
 400c65c:	dec03704 	addi	sp,sp,220
 400c660:	f800283a 	ret
 400c664:	4007b640 	call	4007b64 <__sinit>
 400c668:	003f2f06 	br	400c328 <__alt_mem_onchip_memory2_0+0xfc00a328>
 400c66c:	0463c83a 	sub	r17,zero,r17
 400c670:	d8802215 	stw	r2,136(sp)
 400c674:	a5000114 	ori	r20,r20,4
 400c678:	80c00007 	ldb	r3,0(r16)
 400c67c:	003f7706 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400c680:	00800c04 	movi	r2,48
 400c684:	da802217 	ldw	r10,136(sp)
 400c688:	d8801d05 	stb	r2,116(sp)
 400c68c:	00801e04 	movi	r2,120
 400c690:	d8801d45 	stb	r2,117(sp)
 400c694:	d8001d85 	stb	zero,118(sp)
 400c698:	50c00104 	addi	r3,r10,4
 400c69c:	54800017 	ldw	r18,0(r10)
 400c6a0:	0027883a 	mov	r19,zero
 400c6a4:	a0800094 	ori	r2,r20,2
 400c6a8:	48030b16 	blt	r9,zero,400d2d8 <___vfiprintf_internal_r+0xff8>
 400c6ac:	00bfdfc4 	movi	r2,-129
 400c6b0:	a096703a 	and	r11,r20,r2
 400c6b4:	d8c02215 	stw	r3,136(sp)
 400c6b8:	5d000094 	ori	r20,r11,2
 400c6bc:	90032b1e 	bne	r18,zero,400d36c <___vfiprintf_internal_r+0x108c>
 400c6c0:	008100b4 	movhi	r2,1026
 400c6c4:	10b2ad04 	addi	r2,r2,-13644
 400c6c8:	d8802615 	stw	r2,152(sp)
 400c6cc:	0039883a 	mov	fp,zero
 400c6d0:	48017b1e 	bne	r9,zero,400ccc0 <___vfiprintf_internal_r+0x9e0>
 400c6d4:	0013883a 	mov	r9,zero
 400c6d8:	0027883a 	mov	r19,zero
 400c6dc:	dd401a04 	addi	r21,sp,104
 400c6e0:	4825883a 	mov	r18,r9
 400c6e4:	4cc0010e 	bge	r9,r19,400c6ec <___vfiprintf_internal_r+0x40c>
 400c6e8:	9825883a 	mov	r18,r19
 400c6ec:	e7003fcc 	andi	fp,fp,255
 400c6f0:	e700201c 	xori	fp,fp,128
 400c6f4:	e73fe004 	addi	fp,fp,-128
 400c6f8:	e0000126 	beq	fp,zero,400c700 <___vfiprintf_internal_r+0x420>
 400c6fc:	94800044 	addi	r18,r18,1
 400c700:	a380008c 	andi	r14,r20,2
 400c704:	70000126 	beq	r14,zero,400c70c <___vfiprintf_internal_r+0x42c>
 400c708:	94800084 	addi	r18,r18,2
 400c70c:	a700210c 	andi	fp,r20,132
 400c710:	e001df1e 	bne	fp,zero,400ce90 <___vfiprintf_internal_r+0xbb0>
 400c714:	8c87c83a 	sub	r3,r17,r18
 400c718:	00c1dd0e 	bge	zero,r3,400ce90 <___vfiprintf_internal_r+0xbb0>
 400c71c:	01c00404 	movi	r7,16
 400c720:	d8801c17 	ldw	r2,112(sp)
 400c724:	38c3ad0e 	bge	r7,r3,400d5dc <___vfiprintf_internal_r+0x12fc>
 400c728:	028100b4 	movhi	r10,1026
 400c72c:	52b32204 	addi	r10,r10,-13176
 400c730:	dc002915 	stw	r16,164(sp)
 400c734:	d9801b17 	ldw	r6,108(sp)
 400c738:	da802415 	stw	r10,144(sp)
 400c73c:	03c001c4 	movi	r15,7
 400c740:	da402515 	stw	r9,148(sp)
 400c744:	db802815 	stw	r14,160(sp)
 400c748:	1821883a 	mov	r16,r3
 400c74c:	00000506 	br	400c764 <___vfiprintf_internal_r+0x484>
 400c750:	31400084 	addi	r5,r6,2
 400c754:	42000204 	addi	r8,r8,8
 400c758:	200d883a 	mov	r6,r4
 400c75c:	843ffc04 	addi	r16,r16,-16
 400c760:	3c000d0e 	bge	r7,r16,400c798 <___vfiprintf_internal_r+0x4b8>
 400c764:	10800404 	addi	r2,r2,16
 400c768:	31000044 	addi	r4,r6,1
 400c76c:	45800015 	stw	r22,0(r8)
 400c770:	41c00115 	stw	r7,4(r8)
 400c774:	d8801c15 	stw	r2,112(sp)
 400c778:	d9001b15 	stw	r4,108(sp)
 400c77c:	793ff40e 	bge	r15,r4,400c750 <__alt_mem_onchip_memory2_0+0xfc00a750>
 400c780:	1001b51e 	bne	r2,zero,400ce58 <___vfiprintf_internal_r+0xb78>
 400c784:	843ffc04 	addi	r16,r16,-16
 400c788:	000d883a 	mov	r6,zero
 400c78c:	01400044 	movi	r5,1
 400c790:	d811883a 	mov	r8,sp
 400c794:	3c3ff316 	blt	r7,r16,400c764 <__alt_mem_onchip_memory2_0+0xfc00a764>
 400c798:	8007883a 	mov	r3,r16
 400c79c:	da402517 	ldw	r9,148(sp)
 400c7a0:	db802817 	ldw	r14,160(sp)
 400c7a4:	dc002917 	ldw	r16,164(sp)
 400c7a8:	da802417 	ldw	r10,144(sp)
 400c7ac:	1885883a 	add	r2,r3,r2
 400c7b0:	40c00115 	stw	r3,4(r8)
 400c7b4:	42800015 	stw	r10,0(r8)
 400c7b8:	d8801c15 	stw	r2,112(sp)
 400c7bc:	d9401b15 	stw	r5,108(sp)
 400c7c0:	00c001c4 	movi	r3,7
 400c7c4:	19426016 	blt	r3,r5,400d148 <___vfiprintf_internal_r+0xe68>
 400c7c8:	d8c01d87 	ldb	r3,118(sp)
 400c7cc:	42000204 	addi	r8,r8,8
 400c7d0:	29000044 	addi	r4,r5,1
 400c7d4:	1801b31e 	bne	r3,zero,400cea4 <___vfiprintf_internal_r+0xbc4>
 400c7d8:	7001c026 	beq	r14,zero,400cedc <___vfiprintf_internal_r+0xbfc>
 400c7dc:	d8c01d04 	addi	r3,sp,116
 400c7e0:	10800084 	addi	r2,r2,2
 400c7e4:	40c00015 	stw	r3,0(r8)
 400c7e8:	00c00084 	movi	r3,2
 400c7ec:	40c00115 	stw	r3,4(r8)
 400c7f0:	d8801c15 	stw	r2,112(sp)
 400c7f4:	d9001b15 	stw	r4,108(sp)
 400c7f8:	00c001c4 	movi	r3,7
 400c7fc:	1902650e 	bge	r3,r4,400d194 <___vfiprintf_internal_r+0xeb4>
 400c800:	10029a1e 	bne	r2,zero,400d26c <___vfiprintf_internal_r+0xf8c>
 400c804:	00c02004 	movi	r3,128
 400c808:	01000044 	movi	r4,1
 400c80c:	000b883a 	mov	r5,zero
 400c810:	d811883a 	mov	r8,sp
 400c814:	e0c1b31e 	bne	fp,r3,400cee4 <___vfiprintf_internal_r+0xc04>
 400c818:	8cb9c83a 	sub	fp,r17,r18
 400c81c:	0701b10e 	bge	zero,fp,400cee4 <___vfiprintf_internal_r+0xc04>
 400c820:	01c00404 	movi	r7,16
 400c824:	3f03890e 	bge	r7,fp,400d64c <___vfiprintf_internal_r+0x136c>
 400c828:	00c100b4 	movhi	r3,1026
 400c82c:	18f31e04 	addi	r3,r3,-13192
 400c830:	d8c02415 	stw	r3,144(sp)
 400c834:	8007883a 	mov	r3,r16
 400c838:	034001c4 	movi	r13,7
 400c83c:	e021883a 	mov	r16,fp
 400c840:	da402515 	stw	r9,148(sp)
 400c844:	1839883a 	mov	fp,r3
 400c848:	00000506 	br	400c860 <___vfiprintf_internal_r+0x580>
 400c84c:	29800084 	addi	r6,r5,2
 400c850:	42000204 	addi	r8,r8,8
 400c854:	180b883a 	mov	r5,r3
 400c858:	843ffc04 	addi	r16,r16,-16
 400c85c:	3c000d0e 	bge	r7,r16,400c894 <___vfiprintf_internal_r+0x5b4>
 400c860:	10800404 	addi	r2,r2,16
 400c864:	28c00044 	addi	r3,r5,1
 400c868:	45c00015 	stw	r23,0(r8)
 400c86c:	41c00115 	stw	r7,4(r8)
 400c870:	d8801c15 	stw	r2,112(sp)
 400c874:	d8c01b15 	stw	r3,108(sp)
 400c878:	68fff40e 	bge	r13,r3,400c84c <__alt_mem_onchip_memory2_0+0xfc00a84c>
 400c87c:	1002241e 	bne	r2,zero,400d110 <___vfiprintf_internal_r+0xe30>
 400c880:	843ffc04 	addi	r16,r16,-16
 400c884:	01800044 	movi	r6,1
 400c888:	000b883a 	mov	r5,zero
 400c88c:	d811883a 	mov	r8,sp
 400c890:	3c3ff316 	blt	r7,r16,400c860 <__alt_mem_onchip_memory2_0+0xfc00a860>
 400c894:	da402517 	ldw	r9,148(sp)
 400c898:	e007883a 	mov	r3,fp
 400c89c:	8039883a 	mov	fp,r16
 400c8a0:	1821883a 	mov	r16,r3
 400c8a4:	d8c02417 	ldw	r3,144(sp)
 400c8a8:	1705883a 	add	r2,r2,fp
 400c8ac:	47000115 	stw	fp,4(r8)
 400c8b0:	40c00015 	stw	r3,0(r8)
 400c8b4:	d8801c15 	stw	r2,112(sp)
 400c8b8:	d9801b15 	stw	r6,108(sp)
 400c8bc:	00c001c4 	movi	r3,7
 400c8c0:	19827616 	blt	r3,r6,400d29c <___vfiprintf_internal_r+0xfbc>
 400c8c4:	4cf9c83a 	sub	fp,r9,r19
 400c8c8:	42000204 	addi	r8,r8,8
 400c8cc:	31000044 	addi	r4,r6,1
 400c8d0:	300b883a 	mov	r5,r6
 400c8d4:	07018516 	blt	zero,fp,400ceec <___vfiprintf_internal_r+0xc0c>
 400c8d8:	9885883a 	add	r2,r19,r2
 400c8dc:	45400015 	stw	r21,0(r8)
 400c8e0:	44c00115 	stw	r19,4(r8)
 400c8e4:	d8801c15 	stw	r2,112(sp)
 400c8e8:	d9001b15 	stw	r4,108(sp)
 400c8ec:	00c001c4 	movi	r3,7
 400c8f0:	1901dd0e 	bge	r3,r4,400d068 <___vfiprintf_internal_r+0xd88>
 400c8f4:	1002401e 	bne	r2,zero,400d1f8 <___vfiprintf_internal_r+0xf18>
 400c8f8:	d8001b15 	stw	zero,108(sp)
 400c8fc:	a2c0010c 	andi	r11,r20,4
 400c900:	58000226 	beq	r11,zero,400c90c <___vfiprintf_internal_r+0x62c>
 400c904:	8ca7c83a 	sub	r19,r17,r18
 400c908:	04c2f216 	blt	zero,r19,400d4d4 <___vfiprintf_internal_r+0x11f4>
 400c90c:	8c80010e 	bge	r17,r18,400c914 <___vfiprintf_internal_r+0x634>
 400c910:	9023883a 	mov	r17,r18
 400c914:	da802317 	ldw	r10,140(sp)
 400c918:	5455883a 	add	r10,r10,r17
 400c91c:	da802315 	stw	r10,140(sp)
 400c920:	d8001b15 	stw	zero,108(sp)
 400c924:	d811883a 	mov	r8,sp
 400c928:	003ea206 	br	400c3b4 <__alt_mem_onchip_memory2_0+0xfc00a3b4>
 400c92c:	a5000814 	ori	r20,r20,32
 400c930:	80c00007 	ldb	r3,0(r16)
 400c934:	003ec906 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400c938:	80c00007 	ldb	r3,0(r16)
 400c93c:	1b030926 	beq	r3,r12,400d564 <___vfiprintf_internal_r+0x1284>
 400c940:	a5000414 	ori	r20,r20,16
 400c944:	003ec506 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400c948:	21003fcc 	andi	r4,r4,255
 400c94c:	20035e1e 	bne	r4,zero,400d6c8 <___vfiprintf_internal_r+0x13e8>
 400c950:	a080080c 	andi	r2,r20,32
 400c954:	1002a526 	beq	r2,zero,400d3ec <___vfiprintf_internal_r+0x110c>
 400c958:	da802217 	ldw	r10,136(sp)
 400c95c:	50800017 	ldw	r2,0(r10)
 400c960:	da802317 	ldw	r10,140(sp)
 400c964:	5007d7fa 	srai	r3,r10,31
 400c968:	da802217 	ldw	r10,136(sp)
 400c96c:	10c00115 	stw	r3,4(r2)
 400c970:	52800104 	addi	r10,r10,4
 400c974:	da802215 	stw	r10,136(sp)
 400c978:	da802317 	ldw	r10,140(sp)
 400c97c:	12800015 	stw	r10,0(r2)
 400c980:	003e8c06 	br	400c3b4 <__alt_mem_onchip_memory2_0+0xfc00a3b4>
 400c984:	21003fcc 	andi	r4,r4,255
 400c988:	2003511e 	bne	r4,zero,400d6d0 <___vfiprintf_internal_r+0x13f0>
 400c98c:	a080080c 	andi	r2,r20,32
 400c990:	1000a126 	beq	r2,zero,400cc18 <___vfiprintf_internal_r+0x938>
 400c994:	da802217 	ldw	r10,136(sp)
 400c998:	d8001d85 	stb	zero,118(sp)
 400c99c:	50800204 	addi	r2,r10,8
 400c9a0:	54800017 	ldw	r18,0(r10)
 400c9a4:	54c00117 	ldw	r19,4(r10)
 400c9a8:	4802b416 	blt	r9,zero,400d47c <___vfiprintf_internal_r+0x119c>
 400c9ac:	013fdfc4 	movi	r4,-129
 400c9b0:	94c6b03a 	or	r3,r18,r19
 400c9b4:	d8802215 	stw	r2,136(sp)
 400c9b8:	a128703a 	and	r20,r20,r4
 400c9bc:	1800a226 	beq	r3,zero,400cc48 <___vfiprintf_internal_r+0x968>
 400c9c0:	0039883a 	mov	fp,zero
 400c9c4:	dd401a04 	addi	r21,sp,104
 400c9c8:	9006d0fa 	srli	r3,r18,3
 400c9cc:	9808977a 	slli	r4,r19,29
 400c9d0:	9826d0fa 	srli	r19,r19,3
 400c9d4:	948001cc 	andi	r18,r18,7
 400c9d8:	90800c04 	addi	r2,r18,48
 400c9dc:	ad7fffc4 	addi	r21,r21,-1
 400c9e0:	20e4b03a 	or	r18,r4,r3
 400c9e4:	a8800005 	stb	r2,0(r21)
 400c9e8:	94c6b03a 	or	r3,r18,r19
 400c9ec:	183ff61e 	bne	r3,zero,400c9c8 <__alt_mem_onchip_memory2_0+0xfc00a9c8>
 400c9f0:	a0c0004c 	andi	r3,r20,1
 400c9f4:	18005926 	beq	r3,zero,400cb5c <___vfiprintf_internal_r+0x87c>
 400c9f8:	10803fcc 	andi	r2,r2,255
 400c9fc:	1080201c 	xori	r2,r2,128
 400ca00:	10bfe004 	addi	r2,r2,-128
 400ca04:	00c00c04 	movi	r3,48
 400ca08:	10c05426 	beq	r2,r3,400cb5c <___vfiprintf_internal_r+0x87c>
 400ca0c:	da801e17 	ldw	r10,120(sp)
 400ca10:	a8bfffc4 	addi	r2,r21,-1
 400ca14:	a8ffffc5 	stb	r3,-1(r21)
 400ca18:	50a7c83a 	sub	r19,r10,r2
 400ca1c:	102b883a 	mov	r21,r2
 400ca20:	003f2f06 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400ca24:	21003fcc 	andi	r4,r4,255
 400ca28:	2003421e 	bne	r4,zero,400d734 <___vfiprintf_internal_r+0x1454>
 400ca2c:	008100b4 	movhi	r2,1026
 400ca30:	10b2ad04 	addi	r2,r2,-13644
 400ca34:	d8802615 	stw	r2,152(sp)
 400ca38:	a080080c 	andi	r2,r20,32
 400ca3c:	1000aa26 	beq	r2,zero,400cce8 <___vfiprintf_internal_r+0xa08>
 400ca40:	da802217 	ldw	r10,136(sp)
 400ca44:	54800017 	ldw	r18,0(r10)
 400ca48:	54c00117 	ldw	r19,4(r10)
 400ca4c:	52800204 	addi	r10,r10,8
 400ca50:	da802215 	stw	r10,136(sp)
 400ca54:	a080004c 	andi	r2,r20,1
 400ca58:	1001d226 	beq	r2,zero,400d1a4 <___vfiprintf_internal_r+0xec4>
 400ca5c:	94c4b03a 	or	r2,r18,r19
 400ca60:	1002351e 	bne	r2,zero,400d338 <___vfiprintf_internal_r+0x1058>
 400ca64:	d8001d85 	stb	zero,118(sp)
 400ca68:	48022216 	blt	r9,zero,400d2f4 <___vfiprintf_internal_r+0x1014>
 400ca6c:	00bfdfc4 	movi	r2,-129
 400ca70:	a0a8703a 	and	r20,r20,r2
 400ca74:	003f1506 	br	400c6cc <__alt_mem_onchip_memory2_0+0xfc00a6cc>
 400ca78:	da802217 	ldw	r10,136(sp)
 400ca7c:	04800044 	movi	r18,1
 400ca80:	d8001d85 	stb	zero,118(sp)
 400ca84:	50800017 	ldw	r2,0(r10)
 400ca88:	52800104 	addi	r10,r10,4
 400ca8c:	da802215 	stw	r10,136(sp)
 400ca90:	d8801005 	stb	r2,64(sp)
 400ca94:	9027883a 	mov	r19,r18
 400ca98:	dd401004 	addi	r21,sp,64
 400ca9c:	0013883a 	mov	r9,zero
 400caa0:	003f1706 	br	400c700 <__alt_mem_onchip_memory2_0+0xfc00a700>
 400caa4:	21003fcc 	andi	r4,r4,255
 400caa8:	2003201e 	bne	r4,zero,400d72c <___vfiprintf_internal_r+0x144c>
 400caac:	a080080c 	andi	r2,r20,32
 400cab0:	10004b26 	beq	r2,zero,400cbe0 <___vfiprintf_internal_r+0x900>
 400cab4:	da802217 	ldw	r10,136(sp)
 400cab8:	50800117 	ldw	r2,4(r10)
 400cabc:	54800017 	ldw	r18,0(r10)
 400cac0:	52800204 	addi	r10,r10,8
 400cac4:	da802215 	stw	r10,136(sp)
 400cac8:	1027883a 	mov	r19,r2
 400cacc:	10022c16 	blt	r2,zero,400d380 <___vfiprintf_internal_r+0x10a0>
 400cad0:	df001d83 	ldbu	fp,118(sp)
 400cad4:	48007216 	blt	r9,zero,400cca0 <___vfiprintf_internal_r+0x9c0>
 400cad8:	00ffdfc4 	movi	r3,-129
 400cadc:	94c4b03a 	or	r2,r18,r19
 400cae0:	a0e8703a 	and	r20,r20,r3
 400cae4:	1000cc26 	beq	r2,zero,400ce18 <___vfiprintf_internal_r+0xb38>
 400cae8:	98021026 	beq	r19,zero,400d32c <___vfiprintf_internal_r+0x104c>
 400caec:	dc402415 	stw	r17,144(sp)
 400caf0:	dc002515 	stw	r16,148(sp)
 400caf4:	9823883a 	mov	r17,r19
 400caf8:	9021883a 	mov	r16,r18
 400cafc:	dd401a04 	addi	r21,sp,104
 400cb00:	4825883a 	mov	r18,r9
 400cb04:	4027883a 	mov	r19,r8
 400cb08:	8009883a 	mov	r4,r16
 400cb0c:	880b883a 	mov	r5,r17
 400cb10:	01800284 	movi	r6,10
 400cb14:	000f883a 	mov	r7,zero
 400cb18:	400e7200 	call	400e720 <__umoddi3>
 400cb1c:	10800c04 	addi	r2,r2,48
 400cb20:	ad7fffc4 	addi	r21,r21,-1
 400cb24:	8009883a 	mov	r4,r16
 400cb28:	880b883a 	mov	r5,r17
 400cb2c:	a8800005 	stb	r2,0(r21)
 400cb30:	01800284 	movi	r6,10
 400cb34:	000f883a 	mov	r7,zero
 400cb38:	400e1a80 	call	400e1a8 <__udivdi3>
 400cb3c:	1021883a 	mov	r16,r2
 400cb40:	10c4b03a 	or	r2,r2,r3
 400cb44:	1823883a 	mov	r17,r3
 400cb48:	103fef1e 	bne	r2,zero,400cb08 <__alt_mem_onchip_memory2_0+0xfc00ab08>
 400cb4c:	dc402417 	ldw	r17,144(sp)
 400cb50:	dc002517 	ldw	r16,148(sp)
 400cb54:	9013883a 	mov	r9,r18
 400cb58:	9811883a 	mov	r8,r19
 400cb5c:	da801e17 	ldw	r10,120(sp)
 400cb60:	5567c83a 	sub	r19,r10,r21
 400cb64:	003ede06 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400cb68:	38803fcc 	andi	r2,r7,255
 400cb6c:	1080201c 	xori	r2,r2,128
 400cb70:	10bfe004 	addi	r2,r2,-128
 400cb74:	1002371e 	bne	r2,zero,400d454 <___vfiprintf_internal_r+0x1174>
 400cb78:	01000044 	movi	r4,1
 400cb7c:	01c00804 	movi	r7,32
 400cb80:	80c00007 	ldb	r3,0(r16)
 400cb84:	003e3506 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cb88:	a5000054 	ori	r20,r20,1
 400cb8c:	80c00007 	ldb	r3,0(r16)
 400cb90:	003e3206 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cb94:	a5002014 	ori	r20,r20,128
 400cb98:	80c00007 	ldb	r3,0(r16)
 400cb9c:	003e2f06 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cba0:	8015883a 	mov	r10,r16
 400cba4:	0023883a 	mov	r17,zero
 400cba8:	18bff404 	addi	r2,r3,-48
 400cbac:	50c00007 	ldb	r3,0(r10)
 400cbb0:	8c4002a4 	muli	r17,r17,10
 400cbb4:	84000044 	addi	r16,r16,1
 400cbb8:	8015883a 	mov	r10,r16
 400cbbc:	1463883a 	add	r17,r2,r17
 400cbc0:	18bff404 	addi	r2,r3,-48
 400cbc4:	30bff92e 	bgeu	r6,r2,400cbac <__alt_mem_onchip_memory2_0+0xfc00abac>
 400cbc8:	003e2506 	br	400c460 <__alt_mem_onchip_memory2_0+0xfc00a460>
 400cbcc:	21003fcc 	andi	r4,r4,255
 400cbd0:	2002d41e 	bne	r4,zero,400d724 <___vfiprintf_internal_r+0x1444>
 400cbd4:	a5000414 	ori	r20,r20,16
 400cbd8:	a080080c 	andi	r2,r20,32
 400cbdc:	103fb51e 	bne	r2,zero,400cab4 <__alt_mem_onchip_memory2_0+0xfc00aab4>
 400cbe0:	a080040c 	andi	r2,r20,16
 400cbe4:	1001f826 	beq	r2,zero,400d3c8 <___vfiprintf_internal_r+0x10e8>
 400cbe8:	da802217 	ldw	r10,136(sp)
 400cbec:	54800017 	ldw	r18,0(r10)
 400cbf0:	52800104 	addi	r10,r10,4
 400cbf4:	da802215 	stw	r10,136(sp)
 400cbf8:	9027d7fa 	srai	r19,r18,31
 400cbfc:	9805883a 	mov	r2,r19
 400cc00:	003fb206 	br	400cacc <__alt_mem_onchip_memory2_0+0xfc00aacc>
 400cc04:	21003fcc 	andi	r4,r4,255
 400cc08:	2002c41e 	bne	r4,zero,400d71c <___vfiprintf_internal_r+0x143c>
 400cc0c:	a5000414 	ori	r20,r20,16
 400cc10:	a080080c 	andi	r2,r20,32
 400cc14:	103f5f1e 	bne	r2,zero,400c994 <__alt_mem_onchip_memory2_0+0xfc00a994>
 400cc18:	a080040c 	andi	r2,r20,16
 400cc1c:	10020f26 	beq	r2,zero,400d45c <___vfiprintf_internal_r+0x117c>
 400cc20:	da802217 	ldw	r10,136(sp)
 400cc24:	d8001d85 	stb	zero,118(sp)
 400cc28:	0027883a 	mov	r19,zero
 400cc2c:	50800104 	addi	r2,r10,4
 400cc30:	54800017 	ldw	r18,0(r10)
 400cc34:	48021116 	blt	r9,zero,400d47c <___vfiprintf_internal_r+0x119c>
 400cc38:	00ffdfc4 	movi	r3,-129
 400cc3c:	d8802215 	stw	r2,136(sp)
 400cc40:	a0e8703a 	and	r20,r20,r3
 400cc44:	903f5e1e 	bne	r18,zero,400c9c0 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400cc48:	0039883a 	mov	fp,zero
 400cc4c:	4802a626 	beq	r9,zero,400d6e8 <___vfiprintf_internal_r+0x1408>
 400cc50:	0025883a 	mov	r18,zero
 400cc54:	0027883a 	mov	r19,zero
 400cc58:	003f5a06 	br	400c9c4 <__alt_mem_onchip_memory2_0+0xfc00a9c4>
 400cc5c:	21003fcc 	andi	r4,r4,255
 400cc60:	20029f1e 	bne	r4,zero,400d6e0 <___vfiprintf_internal_r+0x1400>
 400cc64:	a5000414 	ori	r20,r20,16
 400cc68:	a080080c 	andi	r2,r20,32
 400cc6c:	10005e1e 	bne	r2,zero,400cde8 <___vfiprintf_internal_r+0xb08>
 400cc70:	a080040c 	andi	r2,r20,16
 400cc74:	1001a21e 	bne	r2,zero,400d300 <___vfiprintf_internal_r+0x1020>
 400cc78:	a080100c 	andi	r2,r20,64
 400cc7c:	d8001d85 	stb	zero,118(sp)
 400cc80:	da802217 	ldw	r10,136(sp)
 400cc84:	1002231e 	bne	r2,zero,400d514 <___vfiprintf_internal_r+0x1234>
 400cc88:	50800104 	addi	r2,r10,4
 400cc8c:	54800017 	ldw	r18,0(r10)
 400cc90:	0027883a 	mov	r19,zero
 400cc94:	4801a00e 	bge	r9,zero,400d318 <___vfiprintf_internal_r+0x1038>
 400cc98:	d8802215 	stw	r2,136(sp)
 400cc9c:	0039883a 	mov	fp,zero
 400cca0:	94c4b03a 	or	r2,r18,r19
 400cca4:	103f901e 	bne	r2,zero,400cae8 <__alt_mem_onchip_memory2_0+0xfc00aae8>
 400cca8:	00800044 	movi	r2,1
 400ccac:	10803fcc 	andi	r2,r2,255
 400ccb0:	00c00044 	movi	r3,1
 400ccb4:	10c05926 	beq	r2,r3,400ce1c <___vfiprintf_internal_r+0xb3c>
 400ccb8:	00c00084 	movi	r3,2
 400ccbc:	10ffe41e 	bne	r2,r3,400cc50 <__alt_mem_onchip_memory2_0+0xfc00ac50>
 400ccc0:	0025883a 	mov	r18,zero
 400ccc4:	0027883a 	mov	r19,zero
 400ccc8:	00013d06 	br	400d1c0 <___vfiprintf_internal_r+0xee0>
 400cccc:	21003fcc 	andi	r4,r4,255
 400ccd0:	2002811e 	bne	r4,zero,400d6d8 <___vfiprintf_internal_r+0x13f8>
 400ccd4:	008100b4 	movhi	r2,1026
 400ccd8:	10b2a804 	addi	r2,r2,-13664
 400ccdc:	d8802615 	stw	r2,152(sp)
 400cce0:	a080080c 	andi	r2,r20,32
 400cce4:	103f561e 	bne	r2,zero,400ca40 <__alt_mem_onchip_memory2_0+0xfc00aa40>
 400cce8:	a080040c 	andi	r2,r20,16
 400ccec:	1001d126 	beq	r2,zero,400d434 <___vfiprintf_internal_r+0x1154>
 400ccf0:	da802217 	ldw	r10,136(sp)
 400ccf4:	0027883a 	mov	r19,zero
 400ccf8:	54800017 	ldw	r18,0(r10)
 400ccfc:	52800104 	addi	r10,r10,4
 400cd00:	da802215 	stw	r10,136(sp)
 400cd04:	003f5306 	br	400ca54 <__alt_mem_onchip_memory2_0+0xfc00aa54>
 400cd08:	da802217 	ldw	r10,136(sp)
 400cd0c:	d8001d85 	stb	zero,118(sp)
 400cd10:	55400017 	ldw	r21,0(r10)
 400cd14:	50c00104 	addi	r3,r10,4
 400cd18:	a8024226 	beq	r21,zero,400d624 <___vfiprintf_internal_r+0x1344>
 400cd1c:	48021816 	blt	r9,zero,400d580 <___vfiprintf_internal_r+0x12a0>
 400cd20:	480d883a 	mov	r6,r9
 400cd24:	000b883a 	mov	r5,zero
 400cd28:	a809883a 	mov	r4,r21
 400cd2c:	d8c02a15 	stw	r3,168(sp)
 400cd30:	da002b15 	stw	r8,172(sp)
 400cd34:	da402c15 	stw	r9,176(sp)
 400cd38:	40090d00 	call	40090d0 <memchr>
 400cd3c:	d8c02a17 	ldw	r3,168(sp)
 400cd40:	da002b17 	ldw	r8,172(sp)
 400cd44:	da402c17 	ldw	r9,176(sp)
 400cd48:	10024826 	beq	r2,zero,400d66c <___vfiprintf_internal_r+0x138c>
 400cd4c:	1567c83a 	sub	r19,r2,r21
 400cd50:	df001d83 	ldbu	fp,118(sp)
 400cd54:	d8c02215 	stw	r3,136(sp)
 400cd58:	0013883a 	mov	r9,zero
 400cd5c:	003e6006 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400cd60:	21003fcc 	andi	r4,r4,255
 400cd64:	203fc026 	beq	r4,zero,400cc68 <__alt_mem_onchip_memory2_0+0xfc00ac68>
 400cd68:	d9c01d85 	stb	r7,118(sp)
 400cd6c:	003fbe06 	br	400cc68 <__alt_mem_onchip_memory2_0+0xfc00ac68>
 400cd70:	da802217 	ldw	r10,136(sp)
 400cd74:	54400017 	ldw	r17,0(r10)
 400cd78:	50800104 	addi	r2,r10,4
 400cd7c:	883e3b16 	blt	r17,zero,400c66c <__alt_mem_onchip_memory2_0+0xfc00a66c>
 400cd80:	d8802215 	stw	r2,136(sp)
 400cd84:	80c00007 	ldb	r3,0(r16)
 400cd88:	003db406 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cd8c:	01000044 	movi	r4,1
 400cd90:	01c00ac4 	movi	r7,43
 400cd94:	80c00007 	ldb	r3,0(r16)
 400cd98:	003db006 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cd9c:	80c00007 	ldb	r3,0(r16)
 400cda0:	82800044 	addi	r10,r16,1
 400cda4:	1b423c26 	beq	r3,r13,400d698 <___vfiprintf_internal_r+0x13b8>
 400cda8:	18bff404 	addi	r2,r3,-48
 400cdac:	0013883a 	mov	r9,zero
 400cdb0:	30822b36 	bltu	r6,r2,400d660 <___vfiprintf_internal_r+0x1380>
 400cdb4:	50c00007 	ldb	r3,0(r10)
 400cdb8:	4a4002a4 	muli	r9,r9,10
 400cdbc:	54000044 	addi	r16,r10,1
 400cdc0:	8015883a 	mov	r10,r16
 400cdc4:	4893883a 	add	r9,r9,r2
 400cdc8:	18bff404 	addi	r2,r3,-48
 400cdcc:	30bff92e 	bgeu	r6,r2,400cdb4 <__alt_mem_onchip_memory2_0+0xfc00adb4>
 400cdd0:	483da30e 	bge	r9,zero,400c460 <__alt_mem_onchip_memory2_0+0xfc00a460>
 400cdd4:	027fffc4 	movi	r9,-1
 400cdd8:	003da106 	br	400c460 <__alt_mem_onchip_memory2_0+0xfc00a460>
 400cddc:	a5001014 	ori	r20,r20,64
 400cde0:	80c00007 	ldb	r3,0(r16)
 400cde4:	003d9d06 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400cde8:	da802217 	ldw	r10,136(sp)
 400cdec:	d8001d85 	stb	zero,118(sp)
 400cdf0:	50c00204 	addi	r3,r10,8
 400cdf4:	54800017 	ldw	r18,0(r10)
 400cdf8:	54c00117 	ldw	r19,4(r10)
 400cdfc:	4801ca16 	blt	r9,zero,400d528 <___vfiprintf_internal_r+0x1248>
 400ce00:	013fdfc4 	movi	r4,-129
 400ce04:	94c4b03a 	or	r2,r18,r19
 400ce08:	d8c02215 	stw	r3,136(sp)
 400ce0c:	a128703a 	and	r20,r20,r4
 400ce10:	0039883a 	mov	fp,zero
 400ce14:	103f341e 	bne	r2,zero,400cae8 <__alt_mem_onchip_memory2_0+0xfc00aae8>
 400ce18:	483e2e26 	beq	r9,zero,400c6d4 <__alt_mem_onchip_memory2_0+0xfc00a6d4>
 400ce1c:	0025883a 	mov	r18,zero
 400ce20:	94800c04 	addi	r18,r18,48
 400ce24:	dc8019c5 	stb	r18,103(sp)
 400ce28:	dcc02717 	ldw	r19,156(sp)
 400ce2c:	dd4019c4 	addi	r21,sp,103
 400ce30:	003e2b06 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400ce34:	21003fcc 	andi	r4,r4,255
 400ce38:	2002361e 	bne	r4,zero,400d714 <___vfiprintf_internal_r+0x1434>
 400ce3c:	1801c126 	beq	r3,zero,400d544 <___vfiprintf_internal_r+0x1264>
 400ce40:	04800044 	movi	r18,1
 400ce44:	d8c01005 	stb	r3,64(sp)
 400ce48:	d8001d85 	stb	zero,118(sp)
 400ce4c:	9027883a 	mov	r19,r18
 400ce50:	dd401004 	addi	r21,sp,64
 400ce54:	003f1106 	br	400ca9c <__alt_mem_onchip_memory2_0+0xfc00aa9c>
 400ce58:	d9402117 	ldw	r5,132(sp)
 400ce5c:	d9002017 	ldw	r4,128(sp)
 400ce60:	d9801a04 	addi	r6,sp,104
 400ce64:	d9c02b15 	stw	r7,172(sp)
 400ce68:	dbc02a15 	stw	r15,168(sp)
 400ce6c:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400ce70:	d9c02b17 	ldw	r7,172(sp)
 400ce74:	dbc02a17 	ldw	r15,168(sp)
 400ce78:	10006d1e 	bne	r2,zero,400d030 <___vfiprintf_internal_r+0xd50>
 400ce7c:	d9801b17 	ldw	r6,108(sp)
 400ce80:	d8801c17 	ldw	r2,112(sp)
 400ce84:	d811883a 	mov	r8,sp
 400ce88:	31400044 	addi	r5,r6,1
 400ce8c:	003e3306 	br	400c75c <__alt_mem_onchip_memory2_0+0xfc00a75c>
 400ce90:	d9401b17 	ldw	r5,108(sp)
 400ce94:	d8801c17 	ldw	r2,112(sp)
 400ce98:	29000044 	addi	r4,r5,1
 400ce9c:	d8c01d87 	ldb	r3,118(sp)
 400cea0:	183e4d26 	beq	r3,zero,400c7d8 <__alt_mem_onchip_memory2_0+0xfc00a7d8>
 400cea4:	00c00044 	movi	r3,1
 400cea8:	d9401d84 	addi	r5,sp,118
 400ceac:	10c5883a 	add	r2,r2,r3
 400ceb0:	41400015 	stw	r5,0(r8)
 400ceb4:	40c00115 	stw	r3,4(r8)
 400ceb8:	d8801c15 	stw	r2,112(sp)
 400cebc:	d9001b15 	stw	r4,108(sp)
 400cec0:	014001c4 	movi	r5,7
 400cec4:	2900a90e 	bge	r5,r4,400d16c <___vfiprintf_internal_r+0xe8c>
 400cec8:	1000da1e 	bne	r2,zero,400d234 <___vfiprintf_internal_r+0xf54>
 400cecc:	7000ab1e 	bne	r14,zero,400d17c <___vfiprintf_internal_r+0xe9c>
 400ced0:	000b883a 	mov	r5,zero
 400ced4:	1809883a 	mov	r4,r3
 400ced8:	d811883a 	mov	r8,sp
 400cedc:	00c02004 	movi	r3,128
 400cee0:	e0fe4d26 	beq	fp,r3,400c818 <__alt_mem_onchip_memory2_0+0xfc00a818>
 400cee4:	4cf9c83a 	sub	fp,r9,r19
 400cee8:	073e7b0e 	bge	zero,fp,400c8d8 <__alt_mem_onchip_memory2_0+0xfc00a8d8>
 400ceec:	01c00404 	movi	r7,16
 400cef0:	3f01900e 	bge	r7,fp,400d534 <___vfiprintf_internal_r+0x1254>
 400cef4:	00c100b4 	movhi	r3,1026
 400cef8:	18f31e04 	addi	r3,r3,-13192
 400cefc:	d8c02415 	stw	r3,144(sp)
 400cf00:	034001c4 	movi	r13,7
 400cf04:	00000506 	br	400cf1c <___vfiprintf_internal_r+0xc3c>
 400cf08:	29000084 	addi	r4,r5,2
 400cf0c:	42000204 	addi	r8,r8,8
 400cf10:	180b883a 	mov	r5,r3
 400cf14:	e73ffc04 	addi	fp,fp,-16
 400cf18:	3f000d0e 	bge	r7,fp,400cf50 <___vfiprintf_internal_r+0xc70>
 400cf1c:	10800404 	addi	r2,r2,16
 400cf20:	28c00044 	addi	r3,r5,1
 400cf24:	45c00015 	stw	r23,0(r8)
 400cf28:	41c00115 	stw	r7,4(r8)
 400cf2c:	d8801c15 	stw	r2,112(sp)
 400cf30:	d8c01b15 	stw	r3,108(sp)
 400cf34:	68fff40e 	bge	r13,r3,400cf08 <__alt_mem_onchip_memory2_0+0xfc00af08>
 400cf38:	1000101e 	bne	r2,zero,400cf7c <___vfiprintf_internal_r+0xc9c>
 400cf3c:	e73ffc04 	addi	fp,fp,-16
 400cf40:	01000044 	movi	r4,1
 400cf44:	000b883a 	mov	r5,zero
 400cf48:	d811883a 	mov	r8,sp
 400cf4c:	3f3ff316 	blt	r7,fp,400cf1c <__alt_mem_onchip_memory2_0+0xfc00af1c>
 400cf50:	da802417 	ldw	r10,144(sp)
 400cf54:	1705883a 	add	r2,r2,fp
 400cf58:	47000115 	stw	fp,4(r8)
 400cf5c:	42800015 	stw	r10,0(r8)
 400cf60:	d8801c15 	stw	r2,112(sp)
 400cf64:	d9001b15 	stw	r4,108(sp)
 400cf68:	00c001c4 	movi	r3,7
 400cf6c:	19003616 	blt	r3,r4,400d048 <___vfiprintf_internal_r+0xd68>
 400cf70:	42000204 	addi	r8,r8,8
 400cf74:	21000044 	addi	r4,r4,1
 400cf78:	003e5706 	br	400c8d8 <__alt_mem_onchip_memory2_0+0xfc00a8d8>
 400cf7c:	d9402117 	ldw	r5,132(sp)
 400cf80:	d9002017 	ldw	r4,128(sp)
 400cf84:	d9801a04 	addi	r6,sp,104
 400cf88:	d9c02b15 	stw	r7,172(sp)
 400cf8c:	db402a15 	stw	r13,168(sp)
 400cf90:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400cf94:	d9c02b17 	ldw	r7,172(sp)
 400cf98:	db402a17 	ldw	r13,168(sp)
 400cf9c:	1000241e 	bne	r2,zero,400d030 <___vfiprintf_internal_r+0xd50>
 400cfa0:	d9401b17 	ldw	r5,108(sp)
 400cfa4:	d8801c17 	ldw	r2,112(sp)
 400cfa8:	d811883a 	mov	r8,sp
 400cfac:	29000044 	addi	r4,r5,1
 400cfb0:	003fd806 	br	400cf14 <__alt_mem_onchip_memory2_0+0xfc00af14>
 400cfb4:	d9401b17 	ldw	r5,108(sp)
 400cfb8:	00c100b4 	movhi	r3,1026
 400cfbc:	18f32204 	addi	r3,r3,-13176
 400cfc0:	d8c02415 	stw	r3,144(sp)
 400cfc4:	29400044 	addi	r5,r5,1
 400cfc8:	d8c02417 	ldw	r3,144(sp)
 400cfcc:	14c5883a 	add	r2,r2,r19
 400cfd0:	44c00115 	stw	r19,4(r8)
 400cfd4:	40c00015 	stw	r3,0(r8)
 400cfd8:	d8801c15 	stw	r2,112(sp)
 400cfdc:	d9401b15 	stw	r5,108(sp)
 400cfe0:	00c001c4 	movi	r3,7
 400cfe4:	1940070e 	bge	r3,r5,400d004 <___vfiprintf_internal_r+0xd24>
 400cfe8:	103e4826 	beq	r2,zero,400c90c <__alt_mem_onchip_memory2_0+0xfc00a90c>
 400cfec:	d9402117 	ldw	r5,132(sp)
 400cff0:	d9002017 	ldw	r4,128(sp)
 400cff4:	d9801a04 	addi	r6,sp,104
 400cff8:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400cffc:	10000c1e 	bne	r2,zero,400d030 <___vfiprintf_internal_r+0xd50>
 400d000:	d8801c17 	ldw	r2,112(sp)
 400d004:	8c80010e 	bge	r17,r18,400d00c <___vfiprintf_internal_r+0xd2c>
 400d008:	9023883a 	mov	r17,r18
 400d00c:	da802317 	ldw	r10,140(sp)
 400d010:	5455883a 	add	r10,r10,r17
 400d014:	da802315 	stw	r10,140(sp)
 400d018:	103e4126 	beq	r2,zero,400c920 <__alt_mem_onchip_memory2_0+0xfc00a920>
 400d01c:	d9402117 	ldw	r5,132(sp)
 400d020:	d9002017 	ldw	r4,128(sp)
 400d024:	d9801a04 	addi	r6,sp,104
 400d028:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d02c:	103e3c26 	beq	r2,zero,400c920 <__alt_mem_onchip_memory2_0+0xfc00a920>
 400d030:	dd002117 	ldw	r20,132(sp)
 400d034:	a080030b 	ldhu	r2,12(r20)
 400d038:	1080100c 	andi	r2,r2,64
 400d03c:	1001231e 	bne	r2,zero,400d4cc <___vfiprintf_internal_r+0x11ec>
 400d040:	d8802317 	ldw	r2,140(sp)
 400d044:	003d7b06 	br	400c634 <__alt_mem_onchip_memory2_0+0xfc00a634>
 400d048:	1000991e 	bne	r2,zero,400d2b0 <___vfiprintf_internal_r+0xfd0>
 400d04c:	00c00044 	movi	r3,1
 400d050:	9805883a 	mov	r2,r19
 400d054:	dd400015 	stw	r21,0(sp)
 400d058:	dcc00115 	stw	r19,4(sp)
 400d05c:	dcc01c15 	stw	r19,112(sp)
 400d060:	d8c01b15 	stw	r3,108(sp)
 400d064:	d811883a 	mov	r8,sp
 400d068:	42000204 	addi	r8,r8,8
 400d06c:	a2c0010c 	andi	r11,r20,4
 400d070:	583fe426 	beq	r11,zero,400d004 <__alt_mem_onchip_memory2_0+0xfc00b004>
 400d074:	8ca7c83a 	sub	r19,r17,r18
 400d078:	04ffe20e 	bge	zero,r19,400d004 <__alt_mem_onchip_memory2_0+0xfc00b004>
 400d07c:	01c00404 	movi	r7,16
 400d080:	3cffcc0e 	bge	r7,r19,400cfb4 <__alt_mem_onchip_memory2_0+0xfc00afb4>
 400d084:	028100b4 	movhi	r10,1026
 400d088:	52b32204 	addi	r10,r10,-13176
 400d08c:	d9001b17 	ldw	r4,108(sp)
 400d090:	da802415 	stw	r10,144(sp)
 400d094:	382b883a 	mov	r21,r7
 400d098:	050001c4 	movi	r20,7
 400d09c:	df002017 	ldw	fp,128(sp)
 400d0a0:	00000506 	br	400d0b8 <___vfiprintf_internal_r+0xdd8>
 400d0a4:	21400084 	addi	r5,r4,2
 400d0a8:	42000204 	addi	r8,r8,8
 400d0ac:	1809883a 	mov	r4,r3
 400d0b0:	9cfffc04 	addi	r19,r19,-16
 400d0b4:	acffc40e 	bge	r21,r19,400cfc8 <__alt_mem_onchip_memory2_0+0xfc00afc8>
 400d0b8:	10800404 	addi	r2,r2,16
 400d0bc:	20c00044 	addi	r3,r4,1
 400d0c0:	45800015 	stw	r22,0(r8)
 400d0c4:	45400115 	stw	r21,4(r8)
 400d0c8:	d8801c15 	stw	r2,112(sp)
 400d0cc:	d8c01b15 	stw	r3,108(sp)
 400d0d0:	a0fff40e 	bge	r20,r3,400d0a4 <__alt_mem_onchip_memory2_0+0xfc00b0a4>
 400d0d4:	1000041e 	bne	r2,zero,400d0e8 <___vfiprintf_internal_r+0xe08>
 400d0d8:	01400044 	movi	r5,1
 400d0dc:	0009883a 	mov	r4,zero
 400d0e0:	d811883a 	mov	r8,sp
 400d0e4:	003ff206 	br	400d0b0 <__alt_mem_onchip_memory2_0+0xfc00b0b0>
 400d0e8:	d9402117 	ldw	r5,132(sp)
 400d0ec:	d9801a04 	addi	r6,sp,104
 400d0f0:	e009883a 	mov	r4,fp
 400d0f4:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d0f8:	103fcd1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d0fc:	d9001b17 	ldw	r4,108(sp)
 400d100:	d8801c17 	ldw	r2,112(sp)
 400d104:	d811883a 	mov	r8,sp
 400d108:	21400044 	addi	r5,r4,1
 400d10c:	003fe806 	br	400d0b0 <__alt_mem_onchip_memory2_0+0xfc00b0b0>
 400d110:	d9402117 	ldw	r5,132(sp)
 400d114:	d9002017 	ldw	r4,128(sp)
 400d118:	d9801a04 	addi	r6,sp,104
 400d11c:	d9c02b15 	stw	r7,172(sp)
 400d120:	db402a15 	stw	r13,168(sp)
 400d124:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d128:	d9c02b17 	ldw	r7,172(sp)
 400d12c:	db402a17 	ldw	r13,168(sp)
 400d130:	103fbf1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d134:	d9401b17 	ldw	r5,108(sp)
 400d138:	d8801c17 	ldw	r2,112(sp)
 400d13c:	d811883a 	mov	r8,sp
 400d140:	29800044 	addi	r6,r5,1
 400d144:	003dc406 	br	400c858 <__alt_mem_onchip_memory2_0+0xfc00a858>
 400d148:	1000d21e 	bne	r2,zero,400d494 <___vfiprintf_internal_r+0x11b4>
 400d14c:	d8c01d87 	ldb	r3,118(sp)
 400d150:	18009526 	beq	r3,zero,400d3a8 <___vfiprintf_internal_r+0x10c8>
 400d154:	00800044 	movi	r2,1
 400d158:	d8c01d84 	addi	r3,sp,118
 400d15c:	1009883a 	mov	r4,r2
 400d160:	d8c00015 	stw	r3,0(sp)
 400d164:	d8800115 	stw	r2,4(sp)
 400d168:	d811883a 	mov	r8,sp
 400d16c:	200b883a 	mov	r5,r4
 400d170:	42000204 	addi	r8,r8,8
 400d174:	21000044 	addi	r4,r4,1
 400d178:	003d9706 	br	400c7d8 <__alt_mem_onchip_memory2_0+0xfc00a7d8>
 400d17c:	d9001d04 	addi	r4,sp,116
 400d180:	00800084 	movi	r2,2
 400d184:	d9000015 	stw	r4,0(sp)
 400d188:	d8800115 	stw	r2,4(sp)
 400d18c:	1809883a 	mov	r4,r3
 400d190:	d811883a 	mov	r8,sp
 400d194:	200b883a 	mov	r5,r4
 400d198:	42000204 	addi	r8,r8,8
 400d19c:	21000044 	addi	r4,r4,1
 400d1a0:	003f4e06 	br	400cedc <__alt_mem_onchip_memory2_0+0xfc00aedc>
 400d1a4:	d8001d85 	stb	zero,118(sp)
 400d1a8:	48005016 	blt	r9,zero,400d2ec <___vfiprintf_internal_r+0x100c>
 400d1ac:	00ffdfc4 	movi	r3,-129
 400d1b0:	94c4b03a 	or	r2,r18,r19
 400d1b4:	a0e8703a 	and	r20,r20,r3
 400d1b8:	103d4426 	beq	r2,zero,400c6cc <__alt_mem_onchip_memory2_0+0xfc00a6cc>
 400d1bc:	0039883a 	mov	fp,zero
 400d1c0:	d9002617 	ldw	r4,152(sp)
 400d1c4:	dd401a04 	addi	r21,sp,104
 400d1c8:	908003cc 	andi	r2,r18,15
 400d1cc:	9806973a 	slli	r3,r19,28
 400d1d0:	2085883a 	add	r2,r4,r2
 400d1d4:	9024d13a 	srli	r18,r18,4
 400d1d8:	10800003 	ldbu	r2,0(r2)
 400d1dc:	9826d13a 	srli	r19,r19,4
 400d1e0:	ad7fffc4 	addi	r21,r21,-1
 400d1e4:	1ca4b03a 	or	r18,r3,r18
 400d1e8:	a8800005 	stb	r2,0(r21)
 400d1ec:	94c4b03a 	or	r2,r18,r19
 400d1f0:	103ff51e 	bne	r2,zero,400d1c8 <__alt_mem_onchip_memory2_0+0xfc00b1c8>
 400d1f4:	003e5906 	br	400cb5c <__alt_mem_onchip_memory2_0+0xfc00ab5c>
 400d1f8:	d9402117 	ldw	r5,132(sp)
 400d1fc:	d9002017 	ldw	r4,128(sp)
 400d200:	d9801a04 	addi	r6,sp,104
 400d204:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d208:	103f891e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d20c:	d8801c17 	ldw	r2,112(sp)
 400d210:	d811883a 	mov	r8,sp
 400d214:	003f9506 	br	400d06c <__alt_mem_onchip_memory2_0+0xfc00b06c>
 400d218:	d9402117 	ldw	r5,132(sp)
 400d21c:	d9002017 	ldw	r4,128(sp)
 400d220:	d9801a04 	addi	r6,sp,104
 400d224:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d228:	103f811e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d22c:	d811883a 	mov	r8,sp
 400d230:	003ced06 	br	400c5e8 <__alt_mem_onchip_memory2_0+0xfc00a5e8>
 400d234:	d9402117 	ldw	r5,132(sp)
 400d238:	d9002017 	ldw	r4,128(sp)
 400d23c:	d9801a04 	addi	r6,sp,104
 400d240:	da402c15 	stw	r9,176(sp)
 400d244:	db802a15 	stw	r14,168(sp)
 400d248:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d24c:	da402c17 	ldw	r9,176(sp)
 400d250:	db802a17 	ldw	r14,168(sp)
 400d254:	103f761e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d258:	d9401b17 	ldw	r5,108(sp)
 400d25c:	d8801c17 	ldw	r2,112(sp)
 400d260:	d811883a 	mov	r8,sp
 400d264:	29000044 	addi	r4,r5,1
 400d268:	003d5b06 	br	400c7d8 <__alt_mem_onchip_memory2_0+0xfc00a7d8>
 400d26c:	d9402117 	ldw	r5,132(sp)
 400d270:	d9002017 	ldw	r4,128(sp)
 400d274:	d9801a04 	addi	r6,sp,104
 400d278:	da402c15 	stw	r9,176(sp)
 400d27c:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d280:	da402c17 	ldw	r9,176(sp)
 400d284:	103f6a1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d288:	d9401b17 	ldw	r5,108(sp)
 400d28c:	d8801c17 	ldw	r2,112(sp)
 400d290:	d811883a 	mov	r8,sp
 400d294:	29000044 	addi	r4,r5,1
 400d298:	003f1006 	br	400cedc <__alt_mem_onchip_memory2_0+0xfc00aedc>
 400d29c:	1000c31e 	bne	r2,zero,400d5ac <___vfiprintf_internal_r+0x12cc>
 400d2a0:	01000044 	movi	r4,1
 400d2a4:	000b883a 	mov	r5,zero
 400d2a8:	d811883a 	mov	r8,sp
 400d2ac:	003f0d06 	br	400cee4 <__alt_mem_onchip_memory2_0+0xfc00aee4>
 400d2b0:	d9402117 	ldw	r5,132(sp)
 400d2b4:	d9002017 	ldw	r4,128(sp)
 400d2b8:	d9801a04 	addi	r6,sp,104
 400d2bc:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d2c0:	103f5b1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d2c4:	d9001b17 	ldw	r4,108(sp)
 400d2c8:	d8801c17 	ldw	r2,112(sp)
 400d2cc:	d811883a 	mov	r8,sp
 400d2d0:	21000044 	addi	r4,r4,1
 400d2d4:	003d8006 	br	400c8d8 <__alt_mem_onchip_memory2_0+0xfc00a8d8>
 400d2d8:	010100b4 	movhi	r4,1026
 400d2dc:	2132ad04 	addi	r4,r4,-13644
 400d2e0:	d9002615 	stw	r4,152(sp)
 400d2e4:	d8c02215 	stw	r3,136(sp)
 400d2e8:	1029883a 	mov	r20,r2
 400d2ec:	94c4b03a 	or	r2,r18,r19
 400d2f0:	103fb21e 	bne	r2,zero,400d1bc <__alt_mem_onchip_memory2_0+0xfc00b1bc>
 400d2f4:	0039883a 	mov	fp,zero
 400d2f8:	00800084 	movi	r2,2
 400d2fc:	003e6b06 	br	400ccac <__alt_mem_onchip_memory2_0+0xfc00acac>
 400d300:	da802217 	ldw	r10,136(sp)
 400d304:	d8001d85 	stb	zero,118(sp)
 400d308:	0027883a 	mov	r19,zero
 400d30c:	50800104 	addi	r2,r10,4
 400d310:	54800017 	ldw	r18,0(r10)
 400d314:	483e6016 	blt	r9,zero,400cc98 <__alt_mem_onchip_memory2_0+0xfc00ac98>
 400d318:	00ffdfc4 	movi	r3,-129
 400d31c:	d8802215 	stw	r2,136(sp)
 400d320:	a0e8703a 	and	r20,r20,r3
 400d324:	0039883a 	mov	fp,zero
 400d328:	903ebb26 	beq	r18,zero,400ce18 <__alt_mem_onchip_memory2_0+0xfc00ae18>
 400d32c:	00800244 	movi	r2,9
 400d330:	14bdee36 	bltu	r2,r18,400caec <__alt_mem_onchip_memory2_0+0xfc00aaec>
 400d334:	003eba06 	br	400ce20 <__alt_mem_onchip_memory2_0+0xfc00ae20>
 400d338:	00800c04 	movi	r2,48
 400d33c:	d8c01d45 	stb	r3,117(sp)
 400d340:	d8801d05 	stb	r2,116(sp)
 400d344:	d8001d85 	stb	zero,118(sp)
 400d348:	a0c00094 	ori	r3,r20,2
 400d34c:	4800a916 	blt	r9,zero,400d5f4 <___vfiprintf_internal_r+0x1314>
 400d350:	00bfdfc4 	movi	r2,-129
 400d354:	a096703a 	and	r11,r20,r2
 400d358:	5d000094 	ori	r20,r11,2
 400d35c:	0039883a 	mov	fp,zero
 400d360:	003f9706 	br	400d1c0 <__alt_mem_onchip_memory2_0+0xfc00b1c0>
 400d364:	8025883a 	mov	r18,r16
 400d368:	003c2e06 	br	400c424 <__alt_mem_onchip_memory2_0+0xfc00a424>
 400d36c:	008100b4 	movhi	r2,1026
 400d370:	10b2ad04 	addi	r2,r2,-13644
 400d374:	0039883a 	mov	fp,zero
 400d378:	d8802615 	stw	r2,152(sp)
 400d37c:	003f9006 	br	400d1c0 <__alt_mem_onchip_memory2_0+0xfc00b1c0>
 400d380:	04a5c83a 	sub	r18,zero,r18
 400d384:	07000b44 	movi	fp,45
 400d388:	9004c03a 	cmpne	r2,r18,zero
 400d38c:	04e7c83a 	sub	r19,zero,r19
 400d390:	df001d85 	stb	fp,118(sp)
 400d394:	98a7c83a 	sub	r19,r19,r2
 400d398:	48009f16 	blt	r9,zero,400d618 <___vfiprintf_internal_r+0x1338>
 400d39c:	00bfdfc4 	movi	r2,-129
 400d3a0:	a0a8703a 	and	r20,r20,r2
 400d3a4:	003dd006 	br	400cae8 <__alt_mem_onchip_memory2_0+0xfc00aae8>
 400d3a8:	70004c26 	beq	r14,zero,400d4dc <___vfiprintf_internal_r+0x11fc>
 400d3ac:	00800084 	movi	r2,2
 400d3b0:	d8c01d04 	addi	r3,sp,116
 400d3b4:	d8c00015 	stw	r3,0(sp)
 400d3b8:	d8800115 	stw	r2,4(sp)
 400d3bc:	01000044 	movi	r4,1
 400d3c0:	d811883a 	mov	r8,sp
 400d3c4:	003f7306 	br	400d194 <__alt_mem_onchip_memory2_0+0xfc00b194>
 400d3c8:	a080100c 	andi	r2,r20,64
 400d3cc:	da802217 	ldw	r10,136(sp)
 400d3d0:	103e0626 	beq	r2,zero,400cbec <__alt_mem_onchip_memory2_0+0xfc00abec>
 400d3d4:	5480000f 	ldh	r18,0(r10)
 400d3d8:	52800104 	addi	r10,r10,4
 400d3dc:	da802215 	stw	r10,136(sp)
 400d3e0:	9027d7fa 	srai	r19,r18,31
 400d3e4:	9805883a 	mov	r2,r19
 400d3e8:	003db806 	br	400cacc <__alt_mem_onchip_memory2_0+0xfc00aacc>
 400d3ec:	a080040c 	andi	r2,r20,16
 400d3f0:	1000091e 	bne	r2,zero,400d418 <___vfiprintf_internal_r+0x1138>
 400d3f4:	a2c0100c 	andi	r11,r20,64
 400d3f8:	58000726 	beq	r11,zero,400d418 <___vfiprintf_internal_r+0x1138>
 400d3fc:	da802217 	ldw	r10,136(sp)
 400d400:	50800017 	ldw	r2,0(r10)
 400d404:	52800104 	addi	r10,r10,4
 400d408:	da802215 	stw	r10,136(sp)
 400d40c:	da802317 	ldw	r10,140(sp)
 400d410:	1280000d 	sth	r10,0(r2)
 400d414:	003be706 	br	400c3b4 <__alt_mem_onchip_memory2_0+0xfc00a3b4>
 400d418:	da802217 	ldw	r10,136(sp)
 400d41c:	50800017 	ldw	r2,0(r10)
 400d420:	52800104 	addi	r10,r10,4
 400d424:	da802215 	stw	r10,136(sp)
 400d428:	da802317 	ldw	r10,140(sp)
 400d42c:	12800015 	stw	r10,0(r2)
 400d430:	003be006 	br	400c3b4 <__alt_mem_onchip_memory2_0+0xfc00a3b4>
 400d434:	a080100c 	andi	r2,r20,64
 400d438:	da802217 	ldw	r10,136(sp)
 400d43c:	10003026 	beq	r2,zero,400d500 <___vfiprintf_internal_r+0x1220>
 400d440:	5480000b 	ldhu	r18,0(r10)
 400d444:	52800104 	addi	r10,r10,4
 400d448:	0027883a 	mov	r19,zero
 400d44c:	da802215 	stw	r10,136(sp)
 400d450:	003d8006 	br	400ca54 <__alt_mem_onchip_memory2_0+0xfc00aa54>
 400d454:	80c00007 	ldb	r3,0(r16)
 400d458:	003c0006 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400d45c:	a080100c 	andi	r2,r20,64
 400d460:	d8001d85 	stb	zero,118(sp)
 400d464:	da802217 	ldw	r10,136(sp)
 400d468:	1000201e 	bne	r2,zero,400d4ec <___vfiprintf_internal_r+0x120c>
 400d46c:	50800104 	addi	r2,r10,4
 400d470:	54800017 	ldw	r18,0(r10)
 400d474:	0027883a 	mov	r19,zero
 400d478:	483def0e 	bge	r9,zero,400cc38 <__alt_mem_onchip_memory2_0+0xfc00ac38>
 400d47c:	94c6b03a 	or	r3,r18,r19
 400d480:	d8802215 	stw	r2,136(sp)
 400d484:	183d4e1e 	bne	r3,zero,400c9c0 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400d488:	0039883a 	mov	fp,zero
 400d48c:	0005883a 	mov	r2,zero
 400d490:	003e0606 	br	400ccac <__alt_mem_onchip_memory2_0+0xfc00acac>
 400d494:	d9402117 	ldw	r5,132(sp)
 400d498:	d9002017 	ldw	r4,128(sp)
 400d49c:	d9801a04 	addi	r6,sp,104
 400d4a0:	da402c15 	stw	r9,176(sp)
 400d4a4:	db802a15 	stw	r14,168(sp)
 400d4a8:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d4ac:	da402c17 	ldw	r9,176(sp)
 400d4b0:	db802a17 	ldw	r14,168(sp)
 400d4b4:	103ede1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d4b8:	d9401b17 	ldw	r5,108(sp)
 400d4bc:	d8801c17 	ldw	r2,112(sp)
 400d4c0:	d811883a 	mov	r8,sp
 400d4c4:	29000044 	addi	r4,r5,1
 400d4c8:	003e7406 	br	400ce9c <__alt_mem_onchip_memory2_0+0xfc00ae9c>
 400d4cc:	00bfffc4 	movi	r2,-1
 400d4d0:	003c5806 	br	400c634 <__alt_mem_onchip_memory2_0+0xfc00a634>
 400d4d4:	d811883a 	mov	r8,sp
 400d4d8:	003ee806 	br	400d07c <__alt_mem_onchip_memory2_0+0xfc00b07c>
 400d4dc:	000b883a 	mov	r5,zero
 400d4e0:	01000044 	movi	r4,1
 400d4e4:	d811883a 	mov	r8,sp
 400d4e8:	003e7c06 	br	400cedc <__alt_mem_onchip_memory2_0+0xfc00aedc>
 400d4ec:	50800104 	addi	r2,r10,4
 400d4f0:	5480000b 	ldhu	r18,0(r10)
 400d4f4:	0027883a 	mov	r19,zero
 400d4f8:	483dcf0e 	bge	r9,zero,400cc38 <__alt_mem_onchip_memory2_0+0xfc00ac38>
 400d4fc:	003fdf06 	br	400d47c <__alt_mem_onchip_memory2_0+0xfc00b47c>
 400d500:	54800017 	ldw	r18,0(r10)
 400d504:	52800104 	addi	r10,r10,4
 400d508:	0027883a 	mov	r19,zero
 400d50c:	da802215 	stw	r10,136(sp)
 400d510:	003d5006 	br	400ca54 <__alt_mem_onchip_memory2_0+0xfc00aa54>
 400d514:	50800104 	addi	r2,r10,4
 400d518:	5480000b 	ldhu	r18,0(r10)
 400d51c:	0027883a 	mov	r19,zero
 400d520:	483f7d0e 	bge	r9,zero,400d318 <__alt_mem_onchip_memory2_0+0xfc00b318>
 400d524:	003ddc06 	br	400cc98 <__alt_mem_onchip_memory2_0+0xfc00ac98>
 400d528:	d8c02215 	stw	r3,136(sp)
 400d52c:	0039883a 	mov	fp,zero
 400d530:	003ddb06 	br	400cca0 <__alt_mem_onchip_memory2_0+0xfc00aca0>
 400d534:	028100b4 	movhi	r10,1026
 400d538:	52b31e04 	addi	r10,r10,-13192
 400d53c:	da802415 	stw	r10,144(sp)
 400d540:	003e8306 	br	400cf50 <__alt_mem_onchip_memory2_0+0xfc00af50>
 400d544:	d8801c17 	ldw	r2,112(sp)
 400d548:	dd002117 	ldw	r20,132(sp)
 400d54c:	103eb926 	beq	r2,zero,400d034 <__alt_mem_onchip_memory2_0+0xfc00b034>
 400d550:	d9002017 	ldw	r4,128(sp)
 400d554:	d9801a04 	addi	r6,sp,104
 400d558:	a00b883a 	mov	r5,r20
 400d55c:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d560:	003eb406 	br	400d034 <__alt_mem_onchip_memory2_0+0xfc00b034>
 400d564:	80c00043 	ldbu	r3,1(r16)
 400d568:	a5000814 	ori	r20,r20,32
 400d56c:	84000044 	addi	r16,r16,1
 400d570:	18c03fcc 	andi	r3,r3,255
 400d574:	18c0201c 	xori	r3,r3,128
 400d578:	18ffe004 	addi	r3,r3,-128
 400d57c:	003bb706 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400d580:	a809883a 	mov	r4,r21
 400d584:	d8c02a15 	stw	r3,168(sp)
 400d588:	da002b15 	stw	r8,172(sp)
 400d58c:	40016500 	call	4001650 <strlen>
 400d590:	d8c02a17 	ldw	r3,168(sp)
 400d594:	1027883a 	mov	r19,r2
 400d598:	df001d83 	ldbu	fp,118(sp)
 400d59c:	d8c02215 	stw	r3,136(sp)
 400d5a0:	0013883a 	mov	r9,zero
 400d5a4:	da002b17 	ldw	r8,172(sp)
 400d5a8:	003c4d06 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400d5ac:	d9402117 	ldw	r5,132(sp)
 400d5b0:	d9002017 	ldw	r4,128(sp)
 400d5b4:	d9801a04 	addi	r6,sp,104
 400d5b8:	da402c15 	stw	r9,176(sp)
 400d5bc:	400c1cc0 	call	400c1cc <__sprint_r.part.0>
 400d5c0:	da402c17 	ldw	r9,176(sp)
 400d5c4:	103e9a1e 	bne	r2,zero,400d030 <__alt_mem_onchip_memory2_0+0xfc00b030>
 400d5c8:	d9401b17 	ldw	r5,108(sp)
 400d5cc:	d8801c17 	ldw	r2,112(sp)
 400d5d0:	d811883a 	mov	r8,sp
 400d5d4:	29000044 	addi	r4,r5,1
 400d5d8:	003e4206 	br	400cee4 <__alt_mem_onchip_memory2_0+0xfc00aee4>
 400d5dc:	d9401b17 	ldw	r5,108(sp)
 400d5e0:	010100b4 	movhi	r4,1026
 400d5e4:	21332204 	addi	r4,r4,-13176
 400d5e8:	d9002415 	stw	r4,144(sp)
 400d5ec:	29400044 	addi	r5,r5,1
 400d5f0:	003c6d06 	br	400c7a8 <__alt_mem_onchip_memory2_0+0xfc00a7a8>
 400d5f4:	0039883a 	mov	fp,zero
 400d5f8:	00800084 	movi	r2,2
 400d5fc:	10803fcc 	andi	r2,r2,255
 400d600:	01000044 	movi	r4,1
 400d604:	11001e26 	beq	r2,r4,400d680 <___vfiprintf_internal_r+0x13a0>
 400d608:	01000084 	movi	r4,2
 400d60c:	11001e1e 	bne	r2,r4,400d688 <___vfiprintf_internal_r+0x13a8>
 400d610:	1829883a 	mov	r20,r3
 400d614:	003eea06 	br	400d1c0 <__alt_mem_onchip_memory2_0+0xfc00b1c0>
 400d618:	a007883a 	mov	r3,r20
 400d61c:	00800044 	movi	r2,1
 400d620:	003ff606 	br	400d5fc <__alt_mem_onchip_memory2_0+0xfc00b5fc>
 400d624:	00800184 	movi	r2,6
 400d628:	1240012e 	bgeu	r2,r9,400d630 <___vfiprintf_internal_r+0x1350>
 400d62c:	1013883a 	mov	r9,r2
 400d630:	4827883a 	mov	r19,r9
 400d634:	4825883a 	mov	r18,r9
 400d638:	48001516 	blt	r9,zero,400d690 <___vfiprintf_internal_r+0x13b0>
 400d63c:	054100b4 	movhi	r21,1026
 400d640:	d8c02215 	stw	r3,136(sp)
 400d644:	ad72b204 	addi	r21,r21,-13624
 400d648:	003d1406 	br	400ca9c <__alt_mem_onchip_memory2_0+0xfc00aa9c>
 400d64c:	028100b4 	movhi	r10,1026
 400d650:	52b31e04 	addi	r10,r10,-13192
 400d654:	da802415 	stw	r10,144(sp)
 400d658:	200d883a 	mov	r6,r4
 400d65c:	003c9106 	br	400c8a4 <__alt_mem_onchip_memory2_0+0xfc00a8a4>
 400d660:	5021883a 	mov	r16,r10
 400d664:	0013883a 	mov	r9,zero
 400d668:	003b7d06 	br	400c460 <__alt_mem_onchip_memory2_0+0xfc00a460>
 400d66c:	4827883a 	mov	r19,r9
 400d670:	df001d83 	ldbu	fp,118(sp)
 400d674:	d8c02215 	stw	r3,136(sp)
 400d678:	0013883a 	mov	r9,zero
 400d67c:	003c1806 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400d680:	1829883a 	mov	r20,r3
 400d684:	003d1806 	br	400cae8 <__alt_mem_onchip_memory2_0+0xfc00aae8>
 400d688:	1829883a 	mov	r20,r3
 400d68c:	003ccd06 	br	400c9c4 <__alt_mem_onchip_memory2_0+0xfc00a9c4>
 400d690:	0025883a 	mov	r18,zero
 400d694:	003fe906 	br	400d63c <__alt_mem_onchip_memory2_0+0xfc00b63c>
 400d698:	d8802217 	ldw	r2,136(sp)
 400d69c:	80c00043 	ldbu	r3,1(r16)
 400d6a0:	5021883a 	mov	r16,r10
 400d6a4:	12400017 	ldw	r9,0(r2)
 400d6a8:	10800104 	addi	r2,r2,4
 400d6ac:	d8802215 	stw	r2,136(sp)
 400d6b0:	483faf0e 	bge	r9,zero,400d570 <__alt_mem_onchip_memory2_0+0xfc00b570>
 400d6b4:	18c03fcc 	andi	r3,r3,255
 400d6b8:	18c0201c 	xori	r3,r3,128
 400d6bc:	027fffc4 	movi	r9,-1
 400d6c0:	18ffe004 	addi	r3,r3,-128
 400d6c4:	003b6506 	br	400c45c <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400d6c8:	d9c01d85 	stb	r7,118(sp)
 400d6cc:	003ca006 	br	400c950 <__alt_mem_onchip_memory2_0+0xfc00a950>
 400d6d0:	d9c01d85 	stb	r7,118(sp)
 400d6d4:	003cad06 	br	400c98c <__alt_mem_onchip_memory2_0+0xfc00a98c>
 400d6d8:	d9c01d85 	stb	r7,118(sp)
 400d6dc:	003d7d06 	br	400ccd4 <__alt_mem_onchip_memory2_0+0xfc00acd4>
 400d6e0:	d9c01d85 	stb	r7,118(sp)
 400d6e4:	003d5f06 	br	400cc64 <__alt_mem_onchip_memory2_0+0xfc00ac64>
 400d6e8:	a080004c 	andi	r2,r20,1
 400d6ec:	0039883a 	mov	fp,zero
 400d6f0:	10000526 	beq	r2,zero,400d708 <___vfiprintf_internal_r+0x1428>
 400d6f4:	00800c04 	movi	r2,48
 400d6f8:	d88019c5 	stb	r2,103(sp)
 400d6fc:	dcc02717 	ldw	r19,156(sp)
 400d700:	dd4019c4 	addi	r21,sp,103
 400d704:	003bf606 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400d708:	0027883a 	mov	r19,zero
 400d70c:	dd401a04 	addi	r21,sp,104
 400d710:	003bf306 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00a6e0>
 400d714:	d9c01d85 	stb	r7,118(sp)
 400d718:	003dc806 	br	400ce3c <__alt_mem_onchip_memory2_0+0xfc00ae3c>
 400d71c:	d9c01d85 	stb	r7,118(sp)
 400d720:	003d3a06 	br	400cc0c <__alt_mem_onchip_memory2_0+0xfc00ac0c>
 400d724:	d9c01d85 	stb	r7,118(sp)
 400d728:	003d2a06 	br	400cbd4 <__alt_mem_onchip_memory2_0+0xfc00abd4>
 400d72c:	d9c01d85 	stb	r7,118(sp)
 400d730:	003cde06 	br	400caac <__alt_mem_onchip_memory2_0+0xfc00aaac>
 400d734:	d9c01d85 	stb	r7,118(sp)
 400d738:	003cbc06 	br	400ca2c <__alt_mem_onchip_memory2_0+0xfc00aa2c>

0400d73c <__vfiprintf_internal>:
 400d73c:	008100b4 	movhi	r2,1026
 400d740:	10ba3604 	addi	r2,r2,-5928
 400d744:	300f883a 	mov	r7,r6
 400d748:	280d883a 	mov	r6,r5
 400d74c:	200b883a 	mov	r5,r4
 400d750:	11000017 	ldw	r4,0(r2)
 400d754:	400c2e01 	jmpi	400c2e0 <___vfiprintf_internal_r>

0400d758 <__sbprintf>:
 400d758:	2880030b 	ldhu	r2,12(r5)
 400d75c:	2ac01917 	ldw	r11,100(r5)
 400d760:	2a80038b 	ldhu	r10,14(r5)
 400d764:	2a400717 	ldw	r9,28(r5)
 400d768:	2a000917 	ldw	r8,36(r5)
 400d76c:	defee204 	addi	sp,sp,-1144
 400d770:	00c10004 	movi	r3,1024
 400d774:	dc011a15 	stw	r16,1128(sp)
 400d778:	10bfff4c 	andi	r2,r2,65533
 400d77c:	2821883a 	mov	r16,r5
 400d780:	d8cb883a 	add	r5,sp,r3
 400d784:	dc811c15 	stw	r18,1136(sp)
 400d788:	dc411b15 	stw	r17,1132(sp)
 400d78c:	dfc11d15 	stw	ra,1140(sp)
 400d790:	2025883a 	mov	r18,r4
 400d794:	d881030d 	sth	r2,1036(sp)
 400d798:	dac11915 	stw	r11,1124(sp)
 400d79c:	da81038d 	sth	r10,1038(sp)
 400d7a0:	da410715 	stw	r9,1052(sp)
 400d7a4:	da010915 	stw	r8,1060(sp)
 400d7a8:	dec10015 	stw	sp,1024(sp)
 400d7ac:	dec10415 	stw	sp,1040(sp)
 400d7b0:	d8c10215 	stw	r3,1032(sp)
 400d7b4:	d8c10515 	stw	r3,1044(sp)
 400d7b8:	d8010615 	stw	zero,1048(sp)
 400d7bc:	400c2e00 	call	400c2e0 <___vfiprintf_internal_r>
 400d7c0:	1023883a 	mov	r17,r2
 400d7c4:	10000416 	blt	r2,zero,400d7d8 <__sbprintf+0x80>
 400d7c8:	d9410004 	addi	r5,sp,1024
 400d7cc:	9009883a 	mov	r4,r18
 400d7d0:	40077880 	call	4007788 <_fflush_r>
 400d7d4:	10000d1e 	bne	r2,zero,400d80c <__sbprintf+0xb4>
 400d7d8:	d881030b 	ldhu	r2,1036(sp)
 400d7dc:	1080100c 	andi	r2,r2,64
 400d7e0:	10000326 	beq	r2,zero,400d7f0 <__sbprintf+0x98>
 400d7e4:	8080030b 	ldhu	r2,12(r16)
 400d7e8:	10801014 	ori	r2,r2,64
 400d7ec:	8080030d 	sth	r2,12(r16)
 400d7f0:	8805883a 	mov	r2,r17
 400d7f4:	dfc11d17 	ldw	ra,1140(sp)
 400d7f8:	dc811c17 	ldw	r18,1136(sp)
 400d7fc:	dc411b17 	ldw	r17,1132(sp)
 400d800:	dc011a17 	ldw	r16,1128(sp)
 400d804:	dec11e04 	addi	sp,sp,1144
 400d808:	f800283a 	ret
 400d80c:	047fffc4 	movi	r17,-1
 400d810:	003ff106 	br	400d7d8 <__alt_mem_onchip_memory2_0+0xfc00b7d8>

0400d814 <_write_r>:
 400d814:	defffd04 	addi	sp,sp,-12
 400d818:	2805883a 	mov	r2,r5
 400d81c:	dc000015 	stw	r16,0(sp)
 400d820:	040100b4 	movhi	r16,1026
 400d824:	dc400115 	stw	r17,4(sp)
 400d828:	300b883a 	mov	r5,r6
 400d82c:	84016204 	addi	r16,r16,1416
 400d830:	2023883a 	mov	r17,r4
 400d834:	380d883a 	mov	r6,r7
 400d838:	1009883a 	mov	r4,r2
 400d83c:	dfc00215 	stw	ra,8(sp)
 400d840:	80000015 	stw	zero,0(r16)
 400d844:	4011c8c0 	call	4011c8c <write>
 400d848:	00ffffc4 	movi	r3,-1
 400d84c:	10c00526 	beq	r2,r3,400d864 <_write_r+0x50>
 400d850:	dfc00217 	ldw	ra,8(sp)
 400d854:	dc400117 	ldw	r17,4(sp)
 400d858:	dc000017 	ldw	r16,0(sp)
 400d85c:	dec00304 	addi	sp,sp,12
 400d860:	f800283a 	ret
 400d864:	80c00017 	ldw	r3,0(r16)
 400d868:	183ff926 	beq	r3,zero,400d850 <__alt_mem_onchip_memory2_0+0xfc00b850>
 400d86c:	88c00015 	stw	r3,0(r17)
 400d870:	003ff706 	br	400d850 <__alt_mem_onchip_memory2_0+0xfc00b850>

0400d874 <_close_r>:
 400d874:	defffd04 	addi	sp,sp,-12
 400d878:	dc000015 	stw	r16,0(sp)
 400d87c:	040100b4 	movhi	r16,1026
 400d880:	dc400115 	stw	r17,4(sp)
 400d884:	84016204 	addi	r16,r16,1416
 400d888:	2023883a 	mov	r17,r4
 400d88c:	2809883a 	mov	r4,r5
 400d890:	dfc00215 	stw	ra,8(sp)
 400d894:	80000015 	stw	zero,0(r16)
 400d898:	40111f00 	call	40111f0 <close>
 400d89c:	00ffffc4 	movi	r3,-1
 400d8a0:	10c00526 	beq	r2,r3,400d8b8 <_close_r+0x44>
 400d8a4:	dfc00217 	ldw	ra,8(sp)
 400d8a8:	dc400117 	ldw	r17,4(sp)
 400d8ac:	dc000017 	ldw	r16,0(sp)
 400d8b0:	dec00304 	addi	sp,sp,12
 400d8b4:	f800283a 	ret
 400d8b8:	80c00017 	ldw	r3,0(r16)
 400d8bc:	183ff926 	beq	r3,zero,400d8a4 <__alt_mem_onchip_memory2_0+0xfc00b8a4>
 400d8c0:	88c00015 	stw	r3,0(r17)
 400d8c4:	003ff706 	br	400d8a4 <__alt_mem_onchip_memory2_0+0xfc00b8a4>

0400d8c8 <_calloc_r>:
 400d8c8:	298b383a 	mul	r5,r5,r6
 400d8cc:	defffe04 	addi	sp,sp,-8
 400d8d0:	dfc00115 	stw	ra,4(sp)
 400d8d4:	dc000015 	stw	r16,0(sp)
 400d8d8:	40088c40 	call	40088c4 <_malloc_r>
 400d8dc:	10002926 	beq	r2,zero,400d984 <_calloc_r+0xbc>
 400d8e0:	11bfff17 	ldw	r6,-4(r2)
 400d8e4:	1021883a 	mov	r16,r2
 400d8e8:	00bfff04 	movi	r2,-4
 400d8ec:	308c703a 	and	r6,r6,r2
 400d8f0:	00c00904 	movi	r3,36
 400d8f4:	308d883a 	add	r6,r6,r2
 400d8f8:	19801636 	bltu	r3,r6,400d954 <_calloc_r+0x8c>
 400d8fc:	008004c4 	movi	r2,19
 400d900:	11800b2e 	bgeu	r2,r6,400d930 <_calloc_r+0x68>
 400d904:	80000015 	stw	zero,0(r16)
 400d908:	80000115 	stw	zero,4(r16)
 400d90c:	008006c4 	movi	r2,27
 400d910:	11801a2e 	bgeu	r2,r6,400d97c <_calloc_r+0xb4>
 400d914:	80000215 	stw	zero,8(r16)
 400d918:	80000315 	stw	zero,12(r16)
 400d91c:	30c0151e 	bne	r6,r3,400d974 <_calloc_r+0xac>
 400d920:	80000415 	stw	zero,16(r16)
 400d924:	80800604 	addi	r2,r16,24
 400d928:	80000515 	stw	zero,20(r16)
 400d92c:	00000106 	br	400d934 <_calloc_r+0x6c>
 400d930:	8005883a 	mov	r2,r16
 400d934:	10000015 	stw	zero,0(r2)
 400d938:	10000115 	stw	zero,4(r2)
 400d93c:	10000215 	stw	zero,8(r2)
 400d940:	8005883a 	mov	r2,r16
 400d944:	dfc00117 	ldw	ra,4(sp)
 400d948:	dc000017 	ldw	r16,0(sp)
 400d94c:	dec00204 	addi	sp,sp,8
 400d950:	f800283a 	ret
 400d954:	000b883a 	mov	r5,zero
 400d958:	8009883a 	mov	r4,r16
 400d95c:	40094580 	call	4009458 <memset>
 400d960:	8005883a 	mov	r2,r16
 400d964:	dfc00117 	ldw	ra,4(sp)
 400d968:	dc000017 	ldw	r16,0(sp)
 400d96c:	dec00204 	addi	sp,sp,8
 400d970:	f800283a 	ret
 400d974:	80800404 	addi	r2,r16,16
 400d978:	003fee06 	br	400d934 <__alt_mem_onchip_memory2_0+0xfc00b934>
 400d97c:	80800204 	addi	r2,r16,8
 400d980:	003fec06 	br	400d934 <__alt_mem_onchip_memory2_0+0xfc00b934>
 400d984:	0005883a 	mov	r2,zero
 400d988:	003fee06 	br	400d944 <__alt_mem_onchip_memory2_0+0xfc00b944>

0400d98c <_fclose_r>:
 400d98c:	28003926 	beq	r5,zero,400da74 <_fclose_r+0xe8>
 400d990:	defffc04 	addi	sp,sp,-16
 400d994:	dc400115 	stw	r17,4(sp)
 400d998:	dc000015 	stw	r16,0(sp)
 400d99c:	dfc00315 	stw	ra,12(sp)
 400d9a0:	dc800215 	stw	r18,8(sp)
 400d9a4:	2023883a 	mov	r17,r4
 400d9a8:	2821883a 	mov	r16,r5
 400d9ac:	20000226 	beq	r4,zero,400d9b8 <_fclose_r+0x2c>
 400d9b0:	20800e17 	ldw	r2,56(r4)
 400d9b4:	10002726 	beq	r2,zero,400da54 <_fclose_r+0xc8>
 400d9b8:	8080030f 	ldh	r2,12(r16)
 400d9bc:	1000071e 	bne	r2,zero,400d9dc <_fclose_r+0x50>
 400d9c0:	0005883a 	mov	r2,zero
 400d9c4:	dfc00317 	ldw	ra,12(sp)
 400d9c8:	dc800217 	ldw	r18,8(sp)
 400d9cc:	dc400117 	ldw	r17,4(sp)
 400d9d0:	dc000017 	ldw	r16,0(sp)
 400d9d4:	dec00404 	addi	sp,sp,16
 400d9d8:	f800283a 	ret
 400d9dc:	800b883a 	mov	r5,r16
 400d9e0:	8809883a 	mov	r4,r17
 400d9e4:	400756c0 	call	400756c <__sflush_r>
 400d9e8:	1025883a 	mov	r18,r2
 400d9ec:	80800b17 	ldw	r2,44(r16)
 400d9f0:	10000426 	beq	r2,zero,400da04 <_fclose_r+0x78>
 400d9f4:	81400717 	ldw	r5,28(r16)
 400d9f8:	8809883a 	mov	r4,r17
 400d9fc:	103ee83a 	callr	r2
 400da00:	10001616 	blt	r2,zero,400da5c <_fclose_r+0xd0>
 400da04:	8080030b 	ldhu	r2,12(r16)
 400da08:	1080200c 	andi	r2,r2,128
 400da0c:	1000151e 	bne	r2,zero,400da64 <_fclose_r+0xd8>
 400da10:	81400c17 	ldw	r5,48(r16)
 400da14:	28000526 	beq	r5,zero,400da2c <_fclose_r+0xa0>
 400da18:	80801004 	addi	r2,r16,64
 400da1c:	28800226 	beq	r5,r2,400da28 <_fclose_r+0x9c>
 400da20:	8809883a 	mov	r4,r17
 400da24:	4007cd80 	call	4007cd8 <_free_r>
 400da28:	80000c15 	stw	zero,48(r16)
 400da2c:	81401117 	ldw	r5,68(r16)
 400da30:	28000326 	beq	r5,zero,400da40 <_fclose_r+0xb4>
 400da34:	8809883a 	mov	r4,r17
 400da38:	4007cd80 	call	4007cd8 <_free_r>
 400da3c:	80001115 	stw	zero,68(r16)
 400da40:	4007b740 	call	4007b74 <__sfp_lock_acquire>
 400da44:	8000030d 	sth	zero,12(r16)
 400da48:	4007b780 	call	4007b78 <__sfp_lock_release>
 400da4c:	9005883a 	mov	r2,r18
 400da50:	003fdc06 	br	400d9c4 <__alt_mem_onchip_memory2_0+0xfc00b9c4>
 400da54:	4007b640 	call	4007b64 <__sinit>
 400da58:	003fd706 	br	400d9b8 <__alt_mem_onchip_memory2_0+0xfc00b9b8>
 400da5c:	04bfffc4 	movi	r18,-1
 400da60:	003fe806 	br	400da04 <__alt_mem_onchip_memory2_0+0xfc00ba04>
 400da64:	81400417 	ldw	r5,16(r16)
 400da68:	8809883a 	mov	r4,r17
 400da6c:	4007cd80 	call	4007cd8 <_free_r>
 400da70:	003fe706 	br	400da10 <__alt_mem_onchip_memory2_0+0xfc00ba10>
 400da74:	0005883a 	mov	r2,zero
 400da78:	f800283a 	ret

0400da7c <fclose>:
 400da7c:	008100b4 	movhi	r2,1026
 400da80:	10ba3604 	addi	r2,r2,-5928
 400da84:	200b883a 	mov	r5,r4
 400da88:	11000017 	ldw	r4,0(r2)
 400da8c:	400d98c1 	jmpi	400d98c <_fclose_r>

0400da90 <__fputwc>:
 400da90:	defff804 	addi	sp,sp,-32
 400da94:	dcc00415 	stw	r19,16(sp)
 400da98:	dc800315 	stw	r18,12(sp)
 400da9c:	dc000115 	stw	r16,4(sp)
 400daa0:	dfc00715 	stw	ra,28(sp)
 400daa4:	dd400615 	stw	r21,24(sp)
 400daa8:	dd000515 	stw	r20,20(sp)
 400daac:	dc400215 	stw	r17,8(sp)
 400dab0:	2027883a 	mov	r19,r4
 400dab4:	2825883a 	mov	r18,r5
 400dab8:	3021883a 	mov	r16,r6
 400dabc:	40086b40 	call	40086b4 <__locale_mb_cur_max>
 400dac0:	00c00044 	movi	r3,1
 400dac4:	10c03e26 	beq	r2,r3,400dbc0 <__fputwc+0x130>
 400dac8:	81c01704 	addi	r7,r16,92
 400dacc:	900d883a 	mov	r6,r18
 400dad0:	d80b883a 	mov	r5,sp
 400dad4:	9809883a 	mov	r4,r19
 400dad8:	400df600 	call	400df60 <_wcrtomb_r>
 400dadc:	1029883a 	mov	r20,r2
 400dae0:	00bfffc4 	movi	r2,-1
 400dae4:	a0802026 	beq	r20,r2,400db68 <__fputwc+0xd8>
 400dae8:	d9400003 	ldbu	r5,0(sp)
 400daec:	a0001c26 	beq	r20,zero,400db60 <__fputwc+0xd0>
 400daf0:	0023883a 	mov	r17,zero
 400daf4:	05400284 	movi	r21,10
 400daf8:	00000906 	br	400db20 <__fputwc+0x90>
 400dafc:	80800017 	ldw	r2,0(r16)
 400db00:	11400005 	stb	r5,0(r2)
 400db04:	80c00017 	ldw	r3,0(r16)
 400db08:	18c00044 	addi	r3,r3,1
 400db0c:	80c00015 	stw	r3,0(r16)
 400db10:	8c400044 	addi	r17,r17,1
 400db14:	dc45883a 	add	r2,sp,r17
 400db18:	8d00112e 	bgeu	r17,r20,400db60 <__fputwc+0xd0>
 400db1c:	11400003 	ldbu	r5,0(r2)
 400db20:	80c00217 	ldw	r3,8(r16)
 400db24:	18ffffc4 	addi	r3,r3,-1
 400db28:	80c00215 	stw	r3,8(r16)
 400db2c:	183ff30e 	bge	r3,zero,400dafc <__alt_mem_onchip_memory2_0+0xfc00bafc>
 400db30:	80800617 	ldw	r2,24(r16)
 400db34:	18801916 	blt	r3,r2,400db9c <__fputwc+0x10c>
 400db38:	80800017 	ldw	r2,0(r16)
 400db3c:	11400005 	stb	r5,0(r2)
 400db40:	80800017 	ldw	r2,0(r16)
 400db44:	10c00003 	ldbu	r3,0(r2)
 400db48:	10800044 	addi	r2,r2,1
 400db4c:	1d402326 	beq	r3,r21,400dbdc <__fputwc+0x14c>
 400db50:	80800015 	stw	r2,0(r16)
 400db54:	8c400044 	addi	r17,r17,1
 400db58:	dc45883a 	add	r2,sp,r17
 400db5c:	8d3fef36 	bltu	r17,r20,400db1c <__alt_mem_onchip_memory2_0+0xfc00bb1c>
 400db60:	9005883a 	mov	r2,r18
 400db64:	00000406 	br	400db78 <__fputwc+0xe8>
 400db68:	80c0030b 	ldhu	r3,12(r16)
 400db6c:	a005883a 	mov	r2,r20
 400db70:	18c01014 	ori	r3,r3,64
 400db74:	80c0030d 	sth	r3,12(r16)
 400db78:	dfc00717 	ldw	ra,28(sp)
 400db7c:	dd400617 	ldw	r21,24(sp)
 400db80:	dd000517 	ldw	r20,20(sp)
 400db84:	dcc00417 	ldw	r19,16(sp)
 400db88:	dc800317 	ldw	r18,12(sp)
 400db8c:	dc400217 	ldw	r17,8(sp)
 400db90:	dc000117 	ldw	r16,4(sp)
 400db94:	dec00804 	addi	sp,sp,32
 400db98:	f800283a 	ret
 400db9c:	800d883a 	mov	r6,r16
 400dba0:	29403fcc 	andi	r5,r5,255
 400dba4:	9809883a 	mov	r4,r19
 400dba8:	400de080 	call	400de08 <__swbuf_r>
 400dbac:	10bfffe0 	cmpeqi	r2,r2,-1
 400dbb0:	10803fcc 	andi	r2,r2,255
 400dbb4:	103fd626 	beq	r2,zero,400db10 <__alt_mem_onchip_memory2_0+0xfc00bb10>
 400dbb8:	00bfffc4 	movi	r2,-1
 400dbbc:	003fee06 	br	400db78 <__alt_mem_onchip_memory2_0+0xfc00bb78>
 400dbc0:	90ffffc4 	addi	r3,r18,-1
 400dbc4:	01003f84 	movi	r4,254
 400dbc8:	20ffbf36 	bltu	r4,r3,400dac8 <__alt_mem_onchip_memory2_0+0xfc00bac8>
 400dbcc:	900b883a 	mov	r5,r18
 400dbd0:	dc800005 	stb	r18,0(sp)
 400dbd4:	1029883a 	mov	r20,r2
 400dbd8:	003fc506 	br	400daf0 <__alt_mem_onchip_memory2_0+0xfc00baf0>
 400dbdc:	800d883a 	mov	r6,r16
 400dbe0:	a80b883a 	mov	r5,r21
 400dbe4:	9809883a 	mov	r4,r19
 400dbe8:	400de080 	call	400de08 <__swbuf_r>
 400dbec:	10bfffe0 	cmpeqi	r2,r2,-1
 400dbf0:	003fef06 	br	400dbb0 <__alt_mem_onchip_memory2_0+0xfc00bbb0>

0400dbf4 <_fputwc_r>:
 400dbf4:	3080030b 	ldhu	r2,12(r6)
 400dbf8:	10c8000c 	andi	r3,r2,8192
 400dbfc:	1800051e 	bne	r3,zero,400dc14 <_fputwc_r+0x20>
 400dc00:	30c01917 	ldw	r3,100(r6)
 400dc04:	10880014 	ori	r2,r2,8192
 400dc08:	3080030d 	sth	r2,12(r6)
 400dc0c:	18880014 	ori	r2,r3,8192
 400dc10:	30801915 	stw	r2,100(r6)
 400dc14:	400da901 	jmpi	400da90 <__fputwc>

0400dc18 <fputwc>:
 400dc18:	008100b4 	movhi	r2,1026
 400dc1c:	defffc04 	addi	sp,sp,-16
 400dc20:	10ba3604 	addi	r2,r2,-5928
 400dc24:	dc000115 	stw	r16,4(sp)
 400dc28:	14000017 	ldw	r16,0(r2)
 400dc2c:	dc400215 	stw	r17,8(sp)
 400dc30:	dfc00315 	stw	ra,12(sp)
 400dc34:	2023883a 	mov	r17,r4
 400dc38:	80000226 	beq	r16,zero,400dc44 <fputwc+0x2c>
 400dc3c:	80800e17 	ldw	r2,56(r16)
 400dc40:	10001026 	beq	r2,zero,400dc84 <fputwc+0x6c>
 400dc44:	2880030b 	ldhu	r2,12(r5)
 400dc48:	10c8000c 	andi	r3,r2,8192
 400dc4c:	1800051e 	bne	r3,zero,400dc64 <fputwc+0x4c>
 400dc50:	28c01917 	ldw	r3,100(r5)
 400dc54:	10880014 	ori	r2,r2,8192
 400dc58:	2880030d 	sth	r2,12(r5)
 400dc5c:	18880014 	ori	r2,r3,8192
 400dc60:	28801915 	stw	r2,100(r5)
 400dc64:	280d883a 	mov	r6,r5
 400dc68:	8009883a 	mov	r4,r16
 400dc6c:	880b883a 	mov	r5,r17
 400dc70:	dfc00317 	ldw	ra,12(sp)
 400dc74:	dc400217 	ldw	r17,8(sp)
 400dc78:	dc000117 	ldw	r16,4(sp)
 400dc7c:	dec00404 	addi	sp,sp,16
 400dc80:	400da901 	jmpi	400da90 <__fputwc>
 400dc84:	8009883a 	mov	r4,r16
 400dc88:	d9400015 	stw	r5,0(sp)
 400dc8c:	4007b640 	call	4007b64 <__sinit>
 400dc90:	d9400017 	ldw	r5,0(sp)
 400dc94:	003feb06 	br	400dc44 <__alt_mem_onchip_memory2_0+0xfc00bc44>

0400dc98 <_fstat_r>:
 400dc98:	defffd04 	addi	sp,sp,-12
 400dc9c:	2805883a 	mov	r2,r5
 400dca0:	dc000015 	stw	r16,0(sp)
 400dca4:	040100b4 	movhi	r16,1026
 400dca8:	dc400115 	stw	r17,4(sp)
 400dcac:	84016204 	addi	r16,r16,1416
 400dcb0:	2023883a 	mov	r17,r4
 400dcb4:	300b883a 	mov	r5,r6
 400dcb8:	1009883a 	mov	r4,r2
 400dcbc:	dfc00215 	stw	ra,8(sp)
 400dcc0:	80000015 	stw	zero,0(r16)
 400dcc4:	40113280 	call	4011328 <fstat>
 400dcc8:	00ffffc4 	movi	r3,-1
 400dccc:	10c00526 	beq	r2,r3,400dce4 <_fstat_r+0x4c>
 400dcd0:	dfc00217 	ldw	ra,8(sp)
 400dcd4:	dc400117 	ldw	r17,4(sp)
 400dcd8:	dc000017 	ldw	r16,0(sp)
 400dcdc:	dec00304 	addi	sp,sp,12
 400dce0:	f800283a 	ret
 400dce4:	80c00017 	ldw	r3,0(r16)
 400dce8:	183ff926 	beq	r3,zero,400dcd0 <__alt_mem_onchip_memory2_0+0xfc00bcd0>
 400dcec:	88c00015 	stw	r3,0(r17)
 400dcf0:	003ff706 	br	400dcd0 <__alt_mem_onchip_memory2_0+0xfc00bcd0>

0400dcf4 <_isatty_r>:
 400dcf4:	defffd04 	addi	sp,sp,-12
 400dcf8:	dc000015 	stw	r16,0(sp)
 400dcfc:	040100b4 	movhi	r16,1026
 400dd00:	dc400115 	stw	r17,4(sp)
 400dd04:	84016204 	addi	r16,r16,1416
 400dd08:	2023883a 	mov	r17,r4
 400dd0c:	2809883a 	mov	r4,r5
 400dd10:	dfc00215 	stw	ra,8(sp)
 400dd14:	80000015 	stw	zero,0(r16)
 400dd18:	40115940 	call	4011594 <isatty>
 400dd1c:	00ffffc4 	movi	r3,-1
 400dd20:	10c00526 	beq	r2,r3,400dd38 <_isatty_r+0x44>
 400dd24:	dfc00217 	ldw	ra,8(sp)
 400dd28:	dc400117 	ldw	r17,4(sp)
 400dd2c:	dc000017 	ldw	r16,0(sp)
 400dd30:	dec00304 	addi	sp,sp,12
 400dd34:	f800283a 	ret
 400dd38:	80c00017 	ldw	r3,0(r16)
 400dd3c:	183ff926 	beq	r3,zero,400dd24 <__alt_mem_onchip_memory2_0+0xfc00bd24>
 400dd40:	88c00015 	stw	r3,0(r17)
 400dd44:	003ff706 	br	400dd24 <__alt_mem_onchip_memory2_0+0xfc00bd24>

0400dd48 <_lseek_r>:
 400dd48:	defffd04 	addi	sp,sp,-12
 400dd4c:	2805883a 	mov	r2,r5
 400dd50:	dc000015 	stw	r16,0(sp)
 400dd54:	040100b4 	movhi	r16,1026
 400dd58:	dc400115 	stw	r17,4(sp)
 400dd5c:	300b883a 	mov	r5,r6
 400dd60:	84016204 	addi	r16,r16,1416
 400dd64:	2023883a 	mov	r17,r4
 400dd68:	380d883a 	mov	r6,r7
 400dd6c:	1009883a 	mov	r4,r2
 400dd70:	dfc00215 	stw	ra,8(sp)
 400dd74:	80000015 	stw	zero,0(r16)
 400dd78:	40117600 	call	4011760 <lseek>
 400dd7c:	00ffffc4 	movi	r3,-1
 400dd80:	10c00526 	beq	r2,r3,400dd98 <_lseek_r+0x50>
 400dd84:	dfc00217 	ldw	ra,8(sp)
 400dd88:	dc400117 	ldw	r17,4(sp)
 400dd8c:	dc000017 	ldw	r16,0(sp)
 400dd90:	dec00304 	addi	sp,sp,12
 400dd94:	f800283a 	ret
 400dd98:	80c00017 	ldw	r3,0(r16)
 400dd9c:	183ff926 	beq	r3,zero,400dd84 <__alt_mem_onchip_memory2_0+0xfc00bd84>
 400dda0:	88c00015 	stw	r3,0(r17)
 400dda4:	003ff706 	br	400dd84 <__alt_mem_onchip_memory2_0+0xfc00bd84>

0400dda8 <_read_r>:
 400dda8:	defffd04 	addi	sp,sp,-12
 400ddac:	2805883a 	mov	r2,r5
 400ddb0:	dc000015 	stw	r16,0(sp)
 400ddb4:	040100b4 	movhi	r16,1026
 400ddb8:	dc400115 	stw	r17,4(sp)
 400ddbc:	300b883a 	mov	r5,r6
 400ddc0:	84016204 	addi	r16,r16,1416
 400ddc4:	2023883a 	mov	r17,r4
 400ddc8:	380d883a 	mov	r6,r7
 400ddcc:	1009883a 	mov	r4,r2
 400ddd0:	dfc00215 	stw	ra,8(sp)
 400ddd4:	80000015 	stw	zero,0(r16)
 400ddd8:	401192c0 	call	401192c <read>
 400dddc:	00ffffc4 	movi	r3,-1
 400dde0:	10c00526 	beq	r2,r3,400ddf8 <_read_r+0x50>
 400dde4:	dfc00217 	ldw	ra,8(sp)
 400dde8:	dc400117 	ldw	r17,4(sp)
 400ddec:	dc000017 	ldw	r16,0(sp)
 400ddf0:	dec00304 	addi	sp,sp,12
 400ddf4:	f800283a 	ret
 400ddf8:	80c00017 	ldw	r3,0(r16)
 400ddfc:	183ff926 	beq	r3,zero,400dde4 <__alt_mem_onchip_memory2_0+0xfc00bde4>
 400de00:	88c00015 	stw	r3,0(r17)
 400de04:	003ff706 	br	400dde4 <__alt_mem_onchip_memory2_0+0xfc00bde4>

0400de08 <__swbuf_r>:
 400de08:	defffb04 	addi	sp,sp,-20
 400de0c:	dcc00315 	stw	r19,12(sp)
 400de10:	dc800215 	stw	r18,8(sp)
 400de14:	dc000015 	stw	r16,0(sp)
 400de18:	dfc00415 	stw	ra,16(sp)
 400de1c:	dc400115 	stw	r17,4(sp)
 400de20:	2025883a 	mov	r18,r4
 400de24:	2827883a 	mov	r19,r5
 400de28:	3021883a 	mov	r16,r6
 400de2c:	20000226 	beq	r4,zero,400de38 <__swbuf_r+0x30>
 400de30:	20800e17 	ldw	r2,56(r4)
 400de34:	10004226 	beq	r2,zero,400df40 <__swbuf_r+0x138>
 400de38:	80800617 	ldw	r2,24(r16)
 400de3c:	8100030b 	ldhu	r4,12(r16)
 400de40:	80800215 	stw	r2,8(r16)
 400de44:	2080020c 	andi	r2,r4,8
 400de48:	10003626 	beq	r2,zero,400df24 <__swbuf_r+0x11c>
 400de4c:	80c00417 	ldw	r3,16(r16)
 400de50:	18003426 	beq	r3,zero,400df24 <__swbuf_r+0x11c>
 400de54:	2088000c 	andi	r2,r4,8192
 400de58:	9c403fcc 	andi	r17,r19,255
 400de5c:	10001a26 	beq	r2,zero,400dec8 <__swbuf_r+0xc0>
 400de60:	80800017 	ldw	r2,0(r16)
 400de64:	81000517 	ldw	r4,20(r16)
 400de68:	10c7c83a 	sub	r3,r2,r3
 400de6c:	1900200e 	bge	r3,r4,400def0 <__swbuf_r+0xe8>
 400de70:	18c00044 	addi	r3,r3,1
 400de74:	81000217 	ldw	r4,8(r16)
 400de78:	11400044 	addi	r5,r2,1
 400de7c:	81400015 	stw	r5,0(r16)
 400de80:	213fffc4 	addi	r4,r4,-1
 400de84:	81000215 	stw	r4,8(r16)
 400de88:	14c00005 	stb	r19,0(r2)
 400de8c:	80800517 	ldw	r2,20(r16)
 400de90:	10c01e26 	beq	r2,r3,400df0c <__swbuf_r+0x104>
 400de94:	8080030b 	ldhu	r2,12(r16)
 400de98:	1080004c 	andi	r2,r2,1
 400de9c:	10000226 	beq	r2,zero,400dea8 <__swbuf_r+0xa0>
 400dea0:	00800284 	movi	r2,10
 400dea4:	88801926 	beq	r17,r2,400df0c <__swbuf_r+0x104>
 400dea8:	8805883a 	mov	r2,r17
 400deac:	dfc00417 	ldw	ra,16(sp)
 400deb0:	dcc00317 	ldw	r19,12(sp)
 400deb4:	dc800217 	ldw	r18,8(sp)
 400deb8:	dc400117 	ldw	r17,4(sp)
 400debc:	dc000017 	ldw	r16,0(sp)
 400dec0:	dec00504 	addi	sp,sp,20
 400dec4:	f800283a 	ret
 400dec8:	81401917 	ldw	r5,100(r16)
 400decc:	00b7ffc4 	movi	r2,-8193
 400ded0:	21080014 	ori	r4,r4,8192
 400ded4:	2884703a 	and	r2,r5,r2
 400ded8:	80801915 	stw	r2,100(r16)
 400dedc:	80800017 	ldw	r2,0(r16)
 400dee0:	8100030d 	sth	r4,12(r16)
 400dee4:	81000517 	ldw	r4,20(r16)
 400dee8:	10c7c83a 	sub	r3,r2,r3
 400deec:	193fe016 	blt	r3,r4,400de70 <__alt_mem_onchip_memory2_0+0xfc00be70>
 400def0:	800b883a 	mov	r5,r16
 400def4:	9009883a 	mov	r4,r18
 400def8:	40077880 	call	4007788 <_fflush_r>
 400defc:	1000071e 	bne	r2,zero,400df1c <__swbuf_r+0x114>
 400df00:	80800017 	ldw	r2,0(r16)
 400df04:	00c00044 	movi	r3,1
 400df08:	003fda06 	br	400de74 <__alt_mem_onchip_memory2_0+0xfc00be74>
 400df0c:	800b883a 	mov	r5,r16
 400df10:	9009883a 	mov	r4,r18
 400df14:	40077880 	call	4007788 <_fflush_r>
 400df18:	103fe326 	beq	r2,zero,400dea8 <__alt_mem_onchip_memory2_0+0xfc00bea8>
 400df1c:	00bfffc4 	movi	r2,-1
 400df20:	003fe206 	br	400deac <__alt_mem_onchip_memory2_0+0xfc00beac>
 400df24:	800b883a 	mov	r5,r16
 400df28:	9009883a 	mov	r4,r18
 400df2c:	4005b900 	call	4005b90 <__swsetup_r>
 400df30:	103ffa1e 	bne	r2,zero,400df1c <__alt_mem_onchip_memory2_0+0xfc00bf1c>
 400df34:	8100030b 	ldhu	r4,12(r16)
 400df38:	80c00417 	ldw	r3,16(r16)
 400df3c:	003fc506 	br	400de54 <__alt_mem_onchip_memory2_0+0xfc00be54>
 400df40:	4007b640 	call	4007b64 <__sinit>
 400df44:	003fbc06 	br	400de38 <__alt_mem_onchip_memory2_0+0xfc00be38>

0400df48 <__swbuf>:
 400df48:	008100b4 	movhi	r2,1026
 400df4c:	10ba3604 	addi	r2,r2,-5928
 400df50:	280d883a 	mov	r6,r5
 400df54:	200b883a 	mov	r5,r4
 400df58:	11000017 	ldw	r4,0(r2)
 400df5c:	400de081 	jmpi	400de08 <__swbuf_r>

0400df60 <_wcrtomb_r>:
 400df60:	defff604 	addi	sp,sp,-40
 400df64:	008100b4 	movhi	r2,1026
 400df68:	dc800815 	stw	r18,32(sp)
 400df6c:	dc400715 	stw	r17,28(sp)
 400df70:	dc000615 	stw	r16,24(sp)
 400df74:	10ba3a04 	addi	r2,r2,-5912
 400df78:	dfc00915 	stw	ra,36(sp)
 400df7c:	2021883a 	mov	r16,r4
 400df80:	3823883a 	mov	r17,r7
 400df84:	14800017 	ldw	r18,0(r2)
 400df88:	28001426 	beq	r5,zero,400dfdc <_wcrtomb_r+0x7c>
 400df8c:	d9400415 	stw	r5,16(sp)
 400df90:	d9800515 	stw	r6,20(sp)
 400df94:	40086a80 	call	40086a8 <__locale_charset>
 400df98:	d9800517 	ldw	r6,20(sp)
 400df9c:	d9400417 	ldw	r5,16(sp)
 400dfa0:	100f883a 	mov	r7,r2
 400dfa4:	dc400015 	stw	r17,0(sp)
 400dfa8:	8009883a 	mov	r4,r16
 400dfac:	903ee83a 	callr	r18
 400dfb0:	00ffffc4 	movi	r3,-1
 400dfb4:	10c0031e 	bne	r2,r3,400dfc4 <_wcrtomb_r+0x64>
 400dfb8:	88000015 	stw	zero,0(r17)
 400dfbc:	00c02284 	movi	r3,138
 400dfc0:	80c00015 	stw	r3,0(r16)
 400dfc4:	dfc00917 	ldw	ra,36(sp)
 400dfc8:	dc800817 	ldw	r18,32(sp)
 400dfcc:	dc400717 	ldw	r17,28(sp)
 400dfd0:	dc000617 	ldw	r16,24(sp)
 400dfd4:	dec00a04 	addi	sp,sp,40
 400dfd8:	f800283a 	ret
 400dfdc:	40086a80 	call	40086a8 <__locale_charset>
 400dfe0:	100f883a 	mov	r7,r2
 400dfe4:	dc400015 	stw	r17,0(sp)
 400dfe8:	000d883a 	mov	r6,zero
 400dfec:	d9400104 	addi	r5,sp,4
 400dff0:	8009883a 	mov	r4,r16
 400dff4:	903ee83a 	callr	r18
 400dff8:	003fed06 	br	400dfb0 <__alt_mem_onchip_memory2_0+0xfc00bfb0>

0400dffc <wcrtomb>:
 400dffc:	defff604 	addi	sp,sp,-40
 400e000:	008100b4 	movhi	r2,1026
 400e004:	dc800615 	stw	r18,24(sp)
 400e008:	dc400515 	stw	r17,20(sp)
 400e00c:	10ba3604 	addi	r2,r2,-5928
 400e010:	dfc00915 	stw	ra,36(sp)
 400e014:	dd000815 	stw	r20,32(sp)
 400e018:	dcc00715 	stw	r19,28(sp)
 400e01c:	dc000415 	stw	r16,16(sp)
 400e020:	3025883a 	mov	r18,r6
 400e024:	14400017 	ldw	r17,0(r2)
 400e028:	20001926 	beq	r4,zero,400e090 <wcrtomb+0x94>
 400e02c:	008100b4 	movhi	r2,1026
 400e030:	10ba3a04 	addi	r2,r2,-5912
 400e034:	15000017 	ldw	r20,0(r2)
 400e038:	2021883a 	mov	r16,r4
 400e03c:	2827883a 	mov	r19,r5
 400e040:	40086a80 	call	40086a8 <__locale_charset>
 400e044:	100f883a 	mov	r7,r2
 400e048:	dc800015 	stw	r18,0(sp)
 400e04c:	980d883a 	mov	r6,r19
 400e050:	800b883a 	mov	r5,r16
 400e054:	8809883a 	mov	r4,r17
 400e058:	a03ee83a 	callr	r20
 400e05c:	00ffffc4 	movi	r3,-1
 400e060:	10c0031e 	bne	r2,r3,400e070 <wcrtomb+0x74>
 400e064:	90000015 	stw	zero,0(r18)
 400e068:	00c02284 	movi	r3,138
 400e06c:	88c00015 	stw	r3,0(r17)
 400e070:	dfc00917 	ldw	ra,36(sp)
 400e074:	dd000817 	ldw	r20,32(sp)
 400e078:	dcc00717 	ldw	r19,28(sp)
 400e07c:	dc800617 	ldw	r18,24(sp)
 400e080:	dc400517 	ldw	r17,20(sp)
 400e084:	dc000417 	ldw	r16,16(sp)
 400e088:	dec00a04 	addi	sp,sp,40
 400e08c:	f800283a 	ret
 400e090:	008100b4 	movhi	r2,1026
 400e094:	10ba3a04 	addi	r2,r2,-5912
 400e098:	14000017 	ldw	r16,0(r2)
 400e09c:	40086a80 	call	40086a8 <__locale_charset>
 400e0a0:	100f883a 	mov	r7,r2
 400e0a4:	dc800015 	stw	r18,0(sp)
 400e0a8:	000d883a 	mov	r6,zero
 400e0ac:	d9400104 	addi	r5,sp,4
 400e0b0:	8809883a 	mov	r4,r17
 400e0b4:	803ee83a 	callr	r16
 400e0b8:	003fe806 	br	400e05c <__alt_mem_onchip_memory2_0+0xfc00c05c>

0400e0bc <__ascii_wctomb>:
 400e0bc:	28000526 	beq	r5,zero,400e0d4 <__ascii_wctomb+0x18>
 400e0c0:	00803fc4 	movi	r2,255
 400e0c4:	11800536 	bltu	r2,r6,400e0dc <__ascii_wctomb+0x20>
 400e0c8:	29800005 	stb	r6,0(r5)
 400e0cc:	00800044 	movi	r2,1
 400e0d0:	f800283a 	ret
 400e0d4:	0005883a 	mov	r2,zero
 400e0d8:	f800283a 	ret
 400e0dc:	00802284 	movi	r2,138
 400e0e0:	20800015 	stw	r2,0(r4)
 400e0e4:	00bfffc4 	movi	r2,-1
 400e0e8:	f800283a 	ret

0400e0ec <_wctomb_r>:
 400e0ec:	008100b4 	movhi	r2,1026
 400e0f0:	defff904 	addi	sp,sp,-28
 400e0f4:	10ba3a04 	addi	r2,r2,-5912
 400e0f8:	dfc00615 	stw	ra,24(sp)
 400e0fc:	dc400515 	stw	r17,20(sp)
 400e100:	dc000415 	stw	r16,16(sp)
 400e104:	3823883a 	mov	r17,r7
 400e108:	14000017 	ldw	r16,0(r2)
 400e10c:	d9000115 	stw	r4,4(sp)
 400e110:	d9400215 	stw	r5,8(sp)
 400e114:	d9800315 	stw	r6,12(sp)
 400e118:	40086a80 	call	40086a8 <__locale_charset>
 400e11c:	d9800317 	ldw	r6,12(sp)
 400e120:	d9400217 	ldw	r5,8(sp)
 400e124:	d9000117 	ldw	r4,4(sp)
 400e128:	100f883a 	mov	r7,r2
 400e12c:	dc400015 	stw	r17,0(sp)
 400e130:	803ee83a 	callr	r16
 400e134:	dfc00617 	ldw	ra,24(sp)
 400e138:	dc400517 	ldw	r17,20(sp)
 400e13c:	dc000417 	ldw	r16,16(sp)
 400e140:	dec00704 	addi	sp,sp,28
 400e144:	f800283a 	ret

0400e148 <__muldi3>:
 400e148:	223fffcc 	andi	r8,r4,65535
 400e14c:	2006d43a 	srli	r3,r4,16
 400e150:	32bfffcc 	andi	r10,r6,65535
 400e154:	3012d43a 	srli	r9,r6,16
 400e158:	4297383a 	mul	r11,r8,r10
 400e15c:	1a95383a 	mul	r10,r3,r10
 400e160:	4251383a 	mul	r8,r8,r9
 400e164:	5804d43a 	srli	r2,r11,16
 400e168:	4291883a 	add	r8,r8,r10
 400e16c:	1205883a 	add	r2,r2,r8
 400e170:	1a51383a 	mul	r8,r3,r9
 400e174:	1280022e 	bgeu	r2,r10,400e180 <__muldi3+0x38>
 400e178:	00c00074 	movhi	r3,1
 400e17c:	40d1883a 	add	r8,r8,r3
 400e180:	1006d43a 	srli	r3,r2,16
 400e184:	21cf383a 	mul	r7,r4,r7
 400e188:	314b383a 	mul	r5,r6,r5
 400e18c:	1004943a 	slli	r2,r2,16
 400e190:	1a11883a 	add	r8,r3,r8
 400e194:	5affffcc 	andi	r11,r11,65535
 400e198:	3947883a 	add	r3,r7,r5
 400e19c:	12c5883a 	add	r2,r2,r11
 400e1a0:	1a07883a 	add	r3,r3,r8
 400e1a4:	f800283a 	ret

0400e1a8 <__udivdi3>:
 400e1a8:	defff504 	addi	sp,sp,-44
 400e1ac:	dcc00415 	stw	r19,16(sp)
 400e1b0:	dc000115 	stw	r16,4(sp)
 400e1b4:	dfc00a15 	stw	ra,40(sp)
 400e1b8:	df000915 	stw	fp,36(sp)
 400e1bc:	ddc00815 	stw	r23,32(sp)
 400e1c0:	dd800715 	stw	r22,28(sp)
 400e1c4:	dd400615 	stw	r21,24(sp)
 400e1c8:	dd000515 	stw	r20,20(sp)
 400e1cc:	dc800315 	stw	r18,12(sp)
 400e1d0:	dc400215 	stw	r17,8(sp)
 400e1d4:	2027883a 	mov	r19,r4
 400e1d8:	2821883a 	mov	r16,r5
 400e1dc:	3800411e 	bne	r7,zero,400e2e4 <__udivdi3+0x13c>
 400e1e0:	3023883a 	mov	r17,r6
 400e1e4:	2025883a 	mov	r18,r4
 400e1e8:	2980522e 	bgeu	r5,r6,400e334 <__udivdi3+0x18c>
 400e1ec:	00bfffd4 	movui	r2,65535
 400e1f0:	282d883a 	mov	r22,r5
 400e1f4:	1180a836 	bltu	r2,r6,400e498 <__udivdi3+0x2f0>
 400e1f8:	00803fc4 	movi	r2,255
 400e1fc:	1185803a 	cmpltu	r2,r2,r6
 400e200:	100490fa 	slli	r2,r2,3
 400e204:	3086d83a 	srl	r3,r6,r2
 400e208:	010100b4 	movhi	r4,1026
 400e20c:	21326304 	addi	r4,r4,-13940
 400e210:	20c7883a 	add	r3,r4,r3
 400e214:	18c00003 	ldbu	r3,0(r3)
 400e218:	1885883a 	add	r2,r3,r2
 400e21c:	00c00804 	movi	r3,32
 400e220:	1887c83a 	sub	r3,r3,r2
 400e224:	18000526 	beq	r3,zero,400e23c <__udivdi3+0x94>
 400e228:	80e0983a 	sll	r16,r16,r3
 400e22c:	9884d83a 	srl	r2,r19,r2
 400e230:	30e2983a 	sll	r17,r6,r3
 400e234:	98e4983a 	sll	r18,r19,r3
 400e238:	142cb03a 	or	r22,r2,r16
 400e23c:	882ad43a 	srli	r21,r17,16
 400e240:	b009883a 	mov	r4,r22
 400e244:	8d3fffcc 	andi	r20,r17,65535
 400e248:	a80b883a 	mov	r5,r21
 400e24c:	4000e200 	call	4000e20 <__umodsi3>
 400e250:	b009883a 	mov	r4,r22
 400e254:	a80b883a 	mov	r5,r21
 400e258:	1027883a 	mov	r19,r2
 400e25c:	4000dbc0 	call	4000dbc <__udivsi3>
 400e260:	102d883a 	mov	r22,r2
 400e264:	9826943a 	slli	r19,r19,16
 400e268:	9004d43a 	srli	r2,r18,16
 400e26c:	a5a1383a 	mul	r16,r20,r22
 400e270:	14c4b03a 	or	r2,r2,r19
 400e274:	1400052e 	bgeu	r2,r16,400e28c <__udivdi3+0xe4>
 400e278:	1445883a 	add	r2,r2,r17
 400e27c:	b0ffffc4 	addi	r3,r22,-1
 400e280:	14400136 	bltu	r2,r17,400e288 <__udivdi3+0xe0>
 400e284:	14012336 	bltu	r2,r16,400e714 <__udivdi3+0x56c>
 400e288:	182d883a 	mov	r22,r3
 400e28c:	1421c83a 	sub	r16,r2,r16
 400e290:	a80b883a 	mov	r5,r21
 400e294:	8009883a 	mov	r4,r16
 400e298:	4000e200 	call	4000e20 <__umodsi3>
 400e29c:	1027883a 	mov	r19,r2
 400e2a0:	a80b883a 	mov	r5,r21
 400e2a4:	8009883a 	mov	r4,r16
 400e2a8:	4000dbc0 	call	4000dbc <__udivsi3>
 400e2ac:	9826943a 	slli	r19,r19,16
 400e2b0:	a0a9383a 	mul	r20,r20,r2
 400e2b4:	94bfffcc 	andi	r18,r18,65535
 400e2b8:	94e4b03a 	or	r18,r18,r19
 400e2bc:	9500052e 	bgeu	r18,r20,400e2d4 <__udivdi3+0x12c>
 400e2c0:	8ca5883a 	add	r18,r17,r18
 400e2c4:	10ffffc4 	addi	r3,r2,-1
 400e2c8:	9440f136 	bltu	r18,r17,400e690 <__udivdi3+0x4e8>
 400e2cc:	9500f02e 	bgeu	r18,r20,400e690 <__udivdi3+0x4e8>
 400e2d0:	10bfff84 	addi	r2,r2,-2
 400e2d4:	b00c943a 	slli	r6,r22,16
 400e2d8:	0007883a 	mov	r3,zero
 400e2dc:	3084b03a 	or	r2,r6,r2
 400e2e0:	00005906 	br	400e448 <__udivdi3+0x2a0>
 400e2e4:	29c05636 	bltu	r5,r7,400e440 <__udivdi3+0x298>
 400e2e8:	00bfffd4 	movui	r2,65535
 400e2ec:	11c0622e 	bgeu	r2,r7,400e478 <__udivdi3+0x2d0>
 400e2f0:	00804034 	movhi	r2,256
 400e2f4:	10bfffc4 	addi	r2,r2,-1
 400e2f8:	11c0ee36 	bltu	r2,r7,400e6b4 <__udivdi3+0x50c>
 400e2fc:	00800404 	movi	r2,16
 400e300:	3886d83a 	srl	r3,r7,r2
 400e304:	010100b4 	movhi	r4,1026
 400e308:	21326304 	addi	r4,r4,-13940
 400e30c:	20c7883a 	add	r3,r4,r3
 400e310:	18c00003 	ldbu	r3,0(r3)
 400e314:	05400804 	movi	r21,32
 400e318:	1885883a 	add	r2,r3,r2
 400e31c:	a8abc83a 	sub	r21,r21,r2
 400e320:	a800621e 	bne	r21,zero,400e4ac <__udivdi3+0x304>
 400e324:	3c00e936 	bltu	r7,r16,400e6cc <__udivdi3+0x524>
 400e328:	9985403a 	cmpgeu	r2,r19,r6
 400e32c:	0007883a 	mov	r3,zero
 400e330:	00004506 	br	400e448 <__udivdi3+0x2a0>
 400e334:	3000041e 	bne	r6,zero,400e348 <__udivdi3+0x1a0>
 400e338:	000b883a 	mov	r5,zero
 400e33c:	01000044 	movi	r4,1
 400e340:	4000dbc0 	call	4000dbc <__udivsi3>
 400e344:	1023883a 	mov	r17,r2
 400e348:	00bfffd4 	movui	r2,65535
 400e34c:	14404e2e 	bgeu	r2,r17,400e488 <__udivdi3+0x2e0>
 400e350:	00804034 	movhi	r2,256
 400e354:	10bfffc4 	addi	r2,r2,-1
 400e358:	1440d836 	bltu	r2,r17,400e6bc <__udivdi3+0x514>
 400e35c:	00800404 	movi	r2,16
 400e360:	8886d83a 	srl	r3,r17,r2
 400e364:	010100b4 	movhi	r4,1026
 400e368:	21326304 	addi	r4,r4,-13940
 400e36c:	20c7883a 	add	r3,r4,r3
 400e370:	18c00003 	ldbu	r3,0(r3)
 400e374:	1885883a 	add	r2,r3,r2
 400e378:	00c00804 	movi	r3,32
 400e37c:	1887c83a 	sub	r3,r3,r2
 400e380:	18008f1e 	bne	r3,zero,400e5c0 <__udivdi3+0x418>
 400e384:	882ad43a 	srli	r21,r17,16
 400e388:	8461c83a 	sub	r16,r16,r17
 400e38c:	8d3fffcc 	andi	r20,r17,65535
 400e390:	00c00044 	movi	r3,1
 400e394:	8009883a 	mov	r4,r16
 400e398:	a80b883a 	mov	r5,r21
 400e39c:	d8c00015 	stw	r3,0(sp)
 400e3a0:	4000e200 	call	4000e20 <__umodsi3>
 400e3a4:	8009883a 	mov	r4,r16
 400e3a8:	a80b883a 	mov	r5,r21
 400e3ac:	1027883a 	mov	r19,r2
 400e3b0:	4000dbc0 	call	4000dbc <__udivsi3>
 400e3b4:	9826943a 	slli	r19,r19,16
 400e3b8:	9008d43a 	srli	r4,r18,16
 400e3bc:	1521383a 	mul	r16,r2,r20
 400e3c0:	102d883a 	mov	r22,r2
 400e3c4:	24c8b03a 	or	r4,r4,r19
 400e3c8:	d8c00017 	ldw	r3,0(sp)
 400e3cc:	2400052e 	bgeu	r4,r16,400e3e4 <__udivdi3+0x23c>
 400e3d0:	2449883a 	add	r4,r4,r17
 400e3d4:	b0bfffc4 	addi	r2,r22,-1
 400e3d8:	24400136 	bltu	r4,r17,400e3e0 <__udivdi3+0x238>
 400e3dc:	2400ca36 	bltu	r4,r16,400e708 <__udivdi3+0x560>
 400e3e0:	102d883a 	mov	r22,r2
 400e3e4:	2421c83a 	sub	r16,r4,r16
 400e3e8:	a80b883a 	mov	r5,r21
 400e3ec:	8009883a 	mov	r4,r16
 400e3f0:	d8c00015 	stw	r3,0(sp)
 400e3f4:	4000e200 	call	4000e20 <__umodsi3>
 400e3f8:	1027883a 	mov	r19,r2
 400e3fc:	a80b883a 	mov	r5,r21
 400e400:	8009883a 	mov	r4,r16
 400e404:	4000dbc0 	call	4000dbc <__udivsi3>
 400e408:	9826943a 	slli	r19,r19,16
 400e40c:	1529383a 	mul	r20,r2,r20
 400e410:	94bfffcc 	andi	r18,r18,65535
 400e414:	94e4b03a 	or	r18,r18,r19
 400e418:	d8c00017 	ldw	r3,0(sp)
 400e41c:	9500052e 	bgeu	r18,r20,400e434 <__udivdi3+0x28c>
 400e420:	8ca5883a 	add	r18,r17,r18
 400e424:	113fffc4 	addi	r4,r2,-1
 400e428:	94409736 	bltu	r18,r17,400e688 <__udivdi3+0x4e0>
 400e42c:	9500962e 	bgeu	r18,r20,400e688 <__udivdi3+0x4e0>
 400e430:	10bfff84 	addi	r2,r2,-2
 400e434:	b00c943a 	slli	r6,r22,16
 400e438:	3084b03a 	or	r2,r6,r2
 400e43c:	00000206 	br	400e448 <__udivdi3+0x2a0>
 400e440:	0007883a 	mov	r3,zero
 400e444:	0005883a 	mov	r2,zero
 400e448:	dfc00a17 	ldw	ra,40(sp)
 400e44c:	df000917 	ldw	fp,36(sp)
 400e450:	ddc00817 	ldw	r23,32(sp)
 400e454:	dd800717 	ldw	r22,28(sp)
 400e458:	dd400617 	ldw	r21,24(sp)
 400e45c:	dd000517 	ldw	r20,20(sp)
 400e460:	dcc00417 	ldw	r19,16(sp)
 400e464:	dc800317 	ldw	r18,12(sp)
 400e468:	dc400217 	ldw	r17,8(sp)
 400e46c:	dc000117 	ldw	r16,4(sp)
 400e470:	dec00b04 	addi	sp,sp,44
 400e474:	f800283a 	ret
 400e478:	00803fc4 	movi	r2,255
 400e47c:	11c5803a 	cmpltu	r2,r2,r7
 400e480:	100490fa 	slli	r2,r2,3
 400e484:	003f9e06 	br	400e300 <__alt_mem_onchip_memory2_0+0xfc00c300>
 400e488:	00803fc4 	movi	r2,255
 400e48c:	1445803a 	cmpltu	r2,r2,r17
 400e490:	100490fa 	slli	r2,r2,3
 400e494:	003fb206 	br	400e360 <__alt_mem_onchip_memory2_0+0xfc00c360>
 400e498:	00804034 	movhi	r2,256
 400e49c:	10bfffc4 	addi	r2,r2,-1
 400e4a0:	11808836 	bltu	r2,r6,400e6c4 <__udivdi3+0x51c>
 400e4a4:	00800404 	movi	r2,16
 400e4a8:	003f5606 	br	400e204 <__alt_mem_onchip_memory2_0+0xfc00c204>
 400e4ac:	30aed83a 	srl	r23,r6,r2
 400e4b0:	3d4e983a 	sll	r7,r7,r21
 400e4b4:	80acd83a 	srl	r22,r16,r2
 400e4b8:	9884d83a 	srl	r2,r19,r2
 400e4bc:	3deeb03a 	or	r23,r7,r23
 400e4c0:	b824d43a 	srli	r18,r23,16
 400e4c4:	8560983a 	sll	r16,r16,r21
 400e4c8:	b009883a 	mov	r4,r22
 400e4cc:	900b883a 	mov	r5,r18
 400e4d0:	3568983a 	sll	r20,r6,r21
 400e4d4:	1420b03a 	or	r16,r2,r16
 400e4d8:	4000e200 	call	4000e20 <__umodsi3>
 400e4dc:	b009883a 	mov	r4,r22
 400e4e0:	900b883a 	mov	r5,r18
 400e4e4:	1023883a 	mov	r17,r2
 400e4e8:	4000dbc0 	call	4000dbc <__udivsi3>
 400e4ec:	8808943a 	slli	r4,r17,16
 400e4f0:	bf3fffcc 	andi	fp,r23,65535
 400e4f4:	8006d43a 	srli	r3,r16,16
 400e4f8:	e0a3383a 	mul	r17,fp,r2
 400e4fc:	100d883a 	mov	r6,r2
 400e500:	1906b03a 	or	r3,r3,r4
 400e504:	1c40042e 	bgeu	r3,r17,400e518 <__udivdi3+0x370>
 400e508:	1dc7883a 	add	r3,r3,r23
 400e50c:	10bfffc4 	addi	r2,r2,-1
 400e510:	1dc0752e 	bgeu	r3,r23,400e6e8 <__udivdi3+0x540>
 400e514:	100d883a 	mov	r6,r2
 400e518:	1c63c83a 	sub	r17,r3,r17
 400e51c:	900b883a 	mov	r5,r18
 400e520:	8809883a 	mov	r4,r17
 400e524:	d9800015 	stw	r6,0(sp)
 400e528:	4000e200 	call	4000e20 <__umodsi3>
 400e52c:	102d883a 	mov	r22,r2
 400e530:	8809883a 	mov	r4,r17
 400e534:	900b883a 	mov	r5,r18
 400e538:	4000dbc0 	call	4000dbc <__udivsi3>
 400e53c:	b02c943a 	slli	r22,r22,16
 400e540:	e089383a 	mul	r4,fp,r2
 400e544:	843fffcc 	andi	r16,r16,65535
 400e548:	85a0b03a 	or	r16,r16,r22
 400e54c:	d9800017 	ldw	r6,0(sp)
 400e550:	8100042e 	bgeu	r16,r4,400e564 <__udivdi3+0x3bc>
 400e554:	85e1883a 	add	r16,r16,r23
 400e558:	10ffffc4 	addi	r3,r2,-1
 400e55c:	85c05e2e 	bgeu	r16,r23,400e6d8 <__udivdi3+0x530>
 400e560:	1805883a 	mov	r2,r3
 400e564:	300c943a 	slli	r6,r6,16
 400e568:	a17fffcc 	andi	r5,r20,65535
 400e56c:	a028d43a 	srli	r20,r20,16
 400e570:	3084b03a 	or	r2,r6,r2
 400e574:	10ffffcc 	andi	r3,r2,65535
 400e578:	100cd43a 	srli	r6,r2,16
 400e57c:	194f383a 	mul	r7,r3,r5
 400e580:	1d07383a 	mul	r3,r3,r20
 400e584:	314b383a 	mul	r5,r6,r5
 400e588:	3810d43a 	srli	r8,r7,16
 400e58c:	8121c83a 	sub	r16,r16,r4
 400e590:	1947883a 	add	r3,r3,r5
 400e594:	40c7883a 	add	r3,r8,r3
 400e598:	350d383a 	mul	r6,r6,r20
 400e59c:	1940022e 	bgeu	r3,r5,400e5a8 <__udivdi3+0x400>
 400e5a0:	01000074 	movhi	r4,1
 400e5a4:	310d883a 	add	r6,r6,r4
 400e5a8:	1828d43a 	srli	r20,r3,16
 400e5ac:	a18d883a 	add	r6,r20,r6
 400e5b0:	81803e36 	bltu	r16,r6,400e6ac <__udivdi3+0x504>
 400e5b4:	81803826 	beq	r16,r6,400e698 <__udivdi3+0x4f0>
 400e5b8:	0007883a 	mov	r3,zero
 400e5bc:	003fa206 	br	400e448 <__alt_mem_onchip_memory2_0+0xfc00c448>
 400e5c0:	88e2983a 	sll	r17,r17,r3
 400e5c4:	80a8d83a 	srl	r20,r16,r2
 400e5c8:	80e0983a 	sll	r16,r16,r3
 400e5cc:	882ad43a 	srli	r21,r17,16
 400e5d0:	9884d83a 	srl	r2,r19,r2
 400e5d4:	a009883a 	mov	r4,r20
 400e5d8:	a80b883a 	mov	r5,r21
 400e5dc:	142eb03a 	or	r23,r2,r16
 400e5e0:	98e4983a 	sll	r18,r19,r3
 400e5e4:	4000e200 	call	4000e20 <__umodsi3>
 400e5e8:	a009883a 	mov	r4,r20
 400e5ec:	a80b883a 	mov	r5,r21
 400e5f0:	1021883a 	mov	r16,r2
 400e5f4:	4000dbc0 	call	4000dbc <__udivsi3>
 400e5f8:	1039883a 	mov	fp,r2
 400e5fc:	8d3fffcc 	andi	r20,r17,65535
 400e600:	8020943a 	slli	r16,r16,16
 400e604:	b804d43a 	srli	r2,r23,16
 400e608:	a72d383a 	mul	r22,r20,fp
 400e60c:	1404b03a 	or	r2,r2,r16
 400e610:	1580062e 	bgeu	r2,r22,400e62c <__udivdi3+0x484>
 400e614:	1445883a 	add	r2,r2,r17
 400e618:	e0ffffc4 	addi	r3,fp,-1
 400e61c:	14403836 	bltu	r2,r17,400e700 <__udivdi3+0x558>
 400e620:	1580372e 	bgeu	r2,r22,400e700 <__udivdi3+0x558>
 400e624:	e73fff84 	addi	fp,fp,-2
 400e628:	1445883a 	add	r2,r2,r17
 400e62c:	15adc83a 	sub	r22,r2,r22
 400e630:	a80b883a 	mov	r5,r21
 400e634:	b009883a 	mov	r4,r22
 400e638:	4000e200 	call	4000e20 <__umodsi3>
 400e63c:	1027883a 	mov	r19,r2
 400e640:	b009883a 	mov	r4,r22
 400e644:	a80b883a 	mov	r5,r21
 400e648:	4000dbc0 	call	4000dbc <__udivsi3>
 400e64c:	9826943a 	slli	r19,r19,16
 400e650:	a0a1383a 	mul	r16,r20,r2
 400e654:	b93fffcc 	andi	r4,r23,65535
 400e658:	24c8b03a 	or	r4,r4,r19
 400e65c:	2400062e 	bgeu	r4,r16,400e678 <__udivdi3+0x4d0>
 400e660:	2449883a 	add	r4,r4,r17
 400e664:	10ffffc4 	addi	r3,r2,-1
 400e668:	24402336 	bltu	r4,r17,400e6f8 <__udivdi3+0x550>
 400e66c:	2400222e 	bgeu	r4,r16,400e6f8 <__udivdi3+0x550>
 400e670:	10bfff84 	addi	r2,r2,-2
 400e674:	2449883a 	add	r4,r4,r17
 400e678:	e038943a 	slli	fp,fp,16
 400e67c:	2421c83a 	sub	r16,r4,r16
 400e680:	e086b03a 	or	r3,fp,r2
 400e684:	003f4306 	br	400e394 <__alt_mem_onchip_memory2_0+0xfc00c394>
 400e688:	2005883a 	mov	r2,r4
 400e68c:	003f6906 	br	400e434 <__alt_mem_onchip_memory2_0+0xfc00c434>
 400e690:	1805883a 	mov	r2,r3
 400e694:	003f0f06 	br	400e2d4 <__alt_mem_onchip_memory2_0+0xfc00c2d4>
 400e698:	1806943a 	slli	r3,r3,16
 400e69c:	9d66983a 	sll	r19,r19,r21
 400e6a0:	39ffffcc 	andi	r7,r7,65535
 400e6a4:	19c7883a 	add	r3,r3,r7
 400e6a8:	98ffc32e 	bgeu	r19,r3,400e5b8 <__alt_mem_onchip_memory2_0+0xfc00c5b8>
 400e6ac:	10bfffc4 	addi	r2,r2,-1
 400e6b0:	003fc106 	br	400e5b8 <__alt_mem_onchip_memory2_0+0xfc00c5b8>
 400e6b4:	00800604 	movi	r2,24
 400e6b8:	003f1106 	br	400e300 <__alt_mem_onchip_memory2_0+0xfc00c300>
 400e6bc:	00800604 	movi	r2,24
 400e6c0:	003f2706 	br	400e360 <__alt_mem_onchip_memory2_0+0xfc00c360>
 400e6c4:	00800604 	movi	r2,24
 400e6c8:	003ece06 	br	400e204 <__alt_mem_onchip_memory2_0+0xfc00c204>
 400e6cc:	0007883a 	mov	r3,zero
 400e6d0:	00800044 	movi	r2,1
 400e6d4:	003f5c06 	br	400e448 <__alt_mem_onchip_memory2_0+0xfc00c448>
 400e6d8:	813fa12e 	bgeu	r16,r4,400e560 <__alt_mem_onchip_memory2_0+0xfc00c560>
 400e6dc:	10bfff84 	addi	r2,r2,-2
 400e6e0:	85e1883a 	add	r16,r16,r23
 400e6e4:	003f9f06 	br	400e564 <__alt_mem_onchip_memory2_0+0xfc00c564>
 400e6e8:	1c7f8a2e 	bgeu	r3,r17,400e514 <__alt_mem_onchip_memory2_0+0xfc00c514>
 400e6ec:	31bfff84 	addi	r6,r6,-2
 400e6f0:	1dc7883a 	add	r3,r3,r23
 400e6f4:	003f8806 	br	400e518 <__alt_mem_onchip_memory2_0+0xfc00c518>
 400e6f8:	1805883a 	mov	r2,r3
 400e6fc:	003fde06 	br	400e678 <__alt_mem_onchip_memory2_0+0xfc00c678>
 400e700:	1839883a 	mov	fp,r3
 400e704:	003fc906 	br	400e62c <__alt_mem_onchip_memory2_0+0xfc00c62c>
 400e708:	b5bfff84 	addi	r22,r22,-2
 400e70c:	2449883a 	add	r4,r4,r17
 400e710:	003f3406 	br	400e3e4 <__alt_mem_onchip_memory2_0+0xfc00c3e4>
 400e714:	b5bfff84 	addi	r22,r22,-2
 400e718:	1445883a 	add	r2,r2,r17
 400e71c:	003edb06 	br	400e28c <__alt_mem_onchip_memory2_0+0xfc00c28c>

0400e720 <__umoddi3>:
 400e720:	defff404 	addi	sp,sp,-48
 400e724:	df000a15 	stw	fp,40(sp)
 400e728:	dc400315 	stw	r17,12(sp)
 400e72c:	dc000215 	stw	r16,8(sp)
 400e730:	dfc00b15 	stw	ra,44(sp)
 400e734:	ddc00915 	stw	r23,36(sp)
 400e738:	dd800815 	stw	r22,32(sp)
 400e73c:	dd400715 	stw	r21,28(sp)
 400e740:	dd000615 	stw	r20,24(sp)
 400e744:	dcc00515 	stw	r19,20(sp)
 400e748:	dc800415 	stw	r18,16(sp)
 400e74c:	2021883a 	mov	r16,r4
 400e750:	2823883a 	mov	r17,r5
 400e754:	2839883a 	mov	fp,r5
 400e758:	38003c1e 	bne	r7,zero,400e84c <__umoddi3+0x12c>
 400e75c:	3027883a 	mov	r19,r6
 400e760:	2029883a 	mov	r20,r4
 400e764:	2980512e 	bgeu	r5,r6,400e8ac <__umoddi3+0x18c>
 400e768:	00bfffd4 	movui	r2,65535
 400e76c:	11809a36 	bltu	r2,r6,400e9d8 <__umoddi3+0x2b8>
 400e770:	01003fc4 	movi	r4,255
 400e774:	2189803a 	cmpltu	r4,r4,r6
 400e778:	200890fa 	slli	r4,r4,3
 400e77c:	3104d83a 	srl	r2,r6,r4
 400e780:	00c100b4 	movhi	r3,1026
 400e784:	18f26304 	addi	r3,r3,-13940
 400e788:	1885883a 	add	r2,r3,r2
 400e78c:	10c00003 	ldbu	r3,0(r2)
 400e790:	00800804 	movi	r2,32
 400e794:	1909883a 	add	r4,r3,r4
 400e798:	1125c83a 	sub	r18,r2,r4
 400e79c:	90000526 	beq	r18,zero,400e7b4 <__umoddi3+0x94>
 400e7a0:	8ca2983a 	sll	r17,r17,r18
 400e7a4:	8108d83a 	srl	r4,r16,r4
 400e7a8:	34a6983a 	sll	r19,r6,r18
 400e7ac:	84a8983a 	sll	r20,r16,r18
 400e7b0:	2478b03a 	or	fp,r4,r17
 400e7b4:	982ed43a 	srli	r23,r19,16
 400e7b8:	e009883a 	mov	r4,fp
 400e7bc:	9dbfffcc 	andi	r22,r19,65535
 400e7c0:	b80b883a 	mov	r5,r23
 400e7c4:	4000e200 	call	4000e20 <__umodsi3>
 400e7c8:	e009883a 	mov	r4,fp
 400e7cc:	b80b883a 	mov	r5,r23
 400e7d0:	102b883a 	mov	r21,r2
 400e7d4:	4000dbc0 	call	4000dbc <__udivsi3>
 400e7d8:	a806943a 	slli	r3,r21,16
 400e7dc:	a008d43a 	srli	r4,r20,16
 400e7e0:	b085383a 	mul	r2,r22,r2
 400e7e4:	20c8b03a 	or	r4,r4,r3
 400e7e8:	2080032e 	bgeu	r4,r2,400e7f8 <__umoddi3+0xd8>
 400e7ec:	24c9883a 	add	r4,r4,r19
 400e7f0:	24c00136 	bltu	r4,r19,400e7f8 <__umoddi3+0xd8>
 400e7f4:	20811036 	bltu	r4,r2,400ec38 <__umoddi3+0x518>
 400e7f8:	20abc83a 	sub	r21,r4,r2
 400e7fc:	b80b883a 	mov	r5,r23
 400e800:	a809883a 	mov	r4,r21
 400e804:	4000e200 	call	4000e20 <__umodsi3>
 400e808:	1023883a 	mov	r17,r2
 400e80c:	b80b883a 	mov	r5,r23
 400e810:	a809883a 	mov	r4,r21
 400e814:	4000dbc0 	call	4000dbc <__udivsi3>
 400e818:	8822943a 	slli	r17,r17,16
 400e81c:	b085383a 	mul	r2,r22,r2
 400e820:	a0ffffcc 	andi	r3,r20,65535
 400e824:	1c46b03a 	or	r3,r3,r17
 400e828:	1880042e 	bgeu	r3,r2,400e83c <__umoddi3+0x11c>
 400e82c:	1cc7883a 	add	r3,r3,r19
 400e830:	1cc00236 	bltu	r3,r19,400e83c <__umoddi3+0x11c>
 400e834:	1880012e 	bgeu	r3,r2,400e83c <__umoddi3+0x11c>
 400e838:	1cc7883a 	add	r3,r3,r19
 400e83c:	1885c83a 	sub	r2,r3,r2
 400e840:	1484d83a 	srl	r2,r2,r18
 400e844:	0007883a 	mov	r3,zero
 400e848:	00004f06 	br	400e988 <__umoddi3+0x268>
 400e84c:	29c04c36 	bltu	r5,r7,400e980 <__umoddi3+0x260>
 400e850:	00bfffd4 	movui	r2,65535
 400e854:	11c0582e 	bgeu	r2,r7,400e9b8 <__umoddi3+0x298>
 400e858:	00804034 	movhi	r2,256
 400e85c:	10bfffc4 	addi	r2,r2,-1
 400e860:	11c0e736 	bltu	r2,r7,400ec00 <__umoddi3+0x4e0>
 400e864:	01000404 	movi	r4,16
 400e868:	3904d83a 	srl	r2,r7,r4
 400e86c:	00c100b4 	movhi	r3,1026
 400e870:	18f26304 	addi	r3,r3,-13940
 400e874:	1885883a 	add	r2,r3,r2
 400e878:	14c00003 	ldbu	r19,0(r2)
 400e87c:	00c00804 	movi	r3,32
 400e880:	9927883a 	add	r19,r19,r4
 400e884:	1ce9c83a 	sub	r20,r3,r19
 400e888:	a000581e 	bne	r20,zero,400e9ec <__umoddi3+0x2cc>
 400e88c:	3c400136 	bltu	r7,r17,400e894 <__umoddi3+0x174>
 400e890:	8180eb36 	bltu	r16,r6,400ec40 <__umoddi3+0x520>
 400e894:	8185c83a 	sub	r2,r16,r6
 400e898:	89e3c83a 	sub	r17,r17,r7
 400e89c:	8089803a 	cmpltu	r4,r16,r2
 400e8a0:	8939c83a 	sub	fp,r17,r4
 400e8a4:	e007883a 	mov	r3,fp
 400e8a8:	00003706 	br	400e988 <__umoddi3+0x268>
 400e8ac:	3000041e 	bne	r6,zero,400e8c0 <__umoddi3+0x1a0>
 400e8b0:	000b883a 	mov	r5,zero
 400e8b4:	01000044 	movi	r4,1
 400e8b8:	4000dbc0 	call	4000dbc <__udivsi3>
 400e8bc:	1027883a 	mov	r19,r2
 400e8c0:	00bfffd4 	movui	r2,65535
 400e8c4:	14c0402e 	bgeu	r2,r19,400e9c8 <__umoddi3+0x2a8>
 400e8c8:	00804034 	movhi	r2,256
 400e8cc:	10bfffc4 	addi	r2,r2,-1
 400e8d0:	14c0cd36 	bltu	r2,r19,400ec08 <__umoddi3+0x4e8>
 400e8d4:	00800404 	movi	r2,16
 400e8d8:	9886d83a 	srl	r3,r19,r2
 400e8dc:	010100b4 	movhi	r4,1026
 400e8e0:	21326304 	addi	r4,r4,-13940
 400e8e4:	20c7883a 	add	r3,r4,r3
 400e8e8:	18c00003 	ldbu	r3,0(r3)
 400e8ec:	1887883a 	add	r3,r3,r2
 400e8f0:	00800804 	movi	r2,32
 400e8f4:	10e5c83a 	sub	r18,r2,r3
 400e8f8:	9000901e 	bne	r18,zero,400eb3c <__umoddi3+0x41c>
 400e8fc:	982cd43a 	srli	r22,r19,16
 400e900:	8ce3c83a 	sub	r17,r17,r19
 400e904:	9d7fffcc 	andi	r21,r19,65535
 400e908:	b00b883a 	mov	r5,r22
 400e90c:	8809883a 	mov	r4,r17
 400e910:	4000e200 	call	4000e20 <__umodsi3>
 400e914:	8809883a 	mov	r4,r17
 400e918:	b00b883a 	mov	r5,r22
 400e91c:	1021883a 	mov	r16,r2
 400e920:	4000dbc0 	call	4000dbc <__udivsi3>
 400e924:	8006943a 	slli	r3,r16,16
 400e928:	a008d43a 	srli	r4,r20,16
 400e92c:	1545383a 	mul	r2,r2,r21
 400e930:	20c8b03a 	or	r4,r4,r3
 400e934:	2080042e 	bgeu	r4,r2,400e948 <__umoddi3+0x228>
 400e938:	24c9883a 	add	r4,r4,r19
 400e93c:	24c00236 	bltu	r4,r19,400e948 <__umoddi3+0x228>
 400e940:	2080012e 	bgeu	r4,r2,400e948 <__umoddi3+0x228>
 400e944:	24c9883a 	add	r4,r4,r19
 400e948:	20a1c83a 	sub	r16,r4,r2
 400e94c:	b00b883a 	mov	r5,r22
 400e950:	8009883a 	mov	r4,r16
 400e954:	4000e200 	call	4000e20 <__umodsi3>
 400e958:	1023883a 	mov	r17,r2
 400e95c:	b00b883a 	mov	r5,r22
 400e960:	8009883a 	mov	r4,r16
 400e964:	4000dbc0 	call	4000dbc <__udivsi3>
 400e968:	8822943a 	slli	r17,r17,16
 400e96c:	1545383a 	mul	r2,r2,r21
 400e970:	a53fffcc 	andi	r20,r20,65535
 400e974:	a446b03a 	or	r3,r20,r17
 400e978:	18bfb02e 	bgeu	r3,r2,400e83c <__alt_mem_onchip_memory2_0+0xfc00c83c>
 400e97c:	003fab06 	br	400e82c <__alt_mem_onchip_memory2_0+0xfc00c82c>
 400e980:	2005883a 	mov	r2,r4
 400e984:	2807883a 	mov	r3,r5
 400e988:	dfc00b17 	ldw	ra,44(sp)
 400e98c:	df000a17 	ldw	fp,40(sp)
 400e990:	ddc00917 	ldw	r23,36(sp)
 400e994:	dd800817 	ldw	r22,32(sp)
 400e998:	dd400717 	ldw	r21,28(sp)
 400e99c:	dd000617 	ldw	r20,24(sp)
 400e9a0:	dcc00517 	ldw	r19,20(sp)
 400e9a4:	dc800417 	ldw	r18,16(sp)
 400e9a8:	dc400317 	ldw	r17,12(sp)
 400e9ac:	dc000217 	ldw	r16,8(sp)
 400e9b0:	dec00c04 	addi	sp,sp,48
 400e9b4:	f800283a 	ret
 400e9b8:	04c03fc4 	movi	r19,255
 400e9bc:	99c9803a 	cmpltu	r4,r19,r7
 400e9c0:	200890fa 	slli	r4,r4,3
 400e9c4:	003fa806 	br	400e868 <__alt_mem_onchip_memory2_0+0xfc00c868>
 400e9c8:	00803fc4 	movi	r2,255
 400e9cc:	14c5803a 	cmpltu	r2,r2,r19
 400e9d0:	100490fa 	slli	r2,r2,3
 400e9d4:	003fc006 	br	400e8d8 <__alt_mem_onchip_memory2_0+0xfc00c8d8>
 400e9d8:	00804034 	movhi	r2,256
 400e9dc:	10bfffc4 	addi	r2,r2,-1
 400e9e0:	11808b36 	bltu	r2,r6,400ec10 <__umoddi3+0x4f0>
 400e9e4:	01000404 	movi	r4,16
 400e9e8:	003f6406 	br	400e77c <__alt_mem_onchip_memory2_0+0xfc00c77c>
 400e9ec:	34c4d83a 	srl	r2,r6,r19
 400e9f0:	3d0e983a 	sll	r7,r7,r20
 400e9f4:	8cf8d83a 	srl	fp,r17,r19
 400e9f8:	8d10983a 	sll	r8,r17,r20
 400e9fc:	38aab03a 	or	r21,r7,r2
 400ea00:	a82cd43a 	srli	r22,r21,16
 400ea04:	84e2d83a 	srl	r17,r16,r19
 400ea08:	e009883a 	mov	r4,fp
 400ea0c:	b00b883a 	mov	r5,r22
 400ea10:	8a22b03a 	or	r17,r17,r8
 400ea14:	3524983a 	sll	r18,r6,r20
 400ea18:	4000e200 	call	4000e20 <__umodsi3>
 400ea1c:	e009883a 	mov	r4,fp
 400ea20:	b00b883a 	mov	r5,r22
 400ea24:	102f883a 	mov	r23,r2
 400ea28:	4000dbc0 	call	4000dbc <__udivsi3>
 400ea2c:	100d883a 	mov	r6,r2
 400ea30:	b808943a 	slli	r4,r23,16
 400ea34:	aa3fffcc 	andi	r8,r21,65535
 400ea38:	8804d43a 	srli	r2,r17,16
 400ea3c:	41af383a 	mul	r23,r8,r6
 400ea40:	8520983a 	sll	r16,r16,r20
 400ea44:	1104b03a 	or	r2,r2,r4
 400ea48:	15c0042e 	bgeu	r2,r23,400ea5c <__umoddi3+0x33c>
 400ea4c:	1545883a 	add	r2,r2,r21
 400ea50:	30ffffc4 	addi	r3,r6,-1
 400ea54:	1540742e 	bgeu	r2,r21,400ec28 <__umoddi3+0x508>
 400ea58:	180d883a 	mov	r6,r3
 400ea5c:	15efc83a 	sub	r23,r2,r23
 400ea60:	b00b883a 	mov	r5,r22
 400ea64:	b809883a 	mov	r4,r23
 400ea68:	d9800115 	stw	r6,4(sp)
 400ea6c:	da000015 	stw	r8,0(sp)
 400ea70:	4000e200 	call	4000e20 <__umodsi3>
 400ea74:	b00b883a 	mov	r5,r22
 400ea78:	b809883a 	mov	r4,r23
 400ea7c:	1039883a 	mov	fp,r2
 400ea80:	4000dbc0 	call	4000dbc <__udivsi3>
 400ea84:	da000017 	ldw	r8,0(sp)
 400ea88:	e038943a 	slli	fp,fp,16
 400ea8c:	100b883a 	mov	r5,r2
 400ea90:	4089383a 	mul	r4,r8,r2
 400ea94:	8a3fffcc 	andi	r8,r17,65535
 400ea98:	4710b03a 	or	r8,r8,fp
 400ea9c:	d9800117 	ldw	r6,4(sp)
 400eaa0:	4100042e 	bgeu	r8,r4,400eab4 <__umoddi3+0x394>
 400eaa4:	4551883a 	add	r8,r8,r21
 400eaa8:	10bfffc4 	addi	r2,r2,-1
 400eaac:	45405a2e 	bgeu	r8,r21,400ec18 <__umoddi3+0x4f8>
 400eab0:	100b883a 	mov	r5,r2
 400eab4:	300c943a 	slli	r6,r6,16
 400eab8:	91ffffcc 	andi	r7,r18,65535
 400eabc:	9004d43a 	srli	r2,r18,16
 400eac0:	314cb03a 	or	r6,r6,r5
 400eac4:	317fffcc 	andi	r5,r6,65535
 400eac8:	300cd43a 	srli	r6,r6,16
 400eacc:	29d3383a 	mul	r9,r5,r7
 400ead0:	288b383a 	mul	r5,r5,r2
 400ead4:	31cf383a 	mul	r7,r6,r7
 400ead8:	4806d43a 	srli	r3,r9,16
 400eadc:	4111c83a 	sub	r8,r8,r4
 400eae0:	29cb883a 	add	r5,r5,r7
 400eae4:	194b883a 	add	r5,r3,r5
 400eae8:	3085383a 	mul	r2,r6,r2
 400eaec:	29c0022e 	bgeu	r5,r7,400eaf8 <__umoddi3+0x3d8>
 400eaf0:	00c00074 	movhi	r3,1
 400eaf4:	10c5883a 	add	r2,r2,r3
 400eaf8:	2808d43a 	srli	r4,r5,16
 400eafc:	280a943a 	slli	r5,r5,16
 400eb00:	4a7fffcc 	andi	r9,r9,65535
 400eb04:	2085883a 	add	r2,r4,r2
 400eb08:	2a4b883a 	add	r5,r5,r9
 400eb0c:	40803636 	bltu	r8,r2,400ebe8 <__umoddi3+0x4c8>
 400eb10:	40804d26 	beq	r8,r2,400ec48 <__umoddi3+0x528>
 400eb14:	4089c83a 	sub	r4,r8,r2
 400eb18:	280f883a 	mov	r7,r5
 400eb1c:	81cfc83a 	sub	r7,r16,r7
 400eb20:	81c7803a 	cmpltu	r3,r16,r7
 400eb24:	20c7c83a 	sub	r3,r4,r3
 400eb28:	1cc4983a 	sll	r2,r3,r19
 400eb2c:	3d0ed83a 	srl	r7,r7,r20
 400eb30:	1d06d83a 	srl	r3,r3,r20
 400eb34:	11c4b03a 	or	r2,r2,r7
 400eb38:	003f9306 	br	400e988 <__alt_mem_onchip_memory2_0+0xfc00c988>
 400eb3c:	9ca6983a 	sll	r19,r19,r18
 400eb40:	88e8d83a 	srl	r20,r17,r3
 400eb44:	80c4d83a 	srl	r2,r16,r3
 400eb48:	982cd43a 	srli	r22,r19,16
 400eb4c:	8ca2983a 	sll	r17,r17,r18
 400eb50:	a009883a 	mov	r4,r20
 400eb54:	b00b883a 	mov	r5,r22
 400eb58:	1478b03a 	or	fp,r2,r17
 400eb5c:	4000e200 	call	4000e20 <__umodsi3>
 400eb60:	a009883a 	mov	r4,r20
 400eb64:	b00b883a 	mov	r5,r22
 400eb68:	1023883a 	mov	r17,r2
 400eb6c:	4000dbc0 	call	4000dbc <__udivsi3>
 400eb70:	9d7fffcc 	andi	r21,r19,65535
 400eb74:	880a943a 	slli	r5,r17,16
 400eb78:	e008d43a 	srli	r4,fp,16
 400eb7c:	a885383a 	mul	r2,r21,r2
 400eb80:	84a8983a 	sll	r20,r16,r18
 400eb84:	2148b03a 	or	r4,r4,r5
 400eb88:	2080042e 	bgeu	r4,r2,400eb9c <__umoddi3+0x47c>
 400eb8c:	24c9883a 	add	r4,r4,r19
 400eb90:	24c00236 	bltu	r4,r19,400eb9c <__umoddi3+0x47c>
 400eb94:	2080012e 	bgeu	r4,r2,400eb9c <__umoddi3+0x47c>
 400eb98:	24c9883a 	add	r4,r4,r19
 400eb9c:	20a3c83a 	sub	r17,r4,r2
 400eba0:	b00b883a 	mov	r5,r22
 400eba4:	8809883a 	mov	r4,r17
 400eba8:	4000e200 	call	4000e20 <__umodsi3>
 400ebac:	102f883a 	mov	r23,r2
 400ebb0:	8809883a 	mov	r4,r17
 400ebb4:	b00b883a 	mov	r5,r22
 400ebb8:	4000dbc0 	call	4000dbc <__udivsi3>
 400ebbc:	b82e943a 	slli	r23,r23,16
 400ebc0:	a885383a 	mul	r2,r21,r2
 400ebc4:	e13fffcc 	andi	r4,fp,65535
 400ebc8:	25c8b03a 	or	r4,r4,r23
 400ebcc:	2080042e 	bgeu	r4,r2,400ebe0 <__umoddi3+0x4c0>
 400ebd0:	24c9883a 	add	r4,r4,r19
 400ebd4:	24c00236 	bltu	r4,r19,400ebe0 <__umoddi3+0x4c0>
 400ebd8:	2080012e 	bgeu	r4,r2,400ebe0 <__umoddi3+0x4c0>
 400ebdc:	24c9883a 	add	r4,r4,r19
 400ebe0:	20a3c83a 	sub	r17,r4,r2
 400ebe4:	003f4806 	br	400e908 <__alt_mem_onchip_memory2_0+0xfc00c908>
 400ebe8:	2c8fc83a 	sub	r7,r5,r18
 400ebec:	1545c83a 	sub	r2,r2,r21
 400ebf0:	29cb803a 	cmpltu	r5,r5,r7
 400ebf4:	1145c83a 	sub	r2,r2,r5
 400ebf8:	4089c83a 	sub	r4,r8,r2
 400ebfc:	003fc706 	br	400eb1c <__alt_mem_onchip_memory2_0+0xfc00cb1c>
 400ec00:	01000604 	movi	r4,24
 400ec04:	003f1806 	br	400e868 <__alt_mem_onchip_memory2_0+0xfc00c868>
 400ec08:	00800604 	movi	r2,24
 400ec0c:	003f3206 	br	400e8d8 <__alt_mem_onchip_memory2_0+0xfc00c8d8>
 400ec10:	01000604 	movi	r4,24
 400ec14:	003ed906 	br	400e77c <__alt_mem_onchip_memory2_0+0xfc00c77c>
 400ec18:	413fa52e 	bgeu	r8,r4,400eab0 <__alt_mem_onchip_memory2_0+0xfc00cab0>
 400ec1c:	297fff84 	addi	r5,r5,-2
 400ec20:	4551883a 	add	r8,r8,r21
 400ec24:	003fa306 	br	400eab4 <__alt_mem_onchip_memory2_0+0xfc00cab4>
 400ec28:	15ff8b2e 	bgeu	r2,r23,400ea58 <__alt_mem_onchip_memory2_0+0xfc00ca58>
 400ec2c:	31bfff84 	addi	r6,r6,-2
 400ec30:	1545883a 	add	r2,r2,r21
 400ec34:	003f8906 	br	400ea5c <__alt_mem_onchip_memory2_0+0xfc00ca5c>
 400ec38:	24c9883a 	add	r4,r4,r19
 400ec3c:	003eee06 	br	400e7f8 <__alt_mem_onchip_memory2_0+0xfc00c7f8>
 400ec40:	8005883a 	mov	r2,r16
 400ec44:	003f1706 	br	400e8a4 <__alt_mem_onchip_memory2_0+0xfc00c8a4>
 400ec48:	817fe736 	bltu	r16,r5,400ebe8 <__alt_mem_onchip_memory2_0+0xfc00cbe8>
 400ec4c:	280f883a 	mov	r7,r5
 400ec50:	0009883a 	mov	r4,zero
 400ec54:	003fb106 	br	400eb1c <__alt_mem_onchip_memory2_0+0xfc00cb1c>

0400ec58 <__adddf3>:
 400ec58:	02c00434 	movhi	r11,16
 400ec5c:	5affffc4 	addi	r11,r11,-1
 400ec60:	2806d7fa 	srli	r3,r5,31
 400ec64:	2ad4703a 	and	r10,r5,r11
 400ec68:	3ad2703a 	and	r9,r7,r11
 400ec6c:	3804d53a 	srli	r2,r7,20
 400ec70:	3018d77a 	srli	r12,r6,29
 400ec74:	280ad53a 	srli	r5,r5,20
 400ec78:	501490fa 	slli	r10,r10,3
 400ec7c:	2010d77a 	srli	r8,r4,29
 400ec80:	481290fa 	slli	r9,r9,3
 400ec84:	380ed7fa 	srli	r7,r7,31
 400ec88:	defffb04 	addi	sp,sp,-20
 400ec8c:	dc800215 	stw	r18,8(sp)
 400ec90:	dc400115 	stw	r17,4(sp)
 400ec94:	dc000015 	stw	r16,0(sp)
 400ec98:	dfc00415 	stw	ra,16(sp)
 400ec9c:	dcc00315 	stw	r19,12(sp)
 400eca0:	1c803fcc 	andi	r18,r3,255
 400eca4:	2c01ffcc 	andi	r16,r5,2047
 400eca8:	5210b03a 	or	r8,r10,r8
 400ecac:	202290fa 	slli	r17,r4,3
 400ecb0:	1081ffcc 	andi	r2,r2,2047
 400ecb4:	4b12b03a 	or	r9,r9,r12
 400ecb8:	300c90fa 	slli	r6,r6,3
 400ecbc:	91c07526 	beq	r18,r7,400ee94 <__adddf3+0x23c>
 400ecc0:	8087c83a 	sub	r3,r16,r2
 400ecc4:	00c0ab0e 	bge	zero,r3,400ef74 <__adddf3+0x31c>
 400ecc8:	10002a1e 	bne	r2,zero,400ed74 <__adddf3+0x11c>
 400eccc:	4984b03a 	or	r2,r9,r6
 400ecd0:	1000961e 	bne	r2,zero,400ef2c <__adddf3+0x2d4>
 400ecd4:	888001cc 	andi	r2,r17,7
 400ecd8:	10000726 	beq	r2,zero,400ecf8 <__adddf3+0xa0>
 400ecdc:	888003cc 	andi	r2,r17,15
 400ece0:	00c00104 	movi	r3,4
 400ece4:	10c00426 	beq	r2,r3,400ecf8 <__adddf3+0xa0>
 400ece8:	88c7883a 	add	r3,r17,r3
 400ecec:	1c63803a 	cmpltu	r17,r3,r17
 400ecf0:	4451883a 	add	r8,r8,r17
 400ecf4:	1823883a 	mov	r17,r3
 400ecf8:	4080202c 	andhi	r2,r8,128
 400ecfc:	10005926 	beq	r2,zero,400ee64 <__adddf3+0x20c>
 400ed00:	84000044 	addi	r16,r16,1
 400ed04:	0081ffc4 	movi	r2,2047
 400ed08:	8080ba26 	beq	r16,r2,400eff4 <__adddf3+0x39c>
 400ed0c:	00bfe034 	movhi	r2,65408
 400ed10:	10bfffc4 	addi	r2,r2,-1
 400ed14:	4090703a 	and	r8,r8,r2
 400ed18:	4004977a 	slli	r2,r8,29
 400ed1c:	4010927a 	slli	r8,r8,9
 400ed20:	8822d0fa 	srli	r17,r17,3
 400ed24:	8401ffcc 	andi	r16,r16,2047
 400ed28:	4010d33a 	srli	r8,r8,12
 400ed2c:	9007883a 	mov	r3,r18
 400ed30:	1444b03a 	or	r2,r2,r17
 400ed34:	8401ffcc 	andi	r16,r16,2047
 400ed38:	8020953a 	slli	r16,r16,20
 400ed3c:	18c03fcc 	andi	r3,r3,255
 400ed40:	01000434 	movhi	r4,16
 400ed44:	213fffc4 	addi	r4,r4,-1
 400ed48:	180697fa 	slli	r3,r3,31
 400ed4c:	4110703a 	and	r8,r8,r4
 400ed50:	4410b03a 	or	r8,r8,r16
 400ed54:	40c6b03a 	or	r3,r8,r3
 400ed58:	dfc00417 	ldw	ra,16(sp)
 400ed5c:	dcc00317 	ldw	r19,12(sp)
 400ed60:	dc800217 	ldw	r18,8(sp)
 400ed64:	dc400117 	ldw	r17,4(sp)
 400ed68:	dc000017 	ldw	r16,0(sp)
 400ed6c:	dec00504 	addi	sp,sp,20
 400ed70:	f800283a 	ret
 400ed74:	0081ffc4 	movi	r2,2047
 400ed78:	80bfd626 	beq	r16,r2,400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400ed7c:	4a402034 	orhi	r9,r9,128
 400ed80:	00800e04 	movi	r2,56
 400ed84:	10c09f16 	blt	r2,r3,400f004 <__adddf3+0x3ac>
 400ed88:	008007c4 	movi	r2,31
 400ed8c:	10c0c216 	blt	r2,r3,400f098 <__adddf3+0x440>
 400ed90:	00800804 	movi	r2,32
 400ed94:	10c5c83a 	sub	r2,r2,r3
 400ed98:	488a983a 	sll	r5,r9,r2
 400ed9c:	30c8d83a 	srl	r4,r6,r3
 400eda0:	3084983a 	sll	r2,r6,r2
 400eda4:	48c6d83a 	srl	r3,r9,r3
 400eda8:	290cb03a 	or	r6,r5,r4
 400edac:	1004c03a 	cmpne	r2,r2,zero
 400edb0:	308cb03a 	or	r6,r6,r2
 400edb4:	898dc83a 	sub	r6,r17,r6
 400edb8:	89a3803a 	cmpltu	r17,r17,r6
 400edbc:	40d1c83a 	sub	r8,r8,r3
 400edc0:	4451c83a 	sub	r8,r8,r17
 400edc4:	3023883a 	mov	r17,r6
 400edc8:	4080202c 	andhi	r2,r8,128
 400edcc:	10002326 	beq	r2,zero,400ee5c <__adddf3+0x204>
 400edd0:	04c02034 	movhi	r19,128
 400edd4:	9cffffc4 	addi	r19,r19,-1
 400edd8:	44e6703a 	and	r19,r8,r19
 400eddc:	98007626 	beq	r19,zero,400efb8 <__adddf3+0x360>
 400ede0:	9809883a 	mov	r4,r19
 400ede4:	400136c0 	call	400136c <__clzsi2>
 400ede8:	10fffe04 	addi	r3,r2,-8
 400edec:	010007c4 	movi	r4,31
 400edf0:	20c07716 	blt	r4,r3,400efd0 <__adddf3+0x378>
 400edf4:	00800804 	movi	r2,32
 400edf8:	10c5c83a 	sub	r2,r2,r3
 400edfc:	8884d83a 	srl	r2,r17,r2
 400ee00:	98d0983a 	sll	r8,r19,r3
 400ee04:	88e2983a 	sll	r17,r17,r3
 400ee08:	1204b03a 	or	r2,r2,r8
 400ee0c:	1c007416 	blt	r3,r16,400efe0 <__adddf3+0x388>
 400ee10:	1c21c83a 	sub	r16,r3,r16
 400ee14:	82000044 	addi	r8,r16,1
 400ee18:	00c007c4 	movi	r3,31
 400ee1c:	1a009116 	blt	r3,r8,400f064 <__adddf3+0x40c>
 400ee20:	00c00804 	movi	r3,32
 400ee24:	1a07c83a 	sub	r3,r3,r8
 400ee28:	8a08d83a 	srl	r4,r17,r8
 400ee2c:	88e2983a 	sll	r17,r17,r3
 400ee30:	10c6983a 	sll	r3,r2,r3
 400ee34:	1210d83a 	srl	r8,r2,r8
 400ee38:	8804c03a 	cmpne	r2,r17,zero
 400ee3c:	1906b03a 	or	r3,r3,r4
 400ee40:	18a2b03a 	or	r17,r3,r2
 400ee44:	0021883a 	mov	r16,zero
 400ee48:	003fa206 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400ee4c:	1890b03a 	or	r8,r3,r2
 400ee50:	40017d26 	beq	r8,zero,400f448 <__adddf3+0x7f0>
 400ee54:	1011883a 	mov	r8,r2
 400ee58:	1823883a 	mov	r17,r3
 400ee5c:	888001cc 	andi	r2,r17,7
 400ee60:	103f9e1e 	bne	r2,zero,400ecdc <__alt_mem_onchip_memory2_0+0xfc00ccdc>
 400ee64:	4004977a 	slli	r2,r8,29
 400ee68:	8822d0fa 	srli	r17,r17,3
 400ee6c:	4010d0fa 	srli	r8,r8,3
 400ee70:	9007883a 	mov	r3,r18
 400ee74:	1444b03a 	or	r2,r2,r17
 400ee78:	0101ffc4 	movi	r4,2047
 400ee7c:	81002426 	beq	r16,r4,400ef10 <__adddf3+0x2b8>
 400ee80:	8120703a 	and	r16,r16,r4
 400ee84:	01000434 	movhi	r4,16
 400ee88:	213fffc4 	addi	r4,r4,-1
 400ee8c:	4110703a 	and	r8,r8,r4
 400ee90:	003fa806 	br	400ed34 <__alt_mem_onchip_memory2_0+0xfc00cd34>
 400ee94:	8089c83a 	sub	r4,r16,r2
 400ee98:	01005e0e 	bge	zero,r4,400f014 <__adddf3+0x3bc>
 400ee9c:	10002b26 	beq	r2,zero,400ef4c <__adddf3+0x2f4>
 400eea0:	0081ffc4 	movi	r2,2047
 400eea4:	80bf8b26 	beq	r16,r2,400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400eea8:	4a402034 	orhi	r9,r9,128
 400eeac:	00800e04 	movi	r2,56
 400eeb0:	1100a40e 	bge	r2,r4,400f144 <__adddf3+0x4ec>
 400eeb4:	498cb03a 	or	r6,r9,r6
 400eeb8:	300ac03a 	cmpne	r5,r6,zero
 400eebc:	0013883a 	mov	r9,zero
 400eec0:	2c4b883a 	add	r5,r5,r17
 400eec4:	2c63803a 	cmpltu	r17,r5,r17
 400eec8:	4a11883a 	add	r8,r9,r8
 400eecc:	8a11883a 	add	r8,r17,r8
 400eed0:	2823883a 	mov	r17,r5
 400eed4:	4080202c 	andhi	r2,r8,128
 400eed8:	103fe026 	beq	r2,zero,400ee5c <__alt_mem_onchip_memory2_0+0xfc00ce5c>
 400eedc:	84000044 	addi	r16,r16,1
 400eee0:	0081ffc4 	movi	r2,2047
 400eee4:	8080d226 	beq	r16,r2,400f230 <__adddf3+0x5d8>
 400eee8:	00bfe034 	movhi	r2,65408
 400eeec:	10bfffc4 	addi	r2,r2,-1
 400eef0:	4090703a 	and	r8,r8,r2
 400eef4:	880ad07a 	srli	r5,r17,1
 400eef8:	400897fa 	slli	r4,r8,31
 400eefc:	88c0004c 	andi	r3,r17,1
 400ef00:	28e2b03a 	or	r17,r5,r3
 400ef04:	4010d07a 	srli	r8,r8,1
 400ef08:	2462b03a 	or	r17,r4,r17
 400ef0c:	003f7106 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400ef10:	4088b03a 	or	r4,r8,r2
 400ef14:	20014526 	beq	r4,zero,400f42c <__adddf3+0x7d4>
 400ef18:	01000434 	movhi	r4,16
 400ef1c:	42000234 	orhi	r8,r8,8
 400ef20:	213fffc4 	addi	r4,r4,-1
 400ef24:	4110703a 	and	r8,r8,r4
 400ef28:	003f8206 	br	400ed34 <__alt_mem_onchip_memory2_0+0xfc00cd34>
 400ef2c:	18ffffc4 	addi	r3,r3,-1
 400ef30:	1800491e 	bne	r3,zero,400f058 <__adddf3+0x400>
 400ef34:	898bc83a 	sub	r5,r17,r6
 400ef38:	8963803a 	cmpltu	r17,r17,r5
 400ef3c:	4251c83a 	sub	r8,r8,r9
 400ef40:	4451c83a 	sub	r8,r8,r17
 400ef44:	2823883a 	mov	r17,r5
 400ef48:	003f9f06 	br	400edc8 <__alt_mem_onchip_memory2_0+0xfc00cdc8>
 400ef4c:	4984b03a 	or	r2,r9,r6
 400ef50:	103f6026 	beq	r2,zero,400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400ef54:	213fffc4 	addi	r4,r4,-1
 400ef58:	2000931e 	bne	r4,zero,400f1a8 <__adddf3+0x550>
 400ef5c:	898d883a 	add	r6,r17,r6
 400ef60:	3463803a 	cmpltu	r17,r6,r17
 400ef64:	4251883a 	add	r8,r8,r9
 400ef68:	8a11883a 	add	r8,r17,r8
 400ef6c:	3023883a 	mov	r17,r6
 400ef70:	003fd806 	br	400eed4 <__alt_mem_onchip_memory2_0+0xfc00ced4>
 400ef74:	1800541e 	bne	r3,zero,400f0c8 <__adddf3+0x470>
 400ef78:	80800044 	addi	r2,r16,1
 400ef7c:	1081ffcc 	andi	r2,r2,2047
 400ef80:	00c00044 	movi	r3,1
 400ef84:	1880a00e 	bge	r3,r2,400f208 <__adddf3+0x5b0>
 400ef88:	8989c83a 	sub	r4,r17,r6
 400ef8c:	8905803a 	cmpltu	r2,r17,r4
 400ef90:	4267c83a 	sub	r19,r8,r9
 400ef94:	98a7c83a 	sub	r19,r19,r2
 400ef98:	9880202c 	andhi	r2,r19,128
 400ef9c:	10006326 	beq	r2,zero,400f12c <__adddf3+0x4d4>
 400efa0:	3463c83a 	sub	r17,r6,r17
 400efa4:	4a07c83a 	sub	r3,r9,r8
 400efa8:	344d803a 	cmpltu	r6,r6,r17
 400efac:	19a7c83a 	sub	r19,r3,r6
 400efb0:	3825883a 	mov	r18,r7
 400efb4:	983f8a1e 	bne	r19,zero,400ede0 <__alt_mem_onchip_memory2_0+0xfc00cde0>
 400efb8:	8809883a 	mov	r4,r17
 400efbc:	400136c0 	call	400136c <__clzsi2>
 400efc0:	10800804 	addi	r2,r2,32
 400efc4:	10fffe04 	addi	r3,r2,-8
 400efc8:	010007c4 	movi	r4,31
 400efcc:	20ff890e 	bge	r4,r3,400edf4 <__alt_mem_onchip_memory2_0+0xfc00cdf4>
 400efd0:	10bff604 	addi	r2,r2,-40
 400efd4:	8884983a 	sll	r2,r17,r2
 400efd8:	0023883a 	mov	r17,zero
 400efdc:	1c3f8c0e 	bge	r3,r16,400ee10 <__alt_mem_onchip_memory2_0+0xfc00ce10>
 400efe0:	023fe034 	movhi	r8,65408
 400efe4:	423fffc4 	addi	r8,r8,-1
 400efe8:	80e1c83a 	sub	r16,r16,r3
 400efec:	1210703a 	and	r8,r2,r8
 400eff0:	003f3806 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400eff4:	9007883a 	mov	r3,r18
 400eff8:	0011883a 	mov	r8,zero
 400effc:	0005883a 	mov	r2,zero
 400f000:	003f4c06 	br	400ed34 <__alt_mem_onchip_memory2_0+0xfc00cd34>
 400f004:	498cb03a 	or	r6,r9,r6
 400f008:	300cc03a 	cmpne	r6,r6,zero
 400f00c:	0007883a 	mov	r3,zero
 400f010:	003f6806 	br	400edb4 <__alt_mem_onchip_memory2_0+0xfc00cdb4>
 400f014:	20009c1e 	bne	r4,zero,400f288 <__adddf3+0x630>
 400f018:	80800044 	addi	r2,r16,1
 400f01c:	1141ffcc 	andi	r5,r2,2047
 400f020:	01000044 	movi	r4,1
 400f024:	2140670e 	bge	r4,r5,400f1c4 <__adddf3+0x56c>
 400f028:	0101ffc4 	movi	r4,2047
 400f02c:	11007f26 	beq	r2,r4,400f22c <__adddf3+0x5d4>
 400f030:	898d883a 	add	r6,r17,r6
 400f034:	4247883a 	add	r3,r8,r9
 400f038:	3451803a 	cmpltu	r8,r6,r17
 400f03c:	40d1883a 	add	r8,r8,r3
 400f040:	402297fa 	slli	r17,r8,31
 400f044:	300cd07a 	srli	r6,r6,1
 400f048:	4010d07a 	srli	r8,r8,1
 400f04c:	1021883a 	mov	r16,r2
 400f050:	89a2b03a 	or	r17,r17,r6
 400f054:	003f1f06 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f058:	0081ffc4 	movi	r2,2047
 400f05c:	80bf481e 	bne	r16,r2,400ed80 <__alt_mem_onchip_memory2_0+0xfc00cd80>
 400f060:	003f1c06 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f064:	843ff844 	addi	r16,r16,-31
 400f068:	01000804 	movi	r4,32
 400f06c:	1406d83a 	srl	r3,r2,r16
 400f070:	41005026 	beq	r8,r4,400f1b4 <__adddf3+0x55c>
 400f074:	01001004 	movi	r4,64
 400f078:	2211c83a 	sub	r8,r4,r8
 400f07c:	1204983a 	sll	r2,r2,r8
 400f080:	88a2b03a 	or	r17,r17,r2
 400f084:	8822c03a 	cmpne	r17,r17,zero
 400f088:	1c62b03a 	or	r17,r3,r17
 400f08c:	0011883a 	mov	r8,zero
 400f090:	0021883a 	mov	r16,zero
 400f094:	003f7106 	br	400ee5c <__alt_mem_onchip_memory2_0+0xfc00ce5c>
 400f098:	193ff804 	addi	r4,r3,-32
 400f09c:	00800804 	movi	r2,32
 400f0a0:	4908d83a 	srl	r4,r9,r4
 400f0a4:	18804526 	beq	r3,r2,400f1bc <__adddf3+0x564>
 400f0a8:	00801004 	movi	r2,64
 400f0ac:	10c5c83a 	sub	r2,r2,r3
 400f0b0:	4886983a 	sll	r3,r9,r2
 400f0b4:	198cb03a 	or	r6,r3,r6
 400f0b8:	300cc03a 	cmpne	r6,r6,zero
 400f0bc:	218cb03a 	or	r6,r4,r6
 400f0c0:	0007883a 	mov	r3,zero
 400f0c4:	003f3b06 	br	400edb4 <__alt_mem_onchip_memory2_0+0xfc00cdb4>
 400f0c8:	80002a26 	beq	r16,zero,400f174 <__adddf3+0x51c>
 400f0cc:	0101ffc4 	movi	r4,2047
 400f0d0:	11006826 	beq	r2,r4,400f274 <__adddf3+0x61c>
 400f0d4:	00c7c83a 	sub	r3,zero,r3
 400f0d8:	42002034 	orhi	r8,r8,128
 400f0dc:	01000e04 	movi	r4,56
 400f0e0:	20c07c16 	blt	r4,r3,400f2d4 <__adddf3+0x67c>
 400f0e4:	010007c4 	movi	r4,31
 400f0e8:	20c0da16 	blt	r4,r3,400f454 <__adddf3+0x7fc>
 400f0ec:	01000804 	movi	r4,32
 400f0f0:	20c9c83a 	sub	r4,r4,r3
 400f0f4:	4114983a 	sll	r10,r8,r4
 400f0f8:	88cad83a 	srl	r5,r17,r3
 400f0fc:	8908983a 	sll	r4,r17,r4
 400f100:	40c6d83a 	srl	r3,r8,r3
 400f104:	5162b03a 	or	r17,r10,r5
 400f108:	2008c03a 	cmpne	r4,r4,zero
 400f10c:	8922b03a 	or	r17,r17,r4
 400f110:	3463c83a 	sub	r17,r6,r17
 400f114:	48c7c83a 	sub	r3,r9,r3
 400f118:	344d803a 	cmpltu	r6,r6,r17
 400f11c:	1991c83a 	sub	r8,r3,r6
 400f120:	1021883a 	mov	r16,r2
 400f124:	3825883a 	mov	r18,r7
 400f128:	003f2706 	br	400edc8 <__alt_mem_onchip_memory2_0+0xfc00cdc8>
 400f12c:	24d0b03a 	or	r8,r4,r19
 400f130:	40001b1e 	bne	r8,zero,400f1a0 <__adddf3+0x548>
 400f134:	0005883a 	mov	r2,zero
 400f138:	0007883a 	mov	r3,zero
 400f13c:	0021883a 	mov	r16,zero
 400f140:	003f4d06 	br	400ee78 <__alt_mem_onchip_memory2_0+0xfc00ce78>
 400f144:	008007c4 	movi	r2,31
 400f148:	11003c16 	blt	r2,r4,400f23c <__adddf3+0x5e4>
 400f14c:	00800804 	movi	r2,32
 400f150:	1105c83a 	sub	r2,r2,r4
 400f154:	488e983a 	sll	r7,r9,r2
 400f158:	310ad83a 	srl	r5,r6,r4
 400f15c:	3084983a 	sll	r2,r6,r2
 400f160:	4912d83a 	srl	r9,r9,r4
 400f164:	394ab03a 	or	r5,r7,r5
 400f168:	1004c03a 	cmpne	r2,r2,zero
 400f16c:	288ab03a 	or	r5,r5,r2
 400f170:	003f5306 	br	400eec0 <__alt_mem_onchip_memory2_0+0xfc00cec0>
 400f174:	4448b03a 	or	r4,r8,r17
 400f178:	20003e26 	beq	r4,zero,400f274 <__adddf3+0x61c>
 400f17c:	00c6303a 	nor	r3,zero,r3
 400f180:	18003a1e 	bne	r3,zero,400f26c <__adddf3+0x614>
 400f184:	3463c83a 	sub	r17,r6,r17
 400f188:	4a07c83a 	sub	r3,r9,r8
 400f18c:	344d803a 	cmpltu	r6,r6,r17
 400f190:	1991c83a 	sub	r8,r3,r6
 400f194:	1021883a 	mov	r16,r2
 400f198:	3825883a 	mov	r18,r7
 400f19c:	003f0a06 	br	400edc8 <__alt_mem_onchip_memory2_0+0xfc00cdc8>
 400f1a0:	2023883a 	mov	r17,r4
 400f1a4:	003f0d06 	br	400eddc <__alt_mem_onchip_memory2_0+0xfc00cddc>
 400f1a8:	0081ffc4 	movi	r2,2047
 400f1ac:	80bf3f1e 	bne	r16,r2,400eeac <__alt_mem_onchip_memory2_0+0xfc00ceac>
 400f1b0:	003ec806 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f1b4:	0005883a 	mov	r2,zero
 400f1b8:	003fb106 	br	400f080 <__alt_mem_onchip_memory2_0+0xfc00d080>
 400f1bc:	0007883a 	mov	r3,zero
 400f1c0:	003fbc06 	br	400f0b4 <__alt_mem_onchip_memory2_0+0xfc00d0b4>
 400f1c4:	4444b03a 	or	r2,r8,r17
 400f1c8:	8000871e 	bne	r16,zero,400f3e8 <__adddf3+0x790>
 400f1cc:	1000ba26 	beq	r2,zero,400f4b8 <__adddf3+0x860>
 400f1d0:	4984b03a 	or	r2,r9,r6
 400f1d4:	103ebf26 	beq	r2,zero,400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f1d8:	8985883a 	add	r2,r17,r6
 400f1dc:	4247883a 	add	r3,r8,r9
 400f1e0:	1451803a 	cmpltu	r8,r2,r17
 400f1e4:	40d1883a 	add	r8,r8,r3
 400f1e8:	40c0202c 	andhi	r3,r8,128
 400f1ec:	1023883a 	mov	r17,r2
 400f1f0:	183f1a26 	beq	r3,zero,400ee5c <__alt_mem_onchip_memory2_0+0xfc00ce5c>
 400f1f4:	00bfe034 	movhi	r2,65408
 400f1f8:	10bfffc4 	addi	r2,r2,-1
 400f1fc:	2021883a 	mov	r16,r4
 400f200:	4090703a 	and	r8,r8,r2
 400f204:	003eb306 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f208:	4444b03a 	or	r2,r8,r17
 400f20c:	8000291e 	bne	r16,zero,400f2b4 <__adddf3+0x65c>
 400f210:	10004b1e 	bne	r2,zero,400f340 <__adddf3+0x6e8>
 400f214:	4990b03a 	or	r8,r9,r6
 400f218:	40008b26 	beq	r8,zero,400f448 <__adddf3+0x7f0>
 400f21c:	4811883a 	mov	r8,r9
 400f220:	3023883a 	mov	r17,r6
 400f224:	3825883a 	mov	r18,r7
 400f228:	003eaa06 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f22c:	1021883a 	mov	r16,r2
 400f230:	0011883a 	mov	r8,zero
 400f234:	0005883a 	mov	r2,zero
 400f238:	003f0f06 	br	400ee78 <__alt_mem_onchip_memory2_0+0xfc00ce78>
 400f23c:	217ff804 	addi	r5,r4,-32
 400f240:	00800804 	movi	r2,32
 400f244:	494ad83a 	srl	r5,r9,r5
 400f248:	20807d26 	beq	r4,r2,400f440 <__adddf3+0x7e8>
 400f24c:	00801004 	movi	r2,64
 400f250:	1109c83a 	sub	r4,r2,r4
 400f254:	4912983a 	sll	r9,r9,r4
 400f258:	498cb03a 	or	r6,r9,r6
 400f25c:	300cc03a 	cmpne	r6,r6,zero
 400f260:	298ab03a 	or	r5,r5,r6
 400f264:	0013883a 	mov	r9,zero
 400f268:	003f1506 	br	400eec0 <__alt_mem_onchip_memory2_0+0xfc00cec0>
 400f26c:	0101ffc4 	movi	r4,2047
 400f270:	113f9a1e 	bne	r2,r4,400f0dc <__alt_mem_onchip_memory2_0+0xfc00d0dc>
 400f274:	4811883a 	mov	r8,r9
 400f278:	3023883a 	mov	r17,r6
 400f27c:	1021883a 	mov	r16,r2
 400f280:	3825883a 	mov	r18,r7
 400f284:	003e9306 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f288:	8000161e 	bne	r16,zero,400f2e4 <__adddf3+0x68c>
 400f28c:	444ab03a 	or	r5,r8,r17
 400f290:	28005126 	beq	r5,zero,400f3d8 <__adddf3+0x780>
 400f294:	0108303a 	nor	r4,zero,r4
 400f298:	20004d1e 	bne	r4,zero,400f3d0 <__adddf3+0x778>
 400f29c:	89a3883a 	add	r17,r17,r6
 400f2a0:	4253883a 	add	r9,r8,r9
 400f2a4:	898d803a 	cmpltu	r6,r17,r6
 400f2a8:	3251883a 	add	r8,r6,r9
 400f2ac:	1021883a 	mov	r16,r2
 400f2b0:	003f0806 	br	400eed4 <__alt_mem_onchip_memory2_0+0xfc00ced4>
 400f2b4:	1000301e 	bne	r2,zero,400f378 <__adddf3+0x720>
 400f2b8:	4984b03a 	or	r2,r9,r6
 400f2bc:	10007126 	beq	r2,zero,400f484 <__adddf3+0x82c>
 400f2c0:	4811883a 	mov	r8,r9
 400f2c4:	3023883a 	mov	r17,r6
 400f2c8:	3825883a 	mov	r18,r7
 400f2cc:	0401ffc4 	movi	r16,2047
 400f2d0:	003e8006 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f2d4:	4462b03a 	or	r17,r8,r17
 400f2d8:	8822c03a 	cmpne	r17,r17,zero
 400f2dc:	0007883a 	mov	r3,zero
 400f2e0:	003f8b06 	br	400f110 <__alt_mem_onchip_memory2_0+0xfc00d110>
 400f2e4:	0141ffc4 	movi	r5,2047
 400f2e8:	11403b26 	beq	r2,r5,400f3d8 <__adddf3+0x780>
 400f2ec:	0109c83a 	sub	r4,zero,r4
 400f2f0:	42002034 	orhi	r8,r8,128
 400f2f4:	01400e04 	movi	r5,56
 400f2f8:	29006716 	blt	r5,r4,400f498 <__adddf3+0x840>
 400f2fc:	014007c4 	movi	r5,31
 400f300:	29007016 	blt	r5,r4,400f4c4 <__adddf3+0x86c>
 400f304:	01400804 	movi	r5,32
 400f308:	290bc83a 	sub	r5,r5,r4
 400f30c:	4154983a 	sll	r10,r8,r5
 400f310:	890ed83a 	srl	r7,r17,r4
 400f314:	894a983a 	sll	r5,r17,r5
 400f318:	4108d83a 	srl	r4,r8,r4
 400f31c:	51e2b03a 	or	r17,r10,r7
 400f320:	280ac03a 	cmpne	r5,r5,zero
 400f324:	8962b03a 	or	r17,r17,r5
 400f328:	89a3883a 	add	r17,r17,r6
 400f32c:	2253883a 	add	r9,r4,r9
 400f330:	898d803a 	cmpltu	r6,r17,r6
 400f334:	3251883a 	add	r8,r6,r9
 400f338:	1021883a 	mov	r16,r2
 400f33c:	003ee506 	br	400eed4 <__alt_mem_onchip_memory2_0+0xfc00ced4>
 400f340:	4984b03a 	or	r2,r9,r6
 400f344:	103e6326 	beq	r2,zero,400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f348:	8987c83a 	sub	r3,r17,r6
 400f34c:	88c9803a 	cmpltu	r4,r17,r3
 400f350:	4245c83a 	sub	r2,r8,r9
 400f354:	1105c83a 	sub	r2,r2,r4
 400f358:	1100202c 	andhi	r4,r2,128
 400f35c:	203ebb26 	beq	r4,zero,400ee4c <__alt_mem_onchip_memory2_0+0xfc00ce4c>
 400f360:	3463c83a 	sub	r17,r6,r17
 400f364:	4a07c83a 	sub	r3,r9,r8
 400f368:	344d803a 	cmpltu	r6,r6,r17
 400f36c:	1991c83a 	sub	r8,r3,r6
 400f370:	3825883a 	mov	r18,r7
 400f374:	003e5706 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f378:	4984b03a 	or	r2,r9,r6
 400f37c:	10002e26 	beq	r2,zero,400f438 <__adddf3+0x7e0>
 400f380:	4004d0fa 	srli	r2,r8,3
 400f384:	8822d0fa 	srli	r17,r17,3
 400f388:	4010977a 	slli	r8,r8,29
 400f38c:	10c0022c 	andhi	r3,r2,8
 400f390:	4462b03a 	or	r17,r8,r17
 400f394:	18000826 	beq	r3,zero,400f3b8 <__adddf3+0x760>
 400f398:	4808d0fa 	srli	r4,r9,3
 400f39c:	20c0022c 	andhi	r3,r4,8
 400f3a0:	1800051e 	bne	r3,zero,400f3b8 <__adddf3+0x760>
 400f3a4:	300cd0fa 	srli	r6,r6,3
 400f3a8:	4806977a 	slli	r3,r9,29
 400f3ac:	2005883a 	mov	r2,r4
 400f3b0:	3825883a 	mov	r18,r7
 400f3b4:	19a2b03a 	or	r17,r3,r6
 400f3b8:	8810d77a 	srli	r8,r17,29
 400f3bc:	100490fa 	slli	r2,r2,3
 400f3c0:	882290fa 	slli	r17,r17,3
 400f3c4:	0401ffc4 	movi	r16,2047
 400f3c8:	4090b03a 	or	r8,r8,r2
 400f3cc:	003e4106 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f3d0:	0141ffc4 	movi	r5,2047
 400f3d4:	117fc71e 	bne	r2,r5,400f2f4 <__alt_mem_onchip_memory2_0+0xfc00d2f4>
 400f3d8:	4811883a 	mov	r8,r9
 400f3dc:	3023883a 	mov	r17,r6
 400f3e0:	1021883a 	mov	r16,r2
 400f3e4:	003e3b06 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f3e8:	10002f26 	beq	r2,zero,400f4a8 <__adddf3+0x850>
 400f3ec:	4984b03a 	or	r2,r9,r6
 400f3f0:	10001126 	beq	r2,zero,400f438 <__adddf3+0x7e0>
 400f3f4:	4004d0fa 	srli	r2,r8,3
 400f3f8:	8822d0fa 	srli	r17,r17,3
 400f3fc:	4010977a 	slli	r8,r8,29
 400f400:	10c0022c 	andhi	r3,r2,8
 400f404:	4462b03a 	or	r17,r8,r17
 400f408:	183feb26 	beq	r3,zero,400f3b8 <__alt_mem_onchip_memory2_0+0xfc00d3b8>
 400f40c:	4808d0fa 	srli	r4,r9,3
 400f410:	20c0022c 	andhi	r3,r4,8
 400f414:	183fe81e 	bne	r3,zero,400f3b8 <__alt_mem_onchip_memory2_0+0xfc00d3b8>
 400f418:	300cd0fa 	srli	r6,r6,3
 400f41c:	4806977a 	slli	r3,r9,29
 400f420:	2005883a 	mov	r2,r4
 400f424:	19a2b03a 	or	r17,r3,r6
 400f428:	003fe306 	br	400f3b8 <__alt_mem_onchip_memory2_0+0xfc00d3b8>
 400f42c:	0011883a 	mov	r8,zero
 400f430:	0005883a 	mov	r2,zero
 400f434:	003e3f06 	br	400ed34 <__alt_mem_onchip_memory2_0+0xfc00cd34>
 400f438:	0401ffc4 	movi	r16,2047
 400f43c:	003e2506 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f440:	0013883a 	mov	r9,zero
 400f444:	003f8406 	br	400f258 <__alt_mem_onchip_memory2_0+0xfc00d258>
 400f448:	0005883a 	mov	r2,zero
 400f44c:	0007883a 	mov	r3,zero
 400f450:	003e8906 	br	400ee78 <__alt_mem_onchip_memory2_0+0xfc00ce78>
 400f454:	197ff804 	addi	r5,r3,-32
 400f458:	01000804 	movi	r4,32
 400f45c:	414ad83a 	srl	r5,r8,r5
 400f460:	19002426 	beq	r3,r4,400f4f4 <__adddf3+0x89c>
 400f464:	01001004 	movi	r4,64
 400f468:	20c7c83a 	sub	r3,r4,r3
 400f46c:	40c6983a 	sll	r3,r8,r3
 400f470:	1c46b03a 	or	r3,r3,r17
 400f474:	1806c03a 	cmpne	r3,r3,zero
 400f478:	28e2b03a 	or	r17,r5,r3
 400f47c:	0007883a 	mov	r3,zero
 400f480:	003f2306 	br	400f110 <__alt_mem_onchip_memory2_0+0xfc00d110>
 400f484:	0007883a 	mov	r3,zero
 400f488:	5811883a 	mov	r8,r11
 400f48c:	00bfffc4 	movi	r2,-1
 400f490:	0401ffc4 	movi	r16,2047
 400f494:	003e7806 	br	400ee78 <__alt_mem_onchip_memory2_0+0xfc00ce78>
 400f498:	4462b03a 	or	r17,r8,r17
 400f49c:	8822c03a 	cmpne	r17,r17,zero
 400f4a0:	0009883a 	mov	r4,zero
 400f4a4:	003fa006 	br	400f328 <__alt_mem_onchip_memory2_0+0xfc00d328>
 400f4a8:	4811883a 	mov	r8,r9
 400f4ac:	3023883a 	mov	r17,r6
 400f4b0:	0401ffc4 	movi	r16,2047
 400f4b4:	003e0706 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f4b8:	4811883a 	mov	r8,r9
 400f4bc:	3023883a 	mov	r17,r6
 400f4c0:	003e0406 	br	400ecd4 <__alt_mem_onchip_memory2_0+0xfc00ccd4>
 400f4c4:	21fff804 	addi	r7,r4,-32
 400f4c8:	01400804 	movi	r5,32
 400f4cc:	41ced83a 	srl	r7,r8,r7
 400f4d0:	21400a26 	beq	r4,r5,400f4fc <__adddf3+0x8a4>
 400f4d4:	01401004 	movi	r5,64
 400f4d8:	2909c83a 	sub	r4,r5,r4
 400f4dc:	4108983a 	sll	r4,r8,r4
 400f4e0:	2448b03a 	or	r4,r4,r17
 400f4e4:	2008c03a 	cmpne	r4,r4,zero
 400f4e8:	3922b03a 	or	r17,r7,r4
 400f4ec:	0009883a 	mov	r4,zero
 400f4f0:	003f8d06 	br	400f328 <__alt_mem_onchip_memory2_0+0xfc00d328>
 400f4f4:	0007883a 	mov	r3,zero
 400f4f8:	003fdd06 	br	400f470 <__alt_mem_onchip_memory2_0+0xfc00d470>
 400f4fc:	0009883a 	mov	r4,zero
 400f500:	003ff706 	br	400f4e0 <__alt_mem_onchip_memory2_0+0xfc00d4e0>

0400f504 <__divdf3>:
 400f504:	defff204 	addi	sp,sp,-56
 400f508:	dd400915 	stw	r21,36(sp)
 400f50c:	282ad53a 	srli	r21,r5,20
 400f510:	dd000815 	stw	r20,32(sp)
 400f514:	2828d7fa 	srli	r20,r5,31
 400f518:	dc000415 	stw	r16,16(sp)
 400f51c:	04000434 	movhi	r16,16
 400f520:	df000c15 	stw	fp,48(sp)
 400f524:	843fffc4 	addi	r16,r16,-1
 400f528:	dfc00d15 	stw	ra,52(sp)
 400f52c:	ddc00b15 	stw	r23,44(sp)
 400f530:	dd800a15 	stw	r22,40(sp)
 400f534:	dcc00715 	stw	r19,28(sp)
 400f538:	dc800615 	stw	r18,24(sp)
 400f53c:	dc400515 	stw	r17,20(sp)
 400f540:	ad41ffcc 	andi	r21,r21,2047
 400f544:	2c20703a 	and	r16,r5,r16
 400f548:	a7003fcc 	andi	fp,r20,255
 400f54c:	a8006126 	beq	r21,zero,400f6d4 <__divdf3+0x1d0>
 400f550:	0081ffc4 	movi	r2,2047
 400f554:	2025883a 	mov	r18,r4
 400f558:	a8803726 	beq	r21,r2,400f638 <__divdf3+0x134>
 400f55c:	80800434 	orhi	r2,r16,16
 400f560:	100490fa 	slli	r2,r2,3
 400f564:	2020d77a 	srli	r16,r4,29
 400f568:	202490fa 	slli	r18,r4,3
 400f56c:	ad7f0044 	addi	r21,r21,-1023
 400f570:	80a0b03a 	or	r16,r16,r2
 400f574:	0027883a 	mov	r19,zero
 400f578:	0013883a 	mov	r9,zero
 400f57c:	3804d53a 	srli	r2,r7,20
 400f580:	382cd7fa 	srli	r22,r7,31
 400f584:	04400434 	movhi	r17,16
 400f588:	8c7fffc4 	addi	r17,r17,-1
 400f58c:	1081ffcc 	andi	r2,r2,2047
 400f590:	3011883a 	mov	r8,r6
 400f594:	3c62703a 	and	r17,r7,r17
 400f598:	b5c03fcc 	andi	r23,r22,255
 400f59c:	10006c26 	beq	r2,zero,400f750 <__divdf3+0x24c>
 400f5a0:	00c1ffc4 	movi	r3,2047
 400f5a4:	10c06426 	beq	r2,r3,400f738 <__divdf3+0x234>
 400f5a8:	88c00434 	orhi	r3,r17,16
 400f5ac:	180690fa 	slli	r3,r3,3
 400f5b0:	3022d77a 	srli	r17,r6,29
 400f5b4:	301090fa 	slli	r8,r6,3
 400f5b8:	10bf0044 	addi	r2,r2,-1023
 400f5bc:	88e2b03a 	or	r17,r17,r3
 400f5c0:	000f883a 	mov	r7,zero
 400f5c4:	a58cf03a 	xor	r6,r20,r22
 400f5c8:	3cc8b03a 	or	r4,r7,r19
 400f5cc:	a8abc83a 	sub	r21,r21,r2
 400f5d0:	008003c4 	movi	r2,15
 400f5d4:	3007883a 	mov	r3,r6
 400f5d8:	34c03fcc 	andi	r19,r6,255
 400f5dc:	11009036 	bltu	r2,r4,400f820 <__divdf3+0x31c>
 400f5e0:	200890ba 	slli	r4,r4,2
 400f5e4:	00810074 	movhi	r2,1025
 400f5e8:	10bd7e04 	addi	r2,r2,-2568
 400f5ec:	2089883a 	add	r4,r4,r2
 400f5f0:	20800017 	ldw	r2,0(r4)
 400f5f4:	1000683a 	jmp	r2
 400f5f8:	0400f820 	cmpeqi	r16,zero,992
 400f5fc:	0400f670 	cmpltui	r16,zero,985
 400f600:	0400f810 	cmplti	r16,zero,992
 400f604:	0400f664 	muli	r16,zero,985
 400f608:	0400f810 	cmplti	r16,zero,992
 400f60c:	0400f7e4 	muli	r16,zero,991
 400f610:	0400f810 	cmplti	r16,zero,992
 400f614:	0400f664 	muli	r16,zero,985
 400f618:	0400f670 	cmpltui	r16,zero,985
 400f61c:	0400f670 	cmpltui	r16,zero,985
 400f620:	0400f7e4 	muli	r16,zero,991
 400f624:	0400f664 	muli	r16,zero,985
 400f628:	0400f654 	movui	r16,985
 400f62c:	0400f654 	movui	r16,985
 400f630:	0400f654 	movui	r16,985
 400f634:	0400fb04 	movi	r16,1004
 400f638:	2404b03a 	or	r2,r4,r16
 400f63c:	1000661e 	bne	r2,zero,400f7d8 <__divdf3+0x2d4>
 400f640:	04c00204 	movi	r19,8
 400f644:	0021883a 	mov	r16,zero
 400f648:	0025883a 	mov	r18,zero
 400f64c:	02400084 	movi	r9,2
 400f650:	003fca06 	br	400f57c <__alt_mem_onchip_memory2_0+0xfc00d57c>
 400f654:	8023883a 	mov	r17,r16
 400f658:	9011883a 	mov	r8,r18
 400f65c:	e02f883a 	mov	r23,fp
 400f660:	480f883a 	mov	r7,r9
 400f664:	00800084 	movi	r2,2
 400f668:	3881311e 	bne	r7,r2,400fb30 <__divdf3+0x62c>
 400f66c:	b827883a 	mov	r19,r23
 400f670:	98c0004c 	andi	r3,r19,1
 400f674:	0081ffc4 	movi	r2,2047
 400f678:	000b883a 	mov	r5,zero
 400f67c:	0025883a 	mov	r18,zero
 400f680:	1004953a 	slli	r2,r2,20
 400f684:	18c03fcc 	andi	r3,r3,255
 400f688:	04400434 	movhi	r17,16
 400f68c:	8c7fffc4 	addi	r17,r17,-1
 400f690:	180697fa 	slli	r3,r3,31
 400f694:	2c4a703a 	and	r5,r5,r17
 400f698:	288ab03a 	or	r5,r5,r2
 400f69c:	28c6b03a 	or	r3,r5,r3
 400f6a0:	9005883a 	mov	r2,r18
 400f6a4:	dfc00d17 	ldw	ra,52(sp)
 400f6a8:	df000c17 	ldw	fp,48(sp)
 400f6ac:	ddc00b17 	ldw	r23,44(sp)
 400f6b0:	dd800a17 	ldw	r22,40(sp)
 400f6b4:	dd400917 	ldw	r21,36(sp)
 400f6b8:	dd000817 	ldw	r20,32(sp)
 400f6bc:	dcc00717 	ldw	r19,28(sp)
 400f6c0:	dc800617 	ldw	r18,24(sp)
 400f6c4:	dc400517 	ldw	r17,20(sp)
 400f6c8:	dc000417 	ldw	r16,16(sp)
 400f6cc:	dec00e04 	addi	sp,sp,56
 400f6d0:	f800283a 	ret
 400f6d4:	2404b03a 	or	r2,r4,r16
 400f6d8:	2027883a 	mov	r19,r4
 400f6dc:	10003926 	beq	r2,zero,400f7c4 <__divdf3+0x2c0>
 400f6e0:	80012e26 	beq	r16,zero,400fb9c <__divdf3+0x698>
 400f6e4:	8009883a 	mov	r4,r16
 400f6e8:	d9800315 	stw	r6,12(sp)
 400f6ec:	d9c00215 	stw	r7,8(sp)
 400f6f0:	400136c0 	call	400136c <__clzsi2>
 400f6f4:	d9800317 	ldw	r6,12(sp)
 400f6f8:	d9c00217 	ldw	r7,8(sp)
 400f6fc:	113ffd44 	addi	r4,r2,-11
 400f700:	00c00704 	movi	r3,28
 400f704:	19012116 	blt	r3,r4,400fb8c <__divdf3+0x688>
 400f708:	00c00744 	movi	r3,29
 400f70c:	147ffe04 	addi	r17,r2,-8
 400f710:	1907c83a 	sub	r3,r3,r4
 400f714:	8460983a 	sll	r16,r16,r17
 400f718:	98c6d83a 	srl	r3,r19,r3
 400f71c:	9c64983a 	sll	r18,r19,r17
 400f720:	1c20b03a 	or	r16,r3,r16
 400f724:	1080fcc4 	addi	r2,r2,1011
 400f728:	00abc83a 	sub	r21,zero,r2
 400f72c:	0027883a 	mov	r19,zero
 400f730:	0013883a 	mov	r9,zero
 400f734:	003f9106 	br	400f57c <__alt_mem_onchip_memory2_0+0xfc00d57c>
 400f738:	3446b03a 	or	r3,r6,r17
 400f73c:	18001f1e 	bne	r3,zero,400f7bc <__divdf3+0x2b8>
 400f740:	0023883a 	mov	r17,zero
 400f744:	0011883a 	mov	r8,zero
 400f748:	01c00084 	movi	r7,2
 400f74c:	003f9d06 	br	400f5c4 <__alt_mem_onchip_memory2_0+0xfc00d5c4>
 400f750:	3446b03a 	or	r3,r6,r17
 400f754:	18001526 	beq	r3,zero,400f7ac <__divdf3+0x2a8>
 400f758:	88011b26 	beq	r17,zero,400fbc8 <__divdf3+0x6c4>
 400f75c:	8809883a 	mov	r4,r17
 400f760:	d9800315 	stw	r6,12(sp)
 400f764:	da400115 	stw	r9,4(sp)
 400f768:	400136c0 	call	400136c <__clzsi2>
 400f76c:	d9800317 	ldw	r6,12(sp)
 400f770:	da400117 	ldw	r9,4(sp)
 400f774:	113ffd44 	addi	r4,r2,-11
 400f778:	00c00704 	movi	r3,28
 400f77c:	19010e16 	blt	r3,r4,400fbb8 <__divdf3+0x6b4>
 400f780:	00c00744 	movi	r3,29
 400f784:	123ffe04 	addi	r8,r2,-8
 400f788:	1907c83a 	sub	r3,r3,r4
 400f78c:	8a22983a 	sll	r17,r17,r8
 400f790:	30c6d83a 	srl	r3,r6,r3
 400f794:	3210983a 	sll	r8,r6,r8
 400f798:	1c62b03a 	or	r17,r3,r17
 400f79c:	1080fcc4 	addi	r2,r2,1011
 400f7a0:	0085c83a 	sub	r2,zero,r2
 400f7a4:	000f883a 	mov	r7,zero
 400f7a8:	003f8606 	br	400f5c4 <__alt_mem_onchip_memory2_0+0xfc00d5c4>
 400f7ac:	0023883a 	mov	r17,zero
 400f7b0:	0011883a 	mov	r8,zero
 400f7b4:	01c00044 	movi	r7,1
 400f7b8:	003f8206 	br	400f5c4 <__alt_mem_onchip_memory2_0+0xfc00d5c4>
 400f7bc:	01c000c4 	movi	r7,3
 400f7c0:	003f8006 	br	400f5c4 <__alt_mem_onchip_memory2_0+0xfc00d5c4>
 400f7c4:	04c00104 	movi	r19,4
 400f7c8:	0021883a 	mov	r16,zero
 400f7cc:	0025883a 	mov	r18,zero
 400f7d0:	02400044 	movi	r9,1
 400f7d4:	003f6906 	br	400f57c <__alt_mem_onchip_memory2_0+0xfc00d57c>
 400f7d8:	04c00304 	movi	r19,12
 400f7dc:	024000c4 	movi	r9,3
 400f7e0:	003f6606 	br	400f57c <__alt_mem_onchip_memory2_0+0xfc00d57c>
 400f7e4:	01400434 	movhi	r5,16
 400f7e8:	0007883a 	mov	r3,zero
 400f7ec:	297fffc4 	addi	r5,r5,-1
 400f7f0:	04bfffc4 	movi	r18,-1
 400f7f4:	0081ffc4 	movi	r2,2047
 400f7f8:	003fa106 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400f7fc:	00c00044 	movi	r3,1
 400f800:	1887c83a 	sub	r3,r3,r2
 400f804:	01000e04 	movi	r4,56
 400f808:	20c1210e 	bge	r4,r3,400fc90 <__divdf3+0x78c>
 400f80c:	98c0004c 	andi	r3,r19,1
 400f810:	0005883a 	mov	r2,zero
 400f814:	000b883a 	mov	r5,zero
 400f818:	0025883a 	mov	r18,zero
 400f81c:	003f9806 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400f820:	8c00fd36 	bltu	r17,r16,400fc18 <__divdf3+0x714>
 400f824:	8440fb26 	beq	r16,r17,400fc14 <__divdf3+0x710>
 400f828:	8007883a 	mov	r3,r16
 400f82c:	ad7fffc4 	addi	r21,r21,-1
 400f830:	0021883a 	mov	r16,zero
 400f834:	4004d63a 	srli	r2,r8,24
 400f838:	8822923a 	slli	r17,r17,8
 400f83c:	1809883a 	mov	r4,r3
 400f840:	402c923a 	slli	r22,r8,8
 400f844:	88b8b03a 	or	fp,r17,r2
 400f848:	e028d43a 	srli	r20,fp,16
 400f84c:	d8c00015 	stw	r3,0(sp)
 400f850:	e5ffffcc 	andi	r23,fp,65535
 400f854:	a00b883a 	mov	r5,r20
 400f858:	4000dbc0 	call	4000dbc <__udivsi3>
 400f85c:	d8c00017 	ldw	r3,0(sp)
 400f860:	a00b883a 	mov	r5,r20
 400f864:	d8800315 	stw	r2,12(sp)
 400f868:	1809883a 	mov	r4,r3
 400f86c:	4000e200 	call	4000e20 <__umodsi3>
 400f870:	d9800317 	ldw	r6,12(sp)
 400f874:	1006943a 	slli	r3,r2,16
 400f878:	9004d43a 	srli	r2,r18,16
 400f87c:	b9a3383a 	mul	r17,r23,r6
 400f880:	10c4b03a 	or	r2,r2,r3
 400f884:	1440062e 	bgeu	r2,r17,400f8a0 <__divdf3+0x39c>
 400f888:	1705883a 	add	r2,r2,fp
 400f88c:	30ffffc4 	addi	r3,r6,-1
 400f890:	1700ee36 	bltu	r2,fp,400fc4c <__divdf3+0x748>
 400f894:	1440ed2e 	bgeu	r2,r17,400fc4c <__divdf3+0x748>
 400f898:	31bfff84 	addi	r6,r6,-2
 400f89c:	1705883a 	add	r2,r2,fp
 400f8a0:	1463c83a 	sub	r17,r2,r17
 400f8a4:	a00b883a 	mov	r5,r20
 400f8a8:	8809883a 	mov	r4,r17
 400f8ac:	d9800315 	stw	r6,12(sp)
 400f8b0:	4000dbc0 	call	4000dbc <__udivsi3>
 400f8b4:	a00b883a 	mov	r5,r20
 400f8b8:	8809883a 	mov	r4,r17
 400f8bc:	d8800215 	stw	r2,8(sp)
 400f8c0:	4000e200 	call	4000e20 <__umodsi3>
 400f8c4:	d9c00217 	ldw	r7,8(sp)
 400f8c8:	1004943a 	slli	r2,r2,16
 400f8cc:	94bfffcc 	andi	r18,r18,65535
 400f8d0:	b9d1383a 	mul	r8,r23,r7
 400f8d4:	90a4b03a 	or	r18,r18,r2
 400f8d8:	d9800317 	ldw	r6,12(sp)
 400f8dc:	9200062e 	bgeu	r18,r8,400f8f8 <__divdf3+0x3f4>
 400f8e0:	9725883a 	add	r18,r18,fp
 400f8e4:	38bfffc4 	addi	r2,r7,-1
 400f8e8:	9700d636 	bltu	r18,fp,400fc44 <__divdf3+0x740>
 400f8ec:	9200d52e 	bgeu	r18,r8,400fc44 <__divdf3+0x740>
 400f8f0:	39ffff84 	addi	r7,r7,-2
 400f8f4:	9725883a 	add	r18,r18,fp
 400f8f8:	3004943a 	slli	r2,r6,16
 400f8fc:	b012d43a 	srli	r9,r22,16
 400f900:	b1bfffcc 	andi	r6,r22,65535
 400f904:	11e2b03a 	or	r17,r2,r7
 400f908:	8806d43a 	srli	r3,r17,16
 400f90c:	893fffcc 	andi	r4,r17,65535
 400f910:	218b383a 	mul	r5,r4,r6
 400f914:	30c5383a 	mul	r2,r6,r3
 400f918:	2249383a 	mul	r4,r4,r9
 400f91c:	280ed43a 	srli	r7,r5,16
 400f920:	9225c83a 	sub	r18,r18,r8
 400f924:	2089883a 	add	r4,r4,r2
 400f928:	3909883a 	add	r4,r7,r4
 400f92c:	1a47383a 	mul	r3,r3,r9
 400f930:	2080022e 	bgeu	r4,r2,400f93c <__divdf3+0x438>
 400f934:	00800074 	movhi	r2,1
 400f938:	1887883a 	add	r3,r3,r2
 400f93c:	2004d43a 	srli	r2,r4,16
 400f940:	2008943a 	slli	r4,r4,16
 400f944:	297fffcc 	andi	r5,r5,65535
 400f948:	10c7883a 	add	r3,r2,r3
 400f94c:	2149883a 	add	r4,r4,r5
 400f950:	90c0a536 	bltu	r18,r3,400fbe8 <__divdf3+0x6e4>
 400f954:	90c0bf26 	beq	r18,r3,400fc54 <__divdf3+0x750>
 400f958:	90c7c83a 	sub	r3,r18,r3
 400f95c:	810fc83a 	sub	r7,r16,r4
 400f960:	81e5803a 	cmpltu	r18,r16,r7
 400f964:	1ca5c83a 	sub	r18,r3,r18
 400f968:	e480c126 	beq	fp,r18,400fc70 <__divdf3+0x76c>
 400f96c:	a00b883a 	mov	r5,r20
 400f970:	9009883a 	mov	r4,r18
 400f974:	d9800315 	stw	r6,12(sp)
 400f978:	d9c00215 	stw	r7,8(sp)
 400f97c:	da400115 	stw	r9,4(sp)
 400f980:	4000dbc0 	call	4000dbc <__udivsi3>
 400f984:	a00b883a 	mov	r5,r20
 400f988:	9009883a 	mov	r4,r18
 400f98c:	d8800015 	stw	r2,0(sp)
 400f990:	4000e200 	call	4000e20 <__umodsi3>
 400f994:	d9c00217 	ldw	r7,8(sp)
 400f998:	da000017 	ldw	r8,0(sp)
 400f99c:	1006943a 	slli	r3,r2,16
 400f9a0:	3804d43a 	srli	r2,r7,16
 400f9a4:	ba21383a 	mul	r16,r23,r8
 400f9a8:	d9800317 	ldw	r6,12(sp)
 400f9ac:	10c4b03a 	or	r2,r2,r3
 400f9b0:	da400117 	ldw	r9,4(sp)
 400f9b4:	1400062e 	bgeu	r2,r16,400f9d0 <__divdf3+0x4cc>
 400f9b8:	1705883a 	add	r2,r2,fp
 400f9bc:	40ffffc4 	addi	r3,r8,-1
 400f9c0:	1700ad36 	bltu	r2,fp,400fc78 <__divdf3+0x774>
 400f9c4:	1400ac2e 	bgeu	r2,r16,400fc78 <__divdf3+0x774>
 400f9c8:	423fff84 	addi	r8,r8,-2
 400f9cc:	1705883a 	add	r2,r2,fp
 400f9d0:	1421c83a 	sub	r16,r2,r16
 400f9d4:	a00b883a 	mov	r5,r20
 400f9d8:	8009883a 	mov	r4,r16
 400f9dc:	d9800315 	stw	r6,12(sp)
 400f9e0:	d9c00215 	stw	r7,8(sp)
 400f9e4:	da000015 	stw	r8,0(sp)
 400f9e8:	da400115 	stw	r9,4(sp)
 400f9ec:	4000dbc0 	call	4000dbc <__udivsi3>
 400f9f0:	8009883a 	mov	r4,r16
 400f9f4:	a00b883a 	mov	r5,r20
 400f9f8:	1025883a 	mov	r18,r2
 400f9fc:	4000e200 	call	4000e20 <__umodsi3>
 400fa00:	d9c00217 	ldw	r7,8(sp)
 400fa04:	1004943a 	slli	r2,r2,16
 400fa08:	bcaf383a 	mul	r23,r23,r18
 400fa0c:	393fffcc 	andi	r4,r7,65535
 400fa10:	2088b03a 	or	r4,r4,r2
 400fa14:	d9800317 	ldw	r6,12(sp)
 400fa18:	da000017 	ldw	r8,0(sp)
 400fa1c:	da400117 	ldw	r9,4(sp)
 400fa20:	25c0062e 	bgeu	r4,r23,400fa3c <__divdf3+0x538>
 400fa24:	2709883a 	add	r4,r4,fp
 400fa28:	90bfffc4 	addi	r2,r18,-1
 400fa2c:	27009436 	bltu	r4,fp,400fc80 <__divdf3+0x77c>
 400fa30:	25c0932e 	bgeu	r4,r23,400fc80 <__divdf3+0x77c>
 400fa34:	94bfff84 	addi	r18,r18,-2
 400fa38:	2709883a 	add	r4,r4,fp
 400fa3c:	4004943a 	slli	r2,r8,16
 400fa40:	25efc83a 	sub	r23,r4,r23
 400fa44:	1490b03a 	or	r8,r2,r18
 400fa48:	4008d43a 	srli	r4,r8,16
 400fa4c:	40ffffcc 	andi	r3,r8,65535
 400fa50:	30c5383a 	mul	r2,r6,r3
 400fa54:	1a47383a 	mul	r3,r3,r9
 400fa58:	310d383a 	mul	r6,r6,r4
 400fa5c:	100ad43a 	srli	r5,r2,16
 400fa60:	4913383a 	mul	r9,r9,r4
 400fa64:	1987883a 	add	r3,r3,r6
 400fa68:	28c7883a 	add	r3,r5,r3
 400fa6c:	1980022e 	bgeu	r3,r6,400fa78 <__divdf3+0x574>
 400fa70:	01000074 	movhi	r4,1
 400fa74:	4913883a 	add	r9,r9,r4
 400fa78:	1808d43a 	srli	r4,r3,16
 400fa7c:	1806943a 	slli	r3,r3,16
 400fa80:	10bfffcc 	andi	r2,r2,65535
 400fa84:	2253883a 	add	r9,r4,r9
 400fa88:	1887883a 	add	r3,r3,r2
 400fa8c:	ba403836 	bltu	r23,r9,400fb70 <__divdf3+0x66c>
 400fa90:	ba403626 	beq	r23,r9,400fb6c <__divdf3+0x668>
 400fa94:	42000054 	ori	r8,r8,1
 400fa98:	a880ffc4 	addi	r2,r21,1023
 400fa9c:	00bf570e 	bge	zero,r2,400f7fc <__alt_mem_onchip_memory2_0+0xfc00d7fc>
 400faa0:	40c001cc 	andi	r3,r8,7
 400faa4:	18000726 	beq	r3,zero,400fac4 <__divdf3+0x5c0>
 400faa8:	40c003cc 	andi	r3,r8,15
 400faac:	01000104 	movi	r4,4
 400fab0:	19000426 	beq	r3,r4,400fac4 <__divdf3+0x5c0>
 400fab4:	4107883a 	add	r3,r8,r4
 400fab8:	1a11803a 	cmpltu	r8,r3,r8
 400fabc:	8a23883a 	add	r17,r17,r8
 400fac0:	1811883a 	mov	r8,r3
 400fac4:	88c0402c 	andhi	r3,r17,256
 400fac8:	18000426 	beq	r3,zero,400fadc <__divdf3+0x5d8>
 400facc:	00ffc034 	movhi	r3,65280
 400fad0:	18ffffc4 	addi	r3,r3,-1
 400fad4:	a8810004 	addi	r2,r21,1024
 400fad8:	88e2703a 	and	r17,r17,r3
 400fadc:	00c1ff84 	movi	r3,2046
 400fae0:	18bee316 	blt	r3,r2,400f670 <__alt_mem_onchip_memory2_0+0xfc00d670>
 400fae4:	8824977a 	slli	r18,r17,29
 400fae8:	4010d0fa 	srli	r8,r8,3
 400faec:	8822927a 	slli	r17,r17,9
 400faf0:	1081ffcc 	andi	r2,r2,2047
 400faf4:	9224b03a 	or	r18,r18,r8
 400faf8:	880ad33a 	srli	r5,r17,12
 400fafc:	98c0004c 	andi	r3,r19,1
 400fb00:	003edf06 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400fb04:	8080022c 	andhi	r2,r16,8
 400fb08:	10001226 	beq	r2,zero,400fb54 <__divdf3+0x650>
 400fb0c:	8880022c 	andhi	r2,r17,8
 400fb10:	1000101e 	bne	r2,zero,400fb54 <__divdf3+0x650>
 400fb14:	00800434 	movhi	r2,16
 400fb18:	89400234 	orhi	r5,r17,8
 400fb1c:	10bfffc4 	addi	r2,r2,-1
 400fb20:	b007883a 	mov	r3,r22
 400fb24:	288a703a 	and	r5,r5,r2
 400fb28:	4025883a 	mov	r18,r8
 400fb2c:	003f3106 	br	400f7f4 <__alt_mem_onchip_memory2_0+0xfc00d7f4>
 400fb30:	008000c4 	movi	r2,3
 400fb34:	3880a626 	beq	r7,r2,400fdd0 <__divdf3+0x8cc>
 400fb38:	00800044 	movi	r2,1
 400fb3c:	3880521e 	bne	r7,r2,400fc88 <__divdf3+0x784>
 400fb40:	b807883a 	mov	r3,r23
 400fb44:	0005883a 	mov	r2,zero
 400fb48:	000b883a 	mov	r5,zero
 400fb4c:	0025883a 	mov	r18,zero
 400fb50:	003ecb06 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400fb54:	00800434 	movhi	r2,16
 400fb58:	81400234 	orhi	r5,r16,8
 400fb5c:	10bfffc4 	addi	r2,r2,-1
 400fb60:	a007883a 	mov	r3,r20
 400fb64:	288a703a 	and	r5,r5,r2
 400fb68:	003f2206 	br	400f7f4 <__alt_mem_onchip_memory2_0+0xfc00d7f4>
 400fb6c:	183fca26 	beq	r3,zero,400fa98 <__alt_mem_onchip_memory2_0+0xfc00da98>
 400fb70:	e5ef883a 	add	r23,fp,r23
 400fb74:	40bfffc4 	addi	r2,r8,-1
 400fb78:	bf00392e 	bgeu	r23,fp,400fc60 <__divdf3+0x75c>
 400fb7c:	1011883a 	mov	r8,r2
 400fb80:	ba7fc41e 	bne	r23,r9,400fa94 <__alt_mem_onchip_memory2_0+0xfc00da94>
 400fb84:	b0ffc31e 	bne	r22,r3,400fa94 <__alt_mem_onchip_memory2_0+0xfc00da94>
 400fb88:	003fc306 	br	400fa98 <__alt_mem_onchip_memory2_0+0xfc00da98>
 400fb8c:	143ff604 	addi	r16,r2,-40
 400fb90:	9c20983a 	sll	r16,r19,r16
 400fb94:	0025883a 	mov	r18,zero
 400fb98:	003ee206 	br	400f724 <__alt_mem_onchip_memory2_0+0xfc00d724>
 400fb9c:	d9800315 	stw	r6,12(sp)
 400fba0:	d9c00215 	stw	r7,8(sp)
 400fba4:	400136c0 	call	400136c <__clzsi2>
 400fba8:	10800804 	addi	r2,r2,32
 400fbac:	d9c00217 	ldw	r7,8(sp)
 400fbb0:	d9800317 	ldw	r6,12(sp)
 400fbb4:	003ed106 	br	400f6fc <__alt_mem_onchip_memory2_0+0xfc00d6fc>
 400fbb8:	147ff604 	addi	r17,r2,-40
 400fbbc:	3462983a 	sll	r17,r6,r17
 400fbc0:	0011883a 	mov	r8,zero
 400fbc4:	003ef506 	br	400f79c <__alt_mem_onchip_memory2_0+0xfc00d79c>
 400fbc8:	3009883a 	mov	r4,r6
 400fbcc:	d9800315 	stw	r6,12(sp)
 400fbd0:	da400115 	stw	r9,4(sp)
 400fbd4:	400136c0 	call	400136c <__clzsi2>
 400fbd8:	10800804 	addi	r2,r2,32
 400fbdc:	da400117 	ldw	r9,4(sp)
 400fbe0:	d9800317 	ldw	r6,12(sp)
 400fbe4:	003ee306 	br	400f774 <__alt_mem_onchip_memory2_0+0xfc00d774>
 400fbe8:	85a1883a 	add	r16,r16,r22
 400fbec:	8585803a 	cmpltu	r2,r16,r22
 400fbf0:	1705883a 	add	r2,r2,fp
 400fbf4:	14a5883a 	add	r18,r2,r18
 400fbf8:	88bfffc4 	addi	r2,r17,-1
 400fbfc:	e4800c2e 	bgeu	fp,r18,400fc30 <__divdf3+0x72c>
 400fc00:	90c03e36 	bltu	r18,r3,400fcfc <__divdf3+0x7f8>
 400fc04:	1c806926 	beq	r3,r18,400fdac <__divdf3+0x8a8>
 400fc08:	90c7c83a 	sub	r3,r18,r3
 400fc0c:	1023883a 	mov	r17,r2
 400fc10:	003f5206 	br	400f95c <__alt_mem_onchip_memory2_0+0xfc00d95c>
 400fc14:	923f0436 	bltu	r18,r8,400f828 <__alt_mem_onchip_memory2_0+0xfc00d828>
 400fc18:	800897fa 	slli	r4,r16,31
 400fc1c:	9004d07a 	srli	r2,r18,1
 400fc20:	8006d07a 	srli	r3,r16,1
 400fc24:	902097fa 	slli	r16,r18,31
 400fc28:	20a4b03a 	or	r18,r4,r2
 400fc2c:	003f0106 	br	400f834 <__alt_mem_onchip_memory2_0+0xfc00d834>
 400fc30:	e4bff51e 	bne	fp,r18,400fc08 <__alt_mem_onchip_memory2_0+0xfc00dc08>
 400fc34:	85bff22e 	bgeu	r16,r22,400fc00 <__alt_mem_onchip_memory2_0+0xfc00dc00>
 400fc38:	e0c7c83a 	sub	r3,fp,r3
 400fc3c:	1023883a 	mov	r17,r2
 400fc40:	003f4606 	br	400f95c <__alt_mem_onchip_memory2_0+0xfc00d95c>
 400fc44:	100f883a 	mov	r7,r2
 400fc48:	003f2b06 	br	400f8f8 <__alt_mem_onchip_memory2_0+0xfc00d8f8>
 400fc4c:	180d883a 	mov	r6,r3
 400fc50:	003f1306 	br	400f8a0 <__alt_mem_onchip_memory2_0+0xfc00d8a0>
 400fc54:	813fe436 	bltu	r16,r4,400fbe8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 400fc58:	0007883a 	mov	r3,zero
 400fc5c:	003f3f06 	br	400f95c <__alt_mem_onchip_memory2_0+0xfc00d95c>
 400fc60:	ba402c36 	bltu	r23,r9,400fd14 <__divdf3+0x810>
 400fc64:	4dc05426 	beq	r9,r23,400fdb8 <__divdf3+0x8b4>
 400fc68:	1011883a 	mov	r8,r2
 400fc6c:	003f8906 	br	400fa94 <__alt_mem_onchip_memory2_0+0xfc00da94>
 400fc70:	023fffc4 	movi	r8,-1
 400fc74:	003f8806 	br	400fa98 <__alt_mem_onchip_memory2_0+0xfc00da98>
 400fc78:	1811883a 	mov	r8,r3
 400fc7c:	003f5406 	br	400f9d0 <__alt_mem_onchip_memory2_0+0xfc00d9d0>
 400fc80:	1025883a 	mov	r18,r2
 400fc84:	003f6d06 	br	400fa3c <__alt_mem_onchip_memory2_0+0xfc00da3c>
 400fc88:	b827883a 	mov	r19,r23
 400fc8c:	003f8206 	br	400fa98 <__alt_mem_onchip_memory2_0+0xfc00da98>
 400fc90:	010007c4 	movi	r4,31
 400fc94:	20c02616 	blt	r4,r3,400fd30 <__divdf3+0x82c>
 400fc98:	00800804 	movi	r2,32
 400fc9c:	10c5c83a 	sub	r2,r2,r3
 400fca0:	888a983a 	sll	r5,r17,r2
 400fca4:	40c8d83a 	srl	r4,r8,r3
 400fca8:	4084983a 	sll	r2,r8,r2
 400fcac:	88e2d83a 	srl	r17,r17,r3
 400fcb0:	2906b03a 	or	r3,r5,r4
 400fcb4:	1004c03a 	cmpne	r2,r2,zero
 400fcb8:	1886b03a 	or	r3,r3,r2
 400fcbc:	188001cc 	andi	r2,r3,7
 400fcc0:	10000726 	beq	r2,zero,400fce0 <__divdf3+0x7dc>
 400fcc4:	188003cc 	andi	r2,r3,15
 400fcc8:	01000104 	movi	r4,4
 400fccc:	11000426 	beq	r2,r4,400fce0 <__divdf3+0x7dc>
 400fcd0:	1805883a 	mov	r2,r3
 400fcd4:	10c00104 	addi	r3,r2,4
 400fcd8:	1885803a 	cmpltu	r2,r3,r2
 400fcdc:	88a3883a 	add	r17,r17,r2
 400fce0:	8880202c 	andhi	r2,r17,128
 400fce4:	10002726 	beq	r2,zero,400fd84 <__divdf3+0x880>
 400fce8:	98c0004c 	andi	r3,r19,1
 400fcec:	00800044 	movi	r2,1
 400fcf0:	000b883a 	mov	r5,zero
 400fcf4:	0025883a 	mov	r18,zero
 400fcf8:	003e6106 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400fcfc:	85a1883a 	add	r16,r16,r22
 400fd00:	8585803a 	cmpltu	r2,r16,r22
 400fd04:	1705883a 	add	r2,r2,fp
 400fd08:	14a5883a 	add	r18,r2,r18
 400fd0c:	8c7fff84 	addi	r17,r17,-2
 400fd10:	003f1106 	br	400f958 <__alt_mem_onchip_memory2_0+0xfc00d958>
 400fd14:	b589883a 	add	r4,r22,r22
 400fd18:	25ad803a 	cmpltu	r22,r4,r22
 400fd1c:	b739883a 	add	fp,r22,fp
 400fd20:	40bfff84 	addi	r2,r8,-2
 400fd24:	bf2f883a 	add	r23,r23,fp
 400fd28:	202d883a 	mov	r22,r4
 400fd2c:	003f9306 	br	400fb7c <__alt_mem_onchip_memory2_0+0xfc00db7c>
 400fd30:	013ff844 	movi	r4,-31
 400fd34:	2085c83a 	sub	r2,r4,r2
 400fd38:	8888d83a 	srl	r4,r17,r2
 400fd3c:	00800804 	movi	r2,32
 400fd40:	18802126 	beq	r3,r2,400fdc8 <__divdf3+0x8c4>
 400fd44:	00801004 	movi	r2,64
 400fd48:	10c5c83a 	sub	r2,r2,r3
 400fd4c:	8884983a 	sll	r2,r17,r2
 400fd50:	1204b03a 	or	r2,r2,r8
 400fd54:	1004c03a 	cmpne	r2,r2,zero
 400fd58:	2084b03a 	or	r2,r4,r2
 400fd5c:	144001cc 	andi	r17,r2,7
 400fd60:	88000d1e 	bne	r17,zero,400fd98 <__divdf3+0x894>
 400fd64:	000b883a 	mov	r5,zero
 400fd68:	1024d0fa 	srli	r18,r2,3
 400fd6c:	98c0004c 	andi	r3,r19,1
 400fd70:	0005883a 	mov	r2,zero
 400fd74:	9464b03a 	or	r18,r18,r17
 400fd78:	003e4106 	br	400f680 <__alt_mem_onchip_memory2_0+0xfc00d680>
 400fd7c:	1007883a 	mov	r3,r2
 400fd80:	0023883a 	mov	r17,zero
 400fd84:	880a927a 	slli	r5,r17,9
 400fd88:	1805883a 	mov	r2,r3
 400fd8c:	8822977a 	slli	r17,r17,29
 400fd90:	280ad33a 	srli	r5,r5,12
 400fd94:	003ff406 	br	400fd68 <__alt_mem_onchip_memory2_0+0xfc00dd68>
 400fd98:	10c003cc 	andi	r3,r2,15
 400fd9c:	01000104 	movi	r4,4
 400fda0:	193ff626 	beq	r3,r4,400fd7c <__alt_mem_onchip_memory2_0+0xfc00dd7c>
 400fda4:	0023883a 	mov	r17,zero
 400fda8:	003fca06 	br	400fcd4 <__alt_mem_onchip_memory2_0+0xfc00dcd4>
 400fdac:	813fd336 	bltu	r16,r4,400fcfc <__alt_mem_onchip_memory2_0+0xfc00dcfc>
 400fdb0:	1023883a 	mov	r17,r2
 400fdb4:	003fa806 	br	400fc58 <__alt_mem_onchip_memory2_0+0xfc00dc58>
 400fdb8:	b0ffd636 	bltu	r22,r3,400fd14 <__alt_mem_onchip_memory2_0+0xfc00dd14>
 400fdbc:	1011883a 	mov	r8,r2
 400fdc0:	b0ff341e 	bne	r22,r3,400fa94 <__alt_mem_onchip_memory2_0+0xfc00da94>
 400fdc4:	003f3406 	br	400fa98 <__alt_mem_onchip_memory2_0+0xfc00da98>
 400fdc8:	0005883a 	mov	r2,zero
 400fdcc:	003fe006 	br	400fd50 <__alt_mem_onchip_memory2_0+0xfc00dd50>
 400fdd0:	00800434 	movhi	r2,16
 400fdd4:	89400234 	orhi	r5,r17,8
 400fdd8:	10bfffc4 	addi	r2,r2,-1
 400fddc:	b807883a 	mov	r3,r23
 400fde0:	288a703a 	and	r5,r5,r2
 400fde4:	4025883a 	mov	r18,r8
 400fde8:	003e8206 	br	400f7f4 <__alt_mem_onchip_memory2_0+0xfc00d7f4>

0400fdec <__eqdf2>:
 400fdec:	2804d53a 	srli	r2,r5,20
 400fdf0:	3806d53a 	srli	r3,r7,20
 400fdf4:	02000434 	movhi	r8,16
 400fdf8:	423fffc4 	addi	r8,r8,-1
 400fdfc:	1081ffcc 	andi	r2,r2,2047
 400fe00:	0281ffc4 	movi	r10,2047
 400fe04:	2a12703a 	and	r9,r5,r8
 400fe08:	18c1ffcc 	andi	r3,r3,2047
 400fe0c:	3a10703a 	and	r8,r7,r8
 400fe10:	280ad7fa 	srli	r5,r5,31
 400fe14:	380ed7fa 	srli	r7,r7,31
 400fe18:	12801026 	beq	r2,r10,400fe5c <__eqdf2+0x70>
 400fe1c:	0281ffc4 	movi	r10,2047
 400fe20:	1a800a26 	beq	r3,r10,400fe4c <__eqdf2+0x60>
 400fe24:	10c00226 	beq	r2,r3,400fe30 <__eqdf2+0x44>
 400fe28:	00800044 	movi	r2,1
 400fe2c:	f800283a 	ret
 400fe30:	4a3ffd1e 	bne	r9,r8,400fe28 <__alt_mem_onchip_memory2_0+0xfc00de28>
 400fe34:	21bffc1e 	bne	r4,r6,400fe28 <__alt_mem_onchip_memory2_0+0xfc00de28>
 400fe38:	29c00c26 	beq	r5,r7,400fe6c <__eqdf2+0x80>
 400fe3c:	103ffa1e 	bne	r2,zero,400fe28 <__alt_mem_onchip_memory2_0+0xfc00de28>
 400fe40:	2244b03a 	or	r2,r4,r9
 400fe44:	1004c03a 	cmpne	r2,r2,zero
 400fe48:	f800283a 	ret
 400fe4c:	3214b03a 	or	r10,r6,r8
 400fe50:	503ff426 	beq	r10,zero,400fe24 <__alt_mem_onchip_memory2_0+0xfc00de24>
 400fe54:	00800044 	movi	r2,1
 400fe58:	f800283a 	ret
 400fe5c:	2254b03a 	or	r10,r4,r9
 400fe60:	503fee26 	beq	r10,zero,400fe1c <__alt_mem_onchip_memory2_0+0xfc00de1c>
 400fe64:	00800044 	movi	r2,1
 400fe68:	f800283a 	ret
 400fe6c:	0005883a 	mov	r2,zero
 400fe70:	f800283a 	ret

0400fe74 <__gedf2>:
 400fe74:	2804d53a 	srli	r2,r5,20
 400fe78:	3806d53a 	srli	r3,r7,20
 400fe7c:	02000434 	movhi	r8,16
 400fe80:	423fffc4 	addi	r8,r8,-1
 400fe84:	1081ffcc 	andi	r2,r2,2047
 400fe88:	0241ffc4 	movi	r9,2047
 400fe8c:	2a14703a 	and	r10,r5,r8
 400fe90:	18c1ffcc 	andi	r3,r3,2047
 400fe94:	3a10703a 	and	r8,r7,r8
 400fe98:	280ad7fa 	srli	r5,r5,31
 400fe9c:	380ed7fa 	srli	r7,r7,31
 400fea0:	12401d26 	beq	r2,r9,400ff18 <__gedf2+0xa4>
 400fea4:	0241ffc4 	movi	r9,2047
 400fea8:	1a401226 	beq	r3,r9,400fef4 <__gedf2+0x80>
 400feac:	1000081e 	bne	r2,zero,400fed0 <__gedf2+0x5c>
 400feb0:	2296b03a 	or	r11,r4,r10
 400feb4:	5813003a 	cmpeq	r9,r11,zero
 400feb8:	1800091e 	bne	r3,zero,400fee0 <__gedf2+0x6c>
 400febc:	3218b03a 	or	r12,r6,r8
 400fec0:	6000071e 	bne	r12,zero,400fee0 <__gedf2+0x6c>
 400fec4:	0005883a 	mov	r2,zero
 400fec8:	5800101e 	bne	r11,zero,400ff0c <__gedf2+0x98>
 400fecc:	f800283a 	ret
 400fed0:	18000c1e 	bne	r3,zero,400ff04 <__gedf2+0x90>
 400fed4:	3212b03a 	or	r9,r6,r8
 400fed8:	48000c26 	beq	r9,zero,400ff0c <__gedf2+0x98>
 400fedc:	0013883a 	mov	r9,zero
 400fee0:	39c03fcc 	andi	r7,r7,255
 400fee4:	48000826 	beq	r9,zero,400ff08 <__gedf2+0x94>
 400fee8:	38000926 	beq	r7,zero,400ff10 <__gedf2+0x9c>
 400feec:	00800044 	movi	r2,1
 400fef0:	f800283a 	ret
 400fef4:	3212b03a 	or	r9,r6,r8
 400fef8:	483fec26 	beq	r9,zero,400feac <__alt_mem_onchip_memory2_0+0xfc00deac>
 400fefc:	00bfff84 	movi	r2,-2
 400ff00:	f800283a 	ret
 400ff04:	39c03fcc 	andi	r7,r7,255
 400ff08:	29c00626 	beq	r5,r7,400ff24 <__gedf2+0xb0>
 400ff0c:	283ff726 	beq	r5,zero,400feec <__alt_mem_onchip_memory2_0+0xfc00deec>
 400ff10:	00bfffc4 	movi	r2,-1
 400ff14:	f800283a 	ret
 400ff18:	2292b03a 	or	r9,r4,r10
 400ff1c:	483fe126 	beq	r9,zero,400fea4 <__alt_mem_onchip_memory2_0+0xfc00dea4>
 400ff20:	003ff606 	br	400fefc <__alt_mem_onchip_memory2_0+0xfc00defc>
 400ff24:	18bff916 	blt	r3,r2,400ff0c <__alt_mem_onchip_memory2_0+0xfc00df0c>
 400ff28:	10c00316 	blt	r2,r3,400ff38 <__gedf2+0xc4>
 400ff2c:	42bff736 	bltu	r8,r10,400ff0c <__alt_mem_onchip_memory2_0+0xfc00df0c>
 400ff30:	52000326 	beq	r10,r8,400ff40 <__gedf2+0xcc>
 400ff34:	5200042e 	bgeu	r10,r8,400ff48 <__gedf2+0xd4>
 400ff38:	283fec1e 	bne	r5,zero,400feec <__alt_mem_onchip_memory2_0+0xfc00deec>
 400ff3c:	003ff406 	br	400ff10 <__alt_mem_onchip_memory2_0+0xfc00df10>
 400ff40:	313ff236 	bltu	r6,r4,400ff0c <__alt_mem_onchip_memory2_0+0xfc00df0c>
 400ff44:	21bffc36 	bltu	r4,r6,400ff38 <__alt_mem_onchip_memory2_0+0xfc00df38>
 400ff48:	0005883a 	mov	r2,zero
 400ff4c:	f800283a 	ret

0400ff50 <__ledf2>:
 400ff50:	2804d53a 	srli	r2,r5,20
 400ff54:	3810d53a 	srli	r8,r7,20
 400ff58:	00c00434 	movhi	r3,16
 400ff5c:	18ffffc4 	addi	r3,r3,-1
 400ff60:	1081ffcc 	andi	r2,r2,2047
 400ff64:	0241ffc4 	movi	r9,2047
 400ff68:	28d4703a 	and	r10,r5,r3
 400ff6c:	4201ffcc 	andi	r8,r8,2047
 400ff70:	38c6703a 	and	r3,r7,r3
 400ff74:	280ad7fa 	srli	r5,r5,31
 400ff78:	380ed7fa 	srli	r7,r7,31
 400ff7c:	12401f26 	beq	r2,r9,400fffc <__ledf2+0xac>
 400ff80:	0241ffc4 	movi	r9,2047
 400ff84:	42401426 	beq	r8,r9,400ffd8 <__ledf2+0x88>
 400ff88:	1000091e 	bne	r2,zero,400ffb0 <__ledf2+0x60>
 400ff8c:	2296b03a 	or	r11,r4,r10
 400ff90:	5813003a 	cmpeq	r9,r11,zero
 400ff94:	29403fcc 	andi	r5,r5,255
 400ff98:	40000a1e 	bne	r8,zero,400ffc4 <__ledf2+0x74>
 400ff9c:	30d8b03a 	or	r12,r6,r3
 400ffa0:	6000081e 	bne	r12,zero,400ffc4 <__ledf2+0x74>
 400ffa4:	0005883a 	mov	r2,zero
 400ffa8:	5800111e 	bne	r11,zero,400fff0 <__ledf2+0xa0>
 400ffac:	f800283a 	ret
 400ffb0:	29403fcc 	andi	r5,r5,255
 400ffb4:	40000c1e 	bne	r8,zero,400ffe8 <__ledf2+0x98>
 400ffb8:	30d2b03a 	or	r9,r6,r3
 400ffbc:	48000c26 	beq	r9,zero,400fff0 <__ledf2+0xa0>
 400ffc0:	0013883a 	mov	r9,zero
 400ffc4:	39c03fcc 	andi	r7,r7,255
 400ffc8:	48000826 	beq	r9,zero,400ffec <__ledf2+0x9c>
 400ffcc:	38001126 	beq	r7,zero,4010014 <__ledf2+0xc4>
 400ffd0:	00800044 	movi	r2,1
 400ffd4:	f800283a 	ret
 400ffd8:	30d2b03a 	or	r9,r6,r3
 400ffdc:	483fea26 	beq	r9,zero,400ff88 <__alt_mem_onchip_memory2_0+0xfc00df88>
 400ffe0:	00800084 	movi	r2,2
 400ffe4:	f800283a 	ret
 400ffe8:	39c03fcc 	andi	r7,r7,255
 400ffec:	39400726 	beq	r7,r5,401000c <__ledf2+0xbc>
 400fff0:	2800081e 	bne	r5,zero,4010014 <__ledf2+0xc4>
 400fff4:	00800044 	movi	r2,1
 400fff8:	f800283a 	ret
 400fffc:	2292b03a 	or	r9,r4,r10
 4010000:	483fdf26 	beq	r9,zero,400ff80 <__alt_mem_onchip_memory2_0+0xfc00df80>
 4010004:	00800084 	movi	r2,2
 4010008:	f800283a 	ret
 401000c:	4080030e 	bge	r8,r2,401001c <__ledf2+0xcc>
 4010010:	383fef26 	beq	r7,zero,400ffd0 <__alt_mem_onchip_memory2_0+0xfc00dfd0>
 4010014:	00bfffc4 	movi	r2,-1
 4010018:	f800283a 	ret
 401001c:	123feb16 	blt	r2,r8,400ffcc <__alt_mem_onchip_memory2_0+0xfc00dfcc>
 4010020:	1abff336 	bltu	r3,r10,400fff0 <__alt_mem_onchip_memory2_0+0xfc00dff0>
 4010024:	50c00326 	beq	r10,r3,4010034 <__ledf2+0xe4>
 4010028:	50c0042e 	bgeu	r10,r3,401003c <__ledf2+0xec>
 401002c:	283fe81e 	bne	r5,zero,400ffd0 <__alt_mem_onchip_memory2_0+0xfc00dfd0>
 4010030:	003ff806 	br	4010014 <__alt_mem_onchip_memory2_0+0xfc00e014>
 4010034:	313fee36 	bltu	r6,r4,400fff0 <__alt_mem_onchip_memory2_0+0xfc00dff0>
 4010038:	21bffc36 	bltu	r4,r6,401002c <__alt_mem_onchip_memory2_0+0xfc00e02c>
 401003c:	0005883a 	mov	r2,zero
 4010040:	f800283a 	ret

04010044 <__muldf3>:
 4010044:	defff304 	addi	sp,sp,-52
 4010048:	2804d53a 	srli	r2,r5,20
 401004c:	dd800915 	stw	r22,36(sp)
 4010050:	282cd7fa 	srli	r22,r5,31
 4010054:	dc000315 	stw	r16,12(sp)
 4010058:	04000434 	movhi	r16,16
 401005c:	dd400815 	stw	r21,32(sp)
 4010060:	dc800515 	stw	r18,20(sp)
 4010064:	843fffc4 	addi	r16,r16,-1
 4010068:	dfc00c15 	stw	ra,48(sp)
 401006c:	df000b15 	stw	fp,44(sp)
 4010070:	ddc00a15 	stw	r23,40(sp)
 4010074:	dd000715 	stw	r20,28(sp)
 4010078:	dcc00615 	stw	r19,24(sp)
 401007c:	dc400415 	stw	r17,16(sp)
 4010080:	1481ffcc 	andi	r18,r2,2047
 4010084:	2c20703a 	and	r16,r5,r16
 4010088:	b02b883a 	mov	r21,r22
 401008c:	b2403fcc 	andi	r9,r22,255
 4010090:	90006026 	beq	r18,zero,4010214 <__muldf3+0x1d0>
 4010094:	0081ffc4 	movi	r2,2047
 4010098:	2029883a 	mov	r20,r4
 401009c:	90803626 	beq	r18,r2,4010178 <__muldf3+0x134>
 40100a0:	80800434 	orhi	r2,r16,16
 40100a4:	100490fa 	slli	r2,r2,3
 40100a8:	2020d77a 	srli	r16,r4,29
 40100ac:	202890fa 	slli	r20,r4,3
 40100b0:	94bf0044 	addi	r18,r18,-1023
 40100b4:	80a0b03a 	or	r16,r16,r2
 40100b8:	0027883a 	mov	r19,zero
 40100bc:	0039883a 	mov	fp,zero
 40100c0:	3804d53a 	srli	r2,r7,20
 40100c4:	382ed7fa 	srli	r23,r7,31
 40100c8:	04400434 	movhi	r17,16
 40100cc:	8c7fffc4 	addi	r17,r17,-1
 40100d0:	1081ffcc 	andi	r2,r2,2047
 40100d4:	3011883a 	mov	r8,r6
 40100d8:	3c62703a 	and	r17,r7,r17
 40100dc:	ba803fcc 	andi	r10,r23,255
 40100e0:	10006d26 	beq	r2,zero,4010298 <__muldf3+0x254>
 40100e4:	00c1ffc4 	movi	r3,2047
 40100e8:	10c06526 	beq	r2,r3,4010280 <__muldf3+0x23c>
 40100ec:	88c00434 	orhi	r3,r17,16
 40100f0:	180690fa 	slli	r3,r3,3
 40100f4:	3022d77a 	srli	r17,r6,29
 40100f8:	301090fa 	slli	r8,r6,3
 40100fc:	10bf0044 	addi	r2,r2,-1023
 4010100:	88e2b03a 	or	r17,r17,r3
 4010104:	000b883a 	mov	r5,zero
 4010108:	9085883a 	add	r2,r18,r2
 401010c:	2cc8b03a 	or	r4,r5,r19
 4010110:	00c003c4 	movi	r3,15
 4010114:	bdacf03a 	xor	r22,r23,r22
 4010118:	12c00044 	addi	r11,r2,1
 401011c:	19009936 	bltu	r3,r4,4010384 <__muldf3+0x340>
 4010120:	200890ba 	slli	r4,r4,2
 4010124:	00c10074 	movhi	r3,1025
 4010128:	18c04e04 	addi	r3,r3,312
 401012c:	20c9883a 	add	r4,r4,r3
 4010130:	20c00017 	ldw	r3,0(r4)
 4010134:	1800683a 	jmp	r3
 4010138:	04010384 	movi	r16,1038
 401013c:	04010198 	cmpnei	r16,zero,1030
 4010140:	04010198 	cmpnei	r16,zero,1030
 4010144:	04010194 	movui	r16,1030
 4010148:	04010360 	cmpeqi	r16,zero,1037
 401014c:	04010360 	cmpeqi	r16,zero,1037
 4010150:	04010348 	cmpgei	r16,zero,1037
 4010154:	04010194 	movui	r16,1030
 4010158:	04010360 	cmpeqi	r16,zero,1037
 401015c:	04010348 	cmpgei	r16,zero,1037
 4010160:	04010360 	cmpeqi	r16,zero,1037
 4010164:	04010194 	movui	r16,1030
 4010168:	04010370 	cmpltui	r16,zero,1037
 401016c:	04010370 	cmpltui	r16,zero,1037
 4010170:	04010370 	cmpltui	r16,zero,1037
 4010174:	0401058c 	andi	r16,zero,1046
 4010178:	2404b03a 	or	r2,r4,r16
 401017c:	10006f1e 	bne	r2,zero,401033c <__muldf3+0x2f8>
 4010180:	04c00204 	movi	r19,8
 4010184:	0021883a 	mov	r16,zero
 4010188:	0029883a 	mov	r20,zero
 401018c:	07000084 	movi	fp,2
 4010190:	003fcb06 	br	40100c0 <__alt_mem_onchip_memory2_0+0xfc00e0c0>
 4010194:	502d883a 	mov	r22,r10
 4010198:	00800084 	movi	r2,2
 401019c:	28805726 	beq	r5,r2,40102fc <__muldf3+0x2b8>
 40101a0:	008000c4 	movi	r2,3
 40101a4:	28816626 	beq	r5,r2,4010740 <__muldf3+0x6fc>
 40101a8:	00800044 	movi	r2,1
 40101ac:	2881411e 	bne	r5,r2,40106b4 <__muldf3+0x670>
 40101b0:	b02b883a 	mov	r21,r22
 40101b4:	0005883a 	mov	r2,zero
 40101b8:	000b883a 	mov	r5,zero
 40101bc:	0029883a 	mov	r20,zero
 40101c0:	1004953a 	slli	r2,r2,20
 40101c4:	a8c03fcc 	andi	r3,r21,255
 40101c8:	04400434 	movhi	r17,16
 40101cc:	8c7fffc4 	addi	r17,r17,-1
 40101d0:	180697fa 	slli	r3,r3,31
 40101d4:	2c4a703a 	and	r5,r5,r17
 40101d8:	288ab03a 	or	r5,r5,r2
 40101dc:	28c6b03a 	or	r3,r5,r3
 40101e0:	a005883a 	mov	r2,r20
 40101e4:	dfc00c17 	ldw	ra,48(sp)
 40101e8:	df000b17 	ldw	fp,44(sp)
 40101ec:	ddc00a17 	ldw	r23,40(sp)
 40101f0:	dd800917 	ldw	r22,36(sp)
 40101f4:	dd400817 	ldw	r21,32(sp)
 40101f8:	dd000717 	ldw	r20,28(sp)
 40101fc:	dcc00617 	ldw	r19,24(sp)
 4010200:	dc800517 	ldw	r18,20(sp)
 4010204:	dc400417 	ldw	r17,16(sp)
 4010208:	dc000317 	ldw	r16,12(sp)
 401020c:	dec00d04 	addi	sp,sp,52
 4010210:	f800283a 	ret
 4010214:	2404b03a 	or	r2,r4,r16
 4010218:	2027883a 	mov	r19,r4
 401021c:	10004226 	beq	r2,zero,4010328 <__muldf3+0x2e4>
 4010220:	8000fc26 	beq	r16,zero,4010614 <__muldf3+0x5d0>
 4010224:	8009883a 	mov	r4,r16
 4010228:	d9800215 	stw	r6,8(sp)
 401022c:	d9c00015 	stw	r7,0(sp)
 4010230:	da400115 	stw	r9,4(sp)
 4010234:	400136c0 	call	400136c <__clzsi2>
 4010238:	d9800217 	ldw	r6,8(sp)
 401023c:	d9c00017 	ldw	r7,0(sp)
 4010240:	da400117 	ldw	r9,4(sp)
 4010244:	113ffd44 	addi	r4,r2,-11
 4010248:	00c00704 	movi	r3,28
 401024c:	1900ed16 	blt	r3,r4,4010604 <__muldf3+0x5c0>
 4010250:	00c00744 	movi	r3,29
 4010254:	147ffe04 	addi	r17,r2,-8
 4010258:	1907c83a 	sub	r3,r3,r4
 401025c:	8460983a 	sll	r16,r16,r17
 4010260:	98c6d83a 	srl	r3,r19,r3
 4010264:	9c68983a 	sll	r20,r19,r17
 4010268:	1c20b03a 	or	r16,r3,r16
 401026c:	1080fcc4 	addi	r2,r2,1011
 4010270:	00a5c83a 	sub	r18,zero,r2
 4010274:	0027883a 	mov	r19,zero
 4010278:	0039883a 	mov	fp,zero
 401027c:	003f9006 	br	40100c0 <__alt_mem_onchip_memory2_0+0xfc00e0c0>
 4010280:	3446b03a 	or	r3,r6,r17
 4010284:	1800261e 	bne	r3,zero,4010320 <__muldf3+0x2dc>
 4010288:	0023883a 	mov	r17,zero
 401028c:	0011883a 	mov	r8,zero
 4010290:	01400084 	movi	r5,2
 4010294:	003f9c06 	br	4010108 <__alt_mem_onchip_memory2_0+0xfc00e108>
 4010298:	3446b03a 	or	r3,r6,r17
 401029c:	18001c26 	beq	r3,zero,4010310 <__muldf3+0x2cc>
 40102a0:	8800ce26 	beq	r17,zero,40105dc <__muldf3+0x598>
 40102a4:	8809883a 	mov	r4,r17
 40102a8:	d9800215 	stw	r6,8(sp)
 40102ac:	da400115 	stw	r9,4(sp)
 40102b0:	da800015 	stw	r10,0(sp)
 40102b4:	400136c0 	call	400136c <__clzsi2>
 40102b8:	d9800217 	ldw	r6,8(sp)
 40102bc:	da400117 	ldw	r9,4(sp)
 40102c0:	da800017 	ldw	r10,0(sp)
 40102c4:	113ffd44 	addi	r4,r2,-11
 40102c8:	00c00704 	movi	r3,28
 40102cc:	1900bf16 	blt	r3,r4,40105cc <__muldf3+0x588>
 40102d0:	00c00744 	movi	r3,29
 40102d4:	123ffe04 	addi	r8,r2,-8
 40102d8:	1907c83a 	sub	r3,r3,r4
 40102dc:	8a22983a 	sll	r17,r17,r8
 40102e0:	30c6d83a 	srl	r3,r6,r3
 40102e4:	3210983a 	sll	r8,r6,r8
 40102e8:	1c62b03a 	or	r17,r3,r17
 40102ec:	1080fcc4 	addi	r2,r2,1011
 40102f0:	0085c83a 	sub	r2,zero,r2
 40102f4:	000b883a 	mov	r5,zero
 40102f8:	003f8306 	br	4010108 <__alt_mem_onchip_memory2_0+0xfc00e108>
 40102fc:	b02b883a 	mov	r21,r22
 4010300:	0081ffc4 	movi	r2,2047
 4010304:	000b883a 	mov	r5,zero
 4010308:	0029883a 	mov	r20,zero
 401030c:	003fac06 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00e1c0>
 4010310:	0023883a 	mov	r17,zero
 4010314:	0011883a 	mov	r8,zero
 4010318:	01400044 	movi	r5,1
 401031c:	003f7a06 	br	4010108 <__alt_mem_onchip_memory2_0+0xfc00e108>
 4010320:	014000c4 	movi	r5,3
 4010324:	003f7806 	br	4010108 <__alt_mem_onchip_memory2_0+0xfc00e108>
 4010328:	04c00104 	movi	r19,4
 401032c:	0021883a 	mov	r16,zero
 4010330:	0029883a 	mov	r20,zero
 4010334:	07000044 	movi	fp,1
 4010338:	003f6106 	br	40100c0 <__alt_mem_onchip_memory2_0+0xfc00e0c0>
 401033c:	04c00304 	movi	r19,12
 4010340:	070000c4 	movi	fp,3
 4010344:	003f5e06 	br	40100c0 <__alt_mem_onchip_memory2_0+0xfc00e0c0>
 4010348:	01400434 	movhi	r5,16
 401034c:	002b883a 	mov	r21,zero
 4010350:	297fffc4 	addi	r5,r5,-1
 4010354:	053fffc4 	movi	r20,-1
 4010358:	0081ffc4 	movi	r2,2047
 401035c:	003f9806 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00e1c0>
 4010360:	8023883a 	mov	r17,r16
 4010364:	a011883a 	mov	r8,r20
 4010368:	e00b883a 	mov	r5,fp
 401036c:	003f8a06 	br	4010198 <__alt_mem_onchip_memory2_0+0xfc00e198>
 4010370:	8023883a 	mov	r17,r16
 4010374:	a011883a 	mov	r8,r20
 4010378:	482d883a 	mov	r22,r9
 401037c:	e00b883a 	mov	r5,fp
 4010380:	003f8506 	br	4010198 <__alt_mem_onchip_memory2_0+0xfc00e198>
 4010384:	a00ad43a 	srli	r5,r20,16
 4010388:	401ad43a 	srli	r13,r8,16
 401038c:	a53fffcc 	andi	r20,r20,65535
 4010390:	423fffcc 	andi	r8,r8,65535
 4010394:	4519383a 	mul	r12,r8,r20
 4010398:	4147383a 	mul	r3,r8,r5
 401039c:	6d09383a 	mul	r4,r13,r20
 40103a0:	600cd43a 	srli	r6,r12,16
 40103a4:	2b5d383a 	mul	r14,r5,r13
 40103a8:	20c9883a 	add	r4,r4,r3
 40103ac:	310d883a 	add	r6,r6,r4
 40103b0:	30c0022e 	bgeu	r6,r3,40103bc <__muldf3+0x378>
 40103b4:	00c00074 	movhi	r3,1
 40103b8:	70dd883a 	add	r14,r14,r3
 40103bc:	8826d43a 	srli	r19,r17,16
 40103c0:	8bffffcc 	andi	r15,r17,65535
 40103c4:	7d23383a 	mul	r17,r15,r20
 40103c8:	7949383a 	mul	r4,r15,r5
 40103cc:	9d29383a 	mul	r20,r19,r20
 40103d0:	8814d43a 	srli	r10,r17,16
 40103d4:	3012943a 	slli	r9,r6,16
 40103d8:	a129883a 	add	r20,r20,r4
 40103dc:	633fffcc 	andi	r12,r12,65535
 40103e0:	5515883a 	add	r10,r10,r20
 40103e4:	3006d43a 	srli	r3,r6,16
 40103e8:	4b13883a 	add	r9,r9,r12
 40103ec:	2ccb383a 	mul	r5,r5,r19
 40103f0:	5100022e 	bgeu	r10,r4,40103fc <__muldf3+0x3b8>
 40103f4:	01000074 	movhi	r4,1
 40103f8:	290b883a 	add	r5,r5,r4
 40103fc:	802ad43a 	srli	r21,r16,16
 4010400:	843fffcc 	andi	r16,r16,65535
 4010404:	440d383a 	mul	r6,r8,r16
 4010408:	4565383a 	mul	r18,r8,r21
 401040c:	8349383a 	mul	r4,r16,r13
 4010410:	500e943a 	slli	r7,r10,16
 4010414:	3010d43a 	srli	r8,r6,16
 4010418:	5028d43a 	srli	r20,r10,16
 401041c:	2489883a 	add	r4,r4,r18
 4010420:	8abfffcc 	andi	r10,r17,65535
 4010424:	3a95883a 	add	r10,r7,r10
 4010428:	4119883a 	add	r12,r8,r4
 401042c:	a169883a 	add	r20,r20,r5
 4010430:	1a87883a 	add	r3,r3,r10
 4010434:	6d5b383a 	mul	r13,r13,r21
 4010438:	6480022e 	bgeu	r12,r18,4010444 <__muldf3+0x400>
 401043c:	01000074 	movhi	r4,1
 4010440:	691b883a 	add	r13,r13,r4
 4010444:	7c25383a 	mul	r18,r15,r16
 4010448:	7d4b383a 	mul	r5,r15,r21
 401044c:	84cf383a 	mul	r7,r16,r19
 4010450:	901ed43a 	srli	r15,r18,16
 4010454:	6008d43a 	srli	r4,r12,16
 4010458:	6010943a 	slli	r8,r12,16
 401045c:	394f883a 	add	r7,r7,r5
 4010460:	333fffcc 	andi	r12,r6,65535
 4010464:	79df883a 	add	r15,r15,r7
 4010468:	235b883a 	add	r13,r4,r13
 401046c:	9d63383a 	mul	r17,r19,r21
 4010470:	4309883a 	add	r4,r8,r12
 4010474:	7940022e 	bgeu	r15,r5,4010480 <__muldf3+0x43c>
 4010478:	01400074 	movhi	r5,1
 401047c:	8963883a 	add	r17,r17,r5
 4010480:	780a943a 	slli	r5,r15,16
 4010484:	91bfffcc 	andi	r6,r18,65535
 4010488:	70c7883a 	add	r3,r14,r3
 401048c:	298d883a 	add	r6,r5,r6
 4010490:	1a8f803a 	cmpltu	r7,r3,r10
 4010494:	350b883a 	add	r5,r6,r20
 4010498:	20c7883a 	add	r3,r4,r3
 401049c:	3955883a 	add	r10,r7,r5
 40104a0:	1909803a 	cmpltu	r4,r3,r4
 40104a4:	6a91883a 	add	r8,r13,r10
 40104a8:	780cd43a 	srli	r6,r15,16
 40104ac:	2219883a 	add	r12,r4,r8
 40104b0:	2d0b803a 	cmpltu	r5,r5,r20
 40104b4:	51cf803a 	cmpltu	r7,r10,r7
 40104b8:	29ceb03a 	or	r7,r5,r7
 40104bc:	4351803a 	cmpltu	r8,r8,r13
 40104c0:	610b803a 	cmpltu	r5,r12,r4
 40104c4:	4148b03a 	or	r4,r8,r5
 40104c8:	398f883a 	add	r7,r7,r6
 40104cc:	3909883a 	add	r4,r7,r4
 40104d0:	1810927a 	slli	r8,r3,9
 40104d4:	2449883a 	add	r4,r4,r17
 40104d8:	2008927a 	slli	r4,r4,9
 40104dc:	6022d5fa 	srli	r17,r12,23
 40104e0:	1806d5fa 	srli	r3,r3,23
 40104e4:	4252b03a 	or	r9,r8,r9
 40104e8:	600a927a 	slli	r5,r12,9
 40104ec:	4810c03a 	cmpne	r8,r9,zero
 40104f0:	2462b03a 	or	r17,r4,r17
 40104f4:	40c6b03a 	or	r3,r8,r3
 40104f8:	8900402c 	andhi	r4,r17,256
 40104fc:	1950b03a 	or	r8,r3,r5
 4010500:	20000726 	beq	r4,zero,4010520 <__muldf3+0x4dc>
 4010504:	4006d07a 	srli	r3,r8,1
 4010508:	880497fa 	slli	r2,r17,31
 401050c:	4200004c 	andi	r8,r8,1
 4010510:	8822d07a 	srli	r17,r17,1
 4010514:	1a10b03a 	or	r8,r3,r8
 4010518:	1210b03a 	or	r8,r2,r8
 401051c:	5805883a 	mov	r2,r11
 4010520:	1140ffc4 	addi	r5,r2,1023
 4010524:	0140440e 	bge	zero,r5,4010638 <__muldf3+0x5f4>
 4010528:	40c001cc 	andi	r3,r8,7
 401052c:	18000726 	beq	r3,zero,401054c <__muldf3+0x508>
 4010530:	40c003cc 	andi	r3,r8,15
 4010534:	01000104 	movi	r4,4
 4010538:	19000426 	beq	r3,r4,401054c <__muldf3+0x508>
 401053c:	4107883a 	add	r3,r8,r4
 4010540:	1a11803a 	cmpltu	r8,r3,r8
 4010544:	8a23883a 	add	r17,r17,r8
 4010548:	1811883a 	mov	r8,r3
 401054c:	88c0402c 	andhi	r3,r17,256
 4010550:	18000426 	beq	r3,zero,4010564 <__muldf3+0x520>
 4010554:	11410004 	addi	r5,r2,1024
 4010558:	00bfc034 	movhi	r2,65280
 401055c:	10bfffc4 	addi	r2,r2,-1
 4010560:	88a2703a 	and	r17,r17,r2
 4010564:	0081ff84 	movi	r2,2046
 4010568:	117f6416 	blt	r2,r5,40102fc <__alt_mem_onchip_memory2_0+0xfc00e2fc>
 401056c:	8828977a 	slli	r20,r17,29
 4010570:	4010d0fa 	srli	r8,r8,3
 4010574:	8822927a 	slli	r17,r17,9
 4010578:	2881ffcc 	andi	r2,r5,2047
 401057c:	a228b03a 	or	r20,r20,r8
 4010580:	880ad33a 	srli	r5,r17,12
 4010584:	b02b883a 	mov	r21,r22
 4010588:	003f0d06 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00e1c0>
 401058c:	8080022c 	andhi	r2,r16,8
 4010590:	10000926 	beq	r2,zero,40105b8 <__muldf3+0x574>
 4010594:	8880022c 	andhi	r2,r17,8
 4010598:	1000071e 	bne	r2,zero,40105b8 <__muldf3+0x574>
 401059c:	00800434 	movhi	r2,16
 40105a0:	89400234 	orhi	r5,r17,8
 40105a4:	10bfffc4 	addi	r2,r2,-1
 40105a8:	b82b883a 	mov	r21,r23
 40105ac:	288a703a 	and	r5,r5,r2
 40105b0:	4029883a 	mov	r20,r8
 40105b4:	003f6806 	br	4010358 <__alt_mem_onchip_memory2_0+0xfc00e358>
 40105b8:	00800434 	movhi	r2,16
 40105bc:	81400234 	orhi	r5,r16,8
 40105c0:	10bfffc4 	addi	r2,r2,-1
 40105c4:	288a703a 	and	r5,r5,r2
 40105c8:	003f6306 	br	4010358 <__alt_mem_onchip_memory2_0+0xfc00e358>
 40105cc:	147ff604 	addi	r17,r2,-40
 40105d0:	3462983a 	sll	r17,r6,r17
 40105d4:	0011883a 	mov	r8,zero
 40105d8:	003f4406 	br	40102ec <__alt_mem_onchip_memory2_0+0xfc00e2ec>
 40105dc:	3009883a 	mov	r4,r6
 40105e0:	d9800215 	stw	r6,8(sp)
 40105e4:	da400115 	stw	r9,4(sp)
 40105e8:	da800015 	stw	r10,0(sp)
 40105ec:	400136c0 	call	400136c <__clzsi2>
 40105f0:	10800804 	addi	r2,r2,32
 40105f4:	da800017 	ldw	r10,0(sp)
 40105f8:	da400117 	ldw	r9,4(sp)
 40105fc:	d9800217 	ldw	r6,8(sp)
 4010600:	003f3006 	br	40102c4 <__alt_mem_onchip_memory2_0+0xfc00e2c4>
 4010604:	143ff604 	addi	r16,r2,-40
 4010608:	9c20983a 	sll	r16,r19,r16
 401060c:	0029883a 	mov	r20,zero
 4010610:	003f1606 	br	401026c <__alt_mem_onchip_memory2_0+0xfc00e26c>
 4010614:	d9800215 	stw	r6,8(sp)
 4010618:	d9c00015 	stw	r7,0(sp)
 401061c:	da400115 	stw	r9,4(sp)
 4010620:	400136c0 	call	400136c <__clzsi2>
 4010624:	10800804 	addi	r2,r2,32
 4010628:	da400117 	ldw	r9,4(sp)
 401062c:	d9c00017 	ldw	r7,0(sp)
 4010630:	d9800217 	ldw	r6,8(sp)
 4010634:	003f0306 	br	4010244 <__alt_mem_onchip_memory2_0+0xfc00e244>
 4010638:	00c00044 	movi	r3,1
 401063c:	1947c83a 	sub	r3,r3,r5
 4010640:	00800e04 	movi	r2,56
 4010644:	10feda16 	blt	r2,r3,40101b0 <__alt_mem_onchip_memory2_0+0xfc00e1b0>
 4010648:	008007c4 	movi	r2,31
 401064c:	10c01b16 	blt	r2,r3,40106bc <__muldf3+0x678>
 4010650:	00800804 	movi	r2,32
 4010654:	10c5c83a 	sub	r2,r2,r3
 4010658:	888a983a 	sll	r5,r17,r2
 401065c:	40c8d83a 	srl	r4,r8,r3
 4010660:	4084983a 	sll	r2,r8,r2
 4010664:	88e2d83a 	srl	r17,r17,r3
 4010668:	2906b03a 	or	r3,r5,r4
 401066c:	1004c03a 	cmpne	r2,r2,zero
 4010670:	1886b03a 	or	r3,r3,r2
 4010674:	188001cc 	andi	r2,r3,7
 4010678:	10000726 	beq	r2,zero,4010698 <__muldf3+0x654>
 401067c:	188003cc 	andi	r2,r3,15
 4010680:	01000104 	movi	r4,4
 4010684:	11000426 	beq	r2,r4,4010698 <__muldf3+0x654>
 4010688:	1805883a 	mov	r2,r3
 401068c:	10c00104 	addi	r3,r2,4
 4010690:	1885803a 	cmpltu	r2,r3,r2
 4010694:	88a3883a 	add	r17,r17,r2
 4010698:	8880202c 	andhi	r2,r17,128
 401069c:	10001c26 	beq	r2,zero,4010710 <__muldf3+0x6cc>
 40106a0:	b02b883a 	mov	r21,r22
 40106a4:	00800044 	movi	r2,1
 40106a8:	000b883a 	mov	r5,zero
 40106ac:	0029883a 	mov	r20,zero
 40106b0:	003ec306 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00e1c0>
 40106b4:	5805883a 	mov	r2,r11
 40106b8:	003f9906 	br	4010520 <__alt_mem_onchip_memory2_0+0xfc00e520>
 40106bc:	00bff844 	movi	r2,-31
 40106c0:	1145c83a 	sub	r2,r2,r5
 40106c4:	8888d83a 	srl	r4,r17,r2
 40106c8:	00800804 	movi	r2,32
 40106cc:	18801a26 	beq	r3,r2,4010738 <__muldf3+0x6f4>
 40106d0:	00801004 	movi	r2,64
 40106d4:	10c5c83a 	sub	r2,r2,r3
 40106d8:	8884983a 	sll	r2,r17,r2
 40106dc:	1204b03a 	or	r2,r2,r8
 40106e0:	1004c03a 	cmpne	r2,r2,zero
 40106e4:	2084b03a 	or	r2,r4,r2
 40106e8:	144001cc 	andi	r17,r2,7
 40106ec:	88000d1e 	bne	r17,zero,4010724 <__muldf3+0x6e0>
 40106f0:	000b883a 	mov	r5,zero
 40106f4:	1028d0fa 	srli	r20,r2,3
 40106f8:	b02b883a 	mov	r21,r22
 40106fc:	0005883a 	mov	r2,zero
 4010700:	a468b03a 	or	r20,r20,r17
 4010704:	003eae06 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00e1c0>
 4010708:	1007883a 	mov	r3,r2
 401070c:	0023883a 	mov	r17,zero
 4010710:	880a927a 	slli	r5,r17,9
 4010714:	1805883a 	mov	r2,r3
 4010718:	8822977a 	slli	r17,r17,29
 401071c:	280ad33a 	srli	r5,r5,12
 4010720:	003ff406 	br	40106f4 <__alt_mem_onchip_memory2_0+0xfc00e6f4>
 4010724:	10c003cc 	andi	r3,r2,15
 4010728:	01000104 	movi	r4,4
 401072c:	193ff626 	beq	r3,r4,4010708 <__alt_mem_onchip_memory2_0+0xfc00e708>
 4010730:	0023883a 	mov	r17,zero
 4010734:	003fd506 	br	401068c <__alt_mem_onchip_memory2_0+0xfc00e68c>
 4010738:	0005883a 	mov	r2,zero
 401073c:	003fe706 	br	40106dc <__alt_mem_onchip_memory2_0+0xfc00e6dc>
 4010740:	00800434 	movhi	r2,16
 4010744:	89400234 	orhi	r5,r17,8
 4010748:	10bfffc4 	addi	r2,r2,-1
 401074c:	b02b883a 	mov	r21,r22
 4010750:	288a703a 	and	r5,r5,r2
 4010754:	4029883a 	mov	r20,r8
 4010758:	003eff06 	br	4010358 <__alt_mem_onchip_memory2_0+0xfc00e358>

0401075c <__subdf3>:
 401075c:	02000434 	movhi	r8,16
 4010760:	423fffc4 	addi	r8,r8,-1
 4010764:	defffb04 	addi	sp,sp,-20
 4010768:	2a14703a 	and	r10,r5,r8
 401076c:	3812d53a 	srli	r9,r7,20
 4010770:	3a10703a 	and	r8,r7,r8
 4010774:	2006d77a 	srli	r3,r4,29
 4010778:	3004d77a 	srli	r2,r6,29
 401077c:	dc000015 	stw	r16,0(sp)
 4010780:	501490fa 	slli	r10,r10,3
 4010784:	2820d53a 	srli	r16,r5,20
 4010788:	401090fa 	slli	r8,r8,3
 401078c:	dc800215 	stw	r18,8(sp)
 4010790:	dc400115 	stw	r17,4(sp)
 4010794:	dfc00415 	stw	ra,16(sp)
 4010798:	202290fa 	slli	r17,r4,3
 401079c:	dcc00315 	stw	r19,12(sp)
 40107a0:	4a41ffcc 	andi	r9,r9,2047
 40107a4:	0101ffc4 	movi	r4,2047
 40107a8:	2824d7fa 	srli	r18,r5,31
 40107ac:	8401ffcc 	andi	r16,r16,2047
 40107b0:	50c6b03a 	or	r3,r10,r3
 40107b4:	380ed7fa 	srli	r7,r7,31
 40107b8:	408ab03a 	or	r5,r8,r2
 40107bc:	300c90fa 	slli	r6,r6,3
 40107c0:	49009626 	beq	r9,r4,4010a1c <__subdf3+0x2c0>
 40107c4:	39c0005c 	xori	r7,r7,1
 40107c8:	8245c83a 	sub	r2,r16,r9
 40107cc:	3c807426 	beq	r7,r18,40109a0 <__subdf3+0x244>
 40107d0:	0080af0e 	bge	zero,r2,4010a90 <__subdf3+0x334>
 40107d4:	48002a1e 	bne	r9,zero,4010880 <__subdf3+0x124>
 40107d8:	2988b03a 	or	r4,r5,r6
 40107dc:	20009a1e 	bne	r4,zero,4010a48 <__subdf3+0x2ec>
 40107e0:	888001cc 	andi	r2,r17,7
 40107e4:	10000726 	beq	r2,zero,4010804 <__subdf3+0xa8>
 40107e8:	888003cc 	andi	r2,r17,15
 40107ec:	01000104 	movi	r4,4
 40107f0:	11000426 	beq	r2,r4,4010804 <__subdf3+0xa8>
 40107f4:	890b883a 	add	r5,r17,r4
 40107f8:	2c63803a 	cmpltu	r17,r5,r17
 40107fc:	1c47883a 	add	r3,r3,r17
 4010800:	2823883a 	mov	r17,r5
 4010804:	1880202c 	andhi	r2,r3,128
 4010808:	10005926 	beq	r2,zero,4010970 <__subdf3+0x214>
 401080c:	84000044 	addi	r16,r16,1
 4010810:	0081ffc4 	movi	r2,2047
 4010814:	8080be26 	beq	r16,r2,4010b10 <__subdf3+0x3b4>
 4010818:	017fe034 	movhi	r5,65408
 401081c:	297fffc4 	addi	r5,r5,-1
 4010820:	1946703a 	and	r3,r3,r5
 4010824:	1804977a 	slli	r2,r3,29
 4010828:	1806927a 	slli	r3,r3,9
 401082c:	8822d0fa 	srli	r17,r17,3
 4010830:	8401ffcc 	andi	r16,r16,2047
 4010834:	180ad33a 	srli	r5,r3,12
 4010838:	9100004c 	andi	r4,r18,1
 401083c:	1444b03a 	or	r2,r2,r17
 4010840:	80c1ffcc 	andi	r3,r16,2047
 4010844:	1820953a 	slli	r16,r3,20
 4010848:	20c03fcc 	andi	r3,r4,255
 401084c:	180897fa 	slli	r4,r3,31
 4010850:	00c00434 	movhi	r3,16
 4010854:	18ffffc4 	addi	r3,r3,-1
 4010858:	28c6703a 	and	r3,r5,r3
 401085c:	1c06b03a 	or	r3,r3,r16
 4010860:	1906b03a 	or	r3,r3,r4
 4010864:	dfc00417 	ldw	ra,16(sp)
 4010868:	dcc00317 	ldw	r19,12(sp)
 401086c:	dc800217 	ldw	r18,8(sp)
 4010870:	dc400117 	ldw	r17,4(sp)
 4010874:	dc000017 	ldw	r16,0(sp)
 4010878:	dec00504 	addi	sp,sp,20
 401087c:	f800283a 	ret
 4010880:	0101ffc4 	movi	r4,2047
 4010884:	813fd626 	beq	r16,r4,40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010888:	29402034 	orhi	r5,r5,128
 401088c:	01000e04 	movi	r4,56
 4010890:	2080a316 	blt	r4,r2,4010b20 <__subdf3+0x3c4>
 4010894:	010007c4 	movi	r4,31
 4010898:	2080c616 	blt	r4,r2,4010bb4 <__subdf3+0x458>
 401089c:	01000804 	movi	r4,32
 40108a0:	2089c83a 	sub	r4,r4,r2
 40108a4:	2910983a 	sll	r8,r5,r4
 40108a8:	308ed83a 	srl	r7,r6,r2
 40108ac:	3108983a 	sll	r4,r6,r4
 40108b0:	2884d83a 	srl	r2,r5,r2
 40108b4:	41ccb03a 	or	r6,r8,r7
 40108b8:	2008c03a 	cmpne	r4,r4,zero
 40108bc:	310cb03a 	or	r6,r6,r4
 40108c0:	898dc83a 	sub	r6,r17,r6
 40108c4:	89a3803a 	cmpltu	r17,r17,r6
 40108c8:	1887c83a 	sub	r3,r3,r2
 40108cc:	1c47c83a 	sub	r3,r3,r17
 40108d0:	3023883a 	mov	r17,r6
 40108d4:	1880202c 	andhi	r2,r3,128
 40108d8:	10002326 	beq	r2,zero,4010968 <__subdf3+0x20c>
 40108dc:	04c02034 	movhi	r19,128
 40108e0:	9cffffc4 	addi	r19,r19,-1
 40108e4:	1ce6703a 	and	r19,r3,r19
 40108e8:	98007a26 	beq	r19,zero,4010ad4 <__subdf3+0x378>
 40108ec:	9809883a 	mov	r4,r19
 40108f0:	400136c0 	call	400136c <__clzsi2>
 40108f4:	113ffe04 	addi	r4,r2,-8
 40108f8:	00c007c4 	movi	r3,31
 40108fc:	19007b16 	blt	r3,r4,4010aec <__subdf3+0x390>
 4010900:	00800804 	movi	r2,32
 4010904:	1105c83a 	sub	r2,r2,r4
 4010908:	8884d83a 	srl	r2,r17,r2
 401090c:	9906983a 	sll	r3,r19,r4
 4010910:	8922983a 	sll	r17,r17,r4
 4010914:	10c4b03a 	or	r2,r2,r3
 4010918:	24007816 	blt	r4,r16,4010afc <__subdf3+0x3a0>
 401091c:	2421c83a 	sub	r16,r4,r16
 4010920:	80c00044 	addi	r3,r16,1
 4010924:	010007c4 	movi	r4,31
 4010928:	20c09516 	blt	r4,r3,4010b80 <__subdf3+0x424>
 401092c:	01400804 	movi	r5,32
 4010930:	28cbc83a 	sub	r5,r5,r3
 4010934:	88c8d83a 	srl	r4,r17,r3
 4010938:	8962983a 	sll	r17,r17,r5
 401093c:	114a983a 	sll	r5,r2,r5
 4010940:	10c6d83a 	srl	r3,r2,r3
 4010944:	8804c03a 	cmpne	r2,r17,zero
 4010948:	290ab03a 	or	r5,r5,r4
 401094c:	28a2b03a 	or	r17,r5,r2
 4010950:	0021883a 	mov	r16,zero
 4010954:	003fa206 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010958:	2090b03a 	or	r8,r4,r2
 401095c:	40018e26 	beq	r8,zero,4010f98 <__subdf3+0x83c>
 4010960:	1007883a 	mov	r3,r2
 4010964:	2023883a 	mov	r17,r4
 4010968:	888001cc 	andi	r2,r17,7
 401096c:	103f9e1e 	bne	r2,zero,40107e8 <__alt_mem_onchip_memory2_0+0xfc00e7e8>
 4010970:	1804977a 	slli	r2,r3,29
 4010974:	8822d0fa 	srli	r17,r17,3
 4010978:	1810d0fa 	srli	r8,r3,3
 401097c:	9100004c 	andi	r4,r18,1
 4010980:	1444b03a 	or	r2,r2,r17
 4010984:	00c1ffc4 	movi	r3,2047
 4010988:	80c02826 	beq	r16,r3,4010a2c <__subdf3+0x2d0>
 401098c:	01400434 	movhi	r5,16
 4010990:	297fffc4 	addi	r5,r5,-1
 4010994:	80e0703a 	and	r16,r16,r3
 4010998:	414a703a 	and	r5,r8,r5
 401099c:	003fa806 	br	4010840 <__alt_mem_onchip_memory2_0+0xfc00e840>
 40109a0:	0080630e 	bge	zero,r2,4010b30 <__subdf3+0x3d4>
 40109a4:	48003026 	beq	r9,zero,4010a68 <__subdf3+0x30c>
 40109a8:	0101ffc4 	movi	r4,2047
 40109ac:	813f8c26 	beq	r16,r4,40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 40109b0:	29402034 	orhi	r5,r5,128
 40109b4:	01000e04 	movi	r4,56
 40109b8:	2080a90e 	bge	r4,r2,4010c60 <__subdf3+0x504>
 40109bc:	298cb03a 	or	r6,r5,r6
 40109c0:	3012c03a 	cmpne	r9,r6,zero
 40109c4:	0005883a 	mov	r2,zero
 40109c8:	4c53883a 	add	r9,r9,r17
 40109cc:	4c63803a 	cmpltu	r17,r9,r17
 40109d0:	10c7883a 	add	r3,r2,r3
 40109d4:	88c7883a 	add	r3,r17,r3
 40109d8:	4823883a 	mov	r17,r9
 40109dc:	1880202c 	andhi	r2,r3,128
 40109e0:	1000d026 	beq	r2,zero,4010d24 <__subdf3+0x5c8>
 40109e4:	84000044 	addi	r16,r16,1
 40109e8:	0081ffc4 	movi	r2,2047
 40109ec:	8080fe26 	beq	r16,r2,4010de8 <__subdf3+0x68c>
 40109f0:	00bfe034 	movhi	r2,65408
 40109f4:	10bfffc4 	addi	r2,r2,-1
 40109f8:	1886703a 	and	r3,r3,r2
 40109fc:	880ad07a 	srli	r5,r17,1
 4010a00:	180497fa 	slli	r2,r3,31
 4010a04:	8900004c 	andi	r4,r17,1
 4010a08:	2922b03a 	or	r17,r5,r4
 4010a0c:	1806d07a 	srli	r3,r3,1
 4010a10:	1462b03a 	or	r17,r2,r17
 4010a14:	3825883a 	mov	r18,r7
 4010a18:	003f7106 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010a1c:	2984b03a 	or	r2,r5,r6
 4010a20:	103f6826 	beq	r2,zero,40107c4 <__alt_mem_onchip_memory2_0+0xfc00e7c4>
 4010a24:	39c03fcc 	andi	r7,r7,255
 4010a28:	003f6706 	br	40107c8 <__alt_mem_onchip_memory2_0+0xfc00e7c8>
 4010a2c:	4086b03a 	or	r3,r8,r2
 4010a30:	18015226 	beq	r3,zero,4010f7c <__subdf3+0x820>
 4010a34:	00c00434 	movhi	r3,16
 4010a38:	41400234 	orhi	r5,r8,8
 4010a3c:	18ffffc4 	addi	r3,r3,-1
 4010a40:	28ca703a 	and	r5,r5,r3
 4010a44:	003f7e06 	br	4010840 <__alt_mem_onchip_memory2_0+0xfc00e840>
 4010a48:	10bfffc4 	addi	r2,r2,-1
 4010a4c:	1000491e 	bne	r2,zero,4010b74 <__subdf3+0x418>
 4010a50:	898fc83a 	sub	r7,r17,r6
 4010a54:	89e3803a 	cmpltu	r17,r17,r7
 4010a58:	1947c83a 	sub	r3,r3,r5
 4010a5c:	1c47c83a 	sub	r3,r3,r17
 4010a60:	3823883a 	mov	r17,r7
 4010a64:	003f9b06 	br	40108d4 <__alt_mem_onchip_memory2_0+0xfc00e8d4>
 4010a68:	2988b03a 	or	r4,r5,r6
 4010a6c:	203f5c26 	beq	r4,zero,40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010a70:	10bfffc4 	addi	r2,r2,-1
 4010a74:	1000931e 	bne	r2,zero,4010cc4 <__subdf3+0x568>
 4010a78:	898d883a 	add	r6,r17,r6
 4010a7c:	3463803a 	cmpltu	r17,r6,r17
 4010a80:	1947883a 	add	r3,r3,r5
 4010a84:	88c7883a 	add	r3,r17,r3
 4010a88:	3023883a 	mov	r17,r6
 4010a8c:	003fd306 	br	40109dc <__alt_mem_onchip_memory2_0+0xfc00e9dc>
 4010a90:	1000541e 	bne	r2,zero,4010be4 <__subdf3+0x488>
 4010a94:	80800044 	addi	r2,r16,1
 4010a98:	1081ffcc 	andi	r2,r2,2047
 4010a9c:	01000044 	movi	r4,1
 4010aa0:	2080a20e 	bge	r4,r2,4010d2c <__subdf3+0x5d0>
 4010aa4:	8989c83a 	sub	r4,r17,r6
 4010aa8:	8905803a 	cmpltu	r2,r17,r4
 4010aac:	1967c83a 	sub	r19,r3,r5
 4010ab0:	98a7c83a 	sub	r19,r19,r2
 4010ab4:	9880202c 	andhi	r2,r19,128
 4010ab8:	10006326 	beq	r2,zero,4010c48 <__subdf3+0x4ec>
 4010abc:	3463c83a 	sub	r17,r6,r17
 4010ac0:	28c7c83a 	sub	r3,r5,r3
 4010ac4:	344d803a 	cmpltu	r6,r6,r17
 4010ac8:	19a7c83a 	sub	r19,r3,r6
 4010acc:	3825883a 	mov	r18,r7
 4010ad0:	983f861e 	bne	r19,zero,40108ec <__alt_mem_onchip_memory2_0+0xfc00e8ec>
 4010ad4:	8809883a 	mov	r4,r17
 4010ad8:	400136c0 	call	400136c <__clzsi2>
 4010adc:	10800804 	addi	r2,r2,32
 4010ae0:	113ffe04 	addi	r4,r2,-8
 4010ae4:	00c007c4 	movi	r3,31
 4010ae8:	193f850e 	bge	r3,r4,4010900 <__alt_mem_onchip_memory2_0+0xfc00e900>
 4010aec:	10bff604 	addi	r2,r2,-40
 4010af0:	8884983a 	sll	r2,r17,r2
 4010af4:	0023883a 	mov	r17,zero
 4010af8:	243f880e 	bge	r4,r16,401091c <__alt_mem_onchip_memory2_0+0xfc00e91c>
 4010afc:	00ffe034 	movhi	r3,65408
 4010b00:	18ffffc4 	addi	r3,r3,-1
 4010b04:	8121c83a 	sub	r16,r16,r4
 4010b08:	10c6703a 	and	r3,r2,r3
 4010b0c:	003f3406 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010b10:	9100004c 	andi	r4,r18,1
 4010b14:	000b883a 	mov	r5,zero
 4010b18:	0005883a 	mov	r2,zero
 4010b1c:	003f4806 	br	4010840 <__alt_mem_onchip_memory2_0+0xfc00e840>
 4010b20:	298cb03a 	or	r6,r5,r6
 4010b24:	300cc03a 	cmpne	r6,r6,zero
 4010b28:	0005883a 	mov	r2,zero
 4010b2c:	003f6406 	br	40108c0 <__alt_mem_onchip_memory2_0+0xfc00e8c0>
 4010b30:	10009a1e 	bne	r2,zero,4010d9c <__subdf3+0x640>
 4010b34:	82400044 	addi	r9,r16,1
 4010b38:	4881ffcc 	andi	r2,r9,2047
 4010b3c:	02800044 	movi	r10,1
 4010b40:	5080670e 	bge	r10,r2,4010ce0 <__subdf3+0x584>
 4010b44:	0081ffc4 	movi	r2,2047
 4010b48:	4880af26 	beq	r9,r2,4010e08 <__subdf3+0x6ac>
 4010b4c:	898d883a 	add	r6,r17,r6
 4010b50:	1945883a 	add	r2,r3,r5
 4010b54:	3447803a 	cmpltu	r3,r6,r17
 4010b58:	1887883a 	add	r3,r3,r2
 4010b5c:	182297fa 	slli	r17,r3,31
 4010b60:	300cd07a 	srli	r6,r6,1
 4010b64:	1806d07a 	srli	r3,r3,1
 4010b68:	4821883a 	mov	r16,r9
 4010b6c:	89a2b03a 	or	r17,r17,r6
 4010b70:	003f1b06 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010b74:	0101ffc4 	movi	r4,2047
 4010b78:	813f441e 	bne	r16,r4,401088c <__alt_mem_onchip_memory2_0+0xfc00e88c>
 4010b7c:	003f1806 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010b80:	843ff844 	addi	r16,r16,-31
 4010b84:	01400804 	movi	r5,32
 4010b88:	1408d83a 	srl	r4,r2,r16
 4010b8c:	19405026 	beq	r3,r5,4010cd0 <__subdf3+0x574>
 4010b90:	01401004 	movi	r5,64
 4010b94:	28c7c83a 	sub	r3,r5,r3
 4010b98:	10c4983a 	sll	r2,r2,r3
 4010b9c:	88a2b03a 	or	r17,r17,r2
 4010ba0:	8822c03a 	cmpne	r17,r17,zero
 4010ba4:	2462b03a 	or	r17,r4,r17
 4010ba8:	0007883a 	mov	r3,zero
 4010bac:	0021883a 	mov	r16,zero
 4010bb0:	003f6d06 	br	4010968 <__alt_mem_onchip_memory2_0+0xfc00e968>
 4010bb4:	11fff804 	addi	r7,r2,-32
 4010bb8:	01000804 	movi	r4,32
 4010bbc:	29ced83a 	srl	r7,r5,r7
 4010bc0:	11004526 	beq	r2,r4,4010cd8 <__subdf3+0x57c>
 4010bc4:	01001004 	movi	r4,64
 4010bc8:	2089c83a 	sub	r4,r4,r2
 4010bcc:	2904983a 	sll	r2,r5,r4
 4010bd0:	118cb03a 	or	r6,r2,r6
 4010bd4:	300cc03a 	cmpne	r6,r6,zero
 4010bd8:	398cb03a 	or	r6,r7,r6
 4010bdc:	0005883a 	mov	r2,zero
 4010be0:	003f3706 	br	40108c0 <__alt_mem_onchip_memory2_0+0xfc00e8c0>
 4010be4:	80002a26 	beq	r16,zero,4010c90 <__subdf3+0x534>
 4010be8:	0101ffc4 	movi	r4,2047
 4010bec:	49006626 	beq	r9,r4,4010d88 <__subdf3+0x62c>
 4010bf0:	0085c83a 	sub	r2,zero,r2
 4010bf4:	18c02034 	orhi	r3,r3,128
 4010bf8:	01000e04 	movi	r4,56
 4010bfc:	20807e16 	blt	r4,r2,4010df8 <__subdf3+0x69c>
 4010c00:	010007c4 	movi	r4,31
 4010c04:	2080e716 	blt	r4,r2,4010fa4 <__subdf3+0x848>
 4010c08:	01000804 	movi	r4,32
 4010c0c:	2089c83a 	sub	r4,r4,r2
 4010c10:	1914983a 	sll	r10,r3,r4
 4010c14:	8890d83a 	srl	r8,r17,r2
 4010c18:	8908983a 	sll	r4,r17,r4
 4010c1c:	1884d83a 	srl	r2,r3,r2
 4010c20:	5222b03a 	or	r17,r10,r8
 4010c24:	2006c03a 	cmpne	r3,r4,zero
 4010c28:	88e2b03a 	or	r17,r17,r3
 4010c2c:	3463c83a 	sub	r17,r6,r17
 4010c30:	2885c83a 	sub	r2,r5,r2
 4010c34:	344d803a 	cmpltu	r6,r6,r17
 4010c38:	1187c83a 	sub	r3,r2,r6
 4010c3c:	4821883a 	mov	r16,r9
 4010c40:	3825883a 	mov	r18,r7
 4010c44:	003f2306 	br	40108d4 <__alt_mem_onchip_memory2_0+0xfc00e8d4>
 4010c48:	24d0b03a 	or	r8,r4,r19
 4010c4c:	40001b1e 	bne	r8,zero,4010cbc <__subdf3+0x560>
 4010c50:	0005883a 	mov	r2,zero
 4010c54:	0009883a 	mov	r4,zero
 4010c58:	0021883a 	mov	r16,zero
 4010c5c:	003f4906 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00e984>
 4010c60:	010007c4 	movi	r4,31
 4010c64:	20803a16 	blt	r4,r2,4010d50 <__subdf3+0x5f4>
 4010c68:	01000804 	movi	r4,32
 4010c6c:	2089c83a 	sub	r4,r4,r2
 4010c70:	2912983a 	sll	r9,r5,r4
 4010c74:	3090d83a 	srl	r8,r6,r2
 4010c78:	3108983a 	sll	r4,r6,r4
 4010c7c:	2884d83a 	srl	r2,r5,r2
 4010c80:	4a12b03a 	or	r9,r9,r8
 4010c84:	2008c03a 	cmpne	r4,r4,zero
 4010c88:	4912b03a 	or	r9,r9,r4
 4010c8c:	003f4e06 	br	40109c8 <__alt_mem_onchip_memory2_0+0xfc00e9c8>
 4010c90:	1c48b03a 	or	r4,r3,r17
 4010c94:	20003c26 	beq	r4,zero,4010d88 <__subdf3+0x62c>
 4010c98:	0084303a 	nor	r2,zero,r2
 4010c9c:	1000381e 	bne	r2,zero,4010d80 <__subdf3+0x624>
 4010ca0:	3463c83a 	sub	r17,r6,r17
 4010ca4:	28c5c83a 	sub	r2,r5,r3
 4010ca8:	344d803a 	cmpltu	r6,r6,r17
 4010cac:	1187c83a 	sub	r3,r2,r6
 4010cb0:	4821883a 	mov	r16,r9
 4010cb4:	3825883a 	mov	r18,r7
 4010cb8:	003f0606 	br	40108d4 <__alt_mem_onchip_memory2_0+0xfc00e8d4>
 4010cbc:	2023883a 	mov	r17,r4
 4010cc0:	003f0906 	br	40108e8 <__alt_mem_onchip_memory2_0+0xfc00e8e8>
 4010cc4:	0101ffc4 	movi	r4,2047
 4010cc8:	813f3a1e 	bne	r16,r4,40109b4 <__alt_mem_onchip_memory2_0+0xfc00e9b4>
 4010ccc:	003ec406 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010cd0:	0005883a 	mov	r2,zero
 4010cd4:	003fb106 	br	4010b9c <__alt_mem_onchip_memory2_0+0xfc00eb9c>
 4010cd8:	0005883a 	mov	r2,zero
 4010cdc:	003fbc06 	br	4010bd0 <__alt_mem_onchip_memory2_0+0xfc00ebd0>
 4010ce0:	1c44b03a 	or	r2,r3,r17
 4010ce4:	80008e1e 	bne	r16,zero,4010f20 <__subdf3+0x7c4>
 4010ce8:	1000c826 	beq	r2,zero,401100c <__subdf3+0x8b0>
 4010cec:	2984b03a 	or	r2,r5,r6
 4010cf0:	103ebb26 	beq	r2,zero,40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010cf4:	8989883a 	add	r4,r17,r6
 4010cf8:	1945883a 	add	r2,r3,r5
 4010cfc:	2447803a 	cmpltu	r3,r4,r17
 4010d00:	1887883a 	add	r3,r3,r2
 4010d04:	1880202c 	andhi	r2,r3,128
 4010d08:	2023883a 	mov	r17,r4
 4010d0c:	103f1626 	beq	r2,zero,4010968 <__alt_mem_onchip_memory2_0+0xfc00e968>
 4010d10:	00bfe034 	movhi	r2,65408
 4010d14:	10bfffc4 	addi	r2,r2,-1
 4010d18:	5021883a 	mov	r16,r10
 4010d1c:	1886703a 	and	r3,r3,r2
 4010d20:	003eaf06 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010d24:	3825883a 	mov	r18,r7
 4010d28:	003f0f06 	br	4010968 <__alt_mem_onchip_memory2_0+0xfc00e968>
 4010d2c:	1c44b03a 	or	r2,r3,r17
 4010d30:	8000251e 	bne	r16,zero,4010dc8 <__subdf3+0x66c>
 4010d34:	1000661e 	bne	r2,zero,4010ed0 <__subdf3+0x774>
 4010d38:	2990b03a 	or	r8,r5,r6
 4010d3c:	40009626 	beq	r8,zero,4010f98 <__subdf3+0x83c>
 4010d40:	2807883a 	mov	r3,r5
 4010d44:	3023883a 	mov	r17,r6
 4010d48:	3825883a 	mov	r18,r7
 4010d4c:	003ea406 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010d50:	127ff804 	addi	r9,r2,-32
 4010d54:	01000804 	movi	r4,32
 4010d58:	2a52d83a 	srl	r9,r5,r9
 4010d5c:	11008c26 	beq	r2,r4,4010f90 <__subdf3+0x834>
 4010d60:	01001004 	movi	r4,64
 4010d64:	2085c83a 	sub	r2,r4,r2
 4010d68:	2884983a 	sll	r2,r5,r2
 4010d6c:	118cb03a 	or	r6,r2,r6
 4010d70:	300cc03a 	cmpne	r6,r6,zero
 4010d74:	4992b03a 	or	r9,r9,r6
 4010d78:	0005883a 	mov	r2,zero
 4010d7c:	003f1206 	br	40109c8 <__alt_mem_onchip_memory2_0+0xfc00e9c8>
 4010d80:	0101ffc4 	movi	r4,2047
 4010d84:	493f9c1e 	bne	r9,r4,4010bf8 <__alt_mem_onchip_memory2_0+0xfc00ebf8>
 4010d88:	2807883a 	mov	r3,r5
 4010d8c:	3023883a 	mov	r17,r6
 4010d90:	4821883a 	mov	r16,r9
 4010d94:	3825883a 	mov	r18,r7
 4010d98:	003e9106 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010d9c:	80001f1e 	bne	r16,zero,4010e1c <__subdf3+0x6c0>
 4010da0:	1c48b03a 	or	r4,r3,r17
 4010da4:	20005a26 	beq	r4,zero,4010f10 <__subdf3+0x7b4>
 4010da8:	0084303a 	nor	r2,zero,r2
 4010dac:	1000561e 	bne	r2,zero,4010f08 <__subdf3+0x7ac>
 4010db0:	89a3883a 	add	r17,r17,r6
 4010db4:	1945883a 	add	r2,r3,r5
 4010db8:	898d803a 	cmpltu	r6,r17,r6
 4010dbc:	3087883a 	add	r3,r6,r2
 4010dc0:	4821883a 	mov	r16,r9
 4010dc4:	003f0506 	br	40109dc <__alt_mem_onchip_memory2_0+0xfc00e9dc>
 4010dc8:	10002b1e 	bne	r2,zero,4010e78 <__subdf3+0x71c>
 4010dcc:	2984b03a 	or	r2,r5,r6
 4010dd0:	10008026 	beq	r2,zero,4010fd4 <__subdf3+0x878>
 4010dd4:	2807883a 	mov	r3,r5
 4010dd8:	3023883a 	mov	r17,r6
 4010ddc:	3825883a 	mov	r18,r7
 4010de0:	0401ffc4 	movi	r16,2047
 4010de4:	003e7e06 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010de8:	3809883a 	mov	r4,r7
 4010dec:	0011883a 	mov	r8,zero
 4010df0:	0005883a 	mov	r2,zero
 4010df4:	003ee306 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00e984>
 4010df8:	1c62b03a 	or	r17,r3,r17
 4010dfc:	8822c03a 	cmpne	r17,r17,zero
 4010e00:	0005883a 	mov	r2,zero
 4010e04:	003f8906 	br	4010c2c <__alt_mem_onchip_memory2_0+0xfc00ec2c>
 4010e08:	3809883a 	mov	r4,r7
 4010e0c:	4821883a 	mov	r16,r9
 4010e10:	0011883a 	mov	r8,zero
 4010e14:	0005883a 	mov	r2,zero
 4010e18:	003eda06 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00e984>
 4010e1c:	0101ffc4 	movi	r4,2047
 4010e20:	49003b26 	beq	r9,r4,4010f10 <__subdf3+0x7b4>
 4010e24:	0085c83a 	sub	r2,zero,r2
 4010e28:	18c02034 	orhi	r3,r3,128
 4010e2c:	01000e04 	movi	r4,56
 4010e30:	20806e16 	blt	r4,r2,4010fec <__subdf3+0x890>
 4010e34:	010007c4 	movi	r4,31
 4010e38:	20807716 	blt	r4,r2,4011018 <__subdf3+0x8bc>
 4010e3c:	01000804 	movi	r4,32
 4010e40:	2089c83a 	sub	r4,r4,r2
 4010e44:	1914983a 	sll	r10,r3,r4
 4010e48:	8890d83a 	srl	r8,r17,r2
 4010e4c:	8908983a 	sll	r4,r17,r4
 4010e50:	1884d83a 	srl	r2,r3,r2
 4010e54:	5222b03a 	or	r17,r10,r8
 4010e58:	2006c03a 	cmpne	r3,r4,zero
 4010e5c:	88e2b03a 	or	r17,r17,r3
 4010e60:	89a3883a 	add	r17,r17,r6
 4010e64:	1145883a 	add	r2,r2,r5
 4010e68:	898d803a 	cmpltu	r6,r17,r6
 4010e6c:	3087883a 	add	r3,r6,r2
 4010e70:	4821883a 	mov	r16,r9
 4010e74:	003ed906 	br	40109dc <__alt_mem_onchip_memory2_0+0xfc00e9dc>
 4010e78:	2984b03a 	or	r2,r5,r6
 4010e7c:	10004226 	beq	r2,zero,4010f88 <__subdf3+0x82c>
 4010e80:	1808d0fa 	srli	r4,r3,3
 4010e84:	8822d0fa 	srli	r17,r17,3
 4010e88:	1806977a 	slli	r3,r3,29
 4010e8c:	2080022c 	andhi	r2,r4,8
 4010e90:	1c62b03a 	or	r17,r3,r17
 4010e94:	10000826 	beq	r2,zero,4010eb8 <__subdf3+0x75c>
 4010e98:	2812d0fa 	srli	r9,r5,3
 4010e9c:	4880022c 	andhi	r2,r9,8
 4010ea0:	1000051e 	bne	r2,zero,4010eb8 <__subdf3+0x75c>
 4010ea4:	300cd0fa 	srli	r6,r6,3
 4010ea8:	2804977a 	slli	r2,r5,29
 4010eac:	4809883a 	mov	r4,r9
 4010eb0:	3825883a 	mov	r18,r7
 4010eb4:	11a2b03a 	or	r17,r2,r6
 4010eb8:	8806d77a 	srli	r3,r17,29
 4010ebc:	200890fa 	slli	r4,r4,3
 4010ec0:	882290fa 	slli	r17,r17,3
 4010ec4:	0401ffc4 	movi	r16,2047
 4010ec8:	1906b03a 	or	r3,r3,r4
 4010ecc:	003e4406 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010ed0:	2984b03a 	or	r2,r5,r6
 4010ed4:	103e4226 	beq	r2,zero,40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010ed8:	8989c83a 	sub	r4,r17,r6
 4010edc:	8911803a 	cmpltu	r8,r17,r4
 4010ee0:	1945c83a 	sub	r2,r3,r5
 4010ee4:	1205c83a 	sub	r2,r2,r8
 4010ee8:	1200202c 	andhi	r8,r2,128
 4010eec:	403e9a26 	beq	r8,zero,4010958 <__alt_mem_onchip_memory2_0+0xfc00e958>
 4010ef0:	3463c83a 	sub	r17,r6,r17
 4010ef4:	28c5c83a 	sub	r2,r5,r3
 4010ef8:	344d803a 	cmpltu	r6,r6,r17
 4010efc:	1187c83a 	sub	r3,r2,r6
 4010f00:	3825883a 	mov	r18,r7
 4010f04:	003e3606 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010f08:	0101ffc4 	movi	r4,2047
 4010f0c:	493fc71e 	bne	r9,r4,4010e2c <__alt_mem_onchip_memory2_0+0xfc00ee2c>
 4010f10:	2807883a 	mov	r3,r5
 4010f14:	3023883a 	mov	r17,r6
 4010f18:	4821883a 	mov	r16,r9
 4010f1c:	003e3006 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010f20:	10003626 	beq	r2,zero,4010ffc <__subdf3+0x8a0>
 4010f24:	2984b03a 	or	r2,r5,r6
 4010f28:	10001726 	beq	r2,zero,4010f88 <__subdf3+0x82c>
 4010f2c:	1808d0fa 	srli	r4,r3,3
 4010f30:	8822d0fa 	srli	r17,r17,3
 4010f34:	1806977a 	slli	r3,r3,29
 4010f38:	2080022c 	andhi	r2,r4,8
 4010f3c:	1c62b03a 	or	r17,r3,r17
 4010f40:	10000726 	beq	r2,zero,4010f60 <__subdf3+0x804>
 4010f44:	2812d0fa 	srli	r9,r5,3
 4010f48:	4880022c 	andhi	r2,r9,8
 4010f4c:	1000041e 	bne	r2,zero,4010f60 <__subdf3+0x804>
 4010f50:	300cd0fa 	srli	r6,r6,3
 4010f54:	2804977a 	slli	r2,r5,29
 4010f58:	4809883a 	mov	r4,r9
 4010f5c:	11a2b03a 	or	r17,r2,r6
 4010f60:	8806d77a 	srli	r3,r17,29
 4010f64:	200890fa 	slli	r4,r4,3
 4010f68:	882290fa 	slli	r17,r17,3
 4010f6c:	3825883a 	mov	r18,r7
 4010f70:	1906b03a 	or	r3,r3,r4
 4010f74:	0401ffc4 	movi	r16,2047
 4010f78:	003e1906 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010f7c:	000b883a 	mov	r5,zero
 4010f80:	0005883a 	mov	r2,zero
 4010f84:	003e2e06 	br	4010840 <__alt_mem_onchip_memory2_0+0xfc00e840>
 4010f88:	0401ffc4 	movi	r16,2047
 4010f8c:	003e1406 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4010f90:	0005883a 	mov	r2,zero
 4010f94:	003f7506 	br	4010d6c <__alt_mem_onchip_memory2_0+0xfc00ed6c>
 4010f98:	0005883a 	mov	r2,zero
 4010f9c:	0009883a 	mov	r4,zero
 4010fa0:	003e7806 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00e984>
 4010fa4:	123ff804 	addi	r8,r2,-32
 4010fa8:	01000804 	movi	r4,32
 4010fac:	1a10d83a 	srl	r8,r3,r8
 4010fb0:	11002526 	beq	r2,r4,4011048 <__subdf3+0x8ec>
 4010fb4:	01001004 	movi	r4,64
 4010fb8:	2085c83a 	sub	r2,r4,r2
 4010fbc:	1884983a 	sll	r2,r3,r2
 4010fc0:	1444b03a 	or	r2,r2,r17
 4010fc4:	1004c03a 	cmpne	r2,r2,zero
 4010fc8:	40a2b03a 	or	r17,r8,r2
 4010fcc:	0005883a 	mov	r2,zero
 4010fd0:	003f1606 	br	4010c2c <__alt_mem_onchip_memory2_0+0xfc00ec2c>
 4010fd4:	02000434 	movhi	r8,16
 4010fd8:	0009883a 	mov	r4,zero
 4010fdc:	423fffc4 	addi	r8,r8,-1
 4010fe0:	00bfffc4 	movi	r2,-1
 4010fe4:	0401ffc4 	movi	r16,2047
 4010fe8:	003e6606 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00e984>
 4010fec:	1c62b03a 	or	r17,r3,r17
 4010ff0:	8822c03a 	cmpne	r17,r17,zero
 4010ff4:	0005883a 	mov	r2,zero
 4010ff8:	003f9906 	br	4010e60 <__alt_mem_onchip_memory2_0+0xfc00ee60>
 4010ffc:	2807883a 	mov	r3,r5
 4011000:	3023883a 	mov	r17,r6
 4011004:	0401ffc4 	movi	r16,2047
 4011008:	003df506 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 401100c:	2807883a 	mov	r3,r5
 4011010:	3023883a 	mov	r17,r6
 4011014:	003df206 	br	40107e0 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 4011018:	123ff804 	addi	r8,r2,-32
 401101c:	01000804 	movi	r4,32
 4011020:	1a10d83a 	srl	r8,r3,r8
 4011024:	11000a26 	beq	r2,r4,4011050 <__subdf3+0x8f4>
 4011028:	01001004 	movi	r4,64
 401102c:	2085c83a 	sub	r2,r4,r2
 4011030:	1884983a 	sll	r2,r3,r2
 4011034:	1444b03a 	or	r2,r2,r17
 4011038:	1004c03a 	cmpne	r2,r2,zero
 401103c:	40a2b03a 	or	r17,r8,r2
 4011040:	0005883a 	mov	r2,zero
 4011044:	003f8606 	br	4010e60 <__alt_mem_onchip_memory2_0+0xfc00ee60>
 4011048:	0005883a 	mov	r2,zero
 401104c:	003fdc06 	br	4010fc0 <__alt_mem_onchip_memory2_0+0xfc00efc0>
 4011050:	0005883a 	mov	r2,zero
 4011054:	003ff706 	br	4011034 <__alt_mem_onchip_memory2_0+0xfc00f034>

04011058 <__fixdfsi>:
 4011058:	280cd53a 	srli	r6,r5,20
 401105c:	00c00434 	movhi	r3,16
 4011060:	18ffffc4 	addi	r3,r3,-1
 4011064:	3181ffcc 	andi	r6,r6,2047
 4011068:	01c0ff84 	movi	r7,1022
 401106c:	28c6703a 	and	r3,r5,r3
 4011070:	280ad7fa 	srli	r5,r5,31
 4011074:	3980120e 	bge	r7,r6,40110c0 <__fixdfsi+0x68>
 4011078:	00810744 	movi	r2,1053
 401107c:	11800c16 	blt	r2,r6,40110b0 <__fixdfsi+0x58>
 4011080:	00810cc4 	movi	r2,1075
 4011084:	1185c83a 	sub	r2,r2,r6
 4011088:	01c007c4 	movi	r7,31
 401108c:	18c00434 	orhi	r3,r3,16
 4011090:	38800d16 	blt	r7,r2,40110c8 <__fixdfsi+0x70>
 4011094:	31befb44 	addi	r6,r6,-1043
 4011098:	2084d83a 	srl	r2,r4,r2
 401109c:	1986983a 	sll	r3,r3,r6
 40110a0:	1884b03a 	or	r2,r3,r2
 40110a4:	28000726 	beq	r5,zero,40110c4 <__fixdfsi+0x6c>
 40110a8:	0085c83a 	sub	r2,zero,r2
 40110ac:	f800283a 	ret
 40110b0:	00a00034 	movhi	r2,32768
 40110b4:	10bfffc4 	addi	r2,r2,-1
 40110b8:	2885883a 	add	r2,r5,r2
 40110bc:	f800283a 	ret
 40110c0:	0005883a 	mov	r2,zero
 40110c4:	f800283a 	ret
 40110c8:	008104c4 	movi	r2,1043
 40110cc:	1185c83a 	sub	r2,r2,r6
 40110d0:	1884d83a 	srl	r2,r3,r2
 40110d4:	003ff306 	br	40110a4 <__alt_mem_onchip_memory2_0+0xfc00f0a4>

040110d8 <__floatsidf>:
 40110d8:	defffd04 	addi	sp,sp,-12
 40110dc:	dfc00215 	stw	ra,8(sp)
 40110e0:	dc400115 	stw	r17,4(sp)
 40110e4:	dc000015 	stw	r16,0(sp)
 40110e8:	20002b26 	beq	r4,zero,4011198 <__floatsidf+0xc0>
 40110ec:	2023883a 	mov	r17,r4
 40110f0:	2020d7fa 	srli	r16,r4,31
 40110f4:	20002d16 	blt	r4,zero,40111ac <__floatsidf+0xd4>
 40110f8:	8809883a 	mov	r4,r17
 40110fc:	400136c0 	call	400136c <__clzsi2>
 4011100:	01410784 	movi	r5,1054
 4011104:	288bc83a 	sub	r5,r5,r2
 4011108:	01010cc4 	movi	r4,1075
 401110c:	2149c83a 	sub	r4,r4,r5
 4011110:	00c007c4 	movi	r3,31
 4011114:	1900160e 	bge	r3,r4,4011170 <__floatsidf+0x98>
 4011118:	00c104c4 	movi	r3,1043
 401111c:	1947c83a 	sub	r3,r3,r5
 4011120:	88c6983a 	sll	r3,r17,r3
 4011124:	00800434 	movhi	r2,16
 4011128:	10bfffc4 	addi	r2,r2,-1
 401112c:	1886703a 	and	r3,r3,r2
 4011130:	2941ffcc 	andi	r5,r5,2047
 4011134:	800d883a 	mov	r6,r16
 4011138:	0005883a 	mov	r2,zero
 401113c:	280a953a 	slli	r5,r5,20
 4011140:	31803fcc 	andi	r6,r6,255
 4011144:	01000434 	movhi	r4,16
 4011148:	300c97fa 	slli	r6,r6,31
 401114c:	213fffc4 	addi	r4,r4,-1
 4011150:	1906703a 	and	r3,r3,r4
 4011154:	1946b03a 	or	r3,r3,r5
 4011158:	1986b03a 	or	r3,r3,r6
 401115c:	dfc00217 	ldw	ra,8(sp)
 4011160:	dc400117 	ldw	r17,4(sp)
 4011164:	dc000017 	ldw	r16,0(sp)
 4011168:	dec00304 	addi	sp,sp,12
 401116c:	f800283a 	ret
 4011170:	00c002c4 	movi	r3,11
 4011174:	1887c83a 	sub	r3,r3,r2
 4011178:	88c6d83a 	srl	r3,r17,r3
 401117c:	8904983a 	sll	r2,r17,r4
 4011180:	01000434 	movhi	r4,16
 4011184:	213fffc4 	addi	r4,r4,-1
 4011188:	2941ffcc 	andi	r5,r5,2047
 401118c:	1906703a 	and	r3,r3,r4
 4011190:	800d883a 	mov	r6,r16
 4011194:	003fe906 	br	401113c <__alt_mem_onchip_memory2_0+0xfc00f13c>
 4011198:	000d883a 	mov	r6,zero
 401119c:	000b883a 	mov	r5,zero
 40111a0:	0007883a 	mov	r3,zero
 40111a4:	0005883a 	mov	r2,zero
 40111a8:	003fe406 	br	401113c <__alt_mem_onchip_memory2_0+0xfc00f13c>
 40111ac:	0123c83a 	sub	r17,zero,r4
 40111b0:	003fd106 	br	40110f8 <__alt_mem_onchip_memory2_0+0xfc00f0f8>

040111b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40111b4:	defffe04 	addi	sp,sp,-8
 40111b8:	dfc00115 	stw	ra,4(sp)
 40111bc:	df000015 	stw	fp,0(sp)
 40111c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40111c4:	d0a01817 	ldw	r2,-32672(gp)
 40111c8:	10000326 	beq	r2,zero,40111d8 <alt_get_errno+0x24>
 40111cc:	d0a01817 	ldw	r2,-32672(gp)
 40111d0:	103ee83a 	callr	r2
 40111d4:	00000106 	br	40111dc <alt_get_errno+0x28>
 40111d8:	d0a73a04 	addi	r2,gp,-25368
}
 40111dc:	e037883a 	mov	sp,fp
 40111e0:	dfc00117 	ldw	ra,4(sp)
 40111e4:	df000017 	ldw	fp,0(sp)
 40111e8:	dec00204 	addi	sp,sp,8
 40111ec:	f800283a 	ret

040111f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40111f0:	defffb04 	addi	sp,sp,-20
 40111f4:	dfc00415 	stw	ra,16(sp)
 40111f8:	df000315 	stw	fp,12(sp)
 40111fc:	df000304 	addi	fp,sp,12
 4011200:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4011204:	e0bfff17 	ldw	r2,-4(fp)
 4011208:	10000616 	blt	r2,zero,4011224 <close+0x34>
 401120c:	e0bfff17 	ldw	r2,-4(fp)
 4011210:	10c00324 	muli	r3,r2,12
 4011214:	008100b4 	movhi	r2,1026
 4011218:	10b5ad04 	addi	r2,r2,-10572
 401121c:	1885883a 	add	r2,r3,r2
 4011220:	00000106 	br	4011228 <close+0x38>
 4011224:	0005883a 	mov	r2,zero
 4011228:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401122c:	e0bffd17 	ldw	r2,-12(fp)
 4011230:	10001926 	beq	r2,zero,4011298 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4011234:	e0bffd17 	ldw	r2,-12(fp)
 4011238:	10800017 	ldw	r2,0(r2)
 401123c:	10800417 	ldw	r2,16(r2)
 4011240:	10000626 	beq	r2,zero,401125c <close+0x6c>
 4011244:	e0bffd17 	ldw	r2,-12(fp)
 4011248:	10800017 	ldw	r2,0(r2)
 401124c:	10800417 	ldw	r2,16(r2)
 4011250:	e13ffd17 	ldw	r4,-12(fp)
 4011254:	103ee83a 	callr	r2
 4011258:	00000106 	br	4011260 <close+0x70>
 401125c:	0005883a 	mov	r2,zero
 4011260:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4011264:	e13fff17 	ldw	r4,-4(fp)
 4011268:	4011a280 	call	4011a28 <alt_release_fd>
    if (rval < 0)
 401126c:	e0bffe17 	ldw	r2,-8(fp)
 4011270:	1000070e 	bge	r2,zero,4011290 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4011274:	40111b40 	call	40111b4 <alt_get_errno>
 4011278:	1007883a 	mov	r3,r2
 401127c:	e0bffe17 	ldw	r2,-8(fp)
 4011280:	0085c83a 	sub	r2,zero,r2
 4011284:	18800015 	stw	r2,0(r3)
      return -1;
 4011288:	00bfffc4 	movi	r2,-1
 401128c:	00000706 	br	40112ac <close+0xbc>
    }
    return 0;
 4011290:	0005883a 	mov	r2,zero
 4011294:	00000506 	br	40112ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011298:	40111b40 	call	40111b4 <alt_get_errno>
 401129c:	1007883a 	mov	r3,r2
 40112a0:	00801444 	movi	r2,81
 40112a4:	18800015 	stw	r2,0(r3)
    return -1;
 40112a8:	00bfffc4 	movi	r2,-1
  }
}
 40112ac:	e037883a 	mov	sp,fp
 40112b0:	dfc00117 	ldw	ra,4(sp)
 40112b4:	df000017 	ldw	fp,0(sp)
 40112b8:	dec00204 	addi	sp,sp,8
 40112bc:	f800283a 	ret

040112c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40112c0:	defffc04 	addi	sp,sp,-16
 40112c4:	df000315 	stw	fp,12(sp)
 40112c8:	df000304 	addi	fp,sp,12
 40112cc:	e13ffd15 	stw	r4,-12(fp)
 40112d0:	e17ffe15 	stw	r5,-8(fp)
 40112d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40112d8:	e0bfff17 	ldw	r2,-4(fp)
}
 40112dc:	e037883a 	mov	sp,fp
 40112e0:	df000017 	ldw	fp,0(sp)
 40112e4:	dec00104 	addi	sp,sp,4
 40112e8:	f800283a 	ret

040112ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40112ec:	defffe04 	addi	sp,sp,-8
 40112f0:	dfc00115 	stw	ra,4(sp)
 40112f4:	df000015 	stw	fp,0(sp)
 40112f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40112fc:	d0a01817 	ldw	r2,-32672(gp)
 4011300:	10000326 	beq	r2,zero,4011310 <alt_get_errno+0x24>
 4011304:	d0a01817 	ldw	r2,-32672(gp)
 4011308:	103ee83a 	callr	r2
 401130c:	00000106 	br	4011314 <alt_get_errno+0x28>
 4011310:	d0a73a04 	addi	r2,gp,-25368
}
 4011314:	e037883a 	mov	sp,fp
 4011318:	dfc00117 	ldw	ra,4(sp)
 401131c:	df000017 	ldw	fp,0(sp)
 4011320:	dec00204 	addi	sp,sp,8
 4011324:	f800283a 	ret

04011328 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4011328:	defffb04 	addi	sp,sp,-20
 401132c:	dfc00415 	stw	ra,16(sp)
 4011330:	df000315 	stw	fp,12(sp)
 4011334:	df000304 	addi	fp,sp,12
 4011338:	e13ffe15 	stw	r4,-8(fp)
 401133c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011340:	e0bffe17 	ldw	r2,-8(fp)
 4011344:	10000616 	blt	r2,zero,4011360 <fstat+0x38>
 4011348:	e0bffe17 	ldw	r2,-8(fp)
 401134c:	10c00324 	muli	r3,r2,12
 4011350:	008100b4 	movhi	r2,1026
 4011354:	10b5ad04 	addi	r2,r2,-10572
 4011358:	1885883a 	add	r2,r3,r2
 401135c:	00000106 	br	4011364 <fstat+0x3c>
 4011360:	0005883a 	mov	r2,zero
 4011364:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4011368:	e0bffd17 	ldw	r2,-12(fp)
 401136c:	10001026 	beq	r2,zero,40113b0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4011370:	e0bffd17 	ldw	r2,-12(fp)
 4011374:	10800017 	ldw	r2,0(r2)
 4011378:	10800817 	ldw	r2,32(r2)
 401137c:	10000726 	beq	r2,zero,401139c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4011380:	e0bffd17 	ldw	r2,-12(fp)
 4011384:	10800017 	ldw	r2,0(r2)
 4011388:	10800817 	ldw	r2,32(r2)
 401138c:	e17fff17 	ldw	r5,-4(fp)
 4011390:	e13ffd17 	ldw	r4,-12(fp)
 4011394:	103ee83a 	callr	r2
 4011398:	00000a06 	br	40113c4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401139c:	e0bfff17 	ldw	r2,-4(fp)
 40113a0:	00c80004 	movi	r3,8192
 40113a4:	10c00115 	stw	r3,4(r2)
      return 0;
 40113a8:	0005883a 	mov	r2,zero
 40113ac:	00000506 	br	40113c4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40113b0:	40112ec0 	call	40112ec <alt_get_errno>
 40113b4:	1007883a 	mov	r3,r2
 40113b8:	00801444 	movi	r2,81
 40113bc:	18800015 	stw	r2,0(r3)
    return -1;
 40113c0:	00bfffc4 	movi	r2,-1
  }
}
 40113c4:	e037883a 	mov	sp,fp
 40113c8:	dfc00117 	ldw	ra,4(sp)
 40113cc:	df000017 	ldw	fp,0(sp)
 40113d0:	dec00204 	addi	sp,sp,8
 40113d4:	f800283a 	ret

040113d8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 40113d8:	defff004 	addi	sp,sp,-64
 40113dc:	df000f15 	stw	fp,60(sp)
 40113e0:	df000f04 	addi	fp,sp,60
 40113e4:	e13ffd15 	stw	r4,-12(fp)
 40113e8:	e17ffe15 	stw	r5,-8(fp)
 40113ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 40113f0:	00bffa84 	movi	r2,-22
 40113f4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40113f8:	e0bffd17 	ldw	r2,-12(fp)
 40113fc:	10800828 	cmpgeui	r2,r2,32
 4011400:	1000501e 	bne	r2,zero,4011544 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011404:	0005303a 	rdctl	r2,status
 4011408:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401140c:	e0fff617 	ldw	r3,-40(fp)
 4011410:	00bfff84 	movi	r2,-2
 4011414:	1884703a 	and	r2,r3,r2
 4011418:	1001703a 	wrctl	status,r2
  
  return context;
 401141c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4011420:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 4011424:	008100f4 	movhi	r2,1027
 4011428:	10a64504 	addi	r2,r2,-26348
 401142c:	e0fffd17 	ldw	r3,-12(fp)
 4011430:	180690fa 	slli	r3,r3,3
 4011434:	10c5883a 	add	r2,r2,r3
 4011438:	e0ffff17 	ldw	r3,-4(fp)
 401143c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 4011440:	008100f4 	movhi	r2,1027
 4011444:	10a64504 	addi	r2,r2,-26348
 4011448:	e0fffd17 	ldw	r3,-12(fp)
 401144c:	180690fa 	slli	r3,r3,3
 4011450:	10c5883a 	add	r2,r2,r3
 4011454:	10800104 	addi	r2,r2,4
 4011458:	e0fffe17 	ldw	r3,-8(fp)
 401145c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4011460:	e0bfff17 	ldw	r2,-4(fp)
 4011464:	10001926 	beq	r2,zero,40114cc <alt_irq_register+0xf4>
 4011468:	e0bffd17 	ldw	r2,-12(fp)
 401146c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011470:	0005303a 	rdctl	r2,status
 4011474:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011478:	e0fff717 	ldw	r3,-36(fp)
 401147c:	00bfff84 	movi	r2,-2
 4011480:	1884703a 	and	r2,r3,r2
 4011484:	1001703a 	wrctl	status,r2
  
  return context;
 4011488:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401148c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4011490:	00c00044 	movi	r3,1
 4011494:	e0bff217 	ldw	r2,-56(fp)
 4011498:	1884983a 	sll	r2,r3,r2
 401149c:	1007883a 	mov	r3,r2
 40114a0:	d0a73c17 	ldw	r2,-25360(gp)
 40114a4:	1884b03a 	or	r2,r3,r2
 40114a8:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40114ac:	d0a73c17 	ldw	r2,-25360(gp)
 40114b0:	100170fa 	wrctl	ienable,r2
 40114b4:	e0bff817 	ldw	r2,-32(fp)
 40114b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40114bc:	e0bff917 	ldw	r2,-28(fp)
 40114c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40114c4:	0005883a 	mov	r2,zero
 40114c8:	00001906 	br	4011530 <alt_irq_register+0x158>
 40114cc:	e0bffd17 	ldw	r2,-12(fp)
 40114d0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114d4:	0005303a 	rdctl	r2,status
 40114d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114dc:	e0fffa17 	ldw	r3,-24(fp)
 40114e0:	00bfff84 	movi	r2,-2
 40114e4:	1884703a 	and	r2,r3,r2
 40114e8:	1001703a 	wrctl	status,r2
  
  return context;
 40114ec:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40114f0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 40114f4:	00c00044 	movi	r3,1
 40114f8:	e0bff417 	ldw	r2,-48(fp)
 40114fc:	1884983a 	sll	r2,r3,r2
 4011500:	0084303a 	nor	r2,zero,r2
 4011504:	1007883a 	mov	r3,r2
 4011508:	d0a73c17 	ldw	r2,-25360(gp)
 401150c:	1884703a 	and	r2,r3,r2
 4011510:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011514:	d0a73c17 	ldw	r2,-25360(gp)
 4011518:	100170fa 	wrctl	ienable,r2
 401151c:	e0bffb17 	ldw	r2,-20(fp)
 4011520:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011524:	e0bffc17 	ldw	r2,-16(fp)
 4011528:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401152c:	0005883a 	mov	r2,zero
 4011530:	e0bff115 	stw	r2,-60(fp)
 4011534:	e0bff317 	ldw	r2,-52(fp)
 4011538:	e0bff515 	stw	r2,-44(fp)
 401153c:	e0bff517 	ldw	r2,-44(fp)
 4011540:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4011544:	e0bff117 	ldw	r2,-60(fp)
}
 4011548:	e037883a 	mov	sp,fp
 401154c:	df000017 	ldw	fp,0(sp)
 4011550:	dec00104 	addi	sp,sp,4
 4011554:	f800283a 	ret

04011558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011558:	defffe04 	addi	sp,sp,-8
 401155c:	dfc00115 	stw	ra,4(sp)
 4011560:	df000015 	stw	fp,0(sp)
 4011564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011568:	d0a01817 	ldw	r2,-32672(gp)
 401156c:	10000326 	beq	r2,zero,401157c <alt_get_errno+0x24>
 4011570:	d0a01817 	ldw	r2,-32672(gp)
 4011574:	103ee83a 	callr	r2
 4011578:	00000106 	br	4011580 <alt_get_errno+0x28>
 401157c:	d0a73a04 	addi	r2,gp,-25368
}
 4011580:	e037883a 	mov	sp,fp
 4011584:	dfc00117 	ldw	ra,4(sp)
 4011588:	df000017 	ldw	fp,0(sp)
 401158c:	dec00204 	addi	sp,sp,8
 4011590:	f800283a 	ret

04011594 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4011594:	deffed04 	addi	sp,sp,-76
 4011598:	dfc01215 	stw	ra,72(sp)
 401159c:	df001115 	stw	fp,68(sp)
 40115a0:	df001104 	addi	fp,sp,68
 40115a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40115a8:	e0bfff17 	ldw	r2,-4(fp)
 40115ac:	10000616 	blt	r2,zero,40115c8 <isatty+0x34>
 40115b0:	e0bfff17 	ldw	r2,-4(fp)
 40115b4:	10c00324 	muli	r3,r2,12
 40115b8:	008100b4 	movhi	r2,1026
 40115bc:	10b5ad04 	addi	r2,r2,-10572
 40115c0:	1885883a 	add	r2,r3,r2
 40115c4:	00000106 	br	40115cc <isatty+0x38>
 40115c8:	0005883a 	mov	r2,zero
 40115cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40115d0:	e0bfef17 	ldw	r2,-68(fp)
 40115d4:	10000e26 	beq	r2,zero,4011610 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40115d8:	e0bfef17 	ldw	r2,-68(fp)
 40115dc:	10800017 	ldw	r2,0(r2)
 40115e0:	10800817 	ldw	r2,32(r2)
 40115e4:	1000021e 	bne	r2,zero,40115f0 <isatty+0x5c>
    {
      return 1;
 40115e8:	00800044 	movi	r2,1
 40115ec:	00000d06 	br	4011624 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40115f0:	e0bff004 	addi	r2,fp,-64
 40115f4:	100b883a 	mov	r5,r2
 40115f8:	e13fff17 	ldw	r4,-4(fp)
 40115fc:	40113280 	call	4011328 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4011600:	e0bff117 	ldw	r2,-60(fp)
 4011604:	10880020 	cmpeqi	r2,r2,8192
 4011608:	10803fcc 	andi	r2,r2,255
 401160c:	00000506 	br	4011624 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011610:	40115580 	call	4011558 <alt_get_errno>
 4011614:	1007883a 	mov	r3,r2
 4011618:	00801444 	movi	r2,81
 401161c:	18800015 	stw	r2,0(r3)
    return 0;
 4011620:	0005883a 	mov	r2,zero
  }
}
 4011624:	e037883a 	mov	sp,fp
 4011628:	dfc00117 	ldw	ra,4(sp)
 401162c:	df000017 	ldw	fp,0(sp)
 4011630:	dec00204 	addi	sp,sp,8
 4011634:	f800283a 	ret

04011638 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4011638:	defffc04 	addi	sp,sp,-16
 401163c:	df000315 	stw	fp,12(sp)
 4011640:	df000304 	addi	fp,sp,12
 4011644:	e13ffd15 	stw	r4,-12(fp)
 4011648:	e17ffe15 	stw	r5,-8(fp)
 401164c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4011650:	e0fffe17 	ldw	r3,-8(fp)
 4011654:	e0bffd17 	ldw	r2,-12(fp)
 4011658:	18800c26 	beq	r3,r2,401168c <alt_load_section+0x54>
  {
    while( to != end )
 401165c:	00000806 	br	4011680 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4011660:	e0bffe17 	ldw	r2,-8(fp)
 4011664:	10c00104 	addi	r3,r2,4
 4011668:	e0fffe15 	stw	r3,-8(fp)
 401166c:	e0fffd17 	ldw	r3,-12(fp)
 4011670:	19000104 	addi	r4,r3,4
 4011674:	e13ffd15 	stw	r4,-12(fp)
 4011678:	18c00017 	ldw	r3,0(r3)
 401167c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4011680:	e0fffe17 	ldw	r3,-8(fp)
 4011684:	e0bfff17 	ldw	r2,-4(fp)
 4011688:	18bff51e 	bne	r3,r2,4011660 <__alt_mem_onchip_memory2_0+0xfc00f660>
    {
      *to++ = *from++;
    }
  }
}
 401168c:	0001883a 	nop
 4011690:	e037883a 	mov	sp,fp
 4011694:	df000017 	ldw	fp,0(sp)
 4011698:	dec00104 	addi	sp,sp,4
 401169c:	f800283a 	ret

040116a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40116a0:	defffe04 	addi	sp,sp,-8
 40116a4:	dfc00115 	stw	ra,4(sp)
 40116a8:	df000015 	stw	fp,0(sp)
 40116ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40116b0:	018100b4 	movhi	r6,1026
 40116b4:	31ba6404 	addi	r6,r6,-5744
 40116b8:	014100b4 	movhi	r5,1026
 40116bc:	29737a04 	addi	r5,r5,-12824
 40116c0:	010100b4 	movhi	r4,1026
 40116c4:	213a6404 	addi	r4,r4,-5744
 40116c8:	40116380 	call	4011638 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40116cc:	01810034 	movhi	r6,1024
 40116d0:	31809104 	addi	r6,r6,580
 40116d4:	01410034 	movhi	r5,1024
 40116d8:	29400804 	addi	r5,r5,32
 40116dc:	01010034 	movhi	r4,1024
 40116e0:	21000804 	addi	r4,r4,32
 40116e4:	40116380 	call	4011638 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40116e8:	018100b4 	movhi	r6,1026
 40116ec:	31b37a04 	addi	r6,r6,-12824
 40116f0:	014100b4 	movhi	r5,1026
 40116f4:	29724d04 	addi	r5,r5,-14028
 40116f8:	010100b4 	movhi	r4,1026
 40116fc:	21324d04 	addi	r4,r4,-14028
 4011700:	40116380 	call	4011638 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4011704:	401b4900 	call	401b490 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4011708:	401b6780 	call	401b678 <alt_icache_flush_all>
}
 401170c:	0001883a 	nop
 4011710:	e037883a 	mov	sp,fp
 4011714:	dfc00117 	ldw	ra,4(sp)
 4011718:	df000017 	ldw	fp,0(sp)
 401171c:	dec00204 	addi	sp,sp,8
 4011720:	f800283a 	ret

04011724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011724:	defffe04 	addi	sp,sp,-8
 4011728:	dfc00115 	stw	ra,4(sp)
 401172c:	df000015 	stw	fp,0(sp)
 4011730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011734:	d0a01817 	ldw	r2,-32672(gp)
 4011738:	10000326 	beq	r2,zero,4011748 <alt_get_errno+0x24>
 401173c:	d0a01817 	ldw	r2,-32672(gp)
 4011740:	103ee83a 	callr	r2
 4011744:	00000106 	br	401174c <alt_get_errno+0x28>
 4011748:	d0a73a04 	addi	r2,gp,-25368
}
 401174c:	e037883a 	mov	sp,fp
 4011750:	dfc00117 	ldw	ra,4(sp)
 4011754:	df000017 	ldw	fp,0(sp)
 4011758:	dec00204 	addi	sp,sp,8
 401175c:	f800283a 	ret

04011760 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4011760:	defff904 	addi	sp,sp,-28
 4011764:	dfc00615 	stw	ra,24(sp)
 4011768:	df000515 	stw	fp,20(sp)
 401176c:	df000504 	addi	fp,sp,20
 4011770:	e13ffd15 	stw	r4,-12(fp)
 4011774:	e17ffe15 	stw	r5,-8(fp)
 4011778:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401177c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011780:	e0bffd17 	ldw	r2,-12(fp)
 4011784:	10000616 	blt	r2,zero,40117a0 <lseek+0x40>
 4011788:	e0bffd17 	ldw	r2,-12(fp)
 401178c:	10c00324 	muli	r3,r2,12
 4011790:	008100b4 	movhi	r2,1026
 4011794:	10b5ad04 	addi	r2,r2,-10572
 4011798:	1885883a 	add	r2,r3,r2
 401179c:	00000106 	br	40117a4 <lseek+0x44>
 40117a0:	0005883a 	mov	r2,zero
 40117a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40117a8:	e0bffc17 	ldw	r2,-16(fp)
 40117ac:	10001026 	beq	r2,zero,40117f0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40117b0:	e0bffc17 	ldw	r2,-16(fp)
 40117b4:	10800017 	ldw	r2,0(r2)
 40117b8:	10800717 	ldw	r2,28(r2)
 40117bc:	10000926 	beq	r2,zero,40117e4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40117c0:	e0bffc17 	ldw	r2,-16(fp)
 40117c4:	10800017 	ldw	r2,0(r2)
 40117c8:	10800717 	ldw	r2,28(r2)
 40117cc:	e1bfff17 	ldw	r6,-4(fp)
 40117d0:	e17ffe17 	ldw	r5,-8(fp)
 40117d4:	e13ffc17 	ldw	r4,-16(fp)
 40117d8:	103ee83a 	callr	r2
 40117dc:	e0bffb15 	stw	r2,-20(fp)
 40117e0:	00000506 	br	40117f8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40117e4:	00bfde84 	movi	r2,-134
 40117e8:	e0bffb15 	stw	r2,-20(fp)
 40117ec:	00000206 	br	40117f8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40117f0:	00bfebc4 	movi	r2,-81
 40117f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40117f8:	e0bffb17 	ldw	r2,-20(fp)
 40117fc:	1000070e 	bge	r2,zero,401181c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4011800:	40117240 	call	4011724 <alt_get_errno>
 4011804:	1007883a 	mov	r3,r2
 4011808:	e0bffb17 	ldw	r2,-20(fp)
 401180c:	0085c83a 	sub	r2,zero,r2
 4011810:	18800015 	stw	r2,0(r3)
    rc = -1;
 4011814:	00bfffc4 	movi	r2,-1
 4011818:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401181c:	e0bffb17 	ldw	r2,-20(fp)
}
 4011820:	e037883a 	mov	sp,fp
 4011824:	dfc00117 	ldw	ra,4(sp)
 4011828:	df000017 	ldw	fp,0(sp)
 401182c:	dec00204 	addi	sp,sp,8
 4011830:	f800283a 	ret

04011834 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4011834:	defff904 	addi	sp,sp,-28
 4011838:	dfc00615 	stw	ra,24(sp)
 401183c:	df000515 	stw	fp,20(sp)
 4011840:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4011844:	0009883a 	mov	r4,zero
 4011848:	401a3540 	call	401a354 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401184c:	40129040 	call	4012904 <OSInit>
 4011850:	01000044 	movi	r4,1
 4011854:	4017d1c0 	call	4017d1c <OSSemCreate>
 4011858:	d0a74115 	stw	r2,-25340(gp)
 401185c:	01000044 	movi	r4,1
 4011860:	4017d1c0 	call	4017d1c <OSSemCreate>
 4011864:	d0a74315 	stw	r2,-25332(gp)
 4011868:	d0a73b04 	addi	r2,gp,-25364
 401186c:	e0bffc15 	stw	r2,-16(fp)
 4011870:	00800044 	movi	r2,1
 4011874:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 4011878:	e0bffd0b 	ldhu	r2,-12(fp)
 401187c:	1009883a 	mov	r4,r2
 4011880:	4017d1c0 	call	4017d1c <OSSemCreate>
 4011884:	1007883a 	mov	r3,r2
 4011888:	e0bffc17 	ldw	r2,-16(fp)
 401188c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4011890:	401a38c0 	call	401a38c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4011894:	018100b4 	movhi	r6,1026
 4011898:	31b32904 	addi	r6,r6,-13148
 401189c:	014100b4 	movhi	r5,1026
 40118a0:	29732904 	addi	r5,r5,-13148
 40118a4:	010100b4 	movhi	r4,1026
 40118a8:	21332904 	addi	r4,r4,-13148
 40118ac:	401ba100 	call	401ba10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40118b0:	401b5b80 	call	401b5b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40118b4:	010100b4 	movhi	r4,1026
 40118b8:	212d8604 	addi	r4,r4,-18920
 40118bc:	401c5a00 	call	401c5a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40118c0:	d0a73d17 	ldw	r2,-25356(gp)
 40118c4:	d0e73e17 	ldw	r3,-25352(gp)
 40118c8:	d1273f17 	ldw	r4,-25348(gp)
 40118cc:	200d883a 	mov	r6,r4
 40118d0:	180b883a 	mov	r5,r3
 40118d4:	1009883a 	mov	r4,r2
 40118d8:	4000b980 	call	4000b98 <main>
 40118dc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 40118e0:	01000044 	movi	r4,1
 40118e4:	40111f00 	call	40111f0 <close>
  exit (result);
 40118e8:	e13ffb17 	ldw	r4,-20(fp)
 40118ec:	401c5b40 	call	401c5b4 <exit>

040118f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40118f0:	defffe04 	addi	sp,sp,-8
 40118f4:	dfc00115 	stw	ra,4(sp)
 40118f8:	df000015 	stw	fp,0(sp)
 40118fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011900:	d0a01817 	ldw	r2,-32672(gp)
 4011904:	10000326 	beq	r2,zero,4011914 <alt_get_errno+0x24>
 4011908:	d0a01817 	ldw	r2,-32672(gp)
 401190c:	103ee83a 	callr	r2
 4011910:	00000106 	br	4011918 <alt_get_errno+0x28>
 4011914:	d0a73a04 	addi	r2,gp,-25368
}
 4011918:	e037883a 	mov	sp,fp
 401191c:	dfc00117 	ldw	ra,4(sp)
 4011920:	df000017 	ldw	fp,0(sp)
 4011924:	dec00204 	addi	sp,sp,8
 4011928:	f800283a 	ret

0401192c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401192c:	defff904 	addi	sp,sp,-28
 4011930:	dfc00615 	stw	ra,24(sp)
 4011934:	df000515 	stw	fp,20(sp)
 4011938:	df000504 	addi	fp,sp,20
 401193c:	e13ffd15 	stw	r4,-12(fp)
 4011940:	e17ffe15 	stw	r5,-8(fp)
 4011944:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011948:	e0bffd17 	ldw	r2,-12(fp)
 401194c:	10000616 	blt	r2,zero,4011968 <read+0x3c>
 4011950:	e0bffd17 	ldw	r2,-12(fp)
 4011954:	10c00324 	muli	r3,r2,12
 4011958:	008100b4 	movhi	r2,1026
 401195c:	10b5ad04 	addi	r2,r2,-10572
 4011960:	1885883a 	add	r2,r3,r2
 4011964:	00000106 	br	401196c <read+0x40>
 4011968:	0005883a 	mov	r2,zero
 401196c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011970:	e0bffb17 	ldw	r2,-20(fp)
 4011974:	10002226 	beq	r2,zero,4011a00 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011978:	e0bffb17 	ldw	r2,-20(fp)
 401197c:	10800217 	ldw	r2,8(r2)
 4011980:	108000cc 	andi	r2,r2,3
 4011984:	10800060 	cmpeqi	r2,r2,1
 4011988:	1000181e 	bne	r2,zero,40119ec <read+0xc0>
        (fd->dev->read))
 401198c:	e0bffb17 	ldw	r2,-20(fp)
 4011990:	10800017 	ldw	r2,0(r2)
 4011994:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011998:	10001426 	beq	r2,zero,40119ec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401199c:	e0bffb17 	ldw	r2,-20(fp)
 40119a0:	10800017 	ldw	r2,0(r2)
 40119a4:	10800517 	ldw	r2,20(r2)
 40119a8:	e0ffff17 	ldw	r3,-4(fp)
 40119ac:	180d883a 	mov	r6,r3
 40119b0:	e17ffe17 	ldw	r5,-8(fp)
 40119b4:	e13ffb17 	ldw	r4,-20(fp)
 40119b8:	103ee83a 	callr	r2
 40119bc:	e0bffc15 	stw	r2,-16(fp)
 40119c0:	e0bffc17 	ldw	r2,-16(fp)
 40119c4:	1000070e 	bge	r2,zero,40119e4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 40119c8:	40118f00 	call	40118f0 <alt_get_errno>
 40119cc:	1007883a 	mov	r3,r2
 40119d0:	e0bffc17 	ldw	r2,-16(fp)
 40119d4:	0085c83a 	sub	r2,zero,r2
 40119d8:	18800015 	stw	r2,0(r3)
          return -1;
 40119dc:	00bfffc4 	movi	r2,-1
 40119e0:	00000c06 	br	4011a14 <read+0xe8>
        }
        return rval;
 40119e4:	e0bffc17 	ldw	r2,-16(fp)
 40119e8:	00000a06 	br	4011a14 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40119ec:	40118f00 	call	40118f0 <alt_get_errno>
 40119f0:	1007883a 	mov	r3,r2
 40119f4:	00800344 	movi	r2,13
 40119f8:	18800015 	stw	r2,0(r3)
 40119fc:	00000406 	br	4011a10 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4011a00:	40118f00 	call	40118f0 <alt_get_errno>
 4011a04:	1007883a 	mov	r3,r2
 4011a08:	00801444 	movi	r2,81
 4011a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011a10:	00bfffc4 	movi	r2,-1
}
 4011a14:	e037883a 	mov	sp,fp
 4011a18:	dfc00117 	ldw	ra,4(sp)
 4011a1c:	df000017 	ldw	fp,0(sp)
 4011a20:	dec00204 	addi	sp,sp,8
 4011a24:	f800283a 	ret

04011a28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4011a28:	defffe04 	addi	sp,sp,-8
 4011a2c:	df000115 	stw	fp,4(sp)
 4011a30:	df000104 	addi	fp,sp,4
 4011a34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4011a38:	e0bfff17 	ldw	r2,-4(fp)
 4011a3c:	108000d0 	cmplti	r2,r2,3
 4011a40:	10000d1e 	bne	r2,zero,4011a78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4011a44:	008100b4 	movhi	r2,1026
 4011a48:	10b5ad04 	addi	r2,r2,-10572
 4011a4c:	e0ffff17 	ldw	r3,-4(fp)
 4011a50:	18c00324 	muli	r3,r3,12
 4011a54:	10c5883a 	add	r2,r2,r3
 4011a58:	10800204 	addi	r2,r2,8
 4011a5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4011a60:	008100b4 	movhi	r2,1026
 4011a64:	10b5ad04 	addi	r2,r2,-10572
 4011a68:	e0ffff17 	ldw	r3,-4(fp)
 4011a6c:	18c00324 	muli	r3,r3,12
 4011a70:	10c5883a 	add	r2,r2,r3
 4011a74:	10000015 	stw	zero,0(r2)
  }
}
 4011a78:	0001883a 	nop
 4011a7c:	e037883a 	mov	sp,fp
 4011a80:	df000017 	ldw	fp,0(sp)
 4011a84:	dec00104 	addi	sp,sp,4
 4011a88:	f800283a 	ret

04011a8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4011a8c:	defff904 	addi	sp,sp,-28
 4011a90:	df000615 	stw	fp,24(sp)
 4011a94:	df000604 	addi	fp,sp,24
 4011a98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011a9c:	0005303a 	rdctl	r2,status
 4011aa0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011aa4:	e0fffe17 	ldw	r3,-8(fp)
 4011aa8:	00bfff84 	movi	r2,-2
 4011aac:	1884703a 	and	r2,r3,r2
 4011ab0:	1001703a 	wrctl	status,r2
  
  return context;
 4011ab4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4011ab8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4011abc:	d0a01a17 	ldw	r2,-32664(gp)
 4011ac0:	10c000c4 	addi	r3,r2,3
 4011ac4:	00bfff04 	movi	r2,-4
 4011ac8:	1884703a 	and	r2,r3,r2
 4011acc:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4011ad0:	d0e01a17 	ldw	r3,-32664(gp)
 4011ad4:	e0bfff17 	ldw	r2,-4(fp)
 4011ad8:	1887883a 	add	r3,r3,r2
 4011adc:	00820034 	movhi	r2,2048
 4011ae0:	10800004 	addi	r2,r2,0
 4011ae4:	10c0062e 	bgeu	r2,r3,4011b00 <sbrk+0x74>
 4011ae8:	e0bffb17 	ldw	r2,-20(fp)
 4011aec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011af0:	e0bffa17 	ldw	r2,-24(fp)
 4011af4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4011af8:	00bfffc4 	movi	r2,-1
 4011afc:	00000b06 	br	4011b2c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4011b00:	d0a01a17 	ldw	r2,-32664(gp)
 4011b04:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4011b08:	d0e01a17 	ldw	r3,-32664(gp)
 4011b0c:	e0bfff17 	ldw	r2,-4(fp)
 4011b10:	1885883a 	add	r2,r3,r2
 4011b14:	d0a01a15 	stw	r2,-32664(gp)
 4011b18:	e0bffb17 	ldw	r2,-20(fp)
 4011b1c:	e0bffc15 	stw	r2,-16(fp)
 4011b20:	e0bffc17 	ldw	r2,-16(fp)
 4011b24:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4011b28:	e0bffd17 	ldw	r2,-12(fp)
} 
 4011b2c:	e037883a 	mov	sp,fp
 4011b30:	df000017 	ldw	fp,0(sp)
 4011b34:	dec00104 	addi	sp,sp,4
 4011b38:	f800283a 	ret

04011b3c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4011b3c:	defffa04 	addi	sp,sp,-24
 4011b40:	dfc00515 	stw	ra,20(sp)
 4011b44:	df000415 	stw	fp,16(sp)
 4011b48:	dc000315 	stw	r16,12(sp)
 4011b4c:	df000404 	addi	fp,sp,16
 4011b50:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 4011b54:	d0a74443 	ldbu	r2,-25327(gp)
 4011b58:	10803fcc 	andi	r2,r2,255
 4011b5c:	1000031e 	bne	r2,zero,4011b6c <usleep+0x30>
  {
    return alt_busy_sleep (us);
 4011b60:	e13ffe17 	ldw	r4,-8(fp)
 4011b64:	401b3380 	call	401b338 <alt_busy_sleep>
 4011b68:	00003306 	br	4011c38 <usleep+0xfc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4011b6c:	d0a75817 	ldw	r2,-25248(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 4011b70:	e0bffd15 	stw	r2,-12(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 4011b74:	e0bffe17 	ldw	r2,-8(fp)
 4011b78:	014003f4 	movhi	r5,15
 4011b7c:	29509004 	addi	r5,r5,16960
 4011b80:	1009883a 	mov	r4,r2
 4011b84:	4000dbc0 	call	4000dbc <__udivsi3>
 4011b88:	1007883a 	mov	r3,r2
 4011b8c:	e0bffd17 	ldw	r2,-12(fp)
 4011b90:	18a1383a 	mul	r16,r3,r2
 4011b94:	e0bffe17 	ldw	r2,-8(fp)
 4011b98:	014003f4 	movhi	r5,15
 4011b9c:	29509004 	addi	r5,r5,16960
 4011ba0:	1009883a 	mov	r4,r2
 4011ba4:	4000e200 	call	4000e20 <__umodsi3>
 4011ba8:	1007883a 	mov	r3,r2
 4011bac:	e0bffd17 	ldw	r2,-12(fp)
 4011bb0:	1885383a 	mul	r2,r3,r2
 4011bb4:	014003f4 	movhi	r5,15
 4011bb8:	29509004 	addi	r5,r5,16960
 4011bbc:	1009883a 	mov	r4,r2
 4011bc0:	4000dbc0 	call	4000dbc <__udivsi3>
 4011bc4:	8085883a 	add	r2,r16,r2
 4011bc8:	e0bffc15 	stw	r2,-16(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4011bcc:	00000706 	br	4011bec <usleep+0xb0>
  {
    OSTimeDly(0xffff);
 4011bd0:	013fffd4 	movui	r4,65535
 4011bd4:	4019e380 	call	4019e38 <OSTimeDly>
    ticks -= 0xffff;
 4011bd8:	e0fffc17 	ldw	r3,-16(fp)
 4011bdc:	00bffff4 	movhi	r2,65535
 4011be0:	10800044 	addi	r2,r2,1
 4011be4:	1885883a 	add	r2,r3,r2
 4011be8:	e0bffc15 	stw	r2,-16(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4011bec:	e0bffc17 	ldw	r2,-16(fp)
 4011bf0:	00ffffd4 	movui	r3,65535
 4011bf4:	18bff636 	bltu	r3,r2,4011bd0 <__alt_mem_onchip_memory2_0+0xfc00fbd0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 4011bf8:	e0bffc17 	ldw	r2,-16(fp)
 4011bfc:	10bfffcc 	andi	r2,r2,65535
 4011c00:	1009883a 	mov	r4,r2
 4011c04:	4019e380 	call	4019e38 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 4011c08:	e17ffd17 	ldw	r5,-12(fp)
 4011c0c:	010003f4 	movhi	r4,15
 4011c10:	21109004 	addi	r4,r4,16960
 4011c14:	4000dbc0 	call	4000dbc <__udivsi3>
 4011c18:	1007883a 	mov	r3,r2
 4011c1c:	e0bffe17 	ldw	r2,-8(fp)
 4011c20:	180b883a 	mov	r5,r3
 4011c24:	1009883a 	mov	r4,r2
 4011c28:	4000e200 	call	4000e20 <__umodsi3>
 4011c2c:	1009883a 	mov	r4,r2
 4011c30:	401b3380 	call	401b338 <alt_busy_sleep>

  return 0;  
 4011c34:	0005883a 	mov	r2,zero
}
 4011c38:	e6ffff04 	addi	sp,fp,-4
 4011c3c:	dfc00217 	ldw	ra,8(sp)
 4011c40:	df000117 	ldw	fp,4(sp)
 4011c44:	dc000017 	ldw	r16,0(sp)
 4011c48:	dec00304 	addi	sp,sp,12
 4011c4c:	f800283a 	ret

04011c50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011c50:	defffe04 	addi	sp,sp,-8
 4011c54:	dfc00115 	stw	ra,4(sp)
 4011c58:	df000015 	stw	fp,0(sp)
 4011c5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011c60:	d0a01817 	ldw	r2,-32672(gp)
 4011c64:	10000326 	beq	r2,zero,4011c74 <alt_get_errno+0x24>
 4011c68:	d0a01817 	ldw	r2,-32672(gp)
 4011c6c:	103ee83a 	callr	r2
 4011c70:	00000106 	br	4011c78 <alt_get_errno+0x28>
 4011c74:	d0a73a04 	addi	r2,gp,-25368
}
 4011c78:	e037883a 	mov	sp,fp
 4011c7c:	dfc00117 	ldw	ra,4(sp)
 4011c80:	df000017 	ldw	fp,0(sp)
 4011c84:	dec00204 	addi	sp,sp,8
 4011c88:	f800283a 	ret

04011c8c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4011c8c:	defff904 	addi	sp,sp,-28
 4011c90:	dfc00615 	stw	ra,24(sp)
 4011c94:	df000515 	stw	fp,20(sp)
 4011c98:	df000504 	addi	fp,sp,20
 4011c9c:	e13ffd15 	stw	r4,-12(fp)
 4011ca0:	e17ffe15 	stw	r5,-8(fp)
 4011ca4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011ca8:	e0bffd17 	ldw	r2,-12(fp)
 4011cac:	10000616 	blt	r2,zero,4011cc8 <write+0x3c>
 4011cb0:	e0bffd17 	ldw	r2,-12(fp)
 4011cb4:	10c00324 	muli	r3,r2,12
 4011cb8:	008100b4 	movhi	r2,1026
 4011cbc:	10b5ad04 	addi	r2,r2,-10572
 4011cc0:	1885883a 	add	r2,r3,r2
 4011cc4:	00000106 	br	4011ccc <write+0x40>
 4011cc8:	0005883a 	mov	r2,zero
 4011ccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011cd0:	e0bffb17 	ldw	r2,-20(fp)
 4011cd4:	10002126 	beq	r2,zero,4011d5c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4011cd8:	e0bffb17 	ldw	r2,-20(fp)
 4011cdc:	10800217 	ldw	r2,8(r2)
 4011ce0:	108000cc 	andi	r2,r2,3
 4011ce4:	10001826 	beq	r2,zero,4011d48 <write+0xbc>
 4011ce8:	e0bffb17 	ldw	r2,-20(fp)
 4011cec:	10800017 	ldw	r2,0(r2)
 4011cf0:	10800617 	ldw	r2,24(r2)
 4011cf4:	10001426 	beq	r2,zero,4011d48 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4011cf8:	e0bffb17 	ldw	r2,-20(fp)
 4011cfc:	10800017 	ldw	r2,0(r2)
 4011d00:	10800617 	ldw	r2,24(r2)
 4011d04:	e0ffff17 	ldw	r3,-4(fp)
 4011d08:	180d883a 	mov	r6,r3
 4011d0c:	e17ffe17 	ldw	r5,-8(fp)
 4011d10:	e13ffb17 	ldw	r4,-20(fp)
 4011d14:	103ee83a 	callr	r2
 4011d18:	e0bffc15 	stw	r2,-16(fp)
 4011d1c:	e0bffc17 	ldw	r2,-16(fp)
 4011d20:	1000070e 	bge	r2,zero,4011d40 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4011d24:	4011c500 	call	4011c50 <alt_get_errno>
 4011d28:	1007883a 	mov	r3,r2
 4011d2c:	e0bffc17 	ldw	r2,-16(fp)
 4011d30:	0085c83a 	sub	r2,zero,r2
 4011d34:	18800015 	stw	r2,0(r3)
        return -1;
 4011d38:	00bfffc4 	movi	r2,-1
 4011d3c:	00000c06 	br	4011d70 <write+0xe4>
      }
      return rval;
 4011d40:	e0bffc17 	ldw	r2,-16(fp)
 4011d44:	00000a06 	br	4011d70 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011d48:	4011c500 	call	4011c50 <alt_get_errno>
 4011d4c:	1007883a 	mov	r3,r2
 4011d50:	00800344 	movi	r2,13
 4011d54:	18800015 	stw	r2,0(r3)
 4011d58:	00000406 	br	4011d6c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4011d5c:	4011c500 	call	4011c50 <alt_get_errno>
 4011d60:	1007883a 	mov	r3,r2
 4011d64:	00801444 	movi	r2,81
 4011d68:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011d6c:	00bfffc4 	movi	r2,-1
}
 4011d70:	e037883a 	mov	sp,fp
 4011d74:	dfc00117 	ldw	ra,4(sp)
 4011d78:	df000017 	ldw	fp,0(sp)
 4011d7c:	dec00204 	addi	sp,sp,8
 4011d80:	f800283a 	ret

04011d84 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 4011d84:	deffdf04 	addi	sp,sp,-132
 4011d88:	dfc02015 	stw	ra,128(sp)
 4011d8c:	df001f15 	stw	fp,124(sp)
 4011d90:	df001f04 	addi	fp,sp,124
 4011d94:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4011d98:	e0bfe204 	addi	r2,fp,-120
 4011d9c:	100b883a 	mov	r5,r2
 4011da0:	01003fc4 	movi	r4,255
 4011da4:	4019ca40 	call	4019ca4 <OSTaskQuery>
 4011da8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4011dac:	e0bffe83 	ldbu	r2,-6(fp)
 4011db0:	10803fcc 	andi	r2,r2,255
 4011db4:	10001e1e 	bne	r2,zero,4011e30 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 4011db8:	e0bfee83 	ldbu	r2,-70(fp)
 4011dbc:	10803fcc 	andi	r2,r2,255
 4011dc0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4011dc4:	d0a74117 	ldw	r2,-25340(gp)
 4011dc8:	e0fffd04 	addi	r3,fp,-12
 4011dcc:	180b883a 	mov	r5,r3
 4011dd0:	1009883a 	mov	r4,r2
 4011dd4:	40184bc0 	call	40184bc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4011dd8:	e0bffe43 	ldbu	r2,-7(fp)
 4011ddc:	10803fcc 	andi	r2,r2,255
 4011de0:	10000726 	beq	r2,zero,4011e00 <__env_lock+0x7c>
 4011de4:	d0a01b17 	ldw	r2,-32660(gp)
 4011de8:	e0ffe117 	ldw	r3,-124(fp)
 4011dec:	1880041e 	bne	r3,r2,4011e00 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 4011df0:	d0a74017 	ldw	r2,-25344(gp)
 4011df4:	10800044 	addi	r2,r2,1
 4011df8:	d0a74015 	stw	r2,-25344(gp)
 4011dfc:	00000a06 	br	4011e28 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4011e00:	d0a74117 	ldw	r2,-25340(gp)
 4011e04:	e0fffe84 	addi	r3,fp,-6
 4011e08:	180d883a 	mov	r6,r3
 4011e0c:	000b883a 	mov	r5,zero
 4011e10:	1009883a 	mov	r4,r2
 4011e14:	40180340 	call	4018034 <OSSemPend>
    locks  = 1;
 4011e18:	00800044 	movi	r2,1
 4011e1c:	d0a74015 	stw	r2,-25344(gp)
    lockid = id;
 4011e20:	e0bfe117 	ldw	r2,-124(fp)
 4011e24:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4011e28:	0001883a 	nop
 4011e2c:	00000106 	br	4011e34 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4011e30:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4011e34:	e037883a 	mov	sp,fp
 4011e38:	dfc00117 	ldw	ra,4(sp)
 4011e3c:	df000017 	ldw	fp,0(sp)
 4011e40:	dec00204 	addi	sp,sp,8
 4011e44:	f800283a 	ret

04011e48 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 4011e48:	defffd04 	addi	sp,sp,-12
 4011e4c:	dfc00215 	stw	ra,8(sp)
 4011e50:	df000115 	stw	fp,4(sp)
 4011e54:	df000104 	addi	fp,sp,4
 4011e58:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 4011e5c:	d0a74017 	ldw	r2,-25344(gp)
 4011e60:	10000b26 	beq	r2,zero,4011e90 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 4011e64:	d0a74017 	ldw	r2,-25344(gp)
 4011e68:	10bfffc4 	addi	r2,r2,-1
 4011e6c:	d0a74015 	stw	r2,-25344(gp)
 4011e70:	d0a74017 	ldw	r2,-25344(gp)
 4011e74:	1000071e 	bne	r2,zero,4011e94 <__env_unlock+0x4c>
  {
    lockid = -1;
 4011e78:	00bfffc4 	movi	r2,-1
 4011e7c:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
 4011e80:	d0a74117 	ldw	r2,-25340(gp)
 4011e84:	1009883a 	mov	r4,r2
 4011e88:	40183ac0 	call	40183ac <OSSemPost>
 4011e8c:	00000106 	br	4011e94 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 4011e90:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4011e94:	e037883a 	mov	sp,fp
 4011e98:	dfc00117 	ldw	ra,4(sp)
 4011e9c:	df000017 	ldw	fp,0(sp)
 4011ea0:	dec00204 	addi	sp,sp,8
 4011ea4:	f800283a 	ret

04011ea8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4011ea8:	deffdb04 	addi	sp,sp,-148
 4011eac:	dfc02415 	stw	ra,144(sp)
 4011eb0:	df002315 	stw	fp,140(sp)
 4011eb4:	df002304 	addi	fp,sp,140
 4011eb8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011ebc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4011ec0:	d0a74443 	ldbu	r2,-25327(gp)
 4011ec4:	10803fcc 	andi	r2,r2,255
 4011ec8:	10800060 	cmpeqi	r2,r2,1
 4011ecc:	10003626 	beq	r2,zero,4011fa8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4011ed0:	e0bfe204 	addi	r2,fp,-120
 4011ed4:	100b883a 	mov	r5,r2
 4011ed8:	01003fc4 	movi	r4,255
 4011edc:	4019ca40 	call	4019ca4 <OSTaskQuery>
 4011ee0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4011ee4:	e0bffe83 	ldbu	r2,-6(fp)
 4011ee8:	10803fcc 	andi	r2,r2,255
 4011eec:	1000301e 	bne	r2,zero,4011fb0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 4011ef0:	e0bfee83 	ldbu	r2,-70(fp)
 4011ef4:	10803fcc 	andi	r2,r2,255
 4011ef8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4011efc:	d0a74317 	ldw	r2,-25332(gp)
 4011f00:	e0fffd04 	addi	r3,fp,-12
 4011f04:	180b883a 	mov	r5,r3
 4011f08:	1009883a 	mov	r4,r2
 4011f0c:	40184bc0 	call	40184bc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011f10:	0005303a 	rdctl	r2,status
 4011f14:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011f18:	e0ffe117 	ldw	r3,-124(fp)
 4011f1c:	00bfff84 	movi	r2,-2
 4011f20:	1884703a 	and	r2,r3,r2
 4011f24:	1001703a 	wrctl	status,r2
  
  return context;
 4011f28:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 4011f2c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4011f30:	e0bffd0b 	ldhu	r2,-12(fp)
 4011f34:	10bfffcc 	andi	r2,r2,65535
 4011f38:	10000b1e 	bne	r2,zero,4011f68 <__malloc_lock+0xc0>
 4011f3c:	d0a01c17 	ldw	r2,-32656(gp)
 4011f40:	e0ffde17 	ldw	r3,-136(fp)
 4011f44:	1880081e 	bne	r3,r2,4011f68 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 4011f48:	d0a74217 	ldw	r2,-25336(gp)
 4011f4c:	10800044 	addi	r2,r2,1
 4011f50:	d0a74215 	stw	r2,-25336(gp)
 4011f54:	e0bfdd17 	ldw	r2,-140(fp)
 4011f58:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f5c:	e0bfdf17 	ldw	r2,-132(fp)
 4011f60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 4011f64:	00000e06 	br	4011fa0 <__malloc_lock+0xf8>
 4011f68:	e0bfdd17 	ldw	r2,-140(fp)
 4011f6c:	e0bfe015 	stw	r2,-128(fp)
 4011f70:	e0bfe017 	ldw	r2,-128(fp)
 4011f74:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4011f78:	d0a74317 	ldw	r2,-25332(gp)
 4011f7c:	e0fffe84 	addi	r3,fp,-6
 4011f80:	180d883a 	mov	r6,r3
 4011f84:	000b883a 	mov	r5,zero
 4011f88:	1009883a 	mov	r4,r2
 4011f8c:	40180340 	call	4018034 <OSSemPend>
    locks  = 1;
 4011f90:	00800044 	movi	r2,1
 4011f94:	d0a74215 	stw	r2,-25336(gp)
    lockid = id;
 4011f98:	e0bfde17 	ldw	r2,-136(fp)
 4011f9c:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4011fa0:	0001883a 	nop
 4011fa4:	00000306 	br	4011fb4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 4011fa8:	0001883a 	nop
 4011fac:	00000106 	br	4011fb4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4011fb0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4011fb4:	e037883a 	mov	sp,fp
 4011fb8:	dfc00117 	ldw	ra,4(sp)
 4011fbc:	df000017 	ldw	fp,0(sp)
 4011fc0:	dec00204 	addi	sp,sp,8
 4011fc4:	f800283a 	ret

04011fc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4011fc8:	defff804 	addi	sp,sp,-32
 4011fcc:	dfc00715 	stw	ra,28(sp)
 4011fd0:	df000615 	stw	fp,24(sp)
 4011fd4:	df000604 	addi	fp,sp,24
 4011fd8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011fdc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4011fe0:	d0a74443 	ldbu	r2,-25327(gp)
 4011fe4:	10803fcc 	andi	r2,r2,255
 4011fe8:	10800060 	cmpeqi	r2,r2,1
 4011fec:	10002326 	beq	r2,zero,401207c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ff0:	0005303a 	rdctl	r2,status
 4011ff4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ff8:	e0fffe17 	ldw	r3,-8(fp)
 4011ffc:	00bfff84 	movi	r2,-2
 4012000:	1884703a 	and	r2,r3,r2
 4012004:	1001703a 	wrctl	status,r2
  
  return context;
 4012008:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 401200c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 4012010:	d0a74217 	ldw	r2,-25336(gp)
 4012014:	1000051e 	bne	r2,zero,401202c <__malloc_unlock+0x64>
 4012018:	e0bffa17 	ldw	r2,-24(fp)
 401201c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012020:	e0bffb17 	ldw	r2,-20(fp)
 4012024:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4012028:	00001506 	br	4012080 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 401202c:	d0a74217 	ldw	r2,-25336(gp)
 4012030:	10bfffc4 	addi	r2,r2,-1
 4012034:	d0a74215 	stw	r2,-25336(gp)
 4012038:	d0a74217 	ldw	r2,-25336(gp)
 401203c:	10000a1e 	bne	r2,zero,4012068 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 4012040:	00bfffc4 	movi	r2,-1
 4012044:	d0a01c15 	stw	r2,-32656(gp)
 4012048:	e0bffa17 	ldw	r2,-24(fp)
 401204c:	e0bffc15 	stw	r2,-16(fp)
 4012050:	e0bffc17 	ldw	r2,-16(fp)
 4012054:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4012058:	d0a74317 	ldw	r2,-25332(gp)
 401205c:	1009883a 	mov	r4,r2
 4012060:	40183ac0 	call	40183ac <OSSemPost>
 4012064:	00000606 	br	4012080 <__malloc_unlock+0xb8>
 4012068:	e0bffa17 	ldw	r2,-24(fp)
 401206c:	e0bffd15 	stw	r2,-12(fp)
 4012070:	e0bffd17 	ldw	r2,-12(fp)
 4012074:	1001703a 	wrctl	status,r2
 4012078:	00000106 	br	4012080 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 401207c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4012080:	e037883a 	mov	sp,fp
 4012084:	dfc00117 	ldw	ra,4(sp)
 4012088:	df000017 	ldw	fp,0(sp)
 401208c:	dec00204 	addi	sp,sp,8
 4012090:	f800283a 	ret

04012094 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4012094:	defff704 	addi	sp,sp,-36
 4012098:	dfc00815 	stw	ra,32(sp)
 401209c:	df000715 	stw	fp,28(sp)
 40120a0:	df000704 	addi	fp,sp,28
 40120a4:	e13ffd15 	stw	r4,-12(fp)
 40120a8:	e17ffe15 	stw	r5,-8(fp)
 40120ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40120b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40120b4:	e0bfff17 	ldw	r2,-4(fp)
 40120b8:	1000021e 	bne	r2,zero,40120c4 <OSEventNameGet+0x30>
        return (0);
 40120bc:	0005883a 	mov	r2,zero
 40120c0:	00003706 	br	40121a0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 40120c4:	e0bffd17 	ldw	r2,-12(fp)
 40120c8:	1000051e 	bne	r2,zero,40120e0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 40120cc:	e0bfff17 	ldw	r2,-4(fp)
 40120d0:	00c00104 	movi	r3,4
 40120d4:	10c00005 	stb	r3,0(r2)
        return (0);
 40120d8:	0005883a 	mov	r2,zero
 40120dc:	00003006 	br	40121a0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40120e0:	e0bffe17 	ldw	r2,-8(fp)
 40120e4:	1000051e 	bne	r2,zero,40120fc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 40120e8:	e0bfff17 	ldw	r2,-4(fp)
 40120ec:	00c00304 	movi	r3,12
 40120f0:	10c00005 	stb	r3,0(r2)
        return (0);
 40120f4:	0005883a 	mov	r2,zero
 40120f8:	00002906 	br	40121a0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40120fc:	d0a75203 	ldbu	r2,-25272(gp)
 4012100:	10803fcc 	andi	r2,r2,255
 4012104:	10000526 	beq	r2,zero,401211c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 4012108:	e0bfff17 	ldw	r2,-4(fp)
 401210c:	00c00444 	movi	r3,17
 4012110:	10c00005 	stb	r3,0(r2)
        return (0);
 4012114:	0005883a 	mov	r2,zero
 4012118:	00002106 	br	40121a0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 401211c:	e0bffd17 	ldw	r2,-12(fp)
 4012120:	10800003 	ldbu	r2,0(r2)
 4012124:	10803fcc 	andi	r2,r2,255
 4012128:	10bfffc4 	addi	r2,r2,-1
 401212c:	10800128 	cmpgeui	r2,r2,4
 4012130:	10000526 	beq	r2,zero,4012148 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4012134:	e0bfff17 	ldw	r2,-4(fp)
 4012138:	00c00044 	movi	r3,1
 401213c:	10c00005 	stb	r3,0(r2)
             return (0);
 4012140:	0005883a 	mov	r2,zero
 4012144:	00001606 	br	40121a0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4012148:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401214c:	0005303a 	rdctl	r2,status
 4012150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012154:	e0fffb17 	ldw	r3,-20(fp)
 4012158:	00bfff84 	movi	r2,-2
 401215c:	1884703a 	and	r2,r3,r2
 4012160:	1001703a 	wrctl	status,r2
  
  return context;
 4012164:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4012168:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 401216c:	e0bffd17 	ldw	r2,-12(fp)
 4012170:	10800384 	addi	r2,r2,14
 4012174:	100b883a 	mov	r5,r2
 4012178:	e13ffe17 	ldw	r4,-8(fp)
 401217c:	4013b180 	call	4013b18 <OS_StrCopy>
 4012180:	e0bffa05 	stb	r2,-24(fp)
 4012184:	e0bff917 	ldw	r2,-28(fp)
 4012188:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401218c:	e0bffc17 	ldw	r2,-16(fp)
 4012190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012194:	e0bfff17 	ldw	r2,-4(fp)
 4012198:	10000005 	stb	zero,0(r2)
    return (len);
 401219c:	e0bffa03 	ldbu	r2,-24(fp)
}
 40121a0:	e037883a 	mov	sp,fp
 40121a4:	dfc00117 	ldw	ra,4(sp)
 40121a8:	df000017 	ldw	fp,0(sp)
 40121ac:	dec00204 	addi	sp,sp,8
 40121b0:	f800283a 	ret

040121b4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 40121b4:	defff604 	addi	sp,sp,-40
 40121b8:	dfc00915 	stw	ra,36(sp)
 40121bc:	df000815 	stw	fp,32(sp)
 40121c0:	df000804 	addi	fp,sp,32
 40121c4:	e13ffd15 	stw	r4,-12(fp)
 40121c8:	e17ffe15 	stw	r5,-8(fp)
 40121cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40121d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40121d4:	e0bfff17 	ldw	r2,-4(fp)
 40121d8:	10004026 	beq	r2,zero,40122dc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 40121dc:	e0bffd17 	ldw	r2,-12(fp)
 40121e0:	1000041e 	bne	r2,zero,40121f4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 40121e4:	e0bfff17 	ldw	r2,-4(fp)
 40121e8:	00c00104 	movi	r3,4
 40121ec:	10c00005 	stb	r3,0(r2)
        return;
 40121f0:	00003b06 	br	40122e0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40121f4:	e0bffe17 	ldw	r2,-8(fp)
 40121f8:	1000041e 	bne	r2,zero,401220c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 40121fc:	e0bfff17 	ldw	r2,-4(fp)
 4012200:	00c00304 	movi	r3,12
 4012204:	10c00005 	stb	r3,0(r2)
        return;
 4012208:	00003506 	br	40122e0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401220c:	d0a75203 	ldbu	r2,-25272(gp)
 4012210:	10803fcc 	andi	r2,r2,255
 4012214:	10000426 	beq	r2,zero,4012228 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4012218:	e0bfff17 	ldw	r2,-4(fp)
 401221c:	00c00484 	movi	r3,18
 4012220:	10c00005 	stb	r3,0(r2)
        return;
 4012224:	00002e06 	br	40122e0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 4012228:	e0bffd17 	ldw	r2,-12(fp)
 401222c:	10800003 	ldbu	r2,0(r2)
 4012230:	10803fcc 	andi	r2,r2,255
 4012234:	10bfffc4 	addi	r2,r2,-1
 4012238:	10800128 	cmpgeui	r2,r2,4
 401223c:	10000426 	beq	r2,zero,4012250 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4012240:	e0bfff17 	ldw	r2,-4(fp)
 4012244:	00c00044 	movi	r3,1
 4012248:	10c00005 	stb	r3,0(r2)
             return;
 401224c:	00002406 	br	40122e0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4012250:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012254:	0005303a 	rdctl	r2,status
 4012258:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401225c:	e0fffc17 	ldw	r3,-16(fp)
 4012260:	00bfff84 	movi	r2,-2
 4012264:	1884703a 	and	r2,r3,r2
 4012268:	1001703a 	wrctl	status,r2
  
  return context;
 401226c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 4012270:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4012274:	e13ffe17 	ldw	r4,-8(fp)
 4012278:	4013b8c0 	call	4013b8c <OS_StrLen>
 401227c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 4012280:	e0bffa03 	ldbu	r2,-24(fp)
 4012284:	10800830 	cmpltui	r2,r2,32
 4012288:	1000081e 	bne	r2,zero,40122ac <OSEventNameSet+0xf8>
 401228c:	e0bff817 	ldw	r2,-32(fp)
 4012290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012294:	e0bff917 	ldw	r2,-28(fp)
 4012298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 401229c:	e0bfff17 	ldw	r2,-4(fp)
 40122a0:	00c002c4 	movi	r3,11
 40122a4:	10c00005 	stb	r3,0(r2)
        return;
 40122a8:	00000d06 	br	40122e0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 40122ac:	e0bffd17 	ldw	r2,-12(fp)
 40122b0:	10800384 	addi	r2,r2,14
 40122b4:	e17ffe17 	ldw	r5,-8(fp)
 40122b8:	1009883a 	mov	r4,r2
 40122bc:	4013b180 	call	4013b18 <OS_StrCopy>
 40122c0:	e0bff817 	ldw	r2,-32(fp)
 40122c4:	e0bffb15 	stw	r2,-20(fp)
 40122c8:	e0bffb17 	ldw	r2,-20(fp)
 40122cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40122d0:	e0bfff17 	ldw	r2,-4(fp)
 40122d4:	10000005 	stb	zero,0(r2)
 40122d8:	00000106 	br	40122e0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 40122dc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 40122e0:	e037883a 	mov	sp,fp
 40122e4:	dfc00117 	ldw	ra,4(sp)
 40122e8:	df000017 	ldw	fp,0(sp)
 40122ec:	dec00204 	addi	sp,sp,8
 40122f0:	f800283a 	ret

040122f4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 40122f4:	deffed04 	addi	sp,sp,-76
 40122f8:	dfc01215 	stw	ra,72(sp)
 40122fc:	df001115 	stw	fp,68(sp)
 4012300:	df001104 	addi	fp,sp,68
 4012304:	e13ffc15 	stw	r4,-16(fp)
 4012308:	e17ffd15 	stw	r5,-12(fp)
 401230c:	e1bffe15 	stw	r6,-8(fp)
 4012310:	3805883a 	mov	r2,r7
 4012314:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4012318:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 401231c:	e0800217 	ldw	r2,8(fp)
 4012320:	1000021e 	bne	r2,zero,401232c <OSEventPendMulti+0x38>
        return (0);
 4012324:	0005883a 	mov	r2,zero
 4012328:	00017106 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 401232c:	e0bffc17 	ldw	r2,-16(fp)
 4012330:	1000051e 	bne	r2,zero,4012348 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 4012334:	e0800217 	ldw	r2,8(fp)
 4012338:	00c00104 	movi	r3,4
 401233c:	10c00005 	stb	r3,0(r2)
        return (0);
 4012340:	0005883a 	mov	r2,zero
 4012344:	00016a06 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 4012348:	e0bffd17 	ldw	r2,-12(fp)
 401234c:	1000051e 	bne	r2,zero,4012364 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 4012350:	e0800217 	ldw	r2,8(fp)
 4012354:	00c00104 	movi	r3,4
 4012358:	10c00005 	stb	r3,0(r2)
        return (0);
 401235c:	0005883a 	mov	r2,zero
 4012360:	00016306 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4012364:	e0bffe17 	ldw	r2,-8(fp)
 4012368:	1000051e 	bne	r2,zero,4012380 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 401236c:	e0800217 	ldw	r2,8(fp)
 4012370:	00c00104 	movi	r3,4
 4012374:	10c00005 	stb	r3,0(r2)
        return (0);
 4012378:	0005883a 	mov	r2,zero
 401237c:	00015c06 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 4012380:	e0bffd17 	ldw	r2,-12(fp)
 4012384:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 4012388:	e0bffc17 	ldw	r2,-16(fp)
 401238c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 4012390:	e0bfef17 	ldw	r2,-68(fp)
 4012394:	10800017 	ldw	r2,0(r2)
 4012398:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 401239c:	00001906 	br	4012404 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 40123a0:	e0bff017 	ldw	r2,-64(fp)
 40123a4:	10800003 	ldbu	r2,0(r2)
 40123a8:	10803fcc 	andi	r2,r2,255
 40123ac:	10c000a0 	cmpeqi	r3,r2,2
 40123b0:	1800091e 	bne	r3,zero,40123d8 <OSEventPendMulti+0xe4>
 40123b4:	10c000e0 	cmpeqi	r3,r2,3
 40123b8:	1800091e 	bne	r3,zero,40123e0 <OSEventPendMulti+0xec>
 40123bc:	10800060 	cmpeqi	r2,r2,1
 40123c0:	1000091e 	bne	r2,zero,40123e8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 40123c4:	e0800217 	ldw	r2,8(fp)
 40123c8:	00c00044 	movi	r3,1
 40123cc:	10c00005 	stb	r3,0(r2)
                 return (0);
 40123d0:	0005883a 	mov	r2,zero
 40123d4:	00014606 	br	40128f0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 40123d8:	0001883a 	nop
 40123dc:	00000306 	br	40123ec <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 40123e0:	0001883a 	nop
 40123e4:	00000106 	br	40123ec <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 40123e8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 40123ec:	e0bfef17 	ldw	r2,-68(fp)
 40123f0:	10800104 	addi	r2,r2,4
 40123f4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 40123f8:	e0bfef17 	ldw	r2,-68(fp)
 40123fc:	10800017 	ldw	r2,0(r2)
 4012400:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4012404:	e0bff017 	ldw	r2,-64(fp)
 4012408:	103fe51e 	bne	r2,zero,40123a0 <__alt_mem_onchip_memory2_0+0xfc0103a0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 401240c:	d0a75203 	ldbu	r2,-25272(gp)
 4012410:	10803fcc 	andi	r2,r2,255
 4012414:	10000526 	beq	r2,zero,401242c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 4012418:	e0800217 	ldw	r2,8(fp)
 401241c:	00c00084 	movi	r3,2
 4012420:	10c00005 	stb	r3,0(r2)
        return (0);
 4012424:	0005883a 	mov	r2,zero
 4012428:	00013106 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 401242c:	d0a74403 	ldbu	r2,-25328(gp)
 4012430:	10803fcc 	andi	r2,r2,255
 4012434:	10000526 	beq	r2,zero,401244c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 4012438:	e0800217 	ldw	r2,8(fp)
 401243c:	00c00344 	movi	r3,13
 4012440:	10c00005 	stb	r3,0(r2)
        return (0);
 4012444:	0005883a 	mov	r2,zero
 4012448:	00012906 	br	40128f0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401244c:	0005303a 	rdctl	r2,status
 4012450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012454:	e0fffb17 	ldw	r3,-20(fp)
 4012458:	00bfff84 	movi	r2,-2
 401245c:	1884703a 	and	r2,r3,r2
 4012460:	1001703a 	wrctl	status,r2
  
  return context;
 4012464:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4012468:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 401246c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 4012470:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 4012474:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 4012478:	e0bffc17 	ldw	r2,-16(fp)
 401247c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 4012480:	e0bfef17 	ldw	r2,-68(fp)
 4012484:	10800017 	ldw	r2,0(r2)
 4012488:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 401248c:	00008106 	br	4012694 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 4012490:	e0bff017 	ldw	r2,-64(fp)
 4012494:	10800003 	ldbu	r2,0(r2)
 4012498:	10803fcc 	andi	r2,r2,255
 401249c:	10c000a0 	cmpeqi	r3,r2,2
 40124a0:	18003c1e 	bne	r3,zero,4012594 <OSEventPendMulti+0x2a0>
 40124a4:	10c000e0 	cmpeqi	r3,r2,3
 40124a8:	1800031e 	bne	r3,zero,40124b8 <OSEventPendMulti+0x1c4>
 40124ac:	10800060 	cmpeqi	r2,r2,1
 40124b0:	10001e1e 	bne	r2,zero,401252c <OSEventPendMulti+0x238>
 40124b4:	00006606 	br	4012650 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 40124b8:	e0bff017 	ldw	r2,-64(fp)
 40124bc:	1080020b 	ldhu	r2,8(r2)
 40124c0:	10bfffcc 	andi	r2,r2,65535
 40124c4:	10001526 	beq	r2,zero,401251c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 40124c8:	e0bff017 	ldw	r2,-64(fp)
 40124cc:	1080020b 	ldhu	r2,8(r2)
 40124d0:	10bfffc4 	addi	r2,r2,-1
 40124d4:	1007883a 	mov	r3,r2
 40124d8:	e0bff017 	ldw	r2,-64(fp)
 40124dc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 40124e0:	e0bffd17 	ldw	r2,-12(fp)
 40124e4:	10c00104 	addi	r3,r2,4
 40124e8:	e0fffd15 	stw	r3,-12(fp)
 40124ec:	e0fff017 	ldw	r3,-64(fp)
 40124f0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 40124f4:	00800044 	movi	r2,1
 40124f8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 40124fc:	e0bffe17 	ldw	r2,-8(fp)
 4012500:	10c00104 	addi	r3,r2,4
 4012504:	e0fffe15 	stw	r3,-8(fp)
 4012508:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 401250c:	e0bff18b 	ldhu	r2,-58(fp)
 4012510:	10800044 	addi	r2,r2,1
 4012514:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 4012518:	00005806 	br	401267c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 401251c:	e0bff203 	ldbu	r2,-56(fp)
 4012520:	10800054 	ori	r2,r2,1
 4012524:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4012528:	00005406 	br	401267c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 401252c:	e0bff017 	ldw	r2,-64(fp)
 4012530:	10800117 	ldw	r2,4(r2)
 4012534:	10001326 	beq	r2,zero,4012584 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 4012538:	e0bffe17 	ldw	r2,-8(fp)
 401253c:	10c00104 	addi	r3,r2,4
 4012540:	e0fffe15 	stw	r3,-8(fp)
 4012544:	e0fff017 	ldw	r3,-64(fp)
 4012548:	18c00117 	ldw	r3,4(r3)
 401254c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 4012550:	e0bff017 	ldw	r2,-64(fp)
 4012554:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 4012558:	e0bffd17 	ldw	r2,-12(fp)
 401255c:	10c00104 	addi	r3,r2,4
 4012560:	e0fffd15 	stw	r3,-12(fp)
 4012564:	e0fff017 	ldw	r3,-64(fp)
 4012568:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 401256c:	00800044 	movi	r2,1
 4012570:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4012574:	e0bff18b 	ldhu	r2,-58(fp)
 4012578:	10800044 	addi	r2,r2,1
 401257c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 4012580:	00003e06 	br	401267c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 4012584:	e0bff203 	ldbu	r2,-56(fp)
 4012588:	10800094 	ori	r2,r2,2
 401258c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4012590:	00003a06 	br	401267c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 4012594:	e0bff017 	ldw	r2,-64(fp)
 4012598:	10800117 	ldw	r2,4(r2)
 401259c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 40125a0:	e0bff517 	ldw	r2,-44(fp)
 40125a4:	1080058b 	ldhu	r2,22(r2)
 40125a8:	10bfffcc 	andi	r2,r2,65535
 40125ac:	10002426 	beq	r2,zero,4012640 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 40125b0:	e0bffe17 	ldw	r2,-8(fp)
 40125b4:	10c00104 	addi	r3,r2,4
 40125b8:	e0fffe15 	stw	r3,-8(fp)
 40125bc:	e0fff517 	ldw	r3,-44(fp)
 40125c0:	18c00417 	ldw	r3,16(r3)
 40125c4:	19400104 	addi	r5,r3,4
 40125c8:	e13ff517 	ldw	r4,-44(fp)
 40125cc:	21400415 	stw	r5,16(r4)
 40125d0:	18c00017 	ldw	r3,0(r3)
 40125d4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 40125d8:	e0bff517 	ldw	r2,-44(fp)
 40125dc:	10c00417 	ldw	r3,16(r2)
 40125e0:	e0bff517 	ldw	r2,-44(fp)
 40125e4:	10800217 	ldw	r2,8(r2)
 40125e8:	1880041e 	bne	r3,r2,40125fc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 40125ec:	e0bff517 	ldw	r2,-44(fp)
 40125f0:	10c00117 	ldw	r3,4(r2)
 40125f4:	e0bff517 	ldw	r2,-44(fp)
 40125f8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 40125fc:	e0bff517 	ldw	r2,-44(fp)
 4012600:	1080058b 	ldhu	r2,22(r2)
 4012604:	10bfffc4 	addi	r2,r2,-1
 4012608:	1007883a 	mov	r3,r2
 401260c:	e0bff517 	ldw	r2,-44(fp)
 4012610:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 4012614:	e0bffd17 	ldw	r2,-12(fp)
 4012618:	10c00104 	addi	r3,r2,4
 401261c:	e0fffd15 	stw	r3,-12(fp)
 4012620:	e0fff017 	ldw	r3,-64(fp)
 4012624:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 4012628:	00800044 	movi	r2,1
 401262c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4012630:	e0bff18b 	ldhu	r2,-58(fp)
 4012634:	10800044 	addi	r2,r2,1
 4012638:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 401263c:	00000f06 	br	401267c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 4012640:	e0bff203 	ldbu	r2,-56(fp)
 4012644:	10800114 	ori	r2,r2,4
 4012648:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 401264c:	00000b06 	br	401267c <OSEventPendMulti+0x388>
 4012650:	e0bff317 	ldw	r2,-52(fp)
 4012654:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012658:	e0bff417 	ldw	r2,-48(fp)
 401265c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 4012660:	e0bffd17 	ldw	r2,-12(fp)
 4012664:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 4012668:	e0800217 	ldw	r2,8(fp)
 401266c:	00c00044 	movi	r3,1
 4012670:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 4012674:	e0bff18b 	ldhu	r2,-58(fp)
 4012678:	00009d06 	br	40128f0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 401267c:	e0bfef17 	ldw	r2,-68(fp)
 4012680:	10800104 	addi	r2,r2,4
 4012684:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4012688:	e0bfef17 	ldw	r2,-68(fp)
 401268c:	10800017 	ldw	r2,0(r2)
 4012690:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4012694:	e0bff017 	ldw	r2,-64(fp)
 4012698:	103f7d1e 	bne	r2,zero,4012490 <__alt_mem_onchip_memory2_0+0xfc010490>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 401269c:	e0bff103 	ldbu	r2,-60(fp)
 40126a0:	10800058 	cmpnei	r2,r2,1
 40126a4:	10000a1e 	bne	r2,zero,40126d0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 40126a8:	e0bffd17 	ldw	r2,-12(fp)
 40126ac:	10000015 	stw	zero,0(r2)
 40126b0:	e0bff317 	ldw	r2,-52(fp)
 40126b4:	e0bff615 	stw	r2,-40(fp)
 40126b8:	e0bff617 	ldw	r2,-40(fp)
 40126bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 40126c0:	e0800217 	ldw	r2,8(fp)
 40126c4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 40126c8:	e0bff18b 	ldhu	r2,-58(fp)
 40126cc:	00008806 	br	40128f0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 40126d0:	d0a75317 	ldw	r2,-25268(gp)
 40126d4:	d0e75317 	ldw	r3,-25268(gp)
 40126d8:	19000c03 	ldbu	r4,48(r3)
 40126dc:	e0fff203 	ldbu	r3,-56(fp)
 40126e0:	20c6b03a 	or	r3,r4,r3
 40126e4:	1809883a 	mov	r4,r3
 40126e8:	00ffe004 	movi	r3,-128
 40126ec:	20c6b03a 	or	r3,r4,r3
 40126f0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40126f4:	d0a75317 	ldw	r2,-25268(gp)
 40126f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 40126fc:	d0a75317 	ldw	r2,-25268(gp)
 4012700:	e0ffff0b 	ldhu	r3,-4(fp)
 4012704:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 4012708:	e13ffc17 	ldw	r4,-16(fp)
 401270c:	40132300 	call	4013230 <OS_EventTaskWaitMulti>
 4012710:	e0bff317 	ldw	r2,-52(fp)
 4012714:	e0bff915 	stw	r2,-28(fp)
 4012718:	e0bff917 	ldw	r2,-28(fp)
 401271c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 4012720:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012724:	0005303a 	rdctl	r2,status
 4012728:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401272c:	e0fff717 	ldw	r3,-36(fp)
 4012730:	00bfff84 	movi	r2,-2
 4012734:	1884703a 	and	r2,r3,r2
 4012738:	1001703a 	wrctl	status,r2
  
  return context;
 401273c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4012740:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 4012744:	d0a75317 	ldw	r2,-25268(gp)
 4012748:	10800c43 	ldbu	r2,49(r2)
 401274c:	10803fcc 	andi	r2,r2,255
 4012750:	10000226 	beq	r2,zero,401275c <OSEventPendMulti+0x468>
 4012754:	108000a0 	cmpeqi	r2,r2,2
 4012758:	10001826 	beq	r2,zero,40127bc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 401275c:	d0a75317 	ldw	r2,-25268(gp)
 4012760:	10800717 	ldw	r2,28(r2)
 4012764:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 4012768:	e0bff017 	ldw	r2,-64(fp)
 401276c:	10000b26 	beq	r2,zero,401279c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 4012770:	e0bffd17 	ldw	r2,-12(fp)
 4012774:	10c00104 	addi	r3,r2,4
 4012778:	e0fffd15 	stw	r3,-12(fp)
 401277c:	e0fff017 	ldw	r3,-64(fp)
 4012780:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 4012784:	e0bffd17 	ldw	r2,-12(fp)
 4012788:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 401278c:	e0bff18b 	ldhu	r2,-58(fp)
 4012790:	10800044 	addi	r2,r2,1
 4012794:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 4012798:	00000d06 	br	40127d0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 401279c:	d0a75317 	ldw	r2,-25268(gp)
 40127a0:	00c00044 	movi	r3,1
 40127a4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 40127a8:	d0a75317 	ldw	r2,-25268(gp)
 40127ac:	e17ffc17 	ldw	r5,-16(fp)
 40127b0:	1009883a 	mov	r4,r2
 40127b4:	40134380 	call	4013438 <OS_EventTaskRemoveMulti>
             }
			 break;
 40127b8:	00000506 	br	40127d0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 40127bc:	d0a75317 	ldw	r2,-25268(gp)
 40127c0:	e17ffc17 	ldw	r5,-16(fp)
 40127c4:	1009883a 	mov	r4,r2
 40127c8:	40134380 	call	4013438 <OS_EventTaskRemoveMulti>
             break;
 40127cc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 40127d0:	d0a75317 	ldw	r2,-25268(gp)
 40127d4:	10800c43 	ldbu	r2,49(r2)
 40127d8:	10803fcc 	andi	r2,r2,255
 40127dc:	10000326 	beq	r2,zero,40127ec <OSEventPendMulti+0x4f8>
 40127e0:	108000a0 	cmpeqi	r2,r2,2
 40127e4:	1000231e 	bne	r2,zero,4012874 <OSEventPendMulti+0x580>
 40127e8:	00002a06 	br	4012894 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 40127ec:	e0bff017 	ldw	r2,-64(fp)
 40127f0:	10800003 	ldbu	r2,0(r2)
 40127f4:	10803fcc 	andi	r2,r2,255
 40127f8:	0080100e 	bge	zero,r2,401283c <OSEventPendMulti+0x548>
 40127fc:	10c000d0 	cmplti	r3,r2,3
 4012800:	1800071e 	bne	r3,zero,4012820 <OSEventPendMulti+0x52c>
 4012804:	108000e0 	cmpeqi	r2,r2,3
 4012808:	10000c26 	beq	r2,zero,401283c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 401280c:	e0bffe17 	ldw	r2,-8(fp)
 4012810:	10c00104 	addi	r3,r2,4
 4012814:	e0fffe15 	stw	r3,-8(fp)
 4012818:	10000015 	stw	zero,0(r2)
                      break;
 401281c:	00001206 	br	4012868 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 4012820:	e0bffe17 	ldw	r2,-8(fp)
 4012824:	10c00104 	addi	r3,r2,4
 4012828:	e0fffe15 	stw	r3,-8(fp)
 401282c:	d0e75317 	ldw	r3,-25268(gp)
 4012830:	18c00917 	ldw	r3,36(r3)
 4012834:	10c00015 	stw	r3,0(r2)
                      break;
 4012838:	00000b06 	br	4012868 <OSEventPendMulti+0x574>
 401283c:	e0bff317 	ldw	r2,-52(fp)
 4012840:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012844:	e0bff817 	ldw	r2,-32(fp)
 4012848:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 401284c:	e0bffd17 	ldw	r2,-12(fp)
 4012850:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 4012854:	e0800217 	ldw	r2,8(fp)
 4012858:	00c00044 	movi	r3,1
 401285c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 4012860:	e0bff18b 	ldhu	r2,-58(fp)
 4012864:	00002206 	br	40128f0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 4012868:	e0800217 	ldw	r2,8(fp)
 401286c:	10000005 	stb	zero,0(r2)
             break;
 4012870:	00001006 	br	40128b4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 4012874:	e0bffe17 	ldw	r2,-8(fp)
 4012878:	10c00104 	addi	r3,r2,4
 401287c:	e0fffe15 	stw	r3,-8(fp)
 4012880:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 4012884:	e0800217 	ldw	r2,8(fp)
 4012888:	00c00384 	movi	r3,14
 401288c:	10c00005 	stb	r3,0(r2)
             break;
 4012890:	00000806 	br	40128b4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 4012894:	e0bffe17 	ldw	r2,-8(fp)
 4012898:	10c00104 	addi	r3,r2,4
 401289c:	e0fffe15 	stw	r3,-8(fp)
 40128a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 40128a4:	e0800217 	ldw	r2,8(fp)
 40128a8:	00c00284 	movi	r3,10
 40128ac:	10c00005 	stb	r3,0(r2)
             break;
 40128b0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 40128b4:	d0a75317 	ldw	r2,-25268(gp)
 40128b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 40128bc:	d0a75317 	ldw	r2,-25268(gp)
 40128c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 40128c4:	d0a75317 	ldw	r2,-25268(gp)
 40128c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40128cc:	d0a75317 	ldw	r2,-25268(gp)
 40128d0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 40128d4:	d0a75317 	ldw	r2,-25268(gp)
 40128d8:	10000915 	stw	zero,36(r2)
 40128dc:	e0bff317 	ldw	r2,-52(fp)
 40128e0:	e0bffa15 	stw	r2,-24(fp)
 40128e4:	e0bffa17 	ldw	r2,-24(fp)
 40128e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 40128ec:	e0bff18b 	ldhu	r2,-58(fp)
}
 40128f0:	e037883a 	mov	sp,fp
 40128f4:	dfc00117 	ldw	ra,4(sp)
 40128f8:	df000017 	ldw	fp,0(sp)
 40128fc:	dec00204 	addi	sp,sp,8
 4012900:	f800283a 	ret

04012904 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 4012904:	defffe04 	addi	sp,sp,-8
 4012908:	dfc00115 	stw	ra,4(sp)
 401290c:	df000015 	stw	fp,0(sp)
 4012910:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 4012914:	401c17c0 	call	401c17c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 4012918:	40136800 	call	4013680 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 401291c:	40136c80 	call	40136c8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 4012920:	40138340 	call	4013834 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 4012924:	40135a00 	call	40135a0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 4012928:	40156d40 	call	40156d4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 401292c:	4016a9c0 	call	4016a9c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 4012930:	4017bc40 	call	4017bc4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 4012934:	40137340 	call	4013734 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4012938:	40137b40 	call	40137b4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 401293c:	401c19c0 	call	401c19c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 4012940:	40140a80 	call	40140a8 <OSDebugInit>
#endif
}
 4012944:	0001883a 	nop
 4012948:	e037883a 	mov	sp,fp
 401294c:	dfc00117 	ldw	ra,4(sp)
 4012950:	df000017 	ldw	fp,0(sp)
 4012954:	dec00204 	addi	sp,sp,8
 4012958:	f800283a 	ret

0401295c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 401295c:	deffff04 	addi	sp,sp,-4
 4012960:	df000015 	stw	fp,0(sp)
 4012964:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 4012968:	d0a74443 	ldbu	r2,-25327(gp)
 401296c:	10803fcc 	andi	r2,r2,255
 4012970:	10800058 	cmpnei	r2,r2,1
 4012974:	1000071e 	bne	r2,zero,4012994 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 4012978:	d0a75203 	ldbu	r2,-25272(gp)
 401297c:	10803fcc 	andi	r2,r2,255
 4012980:	10803fe0 	cmpeqi	r2,r2,255
 4012984:	1000031e 	bne	r2,zero,4012994 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 4012988:	d0a75203 	ldbu	r2,-25272(gp)
 401298c:	10800044 	addi	r2,r2,1
 4012990:	d0a75205 	stb	r2,-25272(gp)
        }
    }
}
 4012994:	0001883a 	nop
 4012998:	e037883a 	mov	sp,fp
 401299c:	df000017 	ldw	fp,0(sp)
 40129a0:	dec00104 	addi	sp,sp,4
 40129a4:	f800283a 	ret

040129a8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 40129a8:	defffb04 	addi	sp,sp,-20
 40129ac:	dfc00415 	stw	ra,16(sp)
 40129b0:	df000315 	stw	fp,12(sp)
 40129b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40129b8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 40129bc:	d0a74443 	ldbu	r2,-25327(gp)
 40129c0:	10803fcc 	andi	r2,r2,255
 40129c4:	10800058 	cmpnei	r2,r2,1
 40129c8:	10002f1e 	bne	r2,zero,4012a88 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40129cc:	0005303a 	rdctl	r2,status
 40129d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40129d4:	e0ffff17 	ldw	r3,-4(fp)
 40129d8:	00bfff84 	movi	r2,-2
 40129dc:	1884703a 	and	r2,r3,r2
 40129e0:	1001703a 	wrctl	status,r2
  
  return context;
 40129e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 40129e8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 40129ec:	d0a75203 	ldbu	r2,-25272(gp)
 40129f0:	10803fcc 	andi	r2,r2,255
 40129f4:	10000326 	beq	r2,zero,4012a04 <OSIntExit+0x5c>
            OSIntNesting--;
 40129f8:	d0a75203 	ldbu	r2,-25272(gp)
 40129fc:	10bfffc4 	addi	r2,r2,-1
 4012a00:	d0a75205 	stb	r2,-25272(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 4012a04:	d0a75203 	ldbu	r2,-25272(gp)
 4012a08:	10803fcc 	andi	r2,r2,255
 4012a0c:	10001a1e 	bne	r2,zero,4012a78 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 4012a10:	d0a74403 	ldbu	r2,-25328(gp)
 4012a14:	10803fcc 	andi	r2,r2,255
 4012a18:	1000171e 	bne	r2,zero,4012a78 <OSIntExit+0xd0>
                OS_SchedNew();
 4012a1c:	4013aa40 	call	4013aa4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 4012a20:	d0e74603 	ldbu	r3,-25320(gp)
 4012a24:	d0a74643 	ldbu	r2,-25319(gp)
 4012a28:	18c03fcc 	andi	r3,r3,255
 4012a2c:	10803fcc 	andi	r2,r2,255
 4012a30:	18801126 	beq	r3,r2,4012a78 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 4012a34:	d0a74603 	ldbu	r2,-25320(gp)
 4012a38:	10c03fcc 	andi	r3,r2,255
 4012a3c:	008100f4 	movhi	r2,1027
 4012a40:	10a63004 	addi	r2,r2,-26432
 4012a44:	18c7883a 	add	r3,r3,r3
 4012a48:	18c7883a 	add	r3,r3,r3
 4012a4c:	10c5883a 	add	r2,r2,r3
 4012a50:	10800017 	ldw	r2,0(r2)
 4012a54:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 4012a58:	d0a74e17 	ldw	r2,-25288(gp)
 4012a5c:	10c00e17 	ldw	r3,56(r2)
 4012a60:	18c00044 	addi	r3,r3,1
 4012a64:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 4012a68:	d0a74917 	ldw	r2,-25308(gp)
 4012a6c:	10800044 	addi	r2,r2,1
 4012a70:	d0a74915 	stw	r2,-25308(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 4012a74:	401bea80 	call	401bea8 <OSCtxSw>
 4012a78:	e0bffd17 	ldw	r2,-12(fp)
 4012a7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a80:	e0bffe17 	ldw	r2,-8(fp)
 4012a84:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4012a88:	0001883a 	nop
 4012a8c:	e037883a 	mov	sp,fp
 4012a90:	dfc00117 	ldw	ra,4(sp)
 4012a94:	df000017 	ldw	fp,0(sp)
 4012a98:	dec00204 	addi	sp,sp,8
 4012a9c:	f800283a 	ret

04012aa0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 4012aa0:	defffc04 	addi	sp,sp,-16
 4012aa4:	df000315 	stw	fp,12(sp)
 4012aa8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012aac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 4012ab0:	d0a74443 	ldbu	r2,-25327(gp)
 4012ab4:	10803fcc 	andi	r2,r2,255
 4012ab8:	10800058 	cmpnei	r2,r2,1
 4012abc:	1000161e 	bne	r2,zero,4012b18 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012ac0:	0005303a 	rdctl	r2,status
 4012ac4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012ac8:	e0ffff17 	ldw	r3,-4(fp)
 4012acc:	00bfff84 	movi	r2,-2
 4012ad0:	1884703a 	and	r2,r3,r2
 4012ad4:	1001703a 	wrctl	status,r2
  
  return context;
 4012ad8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4012adc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 4012ae0:	d0a75203 	ldbu	r2,-25272(gp)
 4012ae4:	10803fcc 	andi	r2,r2,255
 4012ae8:	1000071e 	bne	r2,zero,4012b08 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 4012aec:	d0a74403 	ldbu	r2,-25328(gp)
 4012af0:	10803fcc 	andi	r2,r2,255
 4012af4:	10803fe0 	cmpeqi	r2,r2,255
 4012af8:	1000031e 	bne	r2,zero,4012b08 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 4012afc:	d0a74403 	ldbu	r2,-25328(gp)
 4012b00:	10800044 	addi	r2,r2,1
 4012b04:	d0a74405 	stb	r2,-25328(gp)
 4012b08:	e0bffd17 	ldw	r2,-12(fp)
 4012b0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012b10:	e0bffe17 	ldw	r2,-8(fp)
 4012b14:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4012b18:	0001883a 	nop
 4012b1c:	e037883a 	mov	sp,fp
 4012b20:	df000017 	ldw	fp,0(sp)
 4012b24:	dec00104 	addi	sp,sp,4
 4012b28:	f800283a 	ret

04012b2c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 4012b2c:	defff804 	addi	sp,sp,-32
 4012b30:	dfc00715 	stw	ra,28(sp)
 4012b34:	df000615 	stw	fp,24(sp)
 4012b38:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4012b3c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 4012b40:	d0a74443 	ldbu	r2,-25327(gp)
 4012b44:	10803fcc 	andi	r2,r2,255
 4012b48:	10800058 	cmpnei	r2,r2,1
 4012b4c:	1000281e 	bne	r2,zero,4012bf0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012b50:	0005303a 	rdctl	r2,status
 4012b54:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012b58:	e0ffff17 	ldw	r3,-4(fp)
 4012b5c:	00bfff84 	movi	r2,-2
 4012b60:	1884703a 	and	r2,r3,r2
 4012b64:	1001703a 	wrctl	status,r2
  
  return context;
 4012b68:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4012b6c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 4012b70:	d0a74403 	ldbu	r2,-25328(gp)
 4012b74:	10803fcc 	andi	r2,r2,255
 4012b78:	10001926 	beq	r2,zero,4012be0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 4012b7c:	d0a74403 	ldbu	r2,-25328(gp)
 4012b80:	10bfffc4 	addi	r2,r2,-1
 4012b84:	d0a74405 	stb	r2,-25328(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 4012b88:	d0a74403 	ldbu	r2,-25328(gp)
 4012b8c:	10803fcc 	andi	r2,r2,255
 4012b90:	10000e1e 	bne	r2,zero,4012bcc <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 4012b94:	d0a75203 	ldbu	r2,-25272(gp)
 4012b98:	10803fcc 	andi	r2,r2,255
 4012b9c:	1000061e 	bne	r2,zero,4012bb8 <OSSchedUnlock+0x8c>
 4012ba0:	e0bffa17 	ldw	r2,-24(fp)
 4012ba4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ba8:	e0bffb17 	ldw	r2,-20(fp)
 4012bac:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 4012bb0:	40139d40 	call	40139d4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 4012bb4:	00000e06 	br	4012bf0 <OSSchedUnlock+0xc4>
 4012bb8:	e0bffa17 	ldw	r2,-24(fp)
 4012bbc:	e0bffc15 	stw	r2,-16(fp)
 4012bc0:	e0bffc17 	ldw	r2,-16(fp)
 4012bc4:	1001703a 	wrctl	status,r2
 4012bc8:	00000906 	br	4012bf0 <OSSchedUnlock+0xc4>
 4012bcc:	e0bffa17 	ldw	r2,-24(fp)
 4012bd0:	e0bffd15 	stw	r2,-12(fp)
 4012bd4:	e0bffd17 	ldw	r2,-12(fp)
 4012bd8:	1001703a 	wrctl	status,r2
 4012bdc:	00000406 	br	4012bf0 <OSSchedUnlock+0xc4>
 4012be0:	e0bffa17 	ldw	r2,-24(fp)
 4012be4:	e0bffe15 	stw	r2,-8(fp)
 4012be8:	e0bffe17 	ldw	r2,-8(fp)
 4012bec:	1001703a 	wrctl	status,r2
 4012bf0:	0001883a 	nop
 4012bf4:	e037883a 	mov	sp,fp
 4012bf8:	dfc00117 	ldw	ra,4(sp)
 4012bfc:	df000017 	ldw	fp,0(sp)
 4012c00:	dec00204 	addi	sp,sp,8
 4012c04:	f800283a 	ret

04012c08 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 4012c08:	defffe04 	addi	sp,sp,-8
 4012c0c:	dfc00115 	stw	ra,4(sp)
 4012c10:	df000015 	stw	fp,0(sp)
 4012c14:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 4012c18:	d0a74443 	ldbu	r2,-25327(gp)
 4012c1c:	10803fcc 	andi	r2,r2,255
 4012c20:	10000f1e 	bne	r2,zero,4012c60 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 4012c24:	4013aa40 	call	4013aa4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 4012c28:	d0a74603 	ldbu	r2,-25320(gp)
 4012c2c:	d0a74645 	stb	r2,-25319(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 4012c30:	d0a74603 	ldbu	r2,-25320(gp)
 4012c34:	10c03fcc 	andi	r3,r2,255
 4012c38:	008100f4 	movhi	r2,1027
 4012c3c:	10a63004 	addi	r2,r2,-26432
 4012c40:	18c7883a 	add	r3,r3,r3
 4012c44:	18c7883a 	add	r3,r3,r3
 4012c48:	10c5883a 	add	r2,r2,r3
 4012c4c:	10800017 	ldw	r2,0(r2)
 4012c50:	d0a74e15 	stw	r2,-25288(gp)
        OSTCBCur      = OSTCBHighRdy;
 4012c54:	d0a74e17 	ldw	r2,-25288(gp)
 4012c58:	d0a75315 	stw	r2,-25268(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 4012c5c:	401bf340 	call	401bf34 <OSStartHighRdy>
    }
}
 4012c60:	0001883a 	nop
 4012c64:	e037883a 	mov	sp,fp
 4012c68:	dfc00117 	ldw	ra,4(sp)
 4012c6c:	df000017 	ldw	fp,0(sp)
 4012c70:	dec00204 	addi	sp,sp,8
 4012c74:	f800283a 	ret

04012c78 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 4012c78:	defff904 	addi	sp,sp,-28
 4012c7c:	dfc00615 	stw	ra,24(sp)
 4012c80:	df000515 	stw	fp,20(sp)
 4012c84:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012c88:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 4012c8c:	01000084 	movi	r4,2
 4012c90:	4019e380 	call	4019e38 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012c94:	0005303a 	rdctl	r2,status
 4012c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012c9c:	e0fffc17 	ldw	r3,-16(fp)
 4012ca0:	00bfff84 	movi	r2,-2
 4012ca4:	1884703a 	and	r2,r3,r2
 4012ca8:	1001703a 	wrctl	status,r2
  
  return context;
 4012cac:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4012cb0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 4012cb4:	d0274515 	stw	zero,-25324(gp)
 4012cb8:	e0bffb17 	ldw	r2,-20(fp)
 4012cbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012cc0:	e0bffd17 	ldw	r2,-12(fp)
 4012cc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4012cc8:	01001904 	movi	r4,100
 4012ccc:	4019e380 	call	4019e38 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012cd0:	0005303a 	rdctl	r2,status
 4012cd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012cd8:	e0fffe17 	ldw	r3,-8(fp)
 4012cdc:	00bfff84 	movi	r2,-2
 4012ce0:	1884703a 	and	r2,r3,r2
 4012ce4:	1001703a 	wrctl	status,r2
  
  return context;
 4012ce8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4012cec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4012cf0:	d0a74517 	ldw	r2,-25324(gp)
 4012cf4:	d0a74a15 	stw	r2,-25304(gp)
    OSStatRdy    = OS_TRUE;
 4012cf8:	00800044 	movi	r2,1
 4012cfc:	d0a75605 	stb	r2,-25256(gp)
 4012d00:	e0bffb17 	ldw	r2,-20(fp)
 4012d04:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012d08:	e0bfff17 	ldw	r2,-4(fp)
 4012d0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4012d10:	0001883a 	nop
 4012d14:	e037883a 	mov	sp,fp
 4012d18:	dfc00117 	ldw	ra,4(sp)
 4012d1c:	df000017 	ldw	fp,0(sp)
 4012d20:	dec00204 	addi	sp,sp,8
 4012d24:	f800283a 	ret

04012d28 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4012d28:	defff704 	addi	sp,sp,-36
 4012d2c:	dfc00815 	stw	ra,32(sp)
 4012d30:	df000715 	stw	fp,28(sp)
 4012d34:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4012d38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4012d3c:	401c15c0 	call	401c15c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012d40:	0005303a 	rdctl	r2,status
 4012d44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012d48:	e0fffd17 	ldw	r3,-12(fp)
 4012d4c:	00bfff84 	movi	r2,-2
 4012d50:	1884703a 	and	r2,r3,r2
 4012d54:	1001703a 	wrctl	status,r2
  
  return context;
 4012d58:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 4012d5c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 4012d60:	d0a75417 	ldw	r2,-25264(gp)
 4012d64:	10800044 	addi	r2,r2,1
 4012d68:	d0a75415 	stw	r2,-25264(gp)
 4012d6c:	e0bffb17 	ldw	r2,-20(fp)
 4012d70:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012d74:	e0bfff17 	ldw	r2,-4(fp)
 4012d78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 4012d7c:	d0a74443 	ldbu	r2,-25327(gp)
 4012d80:	10803fcc 	andi	r2,r2,255
 4012d84:	10800058 	cmpnei	r2,r2,1
 4012d88:	10006a1e 	bne	r2,zero,4012f34 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 4012d8c:	d0a74803 	ldbu	r2,-25312(gp)
 4012d90:	10803fcc 	andi	r2,r2,255
 4012d94:	10c00060 	cmpeqi	r3,r2,1
 4012d98:	1800061e 	bne	r3,zero,4012db4 <OSTimeTick+0x8c>
 4012d9c:	10c000a0 	cmpeqi	r3,r2,2
 4012da0:	1800061e 	bne	r3,zero,4012dbc <OSTimeTick+0x94>
 4012da4:	10000a1e 	bne	r2,zero,4012dd0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4012da8:	00800044 	movi	r2,1
 4012dac:	e0bffa05 	stb	r2,-24(fp)
                 break;
 4012db0:	00000b06 	br	4012de0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4012db4:	e03ffa05 	stb	zero,-24(fp)
                 break;
 4012db8:	00000906 	br	4012de0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4012dbc:	00800044 	movi	r2,1
 4012dc0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4012dc4:	00800044 	movi	r2,1
 4012dc8:	d0a74805 	stb	r2,-25312(gp)
                 break;
 4012dcc:	00000406 	br	4012de0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4012dd0:	00800044 	movi	r2,1
 4012dd4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4012dd8:	d0274805 	stb	zero,-25312(gp)
                 break;
 4012ddc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4012de0:	e0bffa03 	ldbu	r2,-24(fp)
 4012de4:	10005226 	beq	r2,zero,4012f30 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4012de8:	d0a74717 	ldw	r2,-25316(gp)
 4012dec:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4012df0:	00004906 	br	4012f18 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012df4:	0005303a 	rdctl	r2,status
 4012df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012dfc:	e0fffc17 	ldw	r3,-16(fp)
 4012e00:	00bfff84 	movi	r2,-2
 4012e04:	1884703a 	and	r2,r3,r2
 4012e08:	1001703a 	wrctl	status,r2
  
  return context;
 4012e0c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 4012e10:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4012e14:	e0bff917 	ldw	r2,-28(fp)
 4012e18:	10800b8b 	ldhu	r2,46(r2)
 4012e1c:	10bfffcc 	andi	r2,r2,65535
 4012e20:	10003626 	beq	r2,zero,4012efc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4012e24:	e0bff917 	ldw	r2,-28(fp)
 4012e28:	10800b8b 	ldhu	r2,46(r2)
 4012e2c:	10bfffc4 	addi	r2,r2,-1
 4012e30:	1007883a 	mov	r3,r2
 4012e34:	e0bff917 	ldw	r2,-28(fp)
 4012e38:	10c00b8d 	sth	r3,46(r2)
 4012e3c:	e0bff917 	ldw	r2,-28(fp)
 4012e40:	10800b8b 	ldhu	r2,46(r2)
 4012e44:	10bfffcc 	andi	r2,r2,65535
 4012e48:	10002c1e 	bne	r2,zero,4012efc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4012e4c:	e0bff917 	ldw	r2,-28(fp)
 4012e50:	10800c03 	ldbu	r2,48(r2)
 4012e54:	10803fcc 	andi	r2,r2,255
 4012e58:	10800dcc 	andi	r2,r2,55
 4012e5c:	10000b26 	beq	r2,zero,4012e8c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 4012e60:	e0bff917 	ldw	r2,-28(fp)
 4012e64:	10c00c03 	ldbu	r3,48(r2)
 4012e68:	00bff204 	movi	r2,-56
 4012e6c:	1884703a 	and	r2,r3,r2
 4012e70:	1007883a 	mov	r3,r2
 4012e74:	e0bff917 	ldw	r2,-28(fp)
 4012e78:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 4012e7c:	e0bff917 	ldw	r2,-28(fp)
 4012e80:	00c00044 	movi	r3,1
 4012e84:	10c00c45 	stb	r3,49(r2)
 4012e88:	00000206 	br	4012e94 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4012e8c:	e0bff917 	ldw	r2,-28(fp)
 4012e90:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 4012e94:	e0bff917 	ldw	r2,-28(fp)
 4012e98:	10800c03 	ldbu	r2,48(r2)
 4012e9c:	10803fcc 	andi	r2,r2,255
 4012ea0:	1080020c 	andi	r2,r2,8
 4012ea4:	1000151e 	bne	r2,zero,4012efc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4012ea8:	e0bff917 	ldw	r2,-28(fp)
 4012eac:	10c00d83 	ldbu	r3,54(r2)
 4012eb0:	d0a75003 	ldbu	r2,-25280(gp)
 4012eb4:	1884b03a 	or	r2,r3,r2
 4012eb8:	d0a75005 	stb	r2,-25280(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4012ebc:	e0bff917 	ldw	r2,-28(fp)
 4012ec0:	10800d03 	ldbu	r2,52(r2)
 4012ec4:	10c03fcc 	andi	r3,r2,255
 4012ec8:	e0bff917 	ldw	r2,-28(fp)
 4012ecc:	10800d03 	ldbu	r2,52(r2)
 4012ed0:	11003fcc 	andi	r4,r2,255
 4012ed4:	d0a75044 	addi	r2,gp,-25279
 4012ed8:	2085883a 	add	r2,r4,r2
 4012edc:	11000003 	ldbu	r4,0(r2)
 4012ee0:	e0bff917 	ldw	r2,-28(fp)
 4012ee4:	10800d43 	ldbu	r2,53(r2)
 4012ee8:	2084b03a 	or	r2,r4,r2
 4012eec:	1009883a 	mov	r4,r2
 4012ef0:	d0a75044 	addi	r2,gp,-25279
 4012ef4:	1885883a 	add	r2,r3,r2
 4012ef8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4012efc:	e0bff917 	ldw	r2,-28(fp)
 4012f00:	10800517 	ldw	r2,20(r2)
 4012f04:	e0bff915 	stw	r2,-28(fp)
 4012f08:	e0bffb17 	ldw	r2,-20(fp)
 4012f0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012f10:	e0bffe17 	ldw	r2,-8(fp)
 4012f14:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4012f18:	e0bff917 	ldw	r2,-28(fp)
 4012f1c:	10800c83 	ldbu	r2,50(r2)
 4012f20:	10803fcc 	andi	r2,r2,255
 4012f24:	10800518 	cmpnei	r2,r2,20
 4012f28:	103fb21e 	bne	r2,zero,4012df4 <__alt_mem_onchip_memory2_0+0xfc010df4>
 4012f2c:	00000106 	br	4012f34 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 4012f30:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4012f34:	e037883a 	mov	sp,fp
 4012f38:	dfc00117 	ldw	ra,4(sp)
 4012f3c:	df000017 	ldw	fp,0(sp)
 4012f40:	dec00204 	addi	sp,sp,8
 4012f44:	f800283a 	ret

04012f48 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4012f48:	deffff04 	addi	sp,sp,-4
 4012f4c:	df000015 	stw	fp,0(sp)
 4012f50:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4012f54:	00804784 	movi	r2,286
}
 4012f58:	e037883a 	mov	sp,fp
 4012f5c:	df000017 	ldw	fp,0(sp)
 4012f60:	dec00104 	addi	sp,sp,4
 4012f64:	f800283a 	ret

04012f68 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4012f68:	deffff04 	addi	sp,sp,-4
 4012f6c:	df000015 	stw	fp,0(sp)
 4012f70:	d839883a 	mov	fp,sp
}
 4012f74:	0001883a 	nop
 4012f78:	e037883a 	mov	sp,fp
 4012f7c:	df000017 	ldw	fp,0(sp)
 4012f80:	dec00104 	addi	sp,sp,4
 4012f84:	f800283a 	ret

04012f88 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4012f88:	defff804 	addi	sp,sp,-32
 4012f8c:	dfc00715 	stw	ra,28(sp)
 4012f90:	df000615 	stw	fp,24(sp)
 4012f94:	df000604 	addi	fp,sp,24
 4012f98:	e13ffc15 	stw	r4,-16(fp)
 4012f9c:	e17ffd15 	stw	r5,-12(fp)
 4012fa0:	3007883a 	mov	r3,r6
 4012fa4:	3805883a 	mov	r2,r7
 4012fa8:	e0fffe05 	stb	r3,-8(fp)
 4012fac:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4012fb0:	e0bffc17 	ldw	r2,-16(fp)
 4012fb4:	10800283 	ldbu	r2,10(r2)
 4012fb8:	10c03fcc 	andi	r3,r2,255
 4012fbc:	008100b4 	movhi	r2,1026
 4012fc0:	10b32d04 	addi	r2,r2,-13132
 4012fc4:	10c5883a 	add	r2,r2,r3
 4012fc8:	10800003 	ldbu	r2,0(r2)
 4012fcc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4012fd0:	e0bffa03 	ldbu	r2,-24(fp)
 4012fd4:	e0fffc17 	ldw	r3,-16(fp)
 4012fd8:	1885883a 	add	r2,r3,r2
 4012fdc:	108002c4 	addi	r2,r2,11
 4012fe0:	10800003 	ldbu	r2,0(r2)
 4012fe4:	10c03fcc 	andi	r3,r2,255
 4012fe8:	008100b4 	movhi	r2,1026
 4012fec:	10b32d04 	addi	r2,r2,-13132
 4012ff0:	10c5883a 	add	r2,r2,r3
 4012ff4:	10800003 	ldbu	r2,0(r2)
 4012ff8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4012ffc:	e0bffa03 	ldbu	r2,-24(fp)
 4013000:	100490fa 	slli	r2,r2,3
 4013004:	1007883a 	mov	r3,r2
 4013008:	e0bffa43 	ldbu	r2,-23(fp)
 401300c:	1885883a 	add	r2,r3,r2
 4013010:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4013014:	e0fffa83 	ldbu	r3,-22(fp)
 4013018:	008100f4 	movhi	r2,1027
 401301c:	10a63004 	addi	r2,r2,-26432
 4013020:	18c7883a 	add	r3,r3,r3
 4013024:	18c7883a 	add	r3,r3,r3
 4013028:	10c5883a 	add	r2,r2,r3
 401302c:	10800017 	ldw	r2,0(r2)
 4013030:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4013034:	e0bffb17 	ldw	r2,-20(fp)
 4013038:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 401303c:	e0bffb17 	ldw	r2,-20(fp)
 4013040:	e0fffd17 	ldw	r3,-12(fp)
 4013044:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4013048:	e0bffb17 	ldw	r2,-20(fp)
 401304c:	10800c03 	ldbu	r2,48(r2)
 4013050:	1007883a 	mov	r3,r2
 4013054:	e0bffe03 	ldbu	r2,-8(fp)
 4013058:	0084303a 	nor	r2,zero,r2
 401305c:	1884703a 	and	r2,r3,r2
 4013060:	1007883a 	mov	r3,r2
 4013064:	e0bffb17 	ldw	r2,-20(fp)
 4013068:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 401306c:	e0bffb17 	ldw	r2,-20(fp)
 4013070:	e0ffff03 	ldbu	r3,-4(fp)
 4013074:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4013078:	e0bffb17 	ldw	r2,-20(fp)
 401307c:	10800c03 	ldbu	r2,48(r2)
 4013080:	10803fcc 	andi	r2,r2,255
 4013084:	1080020c 	andi	r2,r2,8
 4013088:	1000111e 	bne	r2,zero,40130d0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 401308c:	e0bffb17 	ldw	r2,-20(fp)
 4013090:	10c00d83 	ldbu	r3,54(r2)
 4013094:	d0a75003 	ldbu	r2,-25280(gp)
 4013098:	1884b03a 	or	r2,r3,r2
 401309c:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 40130a0:	e0fffa03 	ldbu	r3,-24(fp)
 40130a4:	e13ffa03 	ldbu	r4,-24(fp)
 40130a8:	d0a75044 	addi	r2,gp,-25279
 40130ac:	2085883a 	add	r2,r4,r2
 40130b0:	11000003 	ldbu	r4,0(r2)
 40130b4:	e0bffb17 	ldw	r2,-20(fp)
 40130b8:	10800d43 	ldbu	r2,53(r2)
 40130bc:	2084b03a 	or	r2,r4,r2
 40130c0:	1009883a 	mov	r4,r2
 40130c4:	d0a75044 	addi	r2,gp,-25279
 40130c8:	1885883a 	add	r2,r3,r2
 40130cc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 40130d0:	e17ffc17 	ldw	r5,-16(fp)
 40130d4:	e13ffb17 	ldw	r4,-20(fp)
 40130d8:	40133800 	call	4013380 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 40130dc:	e0bffb17 	ldw	r2,-20(fp)
 40130e0:	10800817 	ldw	r2,32(r2)
 40130e4:	10000826 	beq	r2,zero,4013108 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 40130e8:	e0bffb17 	ldw	r2,-20(fp)
 40130ec:	10800817 	ldw	r2,32(r2)
 40130f0:	100b883a 	mov	r5,r2
 40130f4:	e13ffb17 	ldw	r4,-20(fp)
 40130f8:	40134380 	call	4013438 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 40130fc:	e0bffb17 	ldw	r2,-20(fp)
 4013100:	e0fffc17 	ldw	r3,-16(fp)
 4013104:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 4013108:	e0bffa83 	ldbu	r2,-22(fp)
}
 401310c:	e037883a 	mov	sp,fp
 4013110:	dfc00117 	ldw	ra,4(sp)
 4013114:	df000017 	ldw	fp,0(sp)
 4013118:	dec00204 	addi	sp,sp,8
 401311c:	f800283a 	ret

04013120 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4013120:	defffd04 	addi	sp,sp,-12
 4013124:	df000215 	stw	fp,8(sp)
 4013128:	df000204 	addi	fp,sp,8
 401312c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4013130:	d0a75317 	ldw	r2,-25268(gp)
 4013134:	e0ffff17 	ldw	r3,-4(fp)
 4013138:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 401313c:	d0a75317 	ldw	r2,-25268(gp)
 4013140:	10800d03 	ldbu	r2,52(r2)
 4013144:	10803fcc 	andi	r2,r2,255
 4013148:	d0e75317 	ldw	r3,-25268(gp)
 401314c:	18c00d03 	ldbu	r3,52(r3)
 4013150:	18c03fcc 	andi	r3,r3,255
 4013154:	e13fff17 	ldw	r4,-4(fp)
 4013158:	20c7883a 	add	r3,r4,r3
 401315c:	18c002c4 	addi	r3,r3,11
 4013160:	19000003 	ldbu	r4,0(r3)
 4013164:	d0e75317 	ldw	r3,-25268(gp)
 4013168:	18c00d43 	ldbu	r3,53(r3)
 401316c:	20c6b03a 	or	r3,r4,r3
 4013170:	1809883a 	mov	r4,r3
 4013174:	e0ffff17 	ldw	r3,-4(fp)
 4013178:	1885883a 	add	r2,r3,r2
 401317c:	108002c4 	addi	r2,r2,11
 4013180:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4013184:	e0bfff17 	ldw	r2,-4(fp)
 4013188:	10c00283 	ldbu	r3,10(r2)
 401318c:	d0a75317 	ldw	r2,-25268(gp)
 4013190:	10800d83 	ldbu	r2,54(r2)
 4013194:	1884b03a 	or	r2,r3,r2
 4013198:	1007883a 	mov	r3,r2
 401319c:	e0bfff17 	ldw	r2,-4(fp)
 40131a0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 40131a4:	d0a75317 	ldw	r2,-25268(gp)
 40131a8:	10800d03 	ldbu	r2,52(r2)
 40131ac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 40131b0:	e0fffe03 	ldbu	r3,-8(fp)
 40131b4:	e13ffe03 	ldbu	r4,-8(fp)
 40131b8:	d0a75044 	addi	r2,gp,-25279
 40131bc:	2085883a 	add	r2,r4,r2
 40131c0:	10800003 	ldbu	r2,0(r2)
 40131c4:	1009883a 	mov	r4,r2
 40131c8:	d0a75317 	ldw	r2,-25268(gp)
 40131cc:	10800d43 	ldbu	r2,53(r2)
 40131d0:	0084303a 	nor	r2,zero,r2
 40131d4:	2084703a 	and	r2,r4,r2
 40131d8:	1009883a 	mov	r4,r2
 40131dc:	d0a75044 	addi	r2,gp,-25279
 40131e0:	1885883a 	add	r2,r3,r2
 40131e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 40131e8:	e0fffe03 	ldbu	r3,-8(fp)
 40131ec:	d0a75044 	addi	r2,gp,-25279
 40131f0:	1885883a 	add	r2,r3,r2
 40131f4:	10800003 	ldbu	r2,0(r2)
 40131f8:	10803fcc 	andi	r2,r2,255
 40131fc:	1000071e 	bne	r2,zero,401321c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4013200:	d0a75317 	ldw	r2,-25268(gp)
 4013204:	10800d83 	ldbu	r2,54(r2)
 4013208:	0084303a 	nor	r2,zero,r2
 401320c:	1007883a 	mov	r3,r2
 4013210:	d0a75003 	ldbu	r2,-25280(gp)
 4013214:	1884703a 	and	r2,r3,r2
 4013218:	d0a75005 	stb	r2,-25280(gp)
    }
}
 401321c:	0001883a 	nop
 4013220:	e037883a 	mov	sp,fp
 4013224:	df000017 	ldw	fp,0(sp)
 4013228:	dec00104 	addi	sp,sp,4
 401322c:	f800283a 	ret

04013230 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4013230:	defffb04 	addi	sp,sp,-20
 4013234:	df000415 	stw	fp,16(sp)
 4013238:	df000404 	addi	fp,sp,16
 401323c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4013240:	d0a75317 	ldw	r2,-25268(gp)
 4013244:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4013248:	d0a75317 	ldw	r2,-25268(gp)
 401324c:	e0ffff17 	ldw	r3,-4(fp)
 4013250:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 4013254:	e0bfff17 	ldw	r2,-4(fp)
 4013258:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 401325c:	e0bffc17 	ldw	r2,-16(fp)
 4013260:	10800017 	ldw	r2,0(r2)
 4013264:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4013268:	00002006 	br	40132ec <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 401326c:	d0a75317 	ldw	r2,-25268(gp)
 4013270:	10800d03 	ldbu	r2,52(r2)
 4013274:	10803fcc 	andi	r2,r2,255
 4013278:	d0e75317 	ldw	r3,-25268(gp)
 401327c:	18c00d03 	ldbu	r3,52(r3)
 4013280:	18c03fcc 	andi	r3,r3,255
 4013284:	e13ffd17 	ldw	r4,-12(fp)
 4013288:	20c7883a 	add	r3,r4,r3
 401328c:	18c002c4 	addi	r3,r3,11
 4013290:	19000003 	ldbu	r4,0(r3)
 4013294:	d0e75317 	ldw	r3,-25268(gp)
 4013298:	18c00d43 	ldbu	r3,53(r3)
 401329c:	20c6b03a 	or	r3,r4,r3
 40132a0:	1809883a 	mov	r4,r3
 40132a4:	e0fffd17 	ldw	r3,-12(fp)
 40132a8:	1885883a 	add	r2,r3,r2
 40132ac:	108002c4 	addi	r2,r2,11
 40132b0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 40132b4:	e0bffd17 	ldw	r2,-12(fp)
 40132b8:	10c00283 	ldbu	r3,10(r2)
 40132bc:	d0a75317 	ldw	r2,-25268(gp)
 40132c0:	10800d83 	ldbu	r2,54(r2)
 40132c4:	1884b03a 	or	r2,r3,r2
 40132c8:	1007883a 	mov	r3,r2
 40132cc:	e0bffd17 	ldw	r2,-12(fp)
 40132d0:	10c00285 	stb	r3,10(r2)
        pevents++;
 40132d4:	e0bffc17 	ldw	r2,-16(fp)
 40132d8:	10800104 	addi	r2,r2,4
 40132dc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 40132e0:	e0bffc17 	ldw	r2,-16(fp)
 40132e4:	10800017 	ldw	r2,0(r2)
 40132e8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 40132ec:	e0bffd17 	ldw	r2,-12(fp)
 40132f0:	103fde1e 	bne	r2,zero,401326c <__alt_mem_onchip_memory2_0+0xfc01126c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 40132f4:	d0a75317 	ldw	r2,-25268(gp)
 40132f8:	10800d03 	ldbu	r2,52(r2)
 40132fc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4013300:	e0fffe03 	ldbu	r3,-8(fp)
 4013304:	e13ffe03 	ldbu	r4,-8(fp)
 4013308:	d0a75044 	addi	r2,gp,-25279
 401330c:	2085883a 	add	r2,r4,r2
 4013310:	10800003 	ldbu	r2,0(r2)
 4013314:	1009883a 	mov	r4,r2
 4013318:	d0a75317 	ldw	r2,-25268(gp)
 401331c:	10800d43 	ldbu	r2,53(r2)
 4013320:	0084303a 	nor	r2,zero,r2
 4013324:	2084703a 	and	r2,r4,r2
 4013328:	1009883a 	mov	r4,r2
 401332c:	d0a75044 	addi	r2,gp,-25279
 4013330:	1885883a 	add	r2,r3,r2
 4013334:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4013338:	e0fffe03 	ldbu	r3,-8(fp)
 401333c:	d0a75044 	addi	r2,gp,-25279
 4013340:	1885883a 	add	r2,r3,r2
 4013344:	10800003 	ldbu	r2,0(r2)
 4013348:	10803fcc 	andi	r2,r2,255
 401334c:	1000071e 	bne	r2,zero,401336c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4013350:	d0a75317 	ldw	r2,-25268(gp)
 4013354:	10800d83 	ldbu	r2,54(r2)
 4013358:	0084303a 	nor	r2,zero,r2
 401335c:	1007883a 	mov	r3,r2
 4013360:	d0a75003 	ldbu	r2,-25280(gp)
 4013364:	1884703a 	and	r2,r3,r2
 4013368:	d0a75005 	stb	r2,-25280(gp)
    }
}
 401336c:	0001883a 	nop
 4013370:	e037883a 	mov	sp,fp
 4013374:	df000017 	ldw	fp,0(sp)
 4013378:	dec00104 	addi	sp,sp,4
 401337c:	f800283a 	ret

04013380 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 4013380:	defffc04 	addi	sp,sp,-16
 4013384:	df000315 	stw	fp,12(sp)
 4013388:	df000304 	addi	fp,sp,12
 401338c:	e13ffe15 	stw	r4,-8(fp)
 4013390:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 4013394:	e0bffe17 	ldw	r2,-8(fp)
 4013398:	10800d03 	ldbu	r2,52(r2)
 401339c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 40133a0:	e0bffd03 	ldbu	r2,-12(fp)
 40133a4:	e0fffd03 	ldbu	r3,-12(fp)
 40133a8:	e13fff17 	ldw	r4,-4(fp)
 40133ac:	20c7883a 	add	r3,r4,r3
 40133b0:	18c002c4 	addi	r3,r3,11
 40133b4:	18c00003 	ldbu	r3,0(r3)
 40133b8:	1809883a 	mov	r4,r3
 40133bc:	e0fffe17 	ldw	r3,-8(fp)
 40133c0:	18c00d43 	ldbu	r3,53(r3)
 40133c4:	00c6303a 	nor	r3,zero,r3
 40133c8:	20c6703a 	and	r3,r4,r3
 40133cc:	1809883a 	mov	r4,r3
 40133d0:	e0ffff17 	ldw	r3,-4(fp)
 40133d4:	1885883a 	add	r2,r3,r2
 40133d8:	108002c4 	addi	r2,r2,11
 40133dc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 40133e0:	e0bffd03 	ldbu	r2,-12(fp)
 40133e4:	e0ffff17 	ldw	r3,-4(fp)
 40133e8:	1885883a 	add	r2,r3,r2
 40133ec:	108002c4 	addi	r2,r2,11
 40133f0:	10800003 	ldbu	r2,0(r2)
 40133f4:	10803fcc 	andi	r2,r2,255
 40133f8:	10000a1e 	bne	r2,zero,4013424 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 40133fc:	e0bfff17 	ldw	r2,-4(fp)
 4013400:	10800283 	ldbu	r2,10(r2)
 4013404:	1007883a 	mov	r3,r2
 4013408:	e0bffe17 	ldw	r2,-8(fp)
 401340c:	10800d83 	ldbu	r2,54(r2)
 4013410:	0084303a 	nor	r2,zero,r2
 4013414:	1884703a 	and	r2,r3,r2
 4013418:	1007883a 	mov	r3,r2
 401341c:	e0bfff17 	ldw	r2,-4(fp)
 4013420:	10c00285 	stb	r3,10(r2)
    }
}
 4013424:	0001883a 	nop
 4013428:	e037883a 	mov	sp,fp
 401342c:	df000017 	ldw	fp,0(sp)
 4013430:	dec00104 	addi	sp,sp,4
 4013434:	f800283a 	ret

04013438 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 4013438:	defffa04 	addi	sp,sp,-24
 401343c:	df000515 	stw	fp,20(sp)
 4013440:	df000504 	addi	fp,sp,20
 4013444:	e13ffe15 	stw	r4,-8(fp)
 4013448:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 401344c:	e0bffe17 	ldw	r2,-8(fp)
 4013450:	10800d03 	ldbu	r2,52(r2)
 4013454:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 4013458:	e0bffe17 	ldw	r2,-8(fp)
 401345c:	10800d83 	ldbu	r2,54(r2)
 4013460:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 4013464:	e0bffe17 	ldw	r2,-8(fp)
 4013468:	10800d43 	ldbu	r2,53(r2)
 401346c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 4013470:	e0bfff17 	ldw	r2,-4(fp)
 4013474:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 4013478:	e0bffb17 	ldw	r2,-20(fp)
 401347c:	10800017 	ldw	r2,0(r2)
 4013480:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4013484:	00002506 	br	401351c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 4013488:	e0bffd03 	ldbu	r2,-12(fp)
 401348c:	e0fffd03 	ldbu	r3,-12(fp)
 4013490:	e13ffc17 	ldw	r4,-16(fp)
 4013494:	20c7883a 	add	r3,r4,r3
 4013498:	18c002c4 	addi	r3,r3,11
 401349c:	18c00003 	ldbu	r3,0(r3)
 40134a0:	1809883a 	mov	r4,r3
 40134a4:	e0fffd83 	ldbu	r3,-10(fp)
 40134a8:	00c6303a 	nor	r3,zero,r3
 40134ac:	20c6703a 	and	r3,r4,r3
 40134b0:	1809883a 	mov	r4,r3
 40134b4:	e0fffc17 	ldw	r3,-16(fp)
 40134b8:	1885883a 	add	r2,r3,r2
 40134bc:	108002c4 	addi	r2,r2,11
 40134c0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 40134c4:	e0bffd03 	ldbu	r2,-12(fp)
 40134c8:	e0fffc17 	ldw	r3,-16(fp)
 40134cc:	1885883a 	add	r2,r3,r2
 40134d0:	108002c4 	addi	r2,r2,11
 40134d4:	10800003 	ldbu	r2,0(r2)
 40134d8:	10803fcc 	andi	r2,r2,255
 40134dc:	1000091e 	bne	r2,zero,4013504 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 40134e0:	e0bffc17 	ldw	r2,-16(fp)
 40134e4:	10800283 	ldbu	r2,10(r2)
 40134e8:	1007883a 	mov	r3,r2
 40134ec:	e0bffd43 	ldbu	r2,-11(fp)
 40134f0:	0084303a 	nor	r2,zero,r2
 40134f4:	1884703a 	and	r2,r3,r2
 40134f8:	1007883a 	mov	r3,r2
 40134fc:	e0bffc17 	ldw	r2,-16(fp)
 4013500:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 4013504:	e0bffb17 	ldw	r2,-20(fp)
 4013508:	10800104 	addi	r2,r2,4
 401350c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 4013510:	e0bffb17 	ldw	r2,-20(fp)
 4013514:	10800017 	ldw	r2,0(r2)
 4013518:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 401351c:	e0bffc17 	ldw	r2,-16(fp)
 4013520:	103fd91e 	bne	r2,zero,4013488 <__alt_mem_onchip_memory2_0+0xfc011488>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 4013524:	0001883a 	nop
 4013528:	e037883a 	mov	sp,fp
 401352c:	df000017 	ldw	fp,0(sp)
 4013530:	dec00104 	addi	sp,sp,4
 4013534:	f800283a 	ret

04013538 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 4013538:	defffc04 	addi	sp,sp,-16
 401353c:	df000315 	stw	fp,12(sp)
 4013540:	df000304 	addi	fp,sp,12
 4013544:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 4013548:	e0bfff17 	ldw	r2,-4(fp)
 401354c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 4013550:	e0bfff17 	ldw	r2,-4(fp)
 4013554:	108002c4 	addi	r2,r2,11
 4013558:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401355c:	e03ffe05 	stb	zero,-8(fp)
 4013560:	00000706 	br	4013580 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 4013564:	e0bffd17 	ldw	r2,-12(fp)
 4013568:	10c00044 	addi	r3,r2,1
 401356c:	e0fffd15 	stw	r3,-12(fp)
 4013570:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4013574:	e0bffe03 	ldbu	r2,-8(fp)
 4013578:	10800044 	addi	r2,r2,1
 401357c:	e0bffe05 	stb	r2,-8(fp)
 4013580:	e0bffe03 	ldbu	r2,-8(fp)
 4013584:	108000f0 	cmpltui	r2,r2,3
 4013588:	103ff61e 	bne	r2,zero,4013564 <__alt_mem_onchip_memory2_0+0xfc011564>
        *ptbl++ = 0;
    }
}
 401358c:	0001883a 	nop
 4013590:	e037883a 	mov	sp,fp
 4013594:	df000017 	ldw	fp,0(sp)
 4013598:	dec00104 	addi	sp,sp,4
 401359c:	f800283a 	ret

040135a0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 40135a0:	defffb04 	addi	sp,sp,-20
 40135a4:	dfc00415 	stw	ra,16(sp)
 40135a8:	df000315 	stw	fp,12(sp)
 40135ac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 40135b0:	0142d004 	movi	r5,2880
 40135b4:	010100f4 	movhi	r4,1027
 40135b8:	21221c04 	addi	r4,r4,-30608
 40135bc:	40139180 	call	4013918 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 40135c0:	008100f4 	movhi	r2,1027
 40135c4:	10a21c04 	addi	r2,r2,-30608
 40135c8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 40135cc:	008100f4 	movhi	r2,1027
 40135d0:	10a22804 	addi	r2,r2,-30560
 40135d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 40135d8:	e03ffd0d 	sth	zero,-12(fp)
 40135dc:	00001306 	br	401362c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40135e0:	e0bffe17 	ldw	r2,-8(fp)
 40135e4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 40135e8:	e0bffe17 	ldw	r2,-8(fp)
 40135ec:	e0ffff17 	ldw	r3,-4(fp)
 40135f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 40135f4:	e0bffe17 	ldw	r2,-8(fp)
 40135f8:	00c00fc4 	movi	r3,63
 40135fc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 4013600:	e0bffe17 	ldw	r2,-8(fp)
 4013604:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 4013608:	e0bffe17 	ldw	r2,-8(fp)
 401360c:	10800c04 	addi	r2,r2,48
 4013610:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 4013614:	e0bfff17 	ldw	r2,-4(fp)
 4013618:	10800c04 	addi	r2,r2,48
 401361c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4013620:	e0bffd0b 	ldhu	r2,-12(fp)
 4013624:	10800044 	addi	r2,r2,1
 4013628:	e0bffd0d 	sth	r2,-12(fp)
 401362c:	e0bffd0b 	ldhu	r2,-12(fp)
 4013630:	10800ef0 	cmpltui	r2,r2,59
 4013634:	103fea1e 	bne	r2,zero,40135e0 <__alt_mem_onchip_memory2_0+0xfc0115e0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 4013638:	e0bffe17 	ldw	r2,-8(fp)
 401363c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 4013640:	e0bffe17 	ldw	r2,-8(fp)
 4013644:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 4013648:	e0bffe17 	ldw	r2,-8(fp)
 401364c:	00c00fc4 	movi	r3,63
 4013650:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 4013654:	e0bffe17 	ldw	r2,-8(fp)
 4013658:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 401365c:	008100f4 	movhi	r2,1027
 4013660:	10a21c04 	addi	r2,r2,-30608
 4013664:	d0a75115 	stw	r2,-25276(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 4013668:	0001883a 	nop
 401366c:	e037883a 	mov	sp,fp
 4013670:	dfc00117 	ldw	ra,4(sp)
 4013674:	df000017 	ldw	fp,0(sp)
 4013678:	dec00204 	addi	sp,sp,8
 401367c:	f800283a 	ret

04013680 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 4013680:	deffff04 	addi	sp,sp,-4
 4013684:	df000015 	stw	fp,0(sp)
 4013688:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 401368c:	d0275415 	stw	zero,-25264(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 4013690:	d0275205 	stb	zero,-25272(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 4013694:	d0274405 	stb	zero,-25328(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 4013698:	d0274c45 	stb	zero,-25295(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 401369c:	d0274445 	stb	zero,-25327(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 40136a0:	d0274915 	stw	zero,-25308(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 40136a4:	d0274515 	stw	zero,-25324(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 40136a8:	d0275715 	stw	zero,-25252(gp)
    OSIdleCtrMax  = 0L;
 40136ac:	d0274a15 	stw	zero,-25304(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 40136b0:	d0275605 	stb	zero,-25256(gp)
#endif
}
 40136b4:	0001883a 	nop
 40136b8:	e037883a 	mov	sp,fp
 40136bc:	df000017 	ldw	fp,0(sp)
 40136c0:	dec00104 	addi	sp,sp,4
 40136c4:	f800283a 	ret

040136c8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 40136c8:	defffd04 	addi	sp,sp,-12
 40136cc:	df000215 	stw	fp,8(sp)
 40136d0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 40136d4:	d0275005 	stb	zero,-25280(gp)
    prdytbl       = &OSRdyTbl[0];
 40136d8:	d0a75044 	addi	r2,gp,-25279
 40136dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 40136e0:	e03ffe05 	stb	zero,-8(fp)
 40136e4:	00000706 	br	4013704 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 40136e8:	e0bfff17 	ldw	r2,-4(fp)
 40136ec:	10c00044 	addi	r3,r2,1
 40136f0:	e0ffff15 	stw	r3,-4(fp)
 40136f4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 40136f8:	e0bffe03 	ldbu	r2,-8(fp)
 40136fc:	10800044 	addi	r2,r2,1
 4013700:	e0bffe05 	stb	r2,-8(fp)
 4013704:	e0bffe03 	ldbu	r2,-8(fp)
 4013708:	108000f0 	cmpltui	r2,r2,3
 401370c:	103ff61e 	bne	r2,zero,40136e8 <__alt_mem_onchip_memory2_0+0xfc0116e8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 4013710:	d0274645 	stb	zero,-25319(gp)
    OSPrioHighRdy = 0;
 4013714:	d0274605 	stb	zero,-25320(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 4013718:	d0274e15 	stw	zero,-25288(gp)
    OSTCBCur      = (OS_TCB *)0;
 401371c:	d0275315 	stw	zero,-25268(gp)
}
 4013720:	0001883a 	nop
 4013724:	e037883a 	mov	sp,fp
 4013728:	df000017 	ldw	fp,0(sp)
 401372c:	dec00104 	addi	sp,sp,4
 4013730:	f800283a 	ret

04013734 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 4013734:	defff804 	addi	sp,sp,-32
 4013738:	dfc00715 	stw	ra,28(sp)
 401373c:	df000615 	stw	fp,24(sp)
 4013740:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 4013744:	008000c4 	movi	r2,3
 4013748:	d8800415 	stw	r2,16(sp)
 401374c:	d8000315 	stw	zero,12(sp)
 4013750:	00808004 	movi	r2,512
 4013754:	d8800215 	stw	r2,8(sp)
 4013758:	008100f4 	movhi	r2,1027
 401375c:	10a01c04 	addi	r2,r2,-32656
 4013760:	d8800115 	stw	r2,4(sp)
 4013764:	00bfffd4 	movui	r2,65535
 4013768:	d8800015 	stw	r2,0(sp)
 401376c:	01c00504 	movi	r7,20
 4013770:	018100f4 	movhi	r6,1027
 4013774:	31a21b04 	addi	r6,r6,-30612
 4013778:	000b883a 	mov	r5,zero
 401377c:	01010074 	movhi	r4,1025
 4013780:	210ef804 	addi	r4,r4,15328
 4013784:	4018d680 	call	4018d68 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 4013788:	e1bfff04 	addi	r6,fp,-4
 401378c:	014100b4 	movhi	r5,1026
 4013790:	29736d04 	addi	r5,r5,-12876
 4013794:	01000504 	movi	r4,20
 4013798:	40195780 	call	4019578 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 401379c:	0001883a 	nop
 40137a0:	e037883a 	mov	sp,fp
 40137a4:	dfc00117 	ldw	ra,4(sp)
 40137a8:	df000017 	ldw	fp,0(sp)
 40137ac:	dec00204 	addi	sp,sp,8
 40137b0:	f800283a 	ret

040137b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 40137b4:	defff804 	addi	sp,sp,-32
 40137b8:	dfc00715 	stw	ra,28(sp)
 40137bc:	df000615 	stw	fp,24(sp)
 40137c0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 40137c4:	008000c4 	movi	r2,3
 40137c8:	d8800415 	stw	r2,16(sp)
 40137cc:	d8000315 	stw	zero,12(sp)
 40137d0:	00808004 	movi	r2,512
 40137d4:	d8800215 	stw	r2,8(sp)
 40137d8:	008100b4 	movhi	r2,1026
 40137dc:	109da404 	addi	r2,r2,30352
 40137e0:	d8800115 	stw	r2,4(sp)
 40137e4:	00bfff94 	movui	r2,65534
 40137e8:	d8800015 	stw	r2,0(sp)
 40137ec:	01c004c4 	movi	r7,19
 40137f0:	018100b4 	movhi	r6,1026
 40137f4:	319fa304 	addi	r6,r6,32396
 40137f8:	000b883a 	mov	r5,zero
 40137fc:	01010074 	movhi	r4,1025
 4013800:	210f0f04 	addi	r4,r4,15420
 4013804:	4018d680 	call	4018d68 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 4013808:	e1bfff04 	addi	r6,fp,-4
 401380c:	014100b4 	movhi	r5,1026
 4013810:	29737104 	addi	r5,r5,-12860
 4013814:	010004c4 	movi	r4,19
 4013818:	40195780 	call	4019578 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 401381c:	0001883a 	nop
 4013820:	e037883a 	mov	sp,fp
 4013824:	dfc00117 	ldw	ra,4(sp)
 4013828:	df000017 	ldw	fp,0(sp)
 401382c:	dec00204 	addi	sp,sp,8
 4013830:	f800283a 	ret

04013834 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 4013834:	defffb04 	addi	sp,sp,-20
 4013838:	dfc00415 	stw	ra,16(sp)
 401383c:	df000315 	stw	fp,12(sp)
 4013840:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 4013844:	01414404 	movi	r5,1296
 4013848:	010100f4 	movhi	r4,1027
 401384c:	2124ec04 	addi	r4,r4,-27728
 4013850:	40139180 	call	4013918 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 4013854:	01401504 	movi	r5,84
 4013858:	010100f4 	movhi	r4,1027
 401385c:	21263004 	addi	r4,r4,-26432
 4013860:	40139180 	call	4013918 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 4013864:	008100f4 	movhi	r2,1027
 4013868:	10a4ec04 	addi	r2,r2,-27728
 401386c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 4013870:	008100f4 	movhi	r2,1027
 4013874:	10a50704 	addi	r2,r2,-27620
 4013878:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 401387c:	e03ffd05 	stb	zero,-12(fp)
 4013880:	00001106 	br	40138c8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 4013884:	e0bffe17 	ldw	r2,-8(fp)
 4013888:	e0ffff17 	ldw	r3,-4(fp)
 401388c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 4013890:	e0bffe17 	ldw	r2,-8(fp)
 4013894:	00c00fc4 	movi	r3,63
 4013898:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 401389c:	e0bffe17 	ldw	r2,-8(fp)
 40138a0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 40138a4:	e0bffe17 	ldw	r2,-8(fp)
 40138a8:	10801b04 	addi	r2,r2,108
 40138ac:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 40138b0:	e0bfff17 	ldw	r2,-4(fp)
 40138b4:	10801b04 	addi	r2,r2,108
 40138b8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 40138bc:	e0bffd03 	ldbu	r2,-12(fp)
 40138c0:	10800044 	addi	r2,r2,1
 40138c4:	e0bffd05 	stb	r2,-12(fp)
 40138c8:	e0bffd03 	ldbu	r2,-12(fp)
 40138cc:	108002f0 	cmpltui	r2,r2,11
 40138d0:	103fec1e 	bne	r2,zero,4013884 <__alt_mem_onchip_memory2_0+0xfc011884>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 40138d4:	e0bffe17 	ldw	r2,-8(fp)
 40138d8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 40138dc:	e0bffe17 	ldw	r2,-8(fp)
 40138e0:	00c00fc4 	movi	r3,63
 40138e4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 40138e8:	e0bffe17 	ldw	r2,-8(fp)
 40138ec:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 40138f0:	d0274715 	stw	zero,-25316(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 40138f4:	008100f4 	movhi	r2,1027
 40138f8:	10a4ec04 	addi	r2,r2,-27728
 40138fc:	d0a74b15 	stw	r2,-25300(gp)
}
 4013900:	0001883a 	nop
 4013904:	e037883a 	mov	sp,fp
 4013908:	dfc00117 	ldw	ra,4(sp)
 401390c:	df000017 	ldw	fp,0(sp)
 4013910:	dec00204 	addi	sp,sp,8
 4013914:	f800283a 	ret

04013918 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 4013918:	defffd04 	addi	sp,sp,-12
 401391c:	df000215 	stw	fp,8(sp)
 4013920:	df000204 	addi	fp,sp,8
 4013924:	e13ffe15 	stw	r4,-8(fp)
 4013928:	2805883a 	mov	r2,r5
 401392c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4013930:	00000706 	br	4013950 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 4013934:	e0bffe17 	ldw	r2,-8(fp)
 4013938:	10c00044 	addi	r3,r2,1
 401393c:	e0fffe15 	stw	r3,-8(fp)
 4013940:	10000005 	stb	zero,0(r2)
        size--;
 4013944:	e0bfff0b 	ldhu	r2,-4(fp)
 4013948:	10bfffc4 	addi	r2,r2,-1
 401394c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 4013950:	e0bfff0b 	ldhu	r2,-4(fp)
 4013954:	103ff71e 	bne	r2,zero,4013934 <__alt_mem_onchip_memory2_0+0xfc011934>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 4013958:	0001883a 	nop
 401395c:	e037883a 	mov	sp,fp
 4013960:	df000017 	ldw	fp,0(sp)
 4013964:	dec00104 	addi	sp,sp,4
 4013968:	f800283a 	ret

0401396c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 401396c:	defffc04 	addi	sp,sp,-16
 4013970:	df000315 	stw	fp,12(sp)
 4013974:	df000304 	addi	fp,sp,12
 4013978:	e13ffd15 	stw	r4,-12(fp)
 401397c:	e17ffe15 	stw	r5,-8(fp)
 4013980:	3005883a 	mov	r2,r6
 4013984:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4013988:	00000b06 	br	40139b8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 401398c:	e0bffd17 	ldw	r2,-12(fp)
 4013990:	10c00044 	addi	r3,r2,1
 4013994:	e0fffd15 	stw	r3,-12(fp)
 4013998:	e0fffe17 	ldw	r3,-8(fp)
 401399c:	19000044 	addi	r4,r3,1
 40139a0:	e13ffe15 	stw	r4,-8(fp)
 40139a4:	18c00003 	ldbu	r3,0(r3)
 40139a8:	10c00005 	stb	r3,0(r2)
        size--;
 40139ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40139b0:	10bfffc4 	addi	r2,r2,-1
 40139b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 40139b8:	e0bfff0b 	ldhu	r2,-4(fp)
 40139bc:	103ff31e 	bne	r2,zero,401398c <__alt_mem_onchip_memory2_0+0xfc01198c>
        *pdest++ = *psrc++;
        size--;
    }
}
 40139c0:	0001883a 	nop
 40139c4:	e037883a 	mov	sp,fp
 40139c8:	df000017 	ldw	fp,0(sp)
 40139cc:	dec00104 	addi	sp,sp,4
 40139d0:	f800283a 	ret

040139d4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 40139d4:	defffb04 	addi	sp,sp,-20
 40139d8:	dfc00415 	stw	ra,16(sp)
 40139dc:	df000315 	stw	fp,12(sp)
 40139e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 40139e4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40139e8:	0005303a 	rdctl	r2,status
 40139ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40139f0:	e0ffff17 	ldw	r3,-4(fp)
 40139f4:	00bfff84 	movi	r2,-2
 40139f8:	1884703a 	and	r2,r3,r2
 40139fc:	1001703a 	wrctl	status,r2
  
  return context;
 4013a00:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 4013a04:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 4013a08:	d0a75203 	ldbu	r2,-25272(gp)
 4013a0c:	10803fcc 	andi	r2,r2,255
 4013a10:	10001a1e 	bne	r2,zero,4013a7c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 4013a14:	d0a74403 	ldbu	r2,-25328(gp)
 4013a18:	10803fcc 	andi	r2,r2,255
 4013a1c:	1000171e 	bne	r2,zero,4013a7c <OS_Sched+0xa8>
            OS_SchedNew();
 4013a20:	4013aa40 	call	4013aa4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 4013a24:	d0e74603 	ldbu	r3,-25320(gp)
 4013a28:	d0a74643 	ldbu	r2,-25319(gp)
 4013a2c:	18c03fcc 	andi	r3,r3,255
 4013a30:	10803fcc 	andi	r2,r2,255
 4013a34:	18801126 	beq	r3,r2,4013a7c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4013a38:	d0a74603 	ldbu	r2,-25320(gp)
 4013a3c:	10c03fcc 	andi	r3,r2,255
 4013a40:	008100f4 	movhi	r2,1027
 4013a44:	10a63004 	addi	r2,r2,-26432
 4013a48:	18c7883a 	add	r3,r3,r3
 4013a4c:	18c7883a 	add	r3,r3,r3
 4013a50:	10c5883a 	add	r2,r2,r3
 4013a54:	10800017 	ldw	r2,0(r2)
 4013a58:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 4013a5c:	d0a74e17 	ldw	r2,-25288(gp)
 4013a60:	10c00e17 	ldw	r3,56(r2)
 4013a64:	18c00044 	addi	r3,r3,1
 4013a68:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 4013a6c:	d0a74917 	ldw	r2,-25308(gp)
 4013a70:	10800044 	addi	r2,r2,1
 4013a74:	d0a74915 	stw	r2,-25308(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 4013a78:	401bea80 	call	401bea8 <OSCtxSw>
 4013a7c:	e0bffd17 	ldw	r2,-12(fp)
 4013a80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013a84:	e0bffe17 	ldw	r2,-8(fp)
 4013a88:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 4013a8c:	0001883a 	nop
 4013a90:	e037883a 	mov	sp,fp
 4013a94:	dfc00117 	ldw	ra,4(sp)
 4013a98:	df000017 	ldw	fp,0(sp)
 4013a9c:	dec00204 	addi	sp,sp,8
 4013aa0:	f800283a 	ret

04013aa4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 4013aa4:	defffe04 	addi	sp,sp,-8
 4013aa8:	df000115 	stw	fp,4(sp)
 4013aac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 4013ab0:	d0a75003 	ldbu	r2,-25280(gp)
 4013ab4:	10c03fcc 	andi	r3,r2,255
 4013ab8:	008100b4 	movhi	r2,1026
 4013abc:	10b32d04 	addi	r2,r2,-13132
 4013ac0:	10c5883a 	add	r2,r2,r3
 4013ac4:	10800003 	ldbu	r2,0(r2)
 4013ac8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4013acc:	e0bfff03 	ldbu	r2,-4(fp)
 4013ad0:	100490fa 	slli	r2,r2,3
 4013ad4:	1009883a 	mov	r4,r2
 4013ad8:	e0ffff03 	ldbu	r3,-4(fp)
 4013adc:	d0a75044 	addi	r2,gp,-25279
 4013ae0:	1885883a 	add	r2,r3,r2
 4013ae4:	10800003 	ldbu	r2,0(r2)
 4013ae8:	10c03fcc 	andi	r3,r2,255
 4013aec:	008100b4 	movhi	r2,1026
 4013af0:	10b32d04 	addi	r2,r2,-13132
 4013af4:	10c5883a 	add	r2,r2,r3
 4013af8:	10800003 	ldbu	r2,0(r2)
 4013afc:	2085883a 	add	r2,r4,r2
 4013b00:	d0a74605 	stb	r2,-25320(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 4013b04:	0001883a 	nop
 4013b08:	e037883a 	mov	sp,fp
 4013b0c:	df000017 	ldw	fp,0(sp)
 4013b10:	dec00104 	addi	sp,sp,4
 4013b14:	f800283a 	ret

04013b18 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4013b18:	defffc04 	addi	sp,sp,-16
 4013b1c:	df000315 	stw	fp,12(sp)
 4013b20:	df000304 	addi	fp,sp,12
 4013b24:	e13ffe15 	stw	r4,-8(fp)
 4013b28:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 4013b2c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 4013b30:	00000b06 	br	4013b60 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 4013b34:	e0bffe17 	ldw	r2,-8(fp)
 4013b38:	10c00044 	addi	r3,r2,1
 4013b3c:	e0fffe15 	stw	r3,-8(fp)
 4013b40:	e0ffff17 	ldw	r3,-4(fp)
 4013b44:	19000044 	addi	r4,r3,1
 4013b48:	e13fff15 	stw	r4,-4(fp)
 4013b4c:	18c00003 	ldbu	r3,0(r3)
 4013b50:	10c00005 	stb	r3,0(r2)
        len++;
 4013b54:	e0bffd03 	ldbu	r2,-12(fp)
 4013b58:	10800044 	addi	r2,r2,1
 4013b5c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4013b60:	e0bfff17 	ldw	r2,-4(fp)
 4013b64:	10800003 	ldbu	r2,0(r2)
 4013b68:	10803fcc 	andi	r2,r2,255
 4013b6c:	103ff11e 	bne	r2,zero,4013b34 <__alt_mem_onchip_memory2_0+0xfc011b34>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 4013b70:	e0bffe17 	ldw	r2,-8(fp)
 4013b74:	10000005 	stb	zero,0(r2)
    return (len);
 4013b78:	e0bffd03 	ldbu	r2,-12(fp)
}
 4013b7c:	e037883a 	mov	sp,fp
 4013b80:	df000017 	ldw	fp,0(sp)
 4013b84:	dec00104 	addi	sp,sp,4
 4013b88:	f800283a 	ret

04013b8c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 4013b8c:	defffd04 	addi	sp,sp,-12
 4013b90:	df000215 	stw	fp,8(sp)
 4013b94:	df000204 	addi	fp,sp,8
 4013b98:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 4013b9c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 4013ba0:	00000606 	br	4013bbc <OS_StrLen+0x30>
        psrc++;
 4013ba4:	e0bfff17 	ldw	r2,-4(fp)
 4013ba8:	10800044 	addi	r2,r2,1
 4013bac:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4013bb0:	e0bffe03 	ldbu	r2,-8(fp)
 4013bb4:	10800044 	addi	r2,r2,1
 4013bb8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4013bbc:	e0bfff17 	ldw	r2,-4(fp)
 4013bc0:	10800003 	ldbu	r2,0(r2)
 4013bc4:	10803fcc 	andi	r2,r2,255
 4013bc8:	103ff61e 	bne	r2,zero,4013ba4 <__alt_mem_onchip_memory2_0+0xfc011ba4>
        psrc++;
        len++;
    }
    return (len);
 4013bcc:	e0bffe03 	ldbu	r2,-8(fp)
}
 4013bd0:	e037883a 	mov	sp,fp
 4013bd4:	df000017 	ldw	fp,0(sp)
 4013bd8:	dec00104 	addi	sp,sp,4
 4013bdc:	f800283a 	ret

04013be0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 4013be0:	defffa04 	addi	sp,sp,-24
 4013be4:	dfc00515 	stw	ra,20(sp)
 4013be8:	df000415 	stw	fp,16(sp)
 4013bec:	df000404 	addi	fp,sp,16
 4013bf0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4013bf4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013bf8:	0005303a 	rdctl	r2,status
 4013bfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c00:	e0fffd17 	ldw	r3,-12(fp)
 4013c04:	00bfff84 	movi	r2,-2
 4013c08:	1884703a 	and	r2,r3,r2
 4013c0c:	1001703a 	wrctl	status,r2
  
  return context;
 4013c10:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 4013c14:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 4013c18:	d0a74517 	ldw	r2,-25324(gp)
 4013c1c:	10800044 	addi	r2,r2,1
 4013c20:	d0a74515 	stw	r2,-25324(gp)
 4013c24:	e0bffc17 	ldw	r2,-16(fp)
 4013c28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013c2c:	e0bffe17 	ldw	r2,-8(fp)
 4013c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 4013c34:	401c1bc0 	call	401c1bc <OSTaskIdleHook>
    }
 4013c38:	003fef06 	br	4013bf8 <__alt_mem_onchip_memory2_0+0xfc011bf8>

04013c3c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 4013c3c:	defffa04 	addi	sp,sp,-24
 4013c40:	dfc00515 	stw	ra,20(sp)
 4013c44:	df000415 	stw	fp,16(sp)
 4013c48:	df000404 	addi	fp,sp,16
 4013c4c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4013c50:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4013c54:	00000206 	br	4013c60 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 4013c58:	01003204 	movi	r4,200
 4013c5c:	4019e380 	call	4019e38 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4013c60:	d0a75603 	ldbu	r2,-25256(gp)
 4013c64:	10803fcc 	andi	r2,r2,255
 4013c68:	103ffb26 	beq	r2,zero,4013c58 <__alt_mem_onchip_memory2_0+0xfc011c58>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 4013c6c:	d0a74a17 	ldw	r2,-25304(gp)
 4013c70:	01401904 	movi	r5,100
 4013c74:	1009883a 	mov	r4,r2
 4013c78:	4000dbc0 	call	4000dbc <__udivsi3>
 4013c7c:	d0a74a15 	stw	r2,-25304(gp)
    if (OSIdleCtrMax == 0L) {
 4013c80:	d0a74a17 	ldw	r2,-25304(gp)
 4013c84:	1000031e 	bne	r2,zero,4013c94 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 4013c88:	d0274c05 	stb	zero,-25296(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 4013c8c:	01003fc4 	movi	r4,255
 4013c90:	4019ac00 	call	4019ac0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013c94:	0005303a 	rdctl	r2,status
 4013c98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c9c:	e0fffd17 	ldw	r3,-12(fp)
 4013ca0:	00bfff84 	movi	r2,-2
 4013ca4:	1884703a 	and	r2,r3,r2
 4013ca8:	1001703a 	wrctl	status,r2
  
  return context;
 4013cac:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4013cb0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 4013cb4:	d0a74517 	ldw	r2,-25324(gp)
 4013cb8:	d0a75715 	stw	r2,-25252(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 4013cbc:	d0274515 	stw	zero,-25324(gp)
 4013cc0:	e0bffc17 	ldw	r2,-16(fp)
 4013cc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013cc8:	e0bffe17 	ldw	r2,-8(fp)
 4013ccc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4013cd0:	d0a75717 	ldw	r2,-25252(gp)
 4013cd4:	d0e74a17 	ldw	r3,-25304(gp)
 4013cd8:	180b883a 	mov	r5,r3
 4013cdc:	1009883a 	mov	r4,r2
 4013ce0:	4000dbc0 	call	4000dbc <__udivsi3>
 4013ce4:	1007883a 	mov	r3,r2
 4013ce8:	00801904 	movi	r2,100
 4013cec:	10c5c83a 	sub	r2,r2,r3
 4013cf0:	d0a74c05 	stb	r2,-25296(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4013cf4:	401c13c0 	call	401c13c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4013cf8:	4013d080 	call	4013d08 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4013cfc:	01001904 	movi	r4,100
 4013d00:	4019e380 	call	4019e38 <OSTimeDly>
    }
 4013d04:	003fe306 	br	4013c94 <__alt_mem_onchip_memory2_0+0xfc011c94>

04013d08 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4013d08:	defffa04 	addi	sp,sp,-24
 4013d0c:	dfc00515 	stw	ra,20(sp)
 4013d10:	df000415 	stw	fp,16(sp)
 4013d14:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4013d18:	e03ffc05 	stb	zero,-16(fp)
 4013d1c:	00002406 	br	4013db0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4013d20:	e0bffc03 	ldbu	r2,-16(fp)
 4013d24:	e0fffe04 	addi	r3,fp,-8
 4013d28:	180b883a 	mov	r5,r3
 4013d2c:	1009883a 	mov	r4,r2
 4013d30:	40199000 	call	4019900 <OSTaskStkChk>
 4013d34:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4013d38:	e0bffc43 	ldbu	r2,-15(fp)
 4013d3c:	1000191e 	bne	r2,zero,4013da4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4013d40:	e0fffc03 	ldbu	r3,-16(fp)
 4013d44:	008100f4 	movhi	r2,1027
 4013d48:	10a63004 	addi	r2,r2,-26432
 4013d4c:	18c7883a 	add	r3,r3,r3
 4013d50:	18c7883a 	add	r3,r3,r3
 4013d54:	10c5883a 	add	r2,r2,r3
 4013d58:	10800017 	ldw	r2,0(r2)
 4013d5c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 4013d60:	e0bffd17 	ldw	r2,-12(fp)
 4013d64:	10000f26 	beq	r2,zero,4013da4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 4013d68:	e0bffd17 	ldw	r2,-12(fp)
 4013d6c:	10800060 	cmpeqi	r2,r2,1
 4013d70:	10000c1e 	bne	r2,zero,4013da4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4013d74:	e0bffd17 	ldw	r2,-12(fp)
 4013d78:	10c00217 	ldw	r3,8(r2)
 4013d7c:	e0bffd17 	ldw	r2,-12(fp)
 4013d80:	10800317 	ldw	r2,12(r2)
 4013d84:	1085883a 	add	r2,r2,r2
 4013d88:	1085883a 	add	r2,r2,r2
 4013d8c:	1887883a 	add	r3,r3,r2
 4013d90:	e0bffd17 	ldw	r2,-12(fp)
 4013d94:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 4013d98:	e0ffff17 	ldw	r3,-4(fp)
 4013d9c:	e0bffd17 	ldw	r2,-12(fp)
 4013da0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4013da4:	e0bffc03 	ldbu	r2,-16(fp)
 4013da8:	10800044 	addi	r2,r2,1
 4013dac:	e0bffc05 	stb	r2,-16(fp)
 4013db0:	e0bffc03 	ldbu	r2,-16(fp)
 4013db4:	10800570 	cmpltui	r2,r2,21
 4013db8:	103fd91e 	bne	r2,zero,4013d20 <__alt_mem_onchip_memory2_0+0xfc011d20>
#endif
                }
            }
        }
    }
}
 4013dbc:	0001883a 	nop
 4013dc0:	e037883a 	mov	sp,fp
 4013dc4:	dfc00117 	ldw	ra,4(sp)
 4013dc8:	df000017 	ldw	fp,0(sp)
 4013dcc:	dec00204 	addi	sp,sp,8
 4013dd0:	f800283a 	ret

04013dd4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4013dd4:	defff204 	addi	sp,sp,-56
 4013dd8:	dfc00d15 	stw	ra,52(sp)
 4013ddc:	df000c15 	stw	fp,48(sp)
 4013de0:	df000c04 	addi	fp,sp,48
 4013de4:	e17ffc15 	stw	r5,-16(fp)
 4013de8:	e1bffd15 	stw	r6,-12(fp)
 4013dec:	3807883a 	mov	r3,r7
 4013df0:	e0800417 	ldw	r2,16(fp)
 4013df4:	e13ffb05 	stb	r4,-20(fp)
 4013df8:	e0fffe0d 	sth	r3,-8(fp)
 4013dfc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4013e00:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013e04:	0005303a 	rdctl	r2,status
 4013e08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013e0c:	e0fffa17 	ldw	r3,-24(fp)
 4013e10:	00bfff84 	movi	r2,-2
 4013e14:	1884703a 	and	r2,r3,r2
 4013e18:	1001703a 	wrctl	status,r2
  
  return context;
 4013e1c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 4013e20:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4013e24:	d0a74b17 	ldw	r2,-25300(gp)
 4013e28:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 4013e2c:	e0bff617 	ldw	r2,-40(fp)
 4013e30:	10009326 	beq	r2,zero,4014080 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4013e34:	e0bff617 	ldw	r2,-40(fp)
 4013e38:	10800517 	ldw	r2,20(r2)
 4013e3c:	d0a74b15 	stw	r2,-25300(gp)
 4013e40:	e0bff417 	ldw	r2,-48(fp)
 4013e44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e48:	e0bff817 	ldw	r2,-32(fp)
 4013e4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 4013e50:	e0bff617 	ldw	r2,-40(fp)
 4013e54:	e0fffc17 	ldw	r3,-16(fp)
 4013e58:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 4013e5c:	e0bff617 	ldw	r2,-40(fp)
 4013e60:	e0fffb03 	ldbu	r3,-20(fp)
 4013e64:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 4013e68:	e0bff617 	ldw	r2,-40(fp)
 4013e6c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 4013e70:	e0bff617 	ldw	r2,-40(fp)
 4013e74:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 4013e78:	e0bff617 	ldw	r2,-40(fp)
 4013e7c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4013e80:	e0bff617 	ldw	r2,-40(fp)
 4013e84:	e0c00317 	ldw	r3,12(fp)
 4013e88:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4013e8c:	e0bff617 	ldw	r2,-40(fp)
 4013e90:	e0c00217 	ldw	r3,8(fp)
 4013e94:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 4013e98:	e0bff617 	ldw	r2,-40(fp)
 4013e9c:	e0fffd17 	ldw	r3,-12(fp)
 4013ea0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4013ea4:	e0bff617 	ldw	r2,-40(fp)
 4013ea8:	e0ffff0b 	ldhu	r3,-4(fp)
 4013eac:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4013eb0:	e0bff617 	ldw	r2,-40(fp)
 4013eb4:	e0fffe0b 	ldhu	r3,-8(fp)
 4013eb8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4013ebc:	e0bff617 	ldw	r2,-40(fp)
 4013ec0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4013ec4:	e0bffb03 	ldbu	r2,-20(fp)
 4013ec8:	1004d0fa 	srli	r2,r2,3
 4013ecc:	1007883a 	mov	r3,r2
 4013ed0:	e0bff617 	ldw	r2,-40(fp)
 4013ed4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4013ed8:	e0bffb03 	ldbu	r2,-20(fp)
 4013edc:	108001cc 	andi	r2,r2,7
 4013ee0:	1007883a 	mov	r3,r2
 4013ee4:	e0bff617 	ldw	r2,-40(fp)
 4013ee8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4013eec:	e0bff617 	ldw	r2,-40(fp)
 4013ef0:	10800d03 	ldbu	r2,52(r2)
 4013ef4:	10803fcc 	andi	r2,r2,255
 4013ef8:	00c00044 	movi	r3,1
 4013efc:	1884983a 	sll	r2,r3,r2
 4013f00:	1007883a 	mov	r3,r2
 4013f04:	e0bff617 	ldw	r2,-40(fp)
 4013f08:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4013f0c:	e0bff617 	ldw	r2,-40(fp)
 4013f10:	10800cc3 	ldbu	r2,51(r2)
 4013f14:	10803fcc 	andi	r2,r2,255
 4013f18:	00c00044 	movi	r3,1
 4013f1c:	1884983a 	sll	r2,r3,r2
 4013f20:	1007883a 	mov	r3,r2
 4013f24:	e0bff617 	ldw	r2,-40(fp)
 4013f28:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4013f2c:	e0bff617 	ldw	r2,-40(fp)
 4013f30:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4013f34:	e0bff617 	ldw	r2,-40(fp)
 4013f38:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4013f3c:	e0bff617 	ldw	r2,-40(fp)
 4013f40:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4013f44:	e0bff617 	ldw	r2,-40(fp)
 4013f48:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4013f4c:	e0bff617 	ldw	r2,-40(fp)
 4013f50:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4013f54:	e0bff617 	ldw	r2,-40(fp)
 4013f58:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4013f5c:	e0bff617 	ldw	r2,-40(fp)
 4013f60:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4013f64:	e0bff617 	ldw	r2,-40(fp)
 4013f68:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4013f6c:	e0bff617 	ldw	r2,-40(fp)
 4013f70:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4013f74:	e0bff617 	ldw	r2,-40(fp)
 4013f78:	00c00fc4 	movi	r3,63
 4013f7c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4013f80:	e0bff617 	ldw	r2,-40(fp)
 4013f84:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4013f88:	e13ff617 	ldw	r4,-40(fp)
 4013f8c:	401c1dc0 	call	401c1dc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4013f90:	e13ff617 	ldw	r4,-40(fp)
 4013f94:	401c0d40 	call	401c0d4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013f98:	0005303a 	rdctl	r2,status
 4013f9c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013fa0:	e0fff517 	ldw	r3,-44(fp)
 4013fa4:	00bfff84 	movi	r2,-2
 4013fa8:	1884703a 	and	r2,r3,r2
 4013fac:	1001703a 	wrctl	status,r2
  
  return context;
 4013fb0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4013fb4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4013fb8:	e0fffb03 	ldbu	r3,-20(fp)
 4013fbc:	008100f4 	movhi	r2,1027
 4013fc0:	10a63004 	addi	r2,r2,-26432
 4013fc4:	18c7883a 	add	r3,r3,r3
 4013fc8:	18c7883a 	add	r3,r3,r3
 4013fcc:	10c5883a 	add	r2,r2,r3
 4013fd0:	e0fff617 	ldw	r3,-40(fp)
 4013fd4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4013fd8:	d0e74717 	ldw	r3,-25316(gp)
 4013fdc:	e0bff617 	ldw	r2,-40(fp)
 4013fe0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4013fe4:	e0bff617 	ldw	r2,-40(fp)
 4013fe8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4013fec:	d0a74717 	ldw	r2,-25316(gp)
 4013ff0:	10000326 	beq	r2,zero,4014000 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 4013ff4:	d0a74717 	ldw	r2,-25316(gp)
 4013ff8:	e0fff617 	ldw	r3,-40(fp)
 4013ffc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4014000:	e0bff617 	ldw	r2,-40(fp)
 4014004:	d0a74715 	stw	r2,-25316(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4014008:	e0bff617 	ldw	r2,-40(fp)
 401400c:	10c00d83 	ldbu	r3,54(r2)
 4014010:	d0a75003 	ldbu	r2,-25280(gp)
 4014014:	1884b03a 	or	r2,r3,r2
 4014018:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401401c:	e0bff617 	ldw	r2,-40(fp)
 4014020:	10800d03 	ldbu	r2,52(r2)
 4014024:	10c03fcc 	andi	r3,r2,255
 4014028:	e0bff617 	ldw	r2,-40(fp)
 401402c:	10800d03 	ldbu	r2,52(r2)
 4014030:	11003fcc 	andi	r4,r2,255
 4014034:	d0a75044 	addi	r2,gp,-25279
 4014038:	2085883a 	add	r2,r4,r2
 401403c:	11000003 	ldbu	r4,0(r2)
 4014040:	e0bff617 	ldw	r2,-40(fp)
 4014044:	10800d43 	ldbu	r2,53(r2)
 4014048:	2084b03a 	or	r2,r4,r2
 401404c:	1009883a 	mov	r4,r2
 4014050:	d0a75044 	addi	r2,gp,-25279
 4014054:	1885883a 	add	r2,r3,r2
 4014058:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 401405c:	d0a74c43 	ldbu	r2,-25295(gp)
 4014060:	10800044 	addi	r2,r2,1
 4014064:	d0a74c45 	stb	r2,-25295(gp)
 4014068:	e0bff417 	ldw	r2,-48(fp)
 401406c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014070:	e0bff717 	ldw	r2,-36(fp)
 4014074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4014078:	0005883a 	mov	r2,zero
 401407c:	00000506 	br	4014094 <OS_TCBInit+0x2c0>
 4014080:	e0bff417 	ldw	r2,-48(fp)
 4014084:	e0bff915 	stw	r2,-28(fp)
 4014088:	e0bff917 	ldw	r2,-28(fp)
 401408c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4014090:	00801084 	movi	r2,66
}
 4014094:	e037883a 	mov	sp,fp
 4014098:	dfc00117 	ldw	ra,4(sp)
 401409c:	df000017 	ldw	fp,0(sp)
 40140a0:	dec00204 	addi	sp,sp,8
 40140a4:	f800283a 	ret

040140a8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 40140a8:	defffe04 	addi	sp,sp,-8
 40140ac:	df000115 	stw	fp,4(sp)
 40140b0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 40140b4:	d0a01d04 	addi	r2,gp,-32652
 40140b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 40140bc:	d0a01e04 	addi	r2,gp,-32648
 40140c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 40140c4:	d0a01f84 	addi	r2,gp,-32642
 40140c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 40140cc:	d0a02004 	addi	r2,gp,-32640
 40140d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 40140d4:	d0a01f04 	addi	r2,gp,-32644
 40140d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 40140dc:	d0a02084 	addi	r2,gp,-32638
 40140e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 40140e4:	d0a02104 	addi	r2,gp,-32636
 40140e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 40140ec:	d0a02184 	addi	r2,gp,-32634
 40140f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 40140f4:	d0a02204 	addi	r2,gp,-32632
 40140f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 40140fc:	d0a02284 	addi	r2,gp,-32630
 4014100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4014104:	d0a02304 	addi	r2,gp,-32628
 4014108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 401410c:	d0a02384 	addi	r2,gp,-32626
 4014110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4014114:	d0a02404 	addi	r2,gp,-32624
 4014118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 401411c:	d0a02484 	addi	r2,gp,-32622
 4014120:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 4014124:	d0a02504 	addi	r2,gp,-32620
 4014128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 401412c:	d0a02584 	addi	r2,gp,-32618
 4014130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 4014134:	d0a02604 	addi	r2,gp,-32616
 4014138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 401413c:	d0a02684 	addi	r2,gp,-32614
 4014140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 4014144:	d0a02704 	addi	r2,gp,-32612
 4014148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 401414c:	d0a02784 	addi	r2,gp,-32610
 4014150:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 4014154:	d0a02804 	addi	r2,gp,-32608
 4014158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 401415c:	d0a02884 	addi	r2,gp,-32606
 4014160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 4014164:	d0a02904 	addi	r2,gp,-32604
 4014168:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 401416c:	d0a02984 	addi	r2,gp,-32602
 4014170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 4014174:	d0a02a04 	addi	r2,gp,-32600
 4014178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 401417c:	d0a02a84 	addi	r2,gp,-32598
 4014180:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4014184:	d0a02b04 	addi	r2,gp,-32596
 4014188:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 401418c:	d0a02b84 	addi	r2,gp,-32594
 4014190:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4014194:	d0a02c04 	addi	r2,gp,-32592
 4014198:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 401419c:	d0a02c84 	addi	r2,gp,-32590
 40141a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 40141a4:	d0a02d04 	addi	r2,gp,-32588
 40141a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 40141ac:	d0a02d84 	addi	r2,gp,-32586
 40141b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 40141b4:	d0a02e04 	addi	r2,gp,-32584
 40141b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 40141bc:	d0a02e84 	addi	r2,gp,-32582
 40141c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 40141c4:	d0a02f04 	addi	r2,gp,-32580
 40141c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 40141cc:	d0a02f84 	addi	r2,gp,-32578
 40141d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 40141d4:	d0a03004 	addi	r2,gp,-32576
 40141d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 40141dc:	d0a03084 	addi	r2,gp,-32574
 40141e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 40141e4:	d0a03104 	addi	r2,gp,-32572
 40141e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 40141ec:	d0a03184 	addi	r2,gp,-32570
 40141f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 40141f4:	d0a03204 	addi	r2,gp,-32568
 40141f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 40141fc:	d0a03284 	addi	r2,gp,-32566
 4014200:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 4014204:	d0a03304 	addi	r2,gp,-32564
 4014208:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 401420c:	d0a03384 	addi	r2,gp,-32562
 4014210:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 4014214:	d0a03404 	addi	r2,gp,-32560
 4014218:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 401421c:	d0a03904 	addi	r2,gp,-32540
 4014220:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 4014224:	0001883a 	nop
 4014228:	e037883a 	mov	sp,fp
 401422c:	df000017 	ldw	fp,0(sp)
 4014230:	dec00104 	addi	sp,sp,4
 4014234:	f800283a 	ret

04014238 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 4014238:	defff204 	addi	sp,sp,-56
 401423c:	df000d15 	stw	fp,52(sp)
 4014240:	df000d04 	addi	fp,sp,52
 4014244:	e13ffc15 	stw	r4,-16(fp)
 4014248:	2807883a 	mov	r3,r5
 401424c:	3005883a 	mov	r2,r6
 4014250:	e1ffff15 	stw	r7,-4(fp)
 4014254:	e0fffd0d 	sth	r3,-12(fp)
 4014258:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401425c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4014260:	e0bfff17 	ldw	r2,-4(fp)
 4014264:	1000021e 	bne	r2,zero,4014270 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 4014268:	0005883a 	mov	r2,zero
 401426c:	0000b006 	br	4014530 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4014270:	e0bffc17 	ldw	r2,-16(fp)
 4014274:	1000051e 	bne	r2,zero,401428c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4014278:	e0bfff17 	ldw	r2,-4(fp)
 401427c:	00c01b84 	movi	r3,110
 4014280:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4014284:	0005883a 	mov	r2,zero
 4014288:	0000a906 	br	4014530 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 401428c:	e0bffc17 	ldw	r2,-16(fp)
 4014290:	10800003 	ldbu	r2,0(r2)
 4014294:	10803fcc 	andi	r2,r2,255
 4014298:	10800160 	cmpeqi	r2,r2,5
 401429c:	1000051e 	bne	r2,zero,40142b4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 40142a0:	e0bfff17 	ldw	r2,-4(fp)
 40142a4:	00c00044 	movi	r3,1
 40142a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40142ac:	0005883a 	mov	r2,zero
 40142b0:	00009f06 	br	4014530 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 40142b4:	e0fffe03 	ldbu	r3,-8(fp)
 40142b8:	00bfe004 	movi	r2,-128
 40142bc:	1884703a 	and	r2,r3,r2
 40142c0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 40142c4:	e0bff503 	ldbu	r2,-44(fp)
 40142c8:	10000626 	beq	r2,zero,40142e4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 40142cc:	e0bffe03 	ldbu	r2,-8(fp)
 40142d0:	10801fcc 	andi	r2,r2,127
 40142d4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 40142d8:	00800044 	movi	r2,1
 40142dc:	e0bff385 	stb	r2,-50(fp)
 40142e0:	00000106 	br	40142e8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 40142e4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 40142e8:	e0bfff17 	ldw	r2,-4(fp)
 40142ec:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40142f0:	0005303a 	rdctl	r2,status
 40142f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40142f8:	e0fffb17 	ldw	r3,-20(fp)
 40142fc:	00bfff84 	movi	r2,-2
 4014300:	1884703a 	and	r2,r3,r2
 4014304:	1001703a 	wrctl	status,r2
  
  return context;
 4014308:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 401430c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 4014310:	e0bffe03 	ldbu	r2,-8(fp)
 4014314:	10c00060 	cmpeqi	r3,r2,1
 4014318:	18005f1e 	bne	r3,zero,4014498 <OSFlagAccept+0x260>
 401431c:	10c00088 	cmpgei	r3,r2,2
 4014320:	1800021e 	bne	r3,zero,401432c <OSFlagAccept+0xf4>
 4014324:	10003f26 	beq	r2,zero,4014424 <OSFlagAccept+0x1ec>
 4014328:	00007706 	br	4014508 <OSFlagAccept+0x2d0>
 401432c:	10c000a0 	cmpeqi	r3,r2,2
 4014330:	1800031e 	bne	r3,zero,4014340 <OSFlagAccept+0x108>
 4014334:	108000e0 	cmpeqi	r2,r2,3
 4014338:	10001e1e 	bne	r2,zero,40143b4 <OSFlagAccept+0x17c>
 401433c:	00007206 	br	4014508 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4014340:	e0bffc17 	ldw	r2,-16(fp)
 4014344:	10c0020b 	ldhu	r3,8(r2)
 4014348:	e0bffd0b 	ldhu	r2,-12(fp)
 401434c:	1884703a 	and	r2,r3,r2
 4014350:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4014354:	e0fff30b 	ldhu	r3,-52(fp)
 4014358:	e0bffd0b 	ldhu	r2,-12(fp)
 401435c:	18800d1e 	bne	r3,r2,4014394 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4014360:	e0bff383 	ldbu	r2,-50(fp)
 4014364:	10800058 	cmpnei	r2,r2,1
 4014368:	10000d1e 	bne	r2,zero,40143a0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 401436c:	e0bffc17 	ldw	r2,-16(fp)
 4014370:	1080020b 	ldhu	r2,8(r2)
 4014374:	1007883a 	mov	r3,r2
 4014378:	e0bff30b 	ldhu	r2,-52(fp)
 401437c:	0084303a 	nor	r2,zero,r2
 4014380:	1884703a 	and	r2,r3,r2
 4014384:	1007883a 	mov	r3,r2
 4014388:	e0bffc17 	ldw	r2,-16(fp)
 401438c:	10c0020d 	sth	r3,8(r2)
 4014390:	00000306 	br	40143a0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4014394:	e0bfff17 	ldw	r2,-4(fp)
 4014398:	00c01c04 	movi	r3,112
 401439c:	10c00005 	stb	r3,0(r2)
 40143a0:	e0bff417 	ldw	r2,-48(fp)
 40143a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40143a8:	e0bff617 	ldw	r2,-40(fp)
 40143ac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40143b0:	00005e06 	br	401452c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 40143b4:	e0bffc17 	ldw	r2,-16(fp)
 40143b8:	10c0020b 	ldhu	r3,8(r2)
 40143bc:	e0bffd0b 	ldhu	r2,-12(fp)
 40143c0:	1884703a 	and	r2,r3,r2
 40143c4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 40143c8:	e0bff30b 	ldhu	r2,-52(fp)
 40143cc:	10000d26 	beq	r2,zero,4014404 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40143d0:	e0bff383 	ldbu	r2,-50(fp)
 40143d4:	10800058 	cmpnei	r2,r2,1
 40143d8:	10000d1e 	bne	r2,zero,4014410 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 40143dc:	e0bffc17 	ldw	r2,-16(fp)
 40143e0:	1080020b 	ldhu	r2,8(r2)
 40143e4:	1007883a 	mov	r3,r2
 40143e8:	e0bff30b 	ldhu	r2,-52(fp)
 40143ec:	0084303a 	nor	r2,zero,r2
 40143f0:	1884703a 	and	r2,r3,r2
 40143f4:	1007883a 	mov	r3,r2
 40143f8:	e0bffc17 	ldw	r2,-16(fp)
 40143fc:	10c0020d 	sth	r3,8(r2)
 4014400:	00000306 	br	4014410 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4014404:	e0bfff17 	ldw	r2,-4(fp)
 4014408:	00c01c04 	movi	r3,112
 401440c:	10c00005 	stb	r3,0(r2)
 4014410:	e0bff417 	ldw	r2,-48(fp)
 4014414:	e0bff715 	stw	r2,-36(fp)
 4014418:	e0bff717 	ldw	r2,-36(fp)
 401441c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4014420:	00004206 	br	401452c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4014424:	e0bffc17 	ldw	r2,-16(fp)
 4014428:	1080020b 	ldhu	r2,8(r2)
 401442c:	0084303a 	nor	r2,zero,r2
 4014430:	1007883a 	mov	r3,r2
 4014434:	e0bffd0b 	ldhu	r2,-12(fp)
 4014438:	1884703a 	and	r2,r3,r2
 401443c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4014440:	e0fff30b 	ldhu	r3,-52(fp)
 4014444:	e0bffd0b 	ldhu	r2,-12(fp)
 4014448:	18800b1e 	bne	r3,r2,4014478 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401444c:	e0bff383 	ldbu	r2,-50(fp)
 4014450:	10800058 	cmpnei	r2,r2,1
 4014454:	10000b1e 	bne	r2,zero,4014484 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4014458:	e0bffc17 	ldw	r2,-16(fp)
 401445c:	10c0020b 	ldhu	r3,8(r2)
 4014460:	e0bff30b 	ldhu	r2,-52(fp)
 4014464:	1884b03a 	or	r2,r3,r2
 4014468:	1007883a 	mov	r3,r2
 401446c:	e0bffc17 	ldw	r2,-16(fp)
 4014470:	10c0020d 	sth	r3,8(r2)
 4014474:	00000306 	br	4014484 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4014478:	e0bfff17 	ldw	r2,-4(fp)
 401447c:	00c01c04 	movi	r3,112
 4014480:	10c00005 	stb	r3,0(r2)
 4014484:	e0bff417 	ldw	r2,-48(fp)
 4014488:	e0bff815 	stw	r2,-32(fp)
 401448c:	e0bff817 	ldw	r2,-32(fp)
 4014490:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4014494:	00002506 	br	401452c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4014498:	e0bffc17 	ldw	r2,-16(fp)
 401449c:	1080020b 	ldhu	r2,8(r2)
 40144a0:	0084303a 	nor	r2,zero,r2
 40144a4:	1007883a 	mov	r3,r2
 40144a8:	e0bffd0b 	ldhu	r2,-12(fp)
 40144ac:	1884703a 	and	r2,r3,r2
 40144b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 40144b4:	e0bff30b 	ldhu	r2,-52(fp)
 40144b8:	10000b26 	beq	r2,zero,40144e8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40144bc:	e0bff383 	ldbu	r2,-50(fp)
 40144c0:	10800058 	cmpnei	r2,r2,1
 40144c4:	10000b1e 	bne	r2,zero,40144f4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 40144c8:	e0bffc17 	ldw	r2,-16(fp)
 40144cc:	10c0020b 	ldhu	r3,8(r2)
 40144d0:	e0bff30b 	ldhu	r2,-52(fp)
 40144d4:	1884b03a 	or	r2,r3,r2
 40144d8:	1007883a 	mov	r3,r2
 40144dc:	e0bffc17 	ldw	r2,-16(fp)
 40144e0:	10c0020d 	sth	r3,8(r2)
 40144e4:	00000306 	br	40144f4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40144e8:	e0bfff17 	ldw	r2,-4(fp)
 40144ec:	00c01c04 	movi	r3,112
 40144f0:	10c00005 	stb	r3,0(r2)
 40144f4:	e0bff417 	ldw	r2,-48(fp)
 40144f8:	e0bff915 	stw	r2,-28(fp)
 40144fc:	e0bff917 	ldw	r2,-28(fp)
 4014500:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4014504:	00000906 	br	401452c <OSFlagAccept+0x2f4>
 4014508:	e0bff417 	ldw	r2,-48(fp)
 401450c:	e0bffa15 	stw	r2,-24(fp)
 4014510:	e0bffa17 	ldw	r2,-24(fp)
 4014514:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4014518:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 401451c:	e0bfff17 	ldw	r2,-4(fp)
 4014520:	00c01bc4 	movi	r3,111
 4014524:	10c00005 	stb	r3,0(r2)
             break;
 4014528:	0001883a 	nop
    }
    return (flags_rdy);
 401452c:	e0bff30b 	ldhu	r2,-52(fp)
}
 4014530:	e037883a 	mov	sp,fp
 4014534:	df000017 	ldw	fp,0(sp)
 4014538:	dec00104 	addi	sp,sp,4
 401453c:	f800283a 	ret

04014540 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 4014540:	defff804 	addi	sp,sp,-32
 4014544:	df000715 	stw	fp,28(sp)
 4014548:	df000704 	addi	fp,sp,28
 401454c:	2005883a 	mov	r2,r4
 4014550:	e17fff15 	stw	r5,-4(fp)
 4014554:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 4014558:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 401455c:	e0bfff17 	ldw	r2,-4(fp)
 4014560:	1000021e 	bne	r2,zero,401456c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 4014564:	0005883a 	mov	r2,zero
 4014568:	00003306 	br	4014638 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 401456c:	d0a75203 	ldbu	r2,-25272(gp)
 4014570:	10803fcc 	andi	r2,r2,255
 4014574:	10000526 	beq	r2,zero,401458c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 4014578:	e0bfff17 	ldw	r2,-4(fp)
 401457c:	00c00404 	movi	r3,16
 4014580:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 4014584:	0005883a 	mov	r2,zero
 4014588:	00002b06 	br	4014638 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401458c:	0005303a 	rdctl	r2,status
 4014590:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014594:	e0fffd17 	ldw	r3,-12(fp)
 4014598:	00bfff84 	movi	r2,-2
 401459c:	1884703a 	and	r2,r3,r2
 40145a0:	1001703a 	wrctl	status,r2
  
  return context;
 40145a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40145a8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 40145ac:	d0a75517 	ldw	r2,-25260(gp)
 40145b0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 40145b4:	e0bffb17 	ldw	r2,-20(fp)
 40145b8:	10001726 	beq	r2,zero,4014618 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 40145bc:	d0a75517 	ldw	r2,-25260(gp)
 40145c0:	10800117 	ldw	r2,4(r2)
 40145c4:	d0a75515 	stw	r2,-25260(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 40145c8:	e0bffb17 	ldw	r2,-20(fp)
 40145cc:	00c00144 	movi	r3,5
 40145d0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 40145d4:	e0bffb17 	ldw	r2,-20(fp)
 40145d8:	e0fffe0b 	ldhu	r3,-8(fp)
 40145dc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 40145e0:	e0bffb17 	ldw	r2,-20(fp)
 40145e4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 40145e8:	e0bffb17 	ldw	r2,-20(fp)
 40145ec:	00c00fc4 	movi	r3,63
 40145f0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40145f4:	e0bffb17 	ldw	r2,-20(fp)
 40145f8:	100002c5 	stb	zero,11(r2)
 40145fc:	e0bff917 	ldw	r2,-28(fp)
 4014600:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014604:	e0bffa17 	ldw	r2,-24(fp)
 4014608:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 401460c:	e0bfff17 	ldw	r2,-4(fp)
 4014610:	10000005 	stb	zero,0(r2)
 4014614:	00000706 	br	4014634 <OSFlagCreate+0xf4>
 4014618:	e0bff917 	ldw	r2,-28(fp)
 401461c:	e0bffc15 	stw	r2,-16(fp)
 4014620:	e0bffc17 	ldw	r2,-16(fp)
 4014624:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 4014628:	e0bfff17 	ldw	r2,-4(fp)
 401462c:	00c01c84 	movi	r3,114
 4014630:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 4014634:	e0bffb17 	ldw	r2,-20(fp)
}
 4014638:	e037883a 	mov	sp,fp
 401463c:	df000017 	ldw	fp,0(sp)
 4014640:	dec00104 	addi	sp,sp,4
 4014644:	f800283a 	ret

04014648 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 4014648:	defff204 	addi	sp,sp,-56
 401464c:	dfc00d15 	stw	ra,52(sp)
 4014650:	df000c15 	stw	fp,48(sp)
 4014654:	df000c04 	addi	fp,sp,48
 4014658:	e13ffd15 	stw	r4,-12(fp)
 401465c:	2805883a 	mov	r2,r5
 4014660:	e1bfff15 	stw	r6,-4(fp)
 4014664:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4014668:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401466c:	e0bfff17 	ldw	r2,-4(fp)
 4014670:	1000021e 	bne	r2,zero,401467c <OSFlagDel+0x34>
        return (pgrp);
 4014674:	e0bffd17 	ldw	r2,-12(fp)
 4014678:	00008006 	br	401487c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 401467c:	e0bffd17 	ldw	r2,-12(fp)
 4014680:	1000051e 	bne	r2,zero,4014698 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4014684:	e0bfff17 	ldw	r2,-4(fp)
 4014688:	00c01b84 	movi	r3,110
 401468c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4014690:	e0bffd17 	ldw	r2,-12(fp)
 4014694:	00007906 	br	401487c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4014698:	d0a75203 	ldbu	r2,-25272(gp)
 401469c:	10803fcc 	andi	r2,r2,255
 40146a0:	10000526 	beq	r2,zero,40146b8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 40146a4:	e0bfff17 	ldw	r2,-4(fp)
 40146a8:	00c003c4 	movi	r3,15
 40146ac:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 40146b0:	e0bffd17 	ldw	r2,-12(fp)
 40146b4:	00007106 	br	401487c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 40146b8:	e0bffd17 	ldw	r2,-12(fp)
 40146bc:	10800003 	ldbu	r2,0(r2)
 40146c0:	10803fcc 	andi	r2,r2,255
 40146c4:	10800160 	cmpeqi	r2,r2,5
 40146c8:	1000051e 	bne	r2,zero,40146e0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 40146cc:	e0bfff17 	ldw	r2,-4(fp)
 40146d0:	00c00044 	movi	r3,1
 40146d4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 40146d8:	e0bffd17 	ldw	r2,-12(fp)
 40146dc:	00006706 	br	401487c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40146e0:	0005303a 	rdctl	r2,status
 40146e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40146e8:	e0fffc17 	ldw	r3,-16(fp)
 40146ec:	00bfff84 	movi	r2,-2
 40146f0:	1884703a 	and	r2,r3,r2
 40146f4:	1001703a 	wrctl	status,r2
  
  return context;
 40146f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40146fc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4014700:	e0bffd17 	ldw	r2,-12(fp)
 4014704:	10800117 	ldw	r2,4(r2)
 4014708:	10000326 	beq	r2,zero,4014718 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401470c:	00800044 	movi	r2,1
 4014710:	e0bff405 	stb	r2,-48(fp)
 4014714:	00000106 	br	401471c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4014718:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 401471c:	e0bffe03 	ldbu	r2,-8(fp)
 4014720:	10000326 	beq	r2,zero,4014730 <OSFlagDel+0xe8>
 4014724:	10800060 	cmpeqi	r2,r2,1
 4014728:	1000231e 	bne	r2,zero,40147b8 <OSFlagDel+0x170>
 401472c:	00004806 	br	4014850 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 4014730:	e0bff403 	ldbu	r2,-48(fp)
 4014734:	1000161e 	bne	r2,zero,4014790 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 4014738:	e0bffd17 	ldw	r2,-12(fp)
 401473c:	00c00fc4 	movi	r3,63
 4014740:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4014744:	e0bffd17 	ldw	r2,-12(fp)
 4014748:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401474c:	e0bffd17 	ldw	r2,-12(fp)
 4014750:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 4014754:	d0e75517 	ldw	r3,-25260(gp)
 4014758:	e0bffd17 	ldw	r2,-12(fp)
 401475c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4014760:	e0bffd17 	ldw	r2,-12(fp)
 4014764:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 4014768:	e0bffd17 	ldw	r2,-12(fp)
 401476c:	d0a75515 	stw	r2,-25260(gp)
 4014770:	e0bff717 	ldw	r2,-36(fp)
 4014774:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014778:	e0bff817 	ldw	r2,-32(fp)
 401477c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 4014780:	e0bfff17 	ldw	r2,-4(fp)
 4014784:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 4014788:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 401478c:	00003a06 	br	4014878 <OSFlagDel+0x230>
 4014790:	e0bff717 	ldw	r2,-36(fp)
 4014794:	e0bff915 	stw	r2,-28(fp)
 4014798:	e0bff917 	ldw	r2,-28(fp)
 401479c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 40147a0:	e0bfff17 	ldw	r2,-4(fp)
 40147a4:	00c01244 	movi	r3,73
 40147a8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 40147ac:	e0bffd17 	ldw	r2,-12(fp)
 40147b0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 40147b4:	00003006 	br	4014878 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40147b8:	e0bffd17 	ldw	r2,-12(fp)
 40147bc:	10800117 	ldw	r2,4(r2)
 40147c0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 40147c4:	00000606 	br	40147e0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 40147c8:	000b883a 	mov	r5,zero
 40147cc:	e13ff517 	ldw	r4,-44(fp)
 40147d0:	40157b40 	call	40157b4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40147d4:	e0bff517 	ldw	r2,-44(fp)
 40147d8:	10800017 	ldw	r2,0(r2)
 40147dc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 40147e0:	e0bff517 	ldw	r2,-44(fp)
 40147e4:	103ff81e 	bne	r2,zero,40147c8 <__alt_mem_onchip_memory2_0+0xfc0127c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 40147e8:	e0bffd17 	ldw	r2,-12(fp)
 40147ec:	00c00fc4 	movi	r3,63
 40147f0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40147f4:	e0bffd17 	ldw	r2,-12(fp)
 40147f8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40147fc:	e0bffd17 	ldw	r2,-12(fp)
 4014800:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4014804:	d0e75517 	ldw	r3,-25260(gp)
 4014808:	e0bffd17 	ldw	r2,-12(fp)
 401480c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4014810:	e0bffd17 	ldw	r2,-12(fp)
 4014814:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 4014818:	e0bffd17 	ldw	r2,-12(fp)
 401481c:	d0a75515 	stw	r2,-25260(gp)
 4014820:	e0bff717 	ldw	r2,-36(fp)
 4014824:	e0bffa15 	stw	r2,-24(fp)
 4014828:	e0bffa17 	ldw	r2,-24(fp)
 401482c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4014830:	e0bff403 	ldbu	r2,-48(fp)
 4014834:	10800058 	cmpnei	r2,r2,1
 4014838:	1000011e 	bne	r2,zero,4014840 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 401483c:	40139d40 	call	40139d4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 4014840:	e0bfff17 	ldw	r2,-4(fp)
 4014844:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 4014848:	e03ff615 	stw	zero,-40(fp)
             break;
 401484c:	00000a06 	br	4014878 <OSFlagDel+0x230>
 4014850:	e0bff717 	ldw	r2,-36(fp)
 4014854:	e0bffb15 	stw	r2,-20(fp)
 4014858:	e0bffb17 	ldw	r2,-20(fp)
 401485c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 4014860:	e0bfff17 	ldw	r2,-4(fp)
 4014864:	00c001c4 	movi	r3,7
 4014868:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 401486c:	e0bffd17 	ldw	r2,-12(fp)
 4014870:	e0bff615 	stw	r2,-40(fp)
             break;
 4014874:	0001883a 	nop
    }
    return (pgrp_return);
 4014878:	e0bff617 	ldw	r2,-40(fp)
}
 401487c:	e037883a 	mov	sp,fp
 4014880:	dfc00117 	ldw	ra,4(sp)
 4014884:	df000017 	ldw	fp,0(sp)
 4014888:	dec00204 	addi	sp,sp,8
 401488c:	f800283a 	ret

04014890 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4014890:	defff604 	addi	sp,sp,-40
 4014894:	dfc00915 	stw	ra,36(sp)
 4014898:	df000815 	stw	fp,32(sp)
 401489c:	df000804 	addi	fp,sp,32
 40148a0:	e13ffd15 	stw	r4,-12(fp)
 40148a4:	e17ffe15 	stw	r5,-8(fp)
 40148a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40148ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40148b0:	e0bfff17 	ldw	r2,-4(fp)
 40148b4:	1000021e 	bne	r2,zero,40148c0 <OSFlagNameGet+0x30>
        return (0);
 40148b8:	0005883a 	mov	r2,zero
 40148bc:	00003906 	br	40149a4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 40148c0:	e0bffd17 	ldw	r2,-12(fp)
 40148c4:	1000051e 	bne	r2,zero,40148dc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40148c8:	e0bfff17 	ldw	r2,-4(fp)
 40148cc:	00c01b84 	movi	r3,110
 40148d0:	10c00005 	stb	r3,0(r2)
        return (0);
 40148d4:	0005883a 	mov	r2,zero
 40148d8:	00003206 	br	40149a4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40148dc:	e0bffe17 	ldw	r2,-8(fp)
 40148e0:	1000051e 	bne	r2,zero,40148f8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 40148e4:	e0bfff17 	ldw	r2,-4(fp)
 40148e8:	00c00304 	movi	r3,12
 40148ec:	10c00005 	stb	r3,0(r2)
        return (0);
 40148f0:	0005883a 	mov	r2,zero
 40148f4:	00002b06 	br	40149a4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40148f8:	d0a75203 	ldbu	r2,-25272(gp)
 40148fc:	10803fcc 	andi	r2,r2,255
 4014900:	10000526 	beq	r2,zero,4014918 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4014904:	e0bfff17 	ldw	r2,-4(fp)
 4014908:	00c00444 	movi	r3,17
 401490c:	10c00005 	stb	r3,0(r2)
        return (0);
 4014910:	0005883a 	mov	r2,zero
 4014914:	00002306 	br	40149a4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014918:	0005303a 	rdctl	r2,status
 401491c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014920:	e0fffc17 	ldw	r3,-16(fp)
 4014924:	00bfff84 	movi	r2,-2
 4014928:	1884703a 	and	r2,r3,r2
 401492c:	1001703a 	wrctl	status,r2
  
  return context;
 4014930:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4014934:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4014938:	e0bffd17 	ldw	r2,-12(fp)
 401493c:	10800003 	ldbu	r2,0(r2)
 4014940:	10803fcc 	andi	r2,r2,255
 4014944:	10800160 	cmpeqi	r2,r2,5
 4014948:	1000091e 	bne	r2,zero,4014970 <OSFlagNameGet+0xe0>
 401494c:	e0bff817 	ldw	r2,-32(fp)
 4014950:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014954:	e0bff917 	ldw	r2,-28(fp)
 4014958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 401495c:	e0bfff17 	ldw	r2,-4(fp)
 4014960:	00c00044 	movi	r3,1
 4014964:	10c00005 	stb	r3,0(r2)
        return (0);
 4014968:	0005883a 	mov	r2,zero
 401496c:	00000d06 	br	40149a4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 4014970:	e0bffd17 	ldw	r2,-12(fp)
 4014974:	10800284 	addi	r2,r2,10
 4014978:	100b883a 	mov	r5,r2
 401497c:	e13ffe17 	ldw	r4,-8(fp)
 4014980:	4013b180 	call	4013b18 <OS_StrCopy>
 4014984:	e0bffb05 	stb	r2,-20(fp)
 4014988:	e0bff817 	ldw	r2,-32(fp)
 401498c:	e0bffa15 	stw	r2,-24(fp)
 4014990:	e0bffa17 	ldw	r2,-24(fp)
 4014994:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4014998:	e0bfff17 	ldw	r2,-4(fp)
 401499c:	10000005 	stb	zero,0(r2)
    return (len);
 40149a0:	e0bffb03 	ldbu	r2,-20(fp)
}
 40149a4:	e037883a 	mov	sp,fp
 40149a8:	dfc00117 	ldw	ra,4(sp)
 40149ac:	df000017 	ldw	fp,0(sp)
 40149b0:	dec00204 	addi	sp,sp,8
 40149b4:	f800283a 	ret

040149b8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 40149b8:	defff504 	addi	sp,sp,-44
 40149bc:	dfc00a15 	stw	ra,40(sp)
 40149c0:	df000915 	stw	fp,36(sp)
 40149c4:	df000904 	addi	fp,sp,36
 40149c8:	e13ffd15 	stw	r4,-12(fp)
 40149cc:	e17ffe15 	stw	r5,-8(fp)
 40149d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40149d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40149d8:	e0bfff17 	ldw	r2,-4(fp)
 40149dc:	10004326 	beq	r2,zero,4014aec <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 40149e0:	e0bffd17 	ldw	r2,-12(fp)
 40149e4:	1000041e 	bne	r2,zero,40149f8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40149e8:	e0bfff17 	ldw	r2,-4(fp)
 40149ec:	00c01b84 	movi	r3,110
 40149f0:	10c00005 	stb	r3,0(r2)
        return;
 40149f4:	00003e06 	br	4014af0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40149f8:	e0bffe17 	ldw	r2,-8(fp)
 40149fc:	1000041e 	bne	r2,zero,4014a10 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4014a00:	e0bfff17 	ldw	r2,-4(fp)
 4014a04:	00c00304 	movi	r3,12
 4014a08:	10c00005 	stb	r3,0(r2)
        return;
 4014a0c:	00003806 	br	4014af0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4014a10:	d0a75203 	ldbu	r2,-25272(gp)
 4014a14:	10803fcc 	andi	r2,r2,255
 4014a18:	10000426 	beq	r2,zero,4014a2c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4014a1c:	e0bfff17 	ldw	r2,-4(fp)
 4014a20:	00c00484 	movi	r3,18
 4014a24:	10c00005 	stb	r3,0(r2)
        return;
 4014a28:	00003106 	br	4014af0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014a2c:	0005303a 	rdctl	r2,status
 4014a30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014a34:	e0fffc17 	ldw	r3,-16(fp)
 4014a38:	00bfff84 	movi	r2,-2
 4014a3c:	1884703a 	and	r2,r3,r2
 4014a40:	1001703a 	wrctl	status,r2
  
  return context;
 4014a44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4014a48:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4014a4c:	e0bffd17 	ldw	r2,-12(fp)
 4014a50:	10800003 	ldbu	r2,0(r2)
 4014a54:	10803fcc 	andi	r2,r2,255
 4014a58:	10800160 	cmpeqi	r2,r2,5
 4014a5c:	1000081e 	bne	r2,zero,4014a80 <OSFlagNameSet+0xc8>
 4014a60:	e0bff717 	ldw	r2,-36(fp)
 4014a64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014a68:	e0bff817 	ldw	r2,-32(fp)
 4014a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4014a70:	e0bfff17 	ldw	r2,-4(fp)
 4014a74:	00c00044 	movi	r3,1
 4014a78:	10c00005 	stb	r3,0(r2)
        return;
 4014a7c:	00001c06 	br	4014af0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4014a80:	e13ffe17 	ldw	r4,-8(fp)
 4014a84:	4013b8c0 	call	4013b8c <OS_StrLen>
 4014a88:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 4014a8c:	e0bffa03 	ldbu	r2,-24(fp)
 4014a90:	10800830 	cmpltui	r2,r2,32
 4014a94:	1000081e 	bne	r2,zero,4014ab8 <OSFlagNameSet+0x100>
 4014a98:	e0bff717 	ldw	r2,-36(fp)
 4014a9c:	e0bff915 	stw	r2,-28(fp)
 4014aa0:	e0bff917 	ldw	r2,-28(fp)
 4014aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4014aa8:	e0bfff17 	ldw	r2,-4(fp)
 4014aac:	00c01cc4 	movi	r3,115
 4014ab0:	10c00005 	stb	r3,0(r2)
        return;
 4014ab4:	00000e06 	br	4014af0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4014ab8:	e0bffd17 	ldw	r2,-12(fp)
 4014abc:	10800284 	addi	r2,r2,10
 4014ac0:	e17ffe17 	ldw	r5,-8(fp)
 4014ac4:	1009883a 	mov	r4,r2
 4014ac8:	4013b180 	call	4013b18 <OS_StrCopy>
 4014acc:	e0bff717 	ldw	r2,-36(fp)
 4014ad0:	e0bffb15 	stw	r2,-20(fp)
 4014ad4:	e0bffb17 	ldw	r2,-20(fp)
 4014ad8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4014adc:	e0bfff17 	ldw	r2,-4(fp)
 4014ae0:	10000005 	stb	zero,0(r2)
    return;
 4014ae4:	0001883a 	nop
 4014ae8:	00000106 	br	4014af0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4014aec:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4014af0:	e037883a 	mov	sp,fp
 4014af4:	dfc00117 	ldw	ra,4(sp)
 4014af8:	df000017 	ldw	fp,0(sp)
 4014afc:	dec00204 	addi	sp,sp,8
 4014b00:	f800283a 	ret

04014b04 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 4014b04:	deffe104 	addi	sp,sp,-124
 4014b08:	dfc01e15 	stw	ra,120(sp)
 4014b0c:	df001d15 	stw	fp,116(sp)
 4014b10:	df001d04 	addi	fp,sp,116
 4014b14:	e13ffc15 	stw	r4,-16(fp)
 4014b18:	2809883a 	mov	r4,r5
 4014b1c:	3007883a 	mov	r3,r6
 4014b20:	3805883a 	mov	r2,r7
 4014b24:	e13ffd0d 	sth	r4,-12(fp)
 4014b28:	e0fffe05 	stb	r3,-8(fp)
 4014b2c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4014b30:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4014b34:	e0800217 	ldw	r2,8(fp)
 4014b38:	1000021e 	bne	r2,zero,4014b44 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 4014b3c:	0005883a 	mov	r2,zero
 4014b40:	00015906 	br	40150a8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4014b44:	e0bffc17 	ldw	r2,-16(fp)
 4014b48:	1000051e 	bne	r2,zero,4014b60 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4014b4c:	e0800217 	ldw	r2,8(fp)
 4014b50:	00c01b84 	movi	r3,110
 4014b54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4014b58:	0005883a 	mov	r2,zero
 4014b5c:	00015206 	br	40150a8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4014b60:	d0a75203 	ldbu	r2,-25272(gp)
 4014b64:	10803fcc 	andi	r2,r2,255
 4014b68:	10000526 	beq	r2,zero,4014b80 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4014b6c:	e0800217 	ldw	r2,8(fp)
 4014b70:	00c00084 	movi	r3,2
 4014b74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4014b78:	0005883a 	mov	r2,zero
 4014b7c:	00014a06 	br	40150a8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 4014b80:	d0a74403 	ldbu	r2,-25328(gp)
 4014b84:	10803fcc 	andi	r2,r2,255
 4014b88:	10000526 	beq	r2,zero,4014ba0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 4014b8c:	e0800217 	ldw	r2,8(fp)
 4014b90:	00c00344 	movi	r3,13
 4014b94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4014b98:	0005883a 	mov	r2,zero
 4014b9c:	00014206 	br	40150a8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4014ba0:	e0bffc17 	ldw	r2,-16(fp)
 4014ba4:	10800003 	ldbu	r2,0(r2)
 4014ba8:	10803fcc 	andi	r2,r2,255
 4014bac:	10800160 	cmpeqi	r2,r2,5
 4014bb0:	1000051e 	bne	r2,zero,4014bc8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 4014bb4:	e0800217 	ldw	r2,8(fp)
 4014bb8:	00c00044 	movi	r3,1
 4014bbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4014bc0:	0005883a 	mov	r2,zero
 4014bc4:	00013806 	br	40150a8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4014bc8:	e0fffe03 	ldbu	r3,-8(fp)
 4014bcc:	00bfe004 	movi	r2,-128
 4014bd0:	1884703a 	and	r2,r3,r2
 4014bd4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4014bd8:	e0bfe603 	ldbu	r2,-104(fp)
 4014bdc:	10000626 	beq	r2,zero,4014bf8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 4014be0:	e0bffe03 	ldbu	r2,-8(fp)
 4014be4:	10801fcc 	andi	r2,r2,127
 4014be8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4014bec:	00800044 	movi	r2,1
 4014bf0:	e0bfe405 	stb	r2,-112(fp)
 4014bf4:	00000106 	br	4014bfc <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4014bf8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014bfc:	0005303a 	rdctl	r2,status
 4014c00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014c04:	e0fff617 	ldw	r3,-40(fp)
 4014c08:	00bfff84 	movi	r2,-2
 4014c0c:	1884703a 	and	r2,r3,r2
 4014c10:	1001703a 	wrctl	status,r2
  
  return context;
 4014c14:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4014c18:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 4014c1c:	e0bffe03 	ldbu	r2,-8(fp)
 4014c20:	10c00060 	cmpeqi	r3,r2,1
 4014c24:	1800921e 	bne	r3,zero,4014e70 <OSFlagPend+0x36c>
 4014c28:	10c00088 	cmpgei	r3,r2,2
 4014c2c:	1800021e 	bne	r3,zero,4014c38 <OSFlagPend+0x134>
 4014c30:	10006126 	beq	r2,zero,4014db8 <OSFlagPend+0x2b4>
 4014c34:	0000bb06 	br	4014f24 <OSFlagPend+0x420>
 4014c38:	10c000a0 	cmpeqi	r3,r2,2
 4014c3c:	1800031e 	bne	r3,zero,4014c4c <OSFlagPend+0x148>
 4014c40:	108000e0 	cmpeqi	r2,r2,3
 4014c44:	10002f1e 	bne	r2,zero,4014d04 <OSFlagPend+0x200>
 4014c48:	0000b606 	br	4014f24 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 4014c4c:	e0bffc17 	ldw	r2,-16(fp)
 4014c50:	10c0020b 	ldhu	r3,8(r2)
 4014c54:	e0bffd0b 	ldhu	r2,-12(fp)
 4014c58:	1884703a 	and	r2,r3,r2
 4014c5c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4014c60:	e0ffe80b 	ldhu	r3,-96(fp)
 4014c64:	e0bffd0b 	ldhu	r2,-12(fp)
 4014c68:	1880171e 	bne	r3,r2,4014cc8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4014c6c:	e0bfe403 	ldbu	r2,-112(fp)
 4014c70:	10800058 	cmpnei	r2,r2,1
 4014c74:	1000091e 	bne	r2,zero,4014c9c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4014c78:	e0bffc17 	ldw	r2,-16(fp)
 4014c7c:	1080020b 	ldhu	r2,8(r2)
 4014c80:	1007883a 	mov	r3,r2
 4014c84:	e0bfe80b 	ldhu	r2,-96(fp)
 4014c88:	0084303a 	nor	r2,zero,r2
 4014c8c:	1884703a 	and	r2,r3,r2
 4014c90:	1007883a 	mov	r3,r2
 4014c94:	e0bffc17 	ldw	r2,-16(fp)
 4014c98:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4014c9c:	d0a75317 	ldw	r2,-25268(gp)
 4014ca0:	e0ffe80b 	ldhu	r3,-96(fp)
 4014ca4:	10c00b0d 	sth	r3,44(r2)
 4014ca8:	e0bfe517 	ldw	r2,-108(fp)
 4014cac:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014cb0:	e0bfe717 	ldw	r2,-100(fp)
 4014cb4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4014cb8:	e0800217 	ldw	r2,8(fp)
 4014cbc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4014cc0:	e0bfe80b 	ldhu	r2,-96(fp)
 4014cc4:	0000f806 	br	40150a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4014cc8:	e13ffd0b 	ldhu	r4,-12(fp)
 4014ccc:	e17ffe03 	ldbu	r5,-8(fp)
 4014cd0:	e0bfff0b 	ldhu	r2,-4(fp)
 4014cd4:	e0fff704 	addi	r3,fp,-36
 4014cd8:	d8800015 	stw	r2,0(sp)
 4014cdc:	280f883a 	mov	r7,r5
 4014ce0:	200d883a 	mov	r6,r4
 4014ce4:	180b883a 	mov	r5,r3
 4014ce8:	e13ffc17 	ldw	r4,-16(fp)
 4014cec:	40155740 	call	4015574 <OS_FlagBlock>
 4014cf0:	e0bfe517 	ldw	r2,-108(fp)
 4014cf4:	e0bfe915 	stw	r2,-92(fp)
 4014cf8:	e0bfe917 	ldw	r2,-92(fp)
 4014cfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4014d00:	00009206 	br	4014f4c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4014d04:	e0bffc17 	ldw	r2,-16(fp)
 4014d08:	10c0020b 	ldhu	r3,8(r2)
 4014d0c:	e0bffd0b 	ldhu	r2,-12(fp)
 4014d10:	1884703a 	and	r2,r3,r2
 4014d14:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4014d18:	e0bfe80b 	ldhu	r2,-96(fp)
 4014d1c:	10001726 	beq	r2,zero,4014d7c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4014d20:	e0bfe403 	ldbu	r2,-112(fp)
 4014d24:	10800058 	cmpnei	r2,r2,1
 4014d28:	1000091e 	bne	r2,zero,4014d50 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4014d2c:	e0bffc17 	ldw	r2,-16(fp)
 4014d30:	1080020b 	ldhu	r2,8(r2)
 4014d34:	1007883a 	mov	r3,r2
 4014d38:	e0bfe80b 	ldhu	r2,-96(fp)
 4014d3c:	0084303a 	nor	r2,zero,r2
 4014d40:	1884703a 	and	r2,r3,r2
 4014d44:	1007883a 	mov	r3,r2
 4014d48:	e0bffc17 	ldw	r2,-16(fp)
 4014d4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4014d50:	d0a75317 	ldw	r2,-25268(gp)
 4014d54:	e0ffe80b 	ldhu	r3,-96(fp)
 4014d58:	10c00b0d 	sth	r3,44(r2)
 4014d5c:	e0bfe517 	ldw	r2,-108(fp)
 4014d60:	e0bfea15 	stw	r2,-88(fp)
 4014d64:	e0bfea17 	ldw	r2,-88(fp)
 4014d68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4014d6c:	e0800217 	ldw	r2,8(fp)
 4014d70:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4014d74:	e0bfe80b 	ldhu	r2,-96(fp)
 4014d78:	0000cb06 	br	40150a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4014d7c:	e13ffd0b 	ldhu	r4,-12(fp)
 4014d80:	e17ffe03 	ldbu	r5,-8(fp)
 4014d84:	e0bfff0b 	ldhu	r2,-4(fp)
 4014d88:	e0fff704 	addi	r3,fp,-36
 4014d8c:	d8800015 	stw	r2,0(sp)
 4014d90:	280f883a 	mov	r7,r5
 4014d94:	200d883a 	mov	r6,r4
 4014d98:	180b883a 	mov	r5,r3
 4014d9c:	e13ffc17 	ldw	r4,-16(fp)
 4014da0:	40155740 	call	4015574 <OS_FlagBlock>
 4014da4:	e0bfe517 	ldw	r2,-108(fp)
 4014da8:	e0bfeb15 	stw	r2,-84(fp)
 4014dac:	e0bfeb17 	ldw	r2,-84(fp)
 4014db0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4014db4:	00006506 	br	4014f4c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4014db8:	e0bffc17 	ldw	r2,-16(fp)
 4014dbc:	1080020b 	ldhu	r2,8(r2)
 4014dc0:	0084303a 	nor	r2,zero,r2
 4014dc4:	1007883a 	mov	r3,r2
 4014dc8:	e0bffd0b 	ldhu	r2,-12(fp)
 4014dcc:	1884703a 	and	r2,r3,r2
 4014dd0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4014dd4:	e0ffe80b 	ldhu	r3,-96(fp)
 4014dd8:	e0bffd0b 	ldhu	r2,-12(fp)
 4014ddc:	1880151e 	bne	r3,r2,4014e34 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4014de0:	e0bfe403 	ldbu	r2,-112(fp)
 4014de4:	10800058 	cmpnei	r2,r2,1
 4014de8:	1000071e 	bne	r2,zero,4014e08 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4014dec:	e0bffc17 	ldw	r2,-16(fp)
 4014df0:	10c0020b 	ldhu	r3,8(r2)
 4014df4:	e0bfe80b 	ldhu	r2,-96(fp)
 4014df8:	1884b03a 	or	r2,r3,r2
 4014dfc:	1007883a 	mov	r3,r2
 4014e00:	e0bffc17 	ldw	r2,-16(fp)
 4014e04:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4014e08:	d0a75317 	ldw	r2,-25268(gp)
 4014e0c:	e0ffe80b 	ldhu	r3,-96(fp)
 4014e10:	10c00b0d 	sth	r3,44(r2)
 4014e14:	e0bfe517 	ldw	r2,-108(fp)
 4014e18:	e0bfec15 	stw	r2,-80(fp)
 4014e1c:	e0bfec17 	ldw	r2,-80(fp)
 4014e20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4014e24:	e0800217 	ldw	r2,8(fp)
 4014e28:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4014e2c:	e0bfe80b 	ldhu	r2,-96(fp)
 4014e30:	00009d06 	br	40150a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4014e34:	e13ffd0b 	ldhu	r4,-12(fp)
 4014e38:	e17ffe03 	ldbu	r5,-8(fp)
 4014e3c:	e0bfff0b 	ldhu	r2,-4(fp)
 4014e40:	e0fff704 	addi	r3,fp,-36
 4014e44:	d8800015 	stw	r2,0(sp)
 4014e48:	280f883a 	mov	r7,r5
 4014e4c:	200d883a 	mov	r6,r4
 4014e50:	180b883a 	mov	r5,r3
 4014e54:	e13ffc17 	ldw	r4,-16(fp)
 4014e58:	40155740 	call	4015574 <OS_FlagBlock>
 4014e5c:	e0bfe517 	ldw	r2,-108(fp)
 4014e60:	e0bfed15 	stw	r2,-76(fp)
 4014e64:	e0bfed17 	ldw	r2,-76(fp)
 4014e68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4014e6c:	00003706 	br	4014f4c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4014e70:	e0bffc17 	ldw	r2,-16(fp)
 4014e74:	1080020b 	ldhu	r2,8(r2)
 4014e78:	0084303a 	nor	r2,zero,r2
 4014e7c:	1007883a 	mov	r3,r2
 4014e80:	e0bffd0b 	ldhu	r2,-12(fp)
 4014e84:	1884703a 	and	r2,r3,r2
 4014e88:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4014e8c:	e0bfe80b 	ldhu	r2,-96(fp)
 4014e90:	10001526 	beq	r2,zero,4014ee8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4014e94:	e0bfe403 	ldbu	r2,-112(fp)
 4014e98:	10800058 	cmpnei	r2,r2,1
 4014e9c:	1000071e 	bne	r2,zero,4014ebc <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4014ea0:	e0bffc17 	ldw	r2,-16(fp)
 4014ea4:	10c0020b 	ldhu	r3,8(r2)
 4014ea8:	e0bfe80b 	ldhu	r2,-96(fp)
 4014eac:	1884b03a 	or	r2,r3,r2
 4014eb0:	1007883a 	mov	r3,r2
 4014eb4:	e0bffc17 	ldw	r2,-16(fp)
 4014eb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4014ebc:	d0a75317 	ldw	r2,-25268(gp)
 4014ec0:	e0ffe80b 	ldhu	r3,-96(fp)
 4014ec4:	10c00b0d 	sth	r3,44(r2)
 4014ec8:	e0bfe517 	ldw	r2,-108(fp)
 4014ecc:	e0bfee15 	stw	r2,-72(fp)
 4014ed0:	e0bfee17 	ldw	r2,-72(fp)
 4014ed4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4014ed8:	e0800217 	ldw	r2,8(fp)
 4014edc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4014ee0:	e0bfe80b 	ldhu	r2,-96(fp)
 4014ee4:	00007006 	br	40150a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4014ee8:	e13ffd0b 	ldhu	r4,-12(fp)
 4014eec:	e17ffe03 	ldbu	r5,-8(fp)
 4014ef0:	e0bfff0b 	ldhu	r2,-4(fp)
 4014ef4:	e0fff704 	addi	r3,fp,-36
 4014ef8:	d8800015 	stw	r2,0(sp)
 4014efc:	280f883a 	mov	r7,r5
 4014f00:	200d883a 	mov	r6,r4
 4014f04:	180b883a 	mov	r5,r3
 4014f08:	e13ffc17 	ldw	r4,-16(fp)
 4014f0c:	40155740 	call	4015574 <OS_FlagBlock>
 4014f10:	e0bfe517 	ldw	r2,-108(fp)
 4014f14:	e0bfef15 	stw	r2,-68(fp)
 4014f18:	e0bfef17 	ldw	r2,-68(fp)
 4014f1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4014f20:	00000a06 	br	4014f4c <OSFlagPend+0x448>
 4014f24:	e0bfe517 	ldw	r2,-108(fp)
 4014f28:	e0bff015 	stw	r2,-64(fp)
 4014f2c:	e0bff017 	ldw	r2,-64(fp)
 4014f30:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4014f34:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4014f38:	e0800217 	ldw	r2,8(fp)
 4014f3c:	00c01bc4 	movi	r3,111
 4014f40:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 4014f44:	e0bfe80b 	ldhu	r2,-96(fp)
 4014f48:	00005706 	br	40150a8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4014f4c:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014f50:	0005303a 	rdctl	r2,status
 4014f54:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014f58:	e0fff117 	ldw	r3,-60(fp)
 4014f5c:	00bfff84 	movi	r2,-2
 4014f60:	1884703a 	and	r2,r3,r2
 4014f64:	1001703a 	wrctl	status,r2
  
  return context;
 4014f68:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 4014f6c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 4014f70:	d0a75317 	ldw	r2,-25268(gp)
 4014f74:	10800c43 	ldbu	r2,49(r2)
 4014f78:	10803fcc 	andi	r2,r2,255
 4014f7c:	10001c26 	beq	r2,zero,4014ff0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4014f80:	d0a75317 	ldw	r2,-25268(gp)
 4014f84:	10800c43 	ldbu	r2,49(r2)
 4014f88:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4014f8c:	d0a75317 	ldw	r2,-25268(gp)
 4014f90:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4014f94:	e0bff704 	addi	r2,fp,-36
 4014f98:	1009883a 	mov	r4,r2
 4014f9c:	40158a80 	call	40158a8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4014fa0:	d0a75317 	ldw	r2,-25268(gp)
 4014fa4:	10000c05 	stb	zero,48(r2)
 4014fa8:	e0bfe517 	ldw	r2,-108(fp)
 4014fac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014fb0:	e0bff217 	ldw	r2,-56(fp)
 4014fb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4014fb8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4014fbc:	e0bff303 	ldbu	r2,-52(fp)
 4014fc0:	108000a0 	cmpeqi	r2,r2,2
 4014fc4:	10000426 	beq	r2,zero,4014fd8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4014fc8:	e0800217 	ldw	r2,8(fp)
 4014fcc:	00c00384 	movi	r3,14
 4014fd0:	10c00005 	stb	r3,0(r2)
                 break;
 4014fd4:	00000406 	br	4014fe8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4014fd8:	e0800217 	ldw	r2,8(fp)
 4014fdc:	00c00284 	movi	r3,10
 4014fe0:	10c00005 	stb	r3,0(r2)
                 break;
 4014fe4:	0001883a 	nop
        }
        return (flags_rdy);
 4014fe8:	e0bfe80b 	ldhu	r2,-96(fp)
 4014fec:	00002e06 	br	40150a8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4014ff0:	d0a75317 	ldw	r2,-25268(gp)
 4014ff4:	10800b0b 	ldhu	r2,44(r2)
 4014ff8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4014ffc:	e0bfe403 	ldbu	r2,-112(fp)
 4015000:	10800058 	cmpnei	r2,r2,1
 4015004:	1000211e 	bne	r2,zero,401508c <OSFlagPend+0x588>
        switch (wait_type) {
 4015008:	e0bffe03 	ldbu	r2,-8(fp)
 401500c:	10001616 	blt	r2,zero,4015068 <OSFlagPend+0x564>
 4015010:	10c00090 	cmplti	r3,r2,2
 4015014:	18000c1e 	bne	r3,zero,4015048 <OSFlagPend+0x544>
 4015018:	10800108 	cmpgei	r2,r2,4
 401501c:	1000121e 	bne	r2,zero,4015068 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4015020:	e0bffc17 	ldw	r2,-16(fp)
 4015024:	1080020b 	ldhu	r2,8(r2)
 4015028:	1007883a 	mov	r3,r2
 401502c:	e0bfe80b 	ldhu	r2,-96(fp)
 4015030:	0084303a 	nor	r2,zero,r2
 4015034:	1884703a 	and	r2,r3,r2
 4015038:	1007883a 	mov	r3,r2
 401503c:	e0bffc17 	ldw	r2,-16(fp)
 4015040:	10c0020d 	sth	r3,8(r2)
                 break;
 4015044:	00001106 	br	401508c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 4015048:	e0bffc17 	ldw	r2,-16(fp)
 401504c:	10c0020b 	ldhu	r3,8(r2)
 4015050:	e0bfe80b 	ldhu	r2,-96(fp)
 4015054:	1884b03a 	or	r2,r3,r2
 4015058:	1007883a 	mov	r3,r2
 401505c:	e0bffc17 	ldw	r2,-16(fp)
 4015060:	10c0020d 	sth	r3,8(r2)
                 break;
 4015064:	00000906 	br	401508c <OSFlagPend+0x588>
 4015068:	e0bfe517 	ldw	r2,-108(fp)
 401506c:	e0bff415 	stw	r2,-48(fp)
 4015070:	e0bff417 	ldw	r2,-48(fp)
 4015074:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4015078:	e0800217 	ldw	r2,8(fp)
 401507c:	00c01bc4 	movi	r3,111
 4015080:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4015084:	0005883a 	mov	r2,zero
 4015088:	00000706 	br	40150a8 <OSFlagPend+0x5a4>
 401508c:	e0bfe517 	ldw	r2,-108(fp)
 4015090:	e0bff515 	stw	r2,-44(fp)
 4015094:	e0bff517 	ldw	r2,-44(fp)
 4015098:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 401509c:	e0800217 	ldw	r2,8(fp)
 40150a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 40150a4:	e0bfe80b 	ldhu	r2,-96(fp)
}
 40150a8:	e037883a 	mov	sp,fp
 40150ac:	dfc00117 	ldw	ra,4(sp)
 40150b0:	df000017 	ldw	fp,0(sp)
 40150b4:	dec00204 	addi	sp,sp,8
 40150b8:	f800283a 	ret

040150bc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 40150bc:	defffb04 	addi	sp,sp,-20
 40150c0:	df000415 	stw	fp,16(sp)
 40150c4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40150c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40150cc:	0005303a 	rdctl	r2,status
 40150d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40150d4:	e0fffe17 	ldw	r3,-8(fp)
 40150d8:	00bfff84 	movi	r2,-2
 40150dc:	1884703a 	and	r2,r3,r2
 40150e0:	1001703a 	wrctl	status,r2
  
  return context;
 40150e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 40150e8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 40150ec:	d0a75317 	ldw	r2,-25268(gp)
 40150f0:	10800b0b 	ldhu	r2,44(r2)
 40150f4:	e0bffd0d 	sth	r2,-12(fp)
 40150f8:	e0bffc17 	ldw	r2,-16(fp)
 40150fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015100:	e0bfff17 	ldw	r2,-4(fp)
 4015104:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 4015108:	e0bffd0b 	ldhu	r2,-12(fp)
}
 401510c:	e037883a 	mov	sp,fp
 4015110:	df000017 	ldw	fp,0(sp)
 4015114:	dec00104 	addi	sp,sp,4
 4015118:	f800283a 	ret

0401511c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 401511c:	deffef04 	addi	sp,sp,-68
 4015120:	dfc01015 	stw	ra,64(sp)
 4015124:	df000f15 	stw	fp,60(sp)
 4015128:	df000f04 	addi	fp,sp,60
 401512c:	e13ffc15 	stw	r4,-16(fp)
 4015130:	2807883a 	mov	r3,r5
 4015134:	3005883a 	mov	r2,r6
 4015138:	e1ffff15 	stw	r7,-4(fp)
 401513c:	e0fffd0d 	sth	r3,-12(fp)
 4015140:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 4015144:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4015148:	e0bfff17 	ldw	r2,-4(fp)
 401514c:	1000021e 	bne	r2,zero,4015158 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 4015150:	0005883a 	mov	r2,zero
 4015154:	0000d106 	br	401549c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4015158:	e0bffc17 	ldw	r2,-16(fp)
 401515c:	1000051e 	bne	r2,zero,4015174 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4015160:	e0bfff17 	ldw	r2,-4(fp)
 4015164:	00c01b84 	movi	r3,110
 4015168:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 401516c:	0005883a 	mov	r2,zero
 4015170:	0000ca06 	br	401549c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4015174:	e0bffc17 	ldw	r2,-16(fp)
 4015178:	10800003 	ldbu	r2,0(r2)
 401517c:	10803fcc 	andi	r2,r2,255
 4015180:	10800160 	cmpeqi	r2,r2,5
 4015184:	1000051e 	bne	r2,zero,401519c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 4015188:	e0bfff17 	ldw	r2,-4(fp)
 401518c:	00c00044 	movi	r3,1
 4015190:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4015194:	0005883a 	mov	r2,zero
 4015198:	0000c006 	br	401549c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401519c:	0005303a 	rdctl	r2,status
 40151a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40151a4:	e0fffb17 	ldw	r3,-20(fp)
 40151a8:	00bfff84 	movi	r2,-2
 40151ac:	1884703a 	and	r2,r3,r2
 40151b0:	1001703a 	wrctl	status,r2
  
  return context;
 40151b4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 40151b8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 40151bc:	e0bffe03 	ldbu	r2,-8(fp)
 40151c0:	10000326 	beq	r2,zero,40151d0 <OSFlagPost+0xb4>
 40151c4:	10800060 	cmpeqi	r2,r2,1
 40151c8:	10000b1e 	bne	r2,zero,40151f8 <OSFlagPost+0xdc>
 40151cc:	00001206 	br	4015218 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 40151d0:	e0bffc17 	ldw	r2,-16(fp)
 40151d4:	1080020b 	ldhu	r2,8(r2)
 40151d8:	1007883a 	mov	r3,r2
 40151dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40151e0:	0084303a 	nor	r2,zero,r2
 40151e4:	1884703a 	and	r2,r3,r2
 40151e8:	1007883a 	mov	r3,r2
 40151ec:	e0bffc17 	ldw	r2,-16(fp)
 40151f0:	10c0020d 	sth	r3,8(r2)
             break;
 40151f4:	00001106 	br	401523c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 40151f8:	e0bffc17 	ldw	r2,-16(fp)
 40151fc:	10c0020b 	ldhu	r3,8(r2)
 4015200:	e0bffd0b 	ldhu	r2,-12(fp)
 4015204:	1884b03a 	or	r2,r3,r2
 4015208:	1007883a 	mov	r3,r2
 401520c:	e0bffc17 	ldw	r2,-16(fp)
 4015210:	10c0020d 	sth	r3,8(r2)
             break;
 4015214:	00000906 	br	401523c <OSFlagPost+0x120>
 4015218:	e0bff317 	ldw	r2,-52(fp)
 401521c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015220:	e0bff417 	ldw	r2,-48(fp)
 4015224:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 4015228:	e0bfff17 	ldw	r2,-4(fp)
 401522c:	00c01c44 	movi	r3,113
 4015230:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 4015234:	0005883a 	mov	r2,zero
 4015238:	00009806 	br	401549c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 401523c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4015240:	e0bffc17 	ldw	r2,-16(fp)
 4015244:	10800117 	ldw	r2,4(r2)
 4015248:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 401524c:	00007706 	br	401542c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 4015250:	e0bff117 	ldw	r2,-60(fp)
 4015254:	10800483 	ldbu	r2,18(r2)
 4015258:	10803fcc 	andi	r2,r2,255
 401525c:	10c00060 	cmpeqi	r3,r2,1
 4015260:	18004a1e 	bne	r3,zero,401538c <OSFlagPost+0x270>
 4015264:	10c00088 	cmpgei	r3,r2,2
 4015268:	1800021e 	bne	r3,zero,4015274 <OSFlagPost+0x158>
 401526c:	10002f26 	beq	r2,zero,401532c <OSFlagPost+0x210>
 4015270:	00005b06 	br	40153e0 <OSFlagPost+0x2c4>
 4015274:	10c000a0 	cmpeqi	r3,r2,2
 4015278:	1800031e 	bne	r3,zero,4015288 <OSFlagPost+0x16c>
 401527c:	108000e0 	cmpeqi	r2,r2,3
 4015280:	1000171e 	bne	r2,zero,40152e0 <OSFlagPost+0x1c4>
 4015284:	00005606 	br	40153e0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4015288:	e0bffc17 	ldw	r2,-16(fp)
 401528c:	10c0020b 	ldhu	r3,8(r2)
 4015290:	e0bff117 	ldw	r2,-60(fp)
 4015294:	1080040b 	ldhu	r2,16(r2)
 4015298:	1884703a 	and	r2,r3,r2
 401529c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40152a0:	e0bff117 	ldw	r2,-60(fp)
 40152a4:	1080040b 	ldhu	r2,16(r2)
 40152a8:	10ffffcc 	andi	r3,r2,65535
 40152ac:	e0bff60b 	ldhu	r2,-40(fp)
 40152b0:	1880541e 	bne	r3,r2,4015404 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40152b4:	e0bff60b 	ldhu	r2,-40(fp)
 40152b8:	100b883a 	mov	r5,r2
 40152bc:	e13ff117 	ldw	r4,-60(fp)
 40152c0:	40157b40 	call	40157b4 <OS_FlagTaskRdy>
 40152c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40152c8:	e0bff683 	ldbu	r2,-38(fp)
 40152cc:	10800058 	cmpnei	r2,r2,1
 40152d0:	10004c1e 	bne	r2,zero,4015404 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40152d4:	00800044 	movi	r2,1
 40152d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40152dc:	00004906 	br	4015404 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40152e0:	e0bffc17 	ldw	r2,-16(fp)
 40152e4:	10c0020b 	ldhu	r3,8(r2)
 40152e8:	e0bff117 	ldw	r2,-60(fp)
 40152ec:	1080040b 	ldhu	r2,16(r2)
 40152f0:	1884703a 	and	r2,r3,r2
 40152f4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 40152f8:	e0bff60b 	ldhu	r2,-40(fp)
 40152fc:	10004326 	beq	r2,zero,401540c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4015300:	e0bff60b 	ldhu	r2,-40(fp)
 4015304:	100b883a 	mov	r5,r2
 4015308:	e13ff117 	ldw	r4,-60(fp)
 401530c:	40157b40 	call	40157b4 <OS_FlagTaskRdy>
 4015310:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4015314:	e0bff683 	ldbu	r2,-38(fp)
 4015318:	10800058 	cmpnei	r2,r2,1
 401531c:	10003b1e 	bne	r2,zero,401540c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4015320:	00800044 	movi	r2,1
 4015324:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4015328:	00003806 	br	401540c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401532c:	e0bffc17 	ldw	r2,-16(fp)
 4015330:	1080020b 	ldhu	r2,8(r2)
 4015334:	0084303a 	nor	r2,zero,r2
 4015338:	1007883a 	mov	r3,r2
 401533c:	e0bff117 	ldw	r2,-60(fp)
 4015340:	1080040b 	ldhu	r2,16(r2)
 4015344:	1884703a 	and	r2,r3,r2
 4015348:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 401534c:	e0bff117 	ldw	r2,-60(fp)
 4015350:	1080040b 	ldhu	r2,16(r2)
 4015354:	10ffffcc 	andi	r3,r2,65535
 4015358:	e0bff60b 	ldhu	r2,-40(fp)
 401535c:	18802d1e 	bne	r3,r2,4015414 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4015360:	e0bff60b 	ldhu	r2,-40(fp)
 4015364:	100b883a 	mov	r5,r2
 4015368:	e13ff117 	ldw	r4,-60(fp)
 401536c:	40157b40 	call	40157b4 <OS_FlagTaskRdy>
 4015370:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4015374:	e0bff683 	ldbu	r2,-38(fp)
 4015378:	10800058 	cmpnei	r2,r2,1
 401537c:	1000251e 	bne	r2,zero,4015414 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4015380:	00800044 	movi	r2,1
 4015384:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4015388:	00002206 	br	4015414 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401538c:	e0bffc17 	ldw	r2,-16(fp)
 4015390:	1080020b 	ldhu	r2,8(r2)
 4015394:	0084303a 	nor	r2,zero,r2
 4015398:	1007883a 	mov	r3,r2
 401539c:	e0bff117 	ldw	r2,-60(fp)
 40153a0:	1080040b 	ldhu	r2,16(r2)
 40153a4:	1884703a 	and	r2,r3,r2
 40153a8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 40153ac:	e0bff60b 	ldhu	r2,-40(fp)
 40153b0:	10001a26 	beq	r2,zero,401541c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40153b4:	e0bff60b 	ldhu	r2,-40(fp)
 40153b8:	100b883a 	mov	r5,r2
 40153bc:	e13ff117 	ldw	r4,-60(fp)
 40153c0:	40157b40 	call	40157b4 <OS_FlagTaskRdy>
 40153c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40153c8:	e0bff683 	ldbu	r2,-38(fp)
 40153cc:	10800058 	cmpnei	r2,r2,1
 40153d0:	1000121e 	bne	r2,zero,401541c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40153d4:	00800044 	movi	r2,1
 40153d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40153dc:	00000f06 	br	401541c <OSFlagPost+0x300>
 40153e0:	e0bff317 	ldw	r2,-52(fp)
 40153e4:	e0bff515 	stw	r2,-44(fp)
 40153e8:	e0bff517 	ldw	r2,-44(fp)
 40153ec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 40153f0:	e0bfff17 	ldw	r2,-4(fp)
 40153f4:	00c01bc4 	movi	r3,111
 40153f8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 40153fc:	0005883a 	mov	r2,zero
 4015400:	00002606 	br	401549c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4015404:	0001883a 	nop
 4015408:	00000506 	br	4015420 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 401540c:	0001883a 	nop
 4015410:	00000306 	br	4015420 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4015414:	0001883a 	nop
 4015418:	00000106 	br	4015420 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 401541c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 4015420:	e0bff117 	ldw	r2,-60(fp)
 4015424:	10800017 	ldw	r2,0(r2)
 4015428:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 401542c:	e0bff117 	ldw	r2,-60(fp)
 4015430:	103f871e 	bne	r2,zero,4015250 <__alt_mem_onchip_memory2_0+0xfc013250>
 4015434:	e0bff317 	ldw	r2,-52(fp)
 4015438:	e0bff715 	stw	r2,-36(fp)
 401543c:	e0bff717 	ldw	r2,-36(fp)
 4015440:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4015444:	e0bff203 	ldbu	r2,-56(fp)
 4015448:	10800058 	cmpnei	r2,r2,1
 401544c:	1000011e 	bne	r2,zero,4015454 <OSFlagPost+0x338>
        OS_Sched();
 4015450:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015454:	0005303a 	rdctl	r2,status
 4015458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401545c:	e0fffa17 	ldw	r3,-24(fp)
 4015460:	00bfff84 	movi	r2,-2
 4015464:	1884703a 	and	r2,r3,r2
 4015468:	1001703a 	wrctl	status,r2
  
  return context;
 401546c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4015470:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 4015474:	e0bffc17 	ldw	r2,-16(fp)
 4015478:	1080020b 	ldhu	r2,8(r2)
 401547c:	e0bff90d 	sth	r2,-28(fp)
 4015480:	e0bff317 	ldw	r2,-52(fp)
 4015484:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015488:	e0bff817 	ldw	r2,-32(fp)
 401548c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 4015490:	e0bfff17 	ldw	r2,-4(fp)
 4015494:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 4015498:	e0bff90b 	ldhu	r2,-28(fp)
}
 401549c:	e037883a 	mov	sp,fp
 40154a0:	dfc00117 	ldw	ra,4(sp)
 40154a4:	df000017 	ldw	fp,0(sp)
 40154a8:	dec00204 	addi	sp,sp,8
 40154ac:	f800283a 	ret

040154b0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 40154b0:	defff904 	addi	sp,sp,-28
 40154b4:	df000615 	stw	fp,24(sp)
 40154b8:	df000604 	addi	fp,sp,24
 40154bc:	e13ffe15 	stw	r4,-8(fp)
 40154c0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 40154c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 40154c8:	e0bfff17 	ldw	r2,-4(fp)
 40154cc:	1000021e 	bne	r2,zero,40154d8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 40154d0:	0005883a 	mov	r2,zero
 40154d4:	00002306 	br	4015564 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 40154d8:	e0bffe17 	ldw	r2,-8(fp)
 40154dc:	1000051e 	bne	r2,zero,40154f4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40154e0:	e0bfff17 	ldw	r2,-4(fp)
 40154e4:	00c01b84 	movi	r3,110
 40154e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40154ec:	0005883a 	mov	r2,zero
 40154f0:	00001c06 	br	4015564 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 40154f4:	e0bffe17 	ldw	r2,-8(fp)
 40154f8:	10800003 	ldbu	r2,0(r2)
 40154fc:	10803fcc 	andi	r2,r2,255
 4015500:	10800160 	cmpeqi	r2,r2,5
 4015504:	1000051e 	bne	r2,zero,401551c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4015508:	e0bfff17 	ldw	r2,-4(fp)
 401550c:	00c00044 	movi	r3,1
 4015510:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4015514:	0005883a 	mov	r2,zero
 4015518:	00001206 	br	4015564 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401551c:	0005303a 	rdctl	r2,status
 4015520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015524:	e0fffc17 	ldw	r3,-16(fp)
 4015528:	00bfff84 	movi	r2,-2
 401552c:	1884703a 	and	r2,r3,r2
 4015530:	1001703a 	wrctl	status,r2
  
  return context;
 4015534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4015538:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 401553c:	e0bffe17 	ldw	r2,-8(fp)
 4015540:	1080020b 	ldhu	r2,8(r2)
 4015544:	e0bffb0d 	sth	r2,-20(fp)
 4015548:	e0bffa17 	ldw	r2,-24(fp)
 401554c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015550:	e0bffd17 	ldw	r2,-12(fp)
 4015554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4015558:	e0bfff17 	ldw	r2,-4(fp)
 401555c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 4015560:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4015564:	e037883a 	mov	sp,fp
 4015568:	df000017 	ldw	fp,0(sp)
 401556c:	dec00104 	addi	sp,sp,4
 4015570:	f800283a 	ret

04015574 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 4015574:	defff804 	addi	sp,sp,-32
 4015578:	df000715 	stw	fp,28(sp)
 401557c:	df000704 	addi	fp,sp,28
 4015580:	e13ffb15 	stw	r4,-20(fp)
 4015584:	e17ffc15 	stw	r5,-16(fp)
 4015588:	3009883a 	mov	r4,r6
 401558c:	3807883a 	mov	r3,r7
 4015590:	e0800117 	ldw	r2,4(fp)
 4015594:	e13ffd0d 	sth	r4,-12(fp)
 4015598:	e0fffe05 	stb	r3,-8(fp)
 401559c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 40155a0:	d0a75317 	ldw	r2,-25268(gp)
 40155a4:	d0e75317 	ldw	r3,-25268(gp)
 40155a8:	18c00c03 	ldbu	r3,48(r3)
 40155ac:	18c00814 	ori	r3,r3,32
 40155b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 40155b4:	d0a75317 	ldw	r2,-25268(gp)
 40155b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 40155bc:	d0a75317 	ldw	r2,-25268(gp)
 40155c0:	e0ffff0b 	ldhu	r3,-4(fp)
 40155c4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 40155c8:	d0a75317 	ldw	r2,-25268(gp)
 40155cc:	e0fffc17 	ldw	r3,-16(fp)
 40155d0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 40155d4:	e0bffc17 	ldw	r2,-16(fp)
 40155d8:	e0fffd0b 	ldhu	r3,-12(fp)
 40155dc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 40155e0:	e0bffc17 	ldw	r2,-16(fp)
 40155e4:	e0fffe03 	ldbu	r3,-8(fp)
 40155e8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 40155ec:	d0e75317 	ldw	r3,-25268(gp)
 40155f0:	e0bffc17 	ldw	r2,-16(fp)
 40155f4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 40155f8:	e0bffb17 	ldw	r2,-20(fp)
 40155fc:	10c00117 	ldw	r3,4(r2)
 4015600:	e0bffc17 	ldw	r2,-16(fp)
 4015604:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4015608:	e0bffc17 	ldw	r2,-16(fp)
 401560c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 4015610:	e0bffc17 	ldw	r2,-16(fp)
 4015614:	e0fffb17 	ldw	r3,-20(fp)
 4015618:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 401561c:	e0bffb17 	ldw	r2,-20(fp)
 4015620:	10800117 	ldw	r2,4(r2)
 4015624:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 4015628:	e0bff917 	ldw	r2,-28(fp)
 401562c:	10000326 	beq	r2,zero,401563c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 4015630:	e0bff917 	ldw	r2,-28(fp)
 4015634:	e0fffc17 	ldw	r3,-16(fp)
 4015638:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 401563c:	e0bffb17 	ldw	r2,-20(fp)
 4015640:	e0fffc17 	ldw	r3,-16(fp)
 4015644:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 4015648:	d0a75317 	ldw	r2,-25268(gp)
 401564c:	10800d03 	ldbu	r2,52(r2)
 4015650:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4015654:	e0fffa03 	ldbu	r3,-24(fp)
 4015658:	e13ffa03 	ldbu	r4,-24(fp)
 401565c:	d0a75044 	addi	r2,gp,-25279
 4015660:	2085883a 	add	r2,r4,r2
 4015664:	10800003 	ldbu	r2,0(r2)
 4015668:	1009883a 	mov	r4,r2
 401566c:	d0a75317 	ldw	r2,-25268(gp)
 4015670:	10800d43 	ldbu	r2,53(r2)
 4015674:	0084303a 	nor	r2,zero,r2
 4015678:	2084703a 	and	r2,r4,r2
 401567c:	1009883a 	mov	r4,r2
 4015680:	d0a75044 	addi	r2,gp,-25279
 4015684:	1885883a 	add	r2,r3,r2
 4015688:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 401568c:	e0fffa03 	ldbu	r3,-24(fp)
 4015690:	d0a75044 	addi	r2,gp,-25279
 4015694:	1885883a 	add	r2,r3,r2
 4015698:	10800003 	ldbu	r2,0(r2)
 401569c:	10803fcc 	andi	r2,r2,255
 40156a0:	1000071e 	bne	r2,zero,40156c0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 40156a4:	d0a75317 	ldw	r2,-25268(gp)
 40156a8:	10800d83 	ldbu	r2,54(r2)
 40156ac:	0084303a 	nor	r2,zero,r2
 40156b0:	1007883a 	mov	r3,r2
 40156b4:	d0a75003 	ldbu	r2,-25280(gp)
 40156b8:	1884703a 	and	r2,r3,r2
 40156bc:	d0a75005 	stb	r2,-25280(gp)
    }
}
 40156c0:	0001883a 	nop
 40156c4:	e037883a 	mov	sp,fp
 40156c8:	df000017 	ldw	fp,0(sp)
 40156cc:	dec00104 	addi	sp,sp,4
 40156d0:	f800283a 	ret

040156d4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 40156d4:	defffb04 	addi	sp,sp,-20
 40156d8:	dfc00415 	stw	ra,16(sp)
 40156dc:	df000315 	stw	fp,12(sp)
 40156e0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 40156e4:	0140dc04 	movi	r5,880
 40156e8:	010100b4 	movhi	r4,1026
 40156ec:	2119bc04 	addi	r4,r4,26352
 40156f0:	40139180 	call	4013918 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 40156f4:	008100b4 	movhi	r2,1026
 40156f8:	1099bc04 	addi	r2,r2,26352
 40156fc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 4015700:	008100b4 	movhi	r2,1026
 4015704:	1099c704 	addi	r2,r2,26396
 4015708:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 401570c:	e03ffd0d 	sth	zero,-12(fp)
 4015710:	00001306 	br	4015760 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4015714:	e0bffe17 	ldw	r2,-8(fp)
 4015718:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 401571c:	e0bffe17 	ldw	r2,-8(fp)
 4015720:	e0ffff17 	ldw	r3,-4(fp)
 4015724:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 4015728:	e0bffe17 	ldw	r2,-8(fp)
 401572c:	00c00fc4 	movi	r3,63
 4015730:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4015734:	e0bffe17 	ldw	r2,-8(fp)
 4015738:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 401573c:	e0bffe17 	ldw	r2,-8(fp)
 4015740:	10800b04 	addi	r2,r2,44
 4015744:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 4015748:	e0bfff17 	ldw	r2,-4(fp)
 401574c:	10800b04 	addi	r2,r2,44
 4015750:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4015754:	e0bffd0b 	ldhu	r2,-12(fp)
 4015758:	10800044 	addi	r2,r2,1
 401575c:	e0bffd0d 	sth	r2,-12(fp)
 4015760:	e0bffd0b 	ldhu	r2,-12(fp)
 4015764:	108004f0 	cmpltui	r2,r2,19
 4015768:	103fea1e 	bne	r2,zero,4015714 <__alt_mem_onchip_memory2_0+0xfc013714>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401576c:	e0bffe17 	ldw	r2,-8(fp)
 4015770:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 4015774:	e0bffe17 	ldw	r2,-8(fp)
 4015778:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 401577c:	e0bffe17 	ldw	r2,-8(fp)
 4015780:	00c00fc4 	movi	r3,63
 4015784:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4015788:	e0bffe17 	ldw	r2,-8(fp)
 401578c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 4015790:	008100b4 	movhi	r2,1026
 4015794:	1099bc04 	addi	r2,r2,26352
 4015798:	d0a75515 	stw	r2,-25260(gp)
#endif
}
 401579c:	0001883a 	nop
 40157a0:	e037883a 	mov	sp,fp
 40157a4:	dfc00117 	ldw	ra,4(sp)
 40157a8:	df000017 	ldw	fp,0(sp)
 40157ac:	dec00204 	addi	sp,sp,8
 40157b0:	f800283a 	ret

040157b4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 40157b4:	defffa04 	addi	sp,sp,-24
 40157b8:	dfc00515 	stw	ra,20(sp)
 40157bc:	df000415 	stw	fp,16(sp)
 40157c0:	df000404 	addi	fp,sp,16
 40157c4:	e13ffe15 	stw	r4,-8(fp)
 40157c8:	2805883a 	mov	r2,r5
 40157cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 40157d0:	e0bffe17 	ldw	r2,-8(fp)
 40157d4:	10800217 	ldw	r2,8(r2)
 40157d8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 40157dc:	e0bffd17 	ldw	r2,-12(fp)
 40157e0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 40157e4:	e0bffd17 	ldw	r2,-12(fp)
 40157e8:	e0ffff0b 	ldhu	r3,-4(fp)
 40157ec:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 40157f0:	e0bffd17 	ldw	r2,-12(fp)
 40157f4:	10c00c03 	ldbu	r3,48(r2)
 40157f8:	00bff7c4 	movi	r2,-33
 40157fc:	1884703a 	and	r2,r3,r2
 4015800:	1007883a 	mov	r3,r2
 4015804:	e0bffd17 	ldw	r2,-12(fp)
 4015808:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 401580c:	e0bffd17 	ldw	r2,-12(fp)
 4015810:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 4015814:	e0bffd17 	ldw	r2,-12(fp)
 4015818:	10800c03 	ldbu	r2,48(r2)
 401581c:	10803fcc 	andi	r2,r2,255
 4015820:	1000181e 	bne	r2,zero,4015884 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 4015824:	e0bffd17 	ldw	r2,-12(fp)
 4015828:	10c00d83 	ldbu	r3,54(r2)
 401582c:	d0a75003 	ldbu	r2,-25280(gp)
 4015830:	1884b03a 	or	r2,r3,r2
 4015834:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4015838:	e0bffd17 	ldw	r2,-12(fp)
 401583c:	10800d03 	ldbu	r2,52(r2)
 4015840:	10c03fcc 	andi	r3,r2,255
 4015844:	e0bffd17 	ldw	r2,-12(fp)
 4015848:	10800d03 	ldbu	r2,52(r2)
 401584c:	11003fcc 	andi	r4,r2,255
 4015850:	d0a75044 	addi	r2,gp,-25279
 4015854:	2085883a 	add	r2,r4,r2
 4015858:	11000003 	ldbu	r4,0(r2)
 401585c:	e0bffd17 	ldw	r2,-12(fp)
 4015860:	10800d43 	ldbu	r2,53(r2)
 4015864:	2084b03a 	or	r2,r4,r2
 4015868:	1009883a 	mov	r4,r2
 401586c:	d0a75044 	addi	r2,gp,-25279
 4015870:	1885883a 	add	r2,r3,r2
 4015874:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 4015878:	00800044 	movi	r2,1
 401587c:	e0bffc05 	stb	r2,-16(fp)
 4015880:	00000106 	br	4015888 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 4015884:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4015888:	e13ffe17 	ldw	r4,-8(fp)
 401588c:	40158a80 	call	40158a8 <OS_FlagUnlink>
    return (sched);
 4015890:	e0bffc03 	ldbu	r2,-16(fp)
}
 4015894:	e037883a 	mov	sp,fp
 4015898:	dfc00117 	ldw	ra,4(sp)
 401589c:	df000017 	ldw	fp,0(sp)
 40158a0:	dec00204 	addi	sp,sp,8
 40158a4:	f800283a 	ret

040158a8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 40158a8:	defffa04 	addi	sp,sp,-24
 40158ac:	df000515 	stw	fp,20(sp)
 40158b0:	df000504 	addi	fp,sp,20
 40158b4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 40158b8:	e0bfff17 	ldw	r2,-4(fp)
 40158bc:	10800117 	ldw	r2,4(r2)
 40158c0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40158c4:	e0bfff17 	ldw	r2,-4(fp)
 40158c8:	10800017 	ldw	r2,0(r2)
 40158cc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 40158d0:	e0bffb17 	ldw	r2,-20(fp)
 40158d4:	10000b1e 	bne	r2,zero,4015904 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 40158d8:	e0bfff17 	ldw	r2,-4(fp)
 40158dc:	10800317 	ldw	r2,12(r2)
 40158e0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 40158e4:	e0bffd17 	ldw	r2,-12(fp)
 40158e8:	e0fffc17 	ldw	r3,-16(fp)
 40158ec:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 40158f0:	e0bffc17 	ldw	r2,-16(fp)
 40158f4:	10000b26 	beq	r2,zero,4015924 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 40158f8:	e0bffc17 	ldw	r2,-16(fp)
 40158fc:	10000115 	stw	zero,4(r2)
 4015900:	00000806 	br	4015924 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 4015904:	e0bffb17 	ldw	r2,-20(fp)
 4015908:	e0fffc17 	ldw	r3,-16(fp)
 401590c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 4015910:	e0bffc17 	ldw	r2,-16(fp)
 4015914:	10000326 	beq	r2,zero,4015924 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4015918:	e0bffc17 	ldw	r2,-16(fp)
 401591c:	e0fffb17 	ldw	r3,-20(fp)
 4015920:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 4015924:	e0bfff17 	ldw	r2,-4(fp)
 4015928:	10800217 	ldw	r2,8(r2)
 401592c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4015930:	e0bffe17 	ldw	r2,-8(fp)
 4015934:	10000a15 	stw	zero,40(r2)
#endif
}
 4015938:	0001883a 	nop
 401593c:	e037883a 	mov	sp,fp
 4015940:	df000017 	ldw	fp,0(sp)
 4015944:	dec00104 	addi	sp,sp,4
 4015948:	f800283a 	ret

0401594c <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 401594c:	defffa04 	addi	sp,sp,-24
 4015950:	df000515 	stw	fp,20(sp)
 4015954:	df000504 	addi	fp,sp,20
 4015958:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 401595c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 4015960:	e0bfff17 	ldw	r2,-4(fp)
 4015964:	1000021e 	bne	r2,zero,4015970 <OSMboxAccept+0x24>
        return ((void *)0);
 4015968:	0005883a 	mov	r2,zero
 401596c:	00001906 	br	40159d4 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 4015970:	e0bfff17 	ldw	r2,-4(fp)
 4015974:	10800003 	ldbu	r2,0(r2)
 4015978:	10803fcc 	andi	r2,r2,255
 401597c:	10800060 	cmpeqi	r2,r2,1
 4015980:	1000021e 	bne	r2,zero,401598c <OSMboxAccept+0x40>
        return ((void *)0);
 4015984:	0005883a 	mov	r2,zero
 4015988:	00001206 	br	40159d4 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401598c:	0005303a 	rdctl	r2,status
 4015990:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015994:	e0fffd17 	ldw	r3,-12(fp)
 4015998:	00bfff84 	movi	r2,-2
 401599c:	1884703a 	and	r2,r3,r2
 40159a0:	1001703a 	wrctl	status,r2
  
  return context;
 40159a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40159a8:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 40159ac:	e0bfff17 	ldw	r2,-4(fp)
 40159b0:	10800117 	ldw	r2,4(r2)
 40159b4:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 40159b8:	e0bfff17 	ldw	r2,-4(fp)
 40159bc:	10000115 	stw	zero,4(r2)
 40159c0:	e0bffb17 	ldw	r2,-20(fp)
 40159c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40159c8:	e0bffe17 	ldw	r2,-8(fp)
 40159cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 40159d0:	e0bffc17 	ldw	r2,-16(fp)
}
 40159d4:	e037883a 	mov	sp,fp
 40159d8:	df000017 	ldw	fp,0(sp)
 40159dc:	dec00104 	addi	sp,sp,4
 40159e0:	f800283a 	ret

040159e4 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 40159e4:	defff904 	addi	sp,sp,-28
 40159e8:	dfc00615 	stw	ra,24(sp)
 40159ec:	df000515 	stw	fp,20(sp)
 40159f0:	df000504 	addi	fp,sp,20
 40159f4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40159f8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40159fc:	d0a75203 	ldbu	r2,-25272(gp)
 4015a00:	10803fcc 	andi	r2,r2,255
 4015a04:	10000226 	beq	r2,zero,4015a10 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4015a08:	0005883a 	mov	r2,zero
 4015a0c:	00002506 	br	4015aa4 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015a10:	0005303a 	rdctl	r2,status
 4015a14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015a18:	e0fffe17 	ldw	r3,-8(fp)
 4015a1c:	00bfff84 	movi	r2,-2
 4015a20:	1884703a 	and	r2,r3,r2
 4015a24:	1001703a 	wrctl	status,r2
  
  return context;
 4015a28:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4015a2c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4015a30:	d0a75117 	ldw	r2,-25276(gp)
 4015a34:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4015a38:	d0a75117 	ldw	r2,-25276(gp)
 4015a3c:	10000326 	beq	r2,zero,4015a4c <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4015a40:	d0a75117 	ldw	r2,-25276(gp)
 4015a44:	10800117 	ldw	r2,4(r2)
 4015a48:	d0a75115 	stw	r2,-25276(gp)
 4015a4c:	e0bffb17 	ldw	r2,-20(fp)
 4015a50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015a54:	e0bffc17 	ldw	r2,-16(fp)
 4015a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 4015a5c:	e0bffd17 	ldw	r2,-12(fp)
 4015a60:	10000f26 	beq	r2,zero,4015aa0 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 4015a64:	e0bffd17 	ldw	r2,-12(fp)
 4015a68:	00c00044 	movi	r3,1
 4015a6c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 4015a70:	e0bffd17 	ldw	r2,-12(fp)
 4015a74:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 4015a78:	e0bffd17 	ldw	r2,-12(fp)
 4015a7c:	e0ffff17 	ldw	r3,-4(fp)
 4015a80:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 4015a84:	e0bffd17 	ldw	r2,-12(fp)
 4015a88:	00c00fc4 	movi	r3,63
 4015a8c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4015a90:	e0bffd17 	ldw	r2,-12(fp)
 4015a94:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 4015a98:	e13ffd17 	ldw	r4,-12(fp)
 4015a9c:	40135380 	call	4013538 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 4015aa0:	e0bffd17 	ldw	r2,-12(fp)
}
 4015aa4:	e037883a 	mov	sp,fp
 4015aa8:	dfc00117 	ldw	ra,4(sp)
 4015aac:	df000017 	ldw	fp,0(sp)
 4015ab0:	dec00204 	addi	sp,sp,8
 4015ab4:	f800283a 	ret

04015ab8 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4015ab8:	defff304 	addi	sp,sp,-52
 4015abc:	dfc00c15 	stw	ra,48(sp)
 4015ac0:	df000b15 	stw	fp,44(sp)
 4015ac4:	df000b04 	addi	fp,sp,44
 4015ac8:	e13ffd15 	stw	r4,-12(fp)
 4015acc:	2805883a 	mov	r2,r5
 4015ad0:	e1bfff15 	stw	r6,-4(fp)
 4015ad4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4015ad8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4015adc:	e0bfff17 	ldw	r2,-4(fp)
 4015ae0:	1000021e 	bne	r2,zero,4015aec <OSMboxDel+0x34>
        return (pevent);
 4015ae4:	e0bffd17 	ldw	r2,-12(fp)
 4015ae8:	00007e06 	br	4015ce4 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4015aec:	e0bffd17 	ldw	r2,-12(fp)
 4015af0:	1000051e 	bne	r2,zero,4015b08 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4015af4:	e0bfff17 	ldw	r2,-4(fp)
 4015af8:	00c00104 	movi	r3,4
 4015afc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4015b00:	e0bffd17 	ldw	r2,-12(fp)
 4015b04:	00007706 	br	4015ce4 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 4015b08:	e0bffd17 	ldw	r2,-12(fp)
 4015b0c:	10800003 	ldbu	r2,0(r2)
 4015b10:	10803fcc 	andi	r2,r2,255
 4015b14:	10800060 	cmpeqi	r2,r2,1
 4015b18:	1000051e 	bne	r2,zero,4015b30 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4015b1c:	e0bfff17 	ldw	r2,-4(fp)
 4015b20:	00c00044 	movi	r3,1
 4015b24:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4015b28:	e0bffd17 	ldw	r2,-12(fp)
 4015b2c:	00006d06 	br	4015ce4 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4015b30:	d0a75203 	ldbu	r2,-25272(gp)
 4015b34:	10803fcc 	andi	r2,r2,255
 4015b38:	10000526 	beq	r2,zero,4015b50 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4015b3c:	e0bfff17 	ldw	r2,-4(fp)
 4015b40:	00c003c4 	movi	r3,15
 4015b44:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4015b48:	e0bffd17 	ldw	r2,-12(fp)
 4015b4c:	00006506 	br	4015ce4 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015b50:	0005303a 	rdctl	r2,status
 4015b54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015b58:	e0fffc17 	ldw	r3,-16(fp)
 4015b5c:	00bfff84 	movi	r2,-2
 4015b60:	1884703a 	and	r2,r3,r2
 4015b64:	1001703a 	wrctl	status,r2
  
  return context;
 4015b68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4015b6c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 4015b70:	e0bffd17 	ldw	r2,-12(fp)
 4015b74:	10800283 	ldbu	r2,10(r2)
 4015b78:	10803fcc 	andi	r2,r2,255
 4015b7c:	10000326 	beq	r2,zero,4015b8c <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4015b80:	00800044 	movi	r2,1
 4015b84:	e0bff505 	stb	r2,-44(fp)
 4015b88:	00000106 	br	4015b90 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4015b8c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4015b90:	e0bffe03 	ldbu	r2,-8(fp)
 4015b94:	10000326 	beq	r2,zero,4015ba4 <OSMboxDel+0xec>
 4015b98:	10800060 	cmpeqi	r2,r2,1
 4015b9c:	1000281e 	bne	r2,zero,4015c40 <OSMboxDel+0x188>
 4015ba0:	00004506 	br	4015cb8 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 4015ba4:	e0bff503 	ldbu	r2,-44(fp)
 4015ba8:	1000161e 	bne	r2,zero,4015c04 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4015bac:	e0bffd17 	ldw	r2,-12(fp)
 4015bb0:	00c00fc4 	movi	r3,63
 4015bb4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4015bb8:	e0bffd17 	ldw	r2,-12(fp)
 4015bbc:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 4015bc0:	e0bffd17 	ldw	r2,-12(fp)
 4015bc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 4015bc8:	d0e75117 	ldw	r3,-25276(gp)
 4015bcc:	e0bffd17 	ldw	r2,-12(fp)
 4015bd0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 4015bd4:	e0bffd17 	ldw	r2,-12(fp)
 4015bd8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 4015bdc:	e0bffd17 	ldw	r2,-12(fp)
 4015be0:	d0a75115 	stw	r2,-25276(gp)
 4015be4:	e0bff717 	ldw	r2,-36(fp)
 4015be8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015bec:	e0bff817 	ldw	r2,-32(fp)
 4015bf0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 4015bf4:	e0bfff17 	ldw	r2,-4(fp)
 4015bf8:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 4015bfc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 4015c00:	00003706 	br	4015ce0 <OSMboxDel+0x228>
 4015c04:	e0bff717 	ldw	r2,-36(fp)
 4015c08:	e0bff915 	stw	r2,-28(fp)
 4015c0c:	e0bff917 	ldw	r2,-28(fp)
 4015c10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 4015c14:	e0bfff17 	ldw	r2,-4(fp)
 4015c18:	00c01244 	movi	r3,73
 4015c1c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 4015c20:	e0bffd17 	ldw	r2,-12(fp)
 4015c24:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4015c28:	00002d06 	br	4015ce0 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 4015c2c:	000f883a 	mov	r7,zero
 4015c30:	01800084 	movi	r6,2
 4015c34:	000b883a 	mov	r5,zero
 4015c38:	e13ffd17 	ldw	r4,-12(fp)
 4015c3c:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 4015c40:	e0bffd17 	ldw	r2,-12(fp)
 4015c44:	10800283 	ldbu	r2,10(r2)
 4015c48:	10803fcc 	andi	r2,r2,255
 4015c4c:	103ff71e 	bne	r2,zero,4015c2c <__alt_mem_onchip_memory2_0+0xfc013c2c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4015c50:	e0bffd17 	ldw	r2,-12(fp)
 4015c54:	00c00fc4 	movi	r3,63
 4015c58:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4015c5c:	e0bffd17 	ldw	r2,-12(fp)
 4015c60:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4015c64:	e0bffd17 	ldw	r2,-12(fp)
 4015c68:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4015c6c:	d0e75117 	ldw	r3,-25276(gp)
 4015c70:	e0bffd17 	ldw	r2,-12(fp)
 4015c74:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4015c78:	e0bffd17 	ldw	r2,-12(fp)
 4015c7c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4015c80:	e0bffd17 	ldw	r2,-12(fp)
 4015c84:	d0a75115 	stw	r2,-25276(gp)
 4015c88:	e0bff717 	ldw	r2,-36(fp)
 4015c8c:	e0bffa15 	stw	r2,-24(fp)
 4015c90:	e0bffa17 	ldw	r2,-24(fp)
 4015c94:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4015c98:	e0bff503 	ldbu	r2,-44(fp)
 4015c9c:	10800058 	cmpnei	r2,r2,1
 4015ca0:	1000011e 	bne	r2,zero,4015ca8 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4015ca4:	40139d40 	call	40139d4 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 4015ca8:	e0bfff17 	ldw	r2,-4(fp)
 4015cac:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 4015cb0:	e03ff615 	stw	zero,-40(fp)
             break;
 4015cb4:	00000a06 	br	4015ce0 <OSMboxDel+0x228>
 4015cb8:	e0bff717 	ldw	r2,-36(fp)
 4015cbc:	e0bffb15 	stw	r2,-20(fp)
 4015cc0:	e0bffb17 	ldw	r2,-20(fp)
 4015cc4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 4015cc8:	e0bfff17 	ldw	r2,-4(fp)
 4015ccc:	00c001c4 	movi	r3,7
 4015cd0:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 4015cd4:	e0bffd17 	ldw	r2,-12(fp)
 4015cd8:	e0bff615 	stw	r2,-40(fp)
             break;
 4015cdc:	0001883a 	nop
    }
    return (pevent_return);
 4015ce0:	e0bff617 	ldw	r2,-40(fp)
}
 4015ce4:	e037883a 	mov	sp,fp
 4015ce8:	dfc00117 	ldw	ra,4(sp)
 4015cec:	df000017 	ldw	fp,0(sp)
 4015cf0:	dec00204 	addi	sp,sp,8
 4015cf4:	f800283a 	ret

04015cf8 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4015cf8:	defff404 	addi	sp,sp,-48
 4015cfc:	dfc00b15 	stw	ra,44(sp)
 4015d00:	df000a15 	stw	fp,40(sp)
 4015d04:	df000a04 	addi	fp,sp,40
 4015d08:	e13ffd15 	stw	r4,-12(fp)
 4015d0c:	2805883a 	mov	r2,r5
 4015d10:	e1bfff15 	stw	r6,-4(fp)
 4015d14:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4015d18:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4015d1c:	e0bfff17 	ldw	r2,-4(fp)
 4015d20:	1000021e 	bne	r2,zero,4015d2c <OSMboxPend+0x34>
        return ((void *)0);
 4015d24:	0005883a 	mov	r2,zero
 4015d28:	00007b06 	br	4015f18 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4015d2c:	e0bffd17 	ldw	r2,-12(fp)
 4015d30:	1000051e 	bne	r2,zero,4015d48 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4015d34:	e0bfff17 	ldw	r2,-4(fp)
 4015d38:	00c00104 	movi	r3,4
 4015d3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4015d40:	0005883a 	mov	r2,zero
 4015d44:	00007406 	br	4015f18 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 4015d48:	e0bffd17 	ldw	r2,-12(fp)
 4015d4c:	10800003 	ldbu	r2,0(r2)
 4015d50:	10803fcc 	andi	r2,r2,255
 4015d54:	10800060 	cmpeqi	r2,r2,1
 4015d58:	1000051e 	bne	r2,zero,4015d70 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4015d5c:	e0bfff17 	ldw	r2,-4(fp)
 4015d60:	00c00044 	movi	r3,1
 4015d64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4015d68:	0005883a 	mov	r2,zero
 4015d6c:	00006a06 	br	4015f18 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4015d70:	d0a75203 	ldbu	r2,-25272(gp)
 4015d74:	10803fcc 	andi	r2,r2,255
 4015d78:	10000526 	beq	r2,zero,4015d90 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4015d7c:	e0bfff17 	ldw	r2,-4(fp)
 4015d80:	00c00084 	movi	r3,2
 4015d84:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4015d88:	0005883a 	mov	r2,zero
 4015d8c:	00006206 	br	4015f18 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4015d90:	d0a74403 	ldbu	r2,-25328(gp)
 4015d94:	10803fcc 	andi	r2,r2,255
 4015d98:	10000526 	beq	r2,zero,4015db0 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4015d9c:	e0bfff17 	ldw	r2,-4(fp)
 4015da0:	00c00344 	movi	r3,13
 4015da4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4015da8:	0005883a 	mov	r2,zero
 4015dac:	00005a06 	br	4015f18 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015db0:	0005303a 	rdctl	r2,status
 4015db4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015db8:	e0fffc17 	ldw	r3,-16(fp)
 4015dbc:	00bfff84 	movi	r2,-2
 4015dc0:	1884703a 	and	r2,r3,r2
 4015dc4:	1001703a 	wrctl	status,r2
  
  return context;
 4015dc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4015dcc:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 4015dd0:	e0bffd17 	ldw	r2,-12(fp)
 4015dd4:	10800117 	ldw	r2,4(r2)
 4015dd8:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 4015ddc:	e0bff617 	ldw	r2,-40(fp)
 4015de0:	10000a26 	beq	r2,zero,4015e0c <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 4015de4:	e0bffd17 	ldw	r2,-12(fp)
 4015de8:	10000115 	stw	zero,4(r2)
 4015dec:	e0bff717 	ldw	r2,-36(fp)
 4015df0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015df4:	e0bff817 	ldw	r2,-32(fp)
 4015df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4015dfc:	e0bfff17 	ldw	r2,-4(fp)
 4015e00:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 4015e04:	e0bff617 	ldw	r2,-40(fp)
 4015e08:	00004306 	br	4015f18 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 4015e0c:	d0a75317 	ldw	r2,-25268(gp)
 4015e10:	d0e75317 	ldw	r3,-25268(gp)
 4015e14:	18c00c03 	ldbu	r3,48(r3)
 4015e18:	18c00094 	ori	r3,r3,2
 4015e1c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4015e20:	d0a75317 	ldw	r2,-25268(gp)
 4015e24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 4015e28:	d0a75317 	ldw	r2,-25268(gp)
 4015e2c:	e0fffe0b 	ldhu	r3,-8(fp)
 4015e30:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4015e34:	e13ffd17 	ldw	r4,-12(fp)
 4015e38:	40131200 	call	4013120 <OS_EventTaskWait>
 4015e3c:	e0bff717 	ldw	r2,-36(fp)
 4015e40:	e0bffb15 	stw	r2,-20(fp)
 4015e44:	e0bffb17 	ldw	r2,-20(fp)
 4015e48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 4015e4c:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015e50:	0005303a 	rdctl	r2,status
 4015e54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015e58:	e0fff917 	ldw	r3,-28(fp)
 4015e5c:	00bfff84 	movi	r2,-2
 4015e60:	1884703a 	and	r2,r3,r2
 4015e64:	1001703a 	wrctl	status,r2
  
  return context;
 4015e68:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4015e6c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4015e70:	d0a75317 	ldw	r2,-25268(gp)
 4015e74:	10800c43 	ldbu	r2,49(r2)
 4015e78:	10803fcc 	andi	r2,r2,255
 4015e7c:	10000326 	beq	r2,zero,4015e8c <OSMboxPend+0x194>
 4015e80:	108000a0 	cmpeqi	r2,r2,2
 4015e84:	1000071e 	bne	r2,zero,4015ea4 <OSMboxPend+0x1ac>
 4015e88:	00000b06 	br	4015eb8 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 4015e8c:	d0a75317 	ldw	r2,-25268(gp)
 4015e90:	10800917 	ldw	r2,36(r2)
 4015e94:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 4015e98:	e0bfff17 	ldw	r2,-4(fp)
 4015e9c:	10000005 	stb	zero,0(r2)
             break;
 4015ea0:	00000e06 	br	4015edc <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4015ea4:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4015ea8:	e0bfff17 	ldw	r2,-4(fp)
 4015eac:	00c00384 	movi	r3,14
 4015eb0:	10c00005 	stb	r3,0(r2)
             break;
 4015eb4:	00000906 	br	4015edc <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4015eb8:	d0a75317 	ldw	r2,-25268(gp)
 4015ebc:	e17ffd17 	ldw	r5,-12(fp)
 4015ec0:	1009883a 	mov	r4,r2
 4015ec4:	40133800 	call	4013380 <OS_EventTaskRemove>
             pmsg = (void *)0;
 4015ec8:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4015ecc:	e0bfff17 	ldw	r2,-4(fp)
 4015ed0:	00c00284 	movi	r3,10
 4015ed4:	10c00005 	stb	r3,0(r2)
             break;
 4015ed8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4015edc:	d0a75317 	ldw	r2,-25268(gp)
 4015ee0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4015ee4:	d0a75317 	ldw	r2,-25268(gp)
 4015ee8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4015eec:	d0a75317 	ldw	r2,-25268(gp)
 4015ef0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4015ef4:	d0a75317 	ldw	r2,-25268(gp)
 4015ef8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4015efc:	d0a75317 	ldw	r2,-25268(gp)
 4015f00:	10000915 	stw	zero,36(r2)
 4015f04:	e0bff717 	ldw	r2,-36(fp)
 4015f08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015f0c:	e0bffa17 	ldw	r2,-24(fp)
 4015f10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4015f14:	e0bff617 	ldw	r2,-40(fp)
}
 4015f18:	e037883a 	mov	sp,fp
 4015f1c:	dfc00117 	ldw	ra,4(sp)
 4015f20:	df000017 	ldw	fp,0(sp)
 4015f24:	dec00204 	addi	sp,sp,8
 4015f28:	f800283a 	ret

04015f2c <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4015f2c:	defff604 	addi	sp,sp,-40
 4015f30:	dfc00915 	stw	ra,36(sp)
 4015f34:	df000815 	stw	fp,32(sp)
 4015f38:	df000804 	addi	fp,sp,32
 4015f3c:	e13ffd15 	stw	r4,-12(fp)
 4015f40:	2805883a 	mov	r2,r5
 4015f44:	e1bfff15 	stw	r6,-4(fp)
 4015f48:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4015f4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4015f50:	e0bfff17 	ldw	r2,-4(fp)
 4015f54:	1000021e 	bne	r2,zero,4015f60 <OSMboxPendAbort+0x34>
        return (0);
 4015f58:	0005883a 	mov	r2,zero
 4015f5c:	00004906 	br	4016084 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4015f60:	e0bffd17 	ldw	r2,-12(fp)
 4015f64:	1000051e 	bne	r2,zero,4015f7c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4015f68:	e0bfff17 	ldw	r2,-4(fp)
 4015f6c:	00c00104 	movi	r3,4
 4015f70:	10c00005 	stb	r3,0(r2)
        return (0);
 4015f74:	0005883a 	mov	r2,zero
 4015f78:	00004206 	br	4016084 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 4015f7c:	e0bffd17 	ldw	r2,-12(fp)
 4015f80:	10800003 	ldbu	r2,0(r2)
 4015f84:	10803fcc 	andi	r2,r2,255
 4015f88:	10800060 	cmpeqi	r2,r2,1
 4015f8c:	1000051e 	bne	r2,zero,4015fa4 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4015f90:	e0bfff17 	ldw	r2,-4(fp)
 4015f94:	00c00044 	movi	r3,1
 4015f98:	10c00005 	stb	r3,0(r2)
        return (0);
 4015f9c:	0005883a 	mov	r2,zero
 4015fa0:	00003806 	br	4016084 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015fa4:	0005303a 	rdctl	r2,status
 4015fa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015fac:	e0fffc17 	ldw	r3,-16(fp)
 4015fb0:	00bfff84 	movi	r2,-2
 4015fb4:	1884703a 	and	r2,r3,r2
 4015fb8:	1001703a 	wrctl	status,r2
  
  return context;
 4015fbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4015fc0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 4015fc4:	e0bffd17 	ldw	r2,-12(fp)
 4015fc8:	10800283 	ldbu	r2,10(r2)
 4015fcc:	10803fcc 	andi	r2,r2,255
 4015fd0:	10002526 	beq	r2,zero,4016068 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 4015fd4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4015fd8:	e0bffe03 	ldbu	r2,-8(fp)
 4015fdc:	10800060 	cmpeqi	r2,r2,1
 4015fe0:	10000e26 	beq	r2,zero,401601c <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 4015fe4:	00000806 	br	4016008 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 4015fe8:	01c00084 	movi	r7,2
 4015fec:	01800084 	movi	r6,2
 4015ff0:	000b883a 	mov	r5,zero
 4015ff4:	e13ffd17 	ldw	r4,-12(fp)
 4015ff8:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                     nbr_tasks++;
 4015ffc:	e0bff803 	ldbu	r2,-32(fp)
 4016000:	10800044 	addi	r2,r2,1
 4016004:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 4016008:	e0bffd17 	ldw	r2,-12(fp)
 401600c:	10800283 	ldbu	r2,10(r2)
 4016010:	10803fcc 	andi	r2,r2,255
 4016014:	103ff41e 	bne	r2,zero,4015fe8 <__alt_mem_onchip_memory2_0+0xfc013fe8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4016018:	00000906 	br	4016040 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 401601c:	01c00084 	movi	r7,2
 4016020:	01800084 	movi	r6,2
 4016024:	000b883a 	mov	r5,zero
 4016028:	e13ffd17 	ldw	r4,-12(fp)
 401602c:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 nbr_tasks++;
 4016030:	e0bff803 	ldbu	r2,-32(fp)
 4016034:	10800044 	addi	r2,r2,1
 4016038:	e0bff805 	stb	r2,-32(fp)
                 break;
 401603c:	0001883a 	nop
 4016040:	e0bff917 	ldw	r2,-28(fp)
 4016044:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016048:	e0bffa17 	ldw	r2,-24(fp)
 401604c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 4016050:	40139d40 	call	40139d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4016054:	e0bfff17 	ldw	r2,-4(fp)
 4016058:	00c00384 	movi	r3,14
 401605c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 4016060:	e0bff803 	ldbu	r2,-32(fp)
 4016064:	00000706 	br	4016084 <OSMboxPendAbort+0x158>
 4016068:	e0bff917 	ldw	r2,-28(fp)
 401606c:	e0bffb15 	stw	r2,-20(fp)
 4016070:	e0bffb17 	ldw	r2,-20(fp)
 4016074:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4016078:	e0bfff17 	ldw	r2,-4(fp)
 401607c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 4016080:	0005883a 	mov	r2,zero
}
 4016084:	e037883a 	mov	sp,fp
 4016088:	dfc00117 	ldw	ra,4(sp)
 401608c:	df000017 	ldw	fp,0(sp)
 4016090:	dec00204 	addi	sp,sp,8
 4016094:	f800283a 	ret

04016098 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 4016098:	defff704 	addi	sp,sp,-36
 401609c:	dfc00815 	stw	ra,32(sp)
 40160a0:	df000715 	stw	fp,28(sp)
 40160a4:	df000704 	addi	fp,sp,28
 40160a8:	e13ffe15 	stw	r4,-8(fp)
 40160ac:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40160b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40160b4:	e0bffe17 	ldw	r2,-8(fp)
 40160b8:	1000021e 	bne	r2,zero,40160c4 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40160bc:	00800104 	movi	r2,4
 40160c0:	00003406 	br	4016194 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 40160c4:	e0bfff17 	ldw	r2,-4(fp)
 40160c8:	1000021e 	bne	r2,zero,40160d4 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 40160cc:	008000c4 	movi	r2,3
 40160d0:	00003006 	br	4016194 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 40160d4:	e0bffe17 	ldw	r2,-8(fp)
 40160d8:	10800003 	ldbu	r2,0(r2)
 40160dc:	10803fcc 	andi	r2,r2,255
 40160e0:	10800060 	cmpeqi	r2,r2,1
 40160e4:	1000021e 	bne	r2,zero,40160f0 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 40160e8:	00800044 	movi	r2,1
 40160ec:	00002906 	br	4016194 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40160f0:	0005303a 	rdctl	r2,status
 40160f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40160f8:	e0fffd17 	ldw	r3,-12(fp)
 40160fc:	00bfff84 	movi	r2,-2
 4016100:	1884703a 	and	r2,r3,r2
 4016104:	1001703a 	wrctl	status,r2
  
  return context;
 4016108:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 401610c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 4016110:	e0bffe17 	ldw	r2,-8(fp)
 4016114:	10800283 	ldbu	r2,10(r2)
 4016118:	10803fcc 	andi	r2,r2,255
 401611c:	10000c26 	beq	r2,zero,4016150 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 4016120:	000f883a 	mov	r7,zero
 4016124:	01800084 	movi	r6,2
 4016128:	e17fff17 	ldw	r5,-4(fp)
 401612c:	e13ffe17 	ldw	r4,-8(fp)
 4016130:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4016134:	e0bff917 	ldw	r2,-28(fp)
 4016138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401613c:	e0bffa17 	ldw	r2,-24(fp)
 4016140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4016144:	40139d40 	call	40139d4 <OS_Sched>
        return (OS_ERR_NONE);
 4016148:	0005883a 	mov	r2,zero
 401614c:	00001106 	br	4016194 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 4016150:	e0bffe17 	ldw	r2,-8(fp)
 4016154:	10800117 	ldw	r2,4(r2)
 4016158:	10000626 	beq	r2,zero,4016174 <OSMboxPost+0xdc>
 401615c:	e0bff917 	ldw	r2,-28(fp)
 4016160:	e0bffb15 	stw	r2,-20(fp)
 4016164:	e0bffb17 	ldw	r2,-20(fp)
 4016168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 401616c:	00800504 	movi	r2,20
 4016170:	00000806 	br	4016194 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 4016174:	e0bffe17 	ldw	r2,-8(fp)
 4016178:	e0ffff17 	ldw	r3,-4(fp)
 401617c:	10c00115 	stw	r3,4(r2)
 4016180:	e0bff917 	ldw	r2,-28(fp)
 4016184:	e0bffc15 	stw	r2,-16(fp)
 4016188:	e0bffc17 	ldw	r2,-16(fp)
 401618c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4016190:	0005883a 	mov	r2,zero
}
 4016194:	e037883a 	mov	sp,fp
 4016198:	dfc00117 	ldw	ra,4(sp)
 401619c:	df000017 	ldw	fp,0(sp)
 40161a0:	dec00204 	addi	sp,sp,8
 40161a4:	f800283a 	ret

040161a8 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 40161a8:	defff604 	addi	sp,sp,-40
 40161ac:	dfc00915 	stw	ra,36(sp)
 40161b0:	df000815 	stw	fp,32(sp)
 40161b4:	df000804 	addi	fp,sp,32
 40161b8:	e13ffd15 	stw	r4,-12(fp)
 40161bc:	e17ffe15 	stw	r5,-8(fp)
 40161c0:	3005883a 	mov	r2,r6
 40161c4:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40161c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40161cc:	e0bffd17 	ldw	r2,-12(fp)
 40161d0:	1000021e 	bne	r2,zero,40161dc <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 40161d4:	00800104 	movi	r2,4
 40161d8:	00004506 	br	40162f0 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 40161dc:	e0bffe17 	ldw	r2,-8(fp)
 40161e0:	1000021e 	bne	r2,zero,40161ec <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 40161e4:	008000c4 	movi	r2,3
 40161e8:	00004106 	br	40162f0 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 40161ec:	e0bffd17 	ldw	r2,-12(fp)
 40161f0:	10800003 	ldbu	r2,0(r2)
 40161f4:	10803fcc 	andi	r2,r2,255
 40161f8:	10800060 	cmpeqi	r2,r2,1
 40161fc:	1000021e 	bne	r2,zero,4016208 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 4016200:	00800044 	movi	r2,1
 4016204:	00003a06 	br	40162f0 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016208:	0005303a 	rdctl	r2,status
 401620c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016210:	e0fffc17 	ldw	r3,-16(fp)
 4016214:	00bfff84 	movi	r2,-2
 4016218:	1884703a 	and	r2,r3,r2
 401621c:	1001703a 	wrctl	status,r2
  
  return context;
 4016220:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4016224:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 4016228:	e0bffd17 	ldw	r2,-12(fp)
 401622c:	10800283 	ldbu	r2,10(r2)
 4016230:	10803fcc 	andi	r2,r2,255
 4016234:	10001d26 	beq	r2,zero,40162ac <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4016238:	e0bfff03 	ldbu	r2,-4(fp)
 401623c:	1080004c 	andi	r2,r2,1
 4016240:	10000b26 	beq	r2,zero,4016270 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 4016244:	00000506 	br	401625c <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 4016248:	000f883a 	mov	r7,zero
 401624c:	01800084 	movi	r6,2
 4016250:	e17ffe17 	ldw	r5,-8(fp)
 4016254:	e13ffd17 	ldw	r4,-12(fp)
 4016258:	4012f880 	call	4012f88 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 401625c:	e0bffd17 	ldw	r2,-12(fp)
 4016260:	10800283 	ldbu	r2,10(r2)
 4016264:	10803fcc 	andi	r2,r2,255
 4016268:	103ff71e 	bne	r2,zero,4016248 <__alt_mem_onchip_memory2_0+0xfc014248>
 401626c:	00000506 	br	4016284 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 4016270:	000f883a 	mov	r7,zero
 4016274:	01800084 	movi	r6,2
 4016278:	e17ffe17 	ldw	r5,-8(fp)
 401627c:	e13ffd17 	ldw	r4,-12(fp)
 4016280:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4016284:	e0bff817 	ldw	r2,-32(fp)
 4016288:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401628c:	e0bff917 	ldw	r2,-28(fp)
 4016290:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4016294:	e0bfff03 	ldbu	r2,-4(fp)
 4016298:	1080010c 	andi	r2,r2,4
 401629c:	1000011e 	bne	r2,zero,40162a4 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 40162a0:	40139d40 	call	40139d4 <OS_Sched>
        }
        return (OS_ERR_NONE);
 40162a4:	0005883a 	mov	r2,zero
 40162a8:	00001106 	br	40162f0 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 40162ac:	e0bffd17 	ldw	r2,-12(fp)
 40162b0:	10800117 	ldw	r2,4(r2)
 40162b4:	10000626 	beq	r2,zero,40162d0 <OSMboxPostOpt+0x128>
 40162b8:	e0bff817 	ldw	r2,-32(fp)
 40162bc:	e0bffa15 	stw	r2,-24(fp)
 40162c0:	e0bffa17 	ldw	r2,-24(fp)
 40162c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 40162c8:	00800504 	movi	r2,20
 40162cc:	00000806 	br	40162f0 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 40162d0:	e0bffd17 	ldw	r2,-12(fp)
 40162d4:	e0fffe17 	ldw	r3,-8(fp)
 40162d8:	10c00115 	stw	r3,4(r2)
 40162dc:	e0bff817 	ldw	r2,-32(fp)
 40162e0:	e0bffb15 	stw	r2,-20(fp)
 40162e4:	e0bffb17 	ldw	r2,-20(fp)
 40162e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40162ec:	0005883a 	mov	r2,zero
}
 40162f0:	e037883a 	mov	sp,fp
 40162f4:	dfc00117 	ldw	ra,4(sp)
 40162f8:	df000017 	ldw	fp,0(sp)
 40162fc:	dec00204 	addi	sp,sp,8
 4016300:	f800283a 	ret

04016304 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 4016304:	defff704 	addi	sp,sp,-36
 4016308:	df000815 	stw	fp,32(sp)
 401630c:	df000804 	addi	fp,sp,32
 4016310:	e13ffe15 	stw	r4,-8(fp)
 4016314:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4016318:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401631c:	e0bffe17 	ldw	r2,-8(fp)
 4016320:	1000021e 	bne	r2,zero,401632c <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4016324:	00800104 	movi	r2,4
 4016328:	00003606 	br	4016404 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 401632c:	e0bfff17 	ldw	r2,-4(fp)
 4016330:	1000021e 	bne	r2,zero,401633c <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4016334:	00800244 	movi	r2,9
 4016338:	00003206 	br	4016404 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 401633c:	e0bffe17 	ldw	r2,-8(fp)
 4016340:	10800003 	ldbu	r2,0(r2)
 4016344:	10803fcc 	andi	r2,r2,255
 4016348:	10800060 	cmpeqi	r2,r2,1
 401634c:	1000021e 	bne	r2,zero,4016358 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4016350:	00800044 	movi	r2,1
 4016354:	00002b06 	br	4016404 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016358:	0005303a 	rdctl	r2,status
 401635c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016360:	e0fffd17 	ldw	r3,-12(fp)
 4016364:	00bfff84 	movi	r2,-2
 4016368:	1884703a 	and	r2,r3,r2
 401636c:	1001703a 	wrctl	status,r2
  
  return context;
 4016370:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4016374:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 4016378:	e0bffe17 	ldw	r2,-8(fp)
 401637c:	10c00283 	ldbu	r3,10(r2)
 4016380:	e0bfff17 	ldw	r2,-4(fp)
 4016384:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 4016388:	e0bffe17 	ldw	r2,-8(fp)
 401638c:	108002c4 	addi	r2,r2,11
 4016390:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 4016394:	e0bfff17 	ldw	r2,-4(fp)
 4016398:	10800104 	addi	r2,r2,4
 401639c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40163a0:	e03ff805 	stb	zero,-32(fp)
 40163a4:	00000b06 	br	40163d4 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 40163a8:	e0bffa17 	ldw	r2,-24(fp)
 40163ac:	10c00044 	addi	r3,r2,1
 40163b0:	e0fffa15 	stw	r3,-24(fp)
 40163b4:	e0fff917 	ldw	r3,-28(fp)
 40163b8:	19000044 	addi	r4,r3,1
 40163bc:	e13ff915 	stw	r4,-28(fp)
 40163c0:	18c00003 	ldbu	r3,0(r3)
 40163c4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40163c8:	e0bff803 	ldbu	r2,-32(fp)
 40163cc:	10800044 	addi	r2,r2,1
 40163d0:	e0bff805 	stb	r2,-32(fp)
 40163d4:	e0bff803 	ldbu	r2,-32(fp)
 40163d8:	108000f0 	cmpltui	r2,r2,3
 40163dc:	103ff21e 	bne	r2,zero,40163a8 <__alt_mem_onchip_memory2_0+0xfc0143a8>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 40163e0:	e0bffe17 	ldw	r2,-8(fp)
 40163e4:	10c00117 	ldw	r3,4(r2)
 40163e8:	e0bfff17 	ldw	r2,-4(fp)
 40163ec:	10c00015 	stw	r3,0(r2)
 40163f0:	e0bffb17 	ldw	r2,-20(fp)
 40163f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40163f8:	e0bffc17 	ldw	r2,-16(fp)
 40163fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4016400:	0005883a 	mov	r2,zero
}
 4016404:	e037883a 	mov	sp,fp
 4016408:	df000017 	ldw	fp,0(sp)
 401640c:	dec00104 	addi	sp,sp,4
 4016410:	f800283a 	ret

04016414 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4016414:	defff404 	addi	sp,sp,-48
 4016418:	df000b15 	stw	fp,44(sp)
 401641c:	df000b04 	addi	fp,sp,44
 4016420:	e13ffc15 	stw	r4,-16(fp)
 4016424:	e17ffd15 	stw	r5,-12(fp)
 4016428:	e1bffe15 	stw	r6,-8(fp)
 401642c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4016430:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4016434:	e0bfff17 	ldw	r2,-4(fp)
 4016438:	1000021e 	bne	r2,zero,4016444 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 401643c:	0005883a 	mov	r2,zero
 4016440:	00006506 	br	40165d8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4016444:	e0bffc17 	ldw	r2,-16(fp)
 4016448:	1000051e 	bne	r2,zero,4016460 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 401644c:	e0bfff17 	ldw	r2,-4(fp)
 4016450:	00c01884 	movi	r3,98
 4016454:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4016458:	0005883a 	mov	r2,zero
 401645c:	00005e06 	br	40165d8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4016460:	e0bffc17 	ldw	r2,-16(fp)
 4016464:	108000cc 	andi	r2,r2,3
 4016468:	10000526 	beq	r2,zero,4016480 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 401646c:	e0bfff17 	ldw	r2,-4(fp)
 4016470:	00c01884 	movi	r3,98
 4016474:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4016478:	0005883a 	mov	r2,zero
 401647c:	00005606 	br	40165d8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4016480:	e0bffd17 	ldw	r2,-12(fp)
 4016484:	108000a8 	cmpgeui	r2,r2,2
 4016488:	1000051e 	bne	r2,zero,40164a0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 401648c:	e0bfff17 	ldw	r2,-4(fp)
 4016490:	00c016c4 	movi	r3,91
 4016494:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4016498:	0005883a 	mov	r2,zero
 401649c:	00004e06 	br	40165d8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 40164a0:	e0bffe17 	ldw	r2,-8(fp)
 40164a4:	10800128 	cmpgeui	r2,r2,4
 40164a8:	1000051e 	bne	r2,zero,40164c0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 40164ac:	e0bfff17 	ldw	r2,-4(fp)
 40164b0:	00c01704 	movi	r3,92
 40164b4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40164b8:	0005883a 	mov	r2,zero
 40164bc:	00004606 	br	40165d8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40164c0:	0005303a 	rdctl	r2,status
 40164c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40164c8:	e0fffb17 	ldw	r3,-20(fp)
 40164cc:	00bfff84 	movi	r2,-2
 40164d0:	1884703a 	and	r2,r3,r2
 40164d4:	1001703a 	wrctl	status,r2
  
  return context;
 40164d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40164dc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 40164e0:	d0a74d17 	ldw	r2,-25292(gp)
 40164e4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 40164e8:	d0a74d17 	ldw	r2,-25292(gp)
 40164ec:	10000326 	beq	r2,zero,40164fc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 40164f0:	d0a74d17 	ldw	r2,-25292(gp)
 40164f4:	10800117 	ldw	r2,4(r2)
 40164f8:	d0a74d15 	stw	r2,-25292(gp)
 40164fc:	e0bff817 	ldw	r2,-32(fp)
 4016500:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016504:	e0bff917 	ldw	r2,-28(fp)
 4016508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 401650c:	e0bffa17 	ldw	r2,-24(fp)
 4016510:	1000051e 	bne	r2,zero,4016528 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 4016514:	e0bfff17 	ldw	r2,-4(fp)
 4016518:	00c01684 	movi	r3,90
 401651c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4016520:	0005883a 	mov	r2,zero
 4016524:	00002c06 	br	40165d8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 4016528:	e0bffc17 	ldw	r2,-16(fp)
 401652c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4016530:	e0fffc17 	ldw	r3,-16(fp)
 4016534:	e0bffe17 	ldw	r2,-8(fp)
 4016538:	1885883a 	add	r2,r3,r2
 401653c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 4016540:	e03ff715 	stw	zero,-36(fp)
 4016544:	00000c06 	br	4016578 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 4016548:	e0bff617 	ldw	r2,-40(fp)
 401654c:	e0fff517 	ldw	r3,-44(fp)
 4016550:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 4016554:	e0bff517 	ldw	r2,-44(fp)
 4016558:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 401655c:	e0fff517 	ldw	r3,-44(fp)
 4016560:	e0bffe17 	ldw	r2,-8(fp)
 4016564:	1885883a 	add	r2,r3,r2
 4016568:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 401656c:	e0bff717 	ldw	r2,-36(fp)
 4016570:	10800044 	addi	r2,r2,1
 4016574:	e0bff715 	stw	r2,-36(fp)
 4016578:	e0bffd17 	ldw	r2,-12(fp)
 401657c:	10bfffc4 	addi	r2,r2,-1
 4016580:	e0fff717 	ldw	r3,-36(fp)
 4016584:	18bff036 	bltu	r3,r2,4016548 <__alt_mem_onchip_memory2_0+0xfc014548>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 4016588:	e0bff617 	ldw	r2,-40(fp)
 401658c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4016590:	e0bffa17 	ldw	r2,-24(fp)
 4016594:	e0fffc17 	ldw	r3,-16(fp)
 4016598:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 401659c:	e0bffa17 	ldw	r2,-24(fp)
 40165a0:	e0fffc17 	ldw	r3,-16(fp)
 40165a4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 40165a8:	e0bffa17 	ldw	r2,-24(fp)
 40165ac:	e0fffd17 	ldw	r3,-12(fp)
 40165b0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 40165b4:	e0bffa17 	ldw	r2,-24(fp)
 40165b8:	e0fffd17 	ldw	r3,-12(fp)
 40165bc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 40165c0:	e0bffa17 	ldw	r2,-24(fp)
 40165c4:	e0fffe17 	ldw	r3,-8(fp)
 40165c8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 40165cc:	e0bfff17 	ldw	r2,-4(fp)
 40165d0:	10000005 	stb	zero,0(r2)
    return (pmem);
 40165d4:	e0bffa17 	ldw	r2,-24(fp)
}
 40165d8:	e037883a 	mov	sp,fp
 40165dc:	df000017 	ldw	fp,0(sp)
 40165e0:	dec00104 	addi	sp,sp,4
 40165e4:	f800283a 	ret

040165e8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 40165e8:	defff804 	addi	sp,sp,-32
 40165ec:	df000715 	stw	fp,28(sp)
 40165f0:	df000704 	addi	fp,sp,28
 40165f4:	e13ffe15 	stw	r4,-8(fp)
 40165f8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40165fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4016600:	e0bfff17 	ldw	r2,-4(fp)
 4016604:	1000021e 	bne	r2,zero,4016610 <OSMemGet+0x28>
        return ((void *)0);
 4016608:	0005883a 	mov	r2,zero
 401660c:	00002e06 	br	40166c8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4016610:	e0bffe17 	ldw	r2,-8(fp)
 4016614:	1000051e 	bne	r2,zero,401662c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4016618:	e0bfff17 	ldw	r2,-4(fp)
 401661c:	00c01804 	movi	r3,96
 4016620:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4016624:	0005883a 	mov	r2,zero
 4016628:	00002706 	br	40166c8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401662c:	0005303a 	rdctl	r2,status
 4016630:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016634:	e0fffd17 	ldw	r3,-12(fp)
 4016638:	00bfff84 	movi	r2,-2
 401663c:	1884703a 	and	r2,r3,r2
 4016640:	1001703a 	wrctl	status,r2
  
  return context;
 4016644:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4016648:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 401664c:	e0bffe17 	ldw	r2,-8(fp)
 4016650:	10800417 	ldw	r2,16(r2)
 4016654:	10001426 	beq	r2,zero,40166a8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 4016658:	e0bffe17 	ldw	r2,-8(fp)
 401665c:	10800117 	ldw	r2,4(r2)
 4016660:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 4016664:	e0bffb17 	ldw	r2,-20(fp)
 4016668:	10c00017 	ldw	r3,0(r2)
 401666c:	e0bffe17 	ldw	r2,-8(fp)
 4016670:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4016674:	e0bffe17 	ldw	r2,-8(fp)
 4016678:	10800417 	ldw	r2,16(r2)
 401667c:	10ffffc4 	addi	r3,r2,-1
 4016680:	e0bffe17 	ldw	r2,-8(fp)
 4016684:	10c00415 	stw	r3,16(r2)
 4016688:	e0bff917 	ldw	r2,-28(fp)
 401668c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016690:	e0bffa17 	ldw	r2,-24(fp)
 4016694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4016698:	e0bfff17 	ldw	r2,-4(fp)
 401669c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 40166a0:	e0bffb17 	ldw	r2,-20(fp)
 40166a4:	00000806 	br	40166c8 <OSMemGet+0xe0>
 40166a8:	e0bff917 	ldw	r2,-28(fp)
 40166ac:	e0bffc15 	stw	r2,-16(fp)
 40166b0:	e0bffc17 	ldw	r2,-16(fp)
 40166b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 40166b8:	e0bfff17 	ldw	r2,-4(fp)
 40166bc:	00c01744 	movi	r3,93
 40166c0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 40166c4:	0005883a 	mov	r2,zero
}
 40166c8:	e037883a 	mov	sp,fp
 40166cc:	df000017 	ldw	fp,0(sp)
 40166d0:	dec00104 	addi	sp,sp,4
 40166d4:	f800283a 	ret

040166d8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 40166d8:	defff704 	addi	sp,sp,-36
 40166dc:	dfc00815 	stw	ra,32(sp)
 40166e0:	df000715 	stw	fp,28(sp)
 40166e4:	df000704 	addi	fp,sp,28
 40166e8:	e13ffd15 	stw	r4,-12(fp)
 40166ec:	e17ffe15 	stw	r5,-8(fp)
 40166f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40166f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40166f8:	e0bfff17 	ldw	r2,-4(fp)
 40166fc:	1000021e 	bne	r2,zero,4016708 <OSMemNameGet+0x30>
        return (0);
 4016700:	0005883a 	mov	r2,zero
 4016704:	00002b06 	br	40167b4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4016708:	e0bffd17 	ldw	r2,-12(fp)
 401670c:	1000051e 	bne	r2,zero,4016724 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4016710:	e0bfff17 	ldw	r2,-4(fp)
 4016714:	00c01804 	movi	r3,96
 4016718:	10c00005 	stb	r3,0(r2)
        return (0);
 401671c:	0005883a 	mov	r2,zero
 4016720:	00002406 	br	40167b4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4016724:	e0bffe17 	ldw	r2,-8(fp)
 4016728:	1000051e 	bne	r2,zero,4016740 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 401672c:	e0bfff17 	ldw	r2,-4(fp)
 4016730:	00c00304 	movi	r3,12
 4016734:	10c00005 	stb	r3,0(r2)
        return (0);
 4016738:	0005883a 	mov	r2,zero
 401673c:	00001d06 	br	40167b4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4016740:	d0a75203 	ldbu	r2,-25272(gp)
 4016744:	10803fcc 	andi	r2,r2,255
 4016748:	10000526 	beq	r2,zero,4016760 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 401674c:	e0bfff17 	ldw	r2,-4(fp)
 4016750:	00c00444 	movi	r3,17
 4016754:	10c00005 	stb	r3,0(r2)
        return (0);
 4016758:	0005883a 	mov	r2,zero
 401675c:	00001506 	br	40167b4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016760:	0005303a 	rdctl	r2,status
 4016764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016768:	e0fffb17 	ldw	r3,-20(fp)
 401676c:	00bfff84 	movi	r2,-2
 4016770:	1884703a 	and	r2,r3,r2
 4016774:	1001703a 	wrctl	status,r2
  
  return context;
 4016778:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 401677c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4016780:	e0bffd17 	ldw	r2,-12(fp)
 4016784:	10800504 	addi	r2,r2,20
 4016788:	100b883a 	mov	r5,r2
 401678c:	e13ffe17 	ldw	r4,-8(fp)
 4016790:	4013b180 	call	4013b18 <OS_StrCopy>
 4016794:	e0bffa05 	stb	r2,-24(fp)
 4016798:	e0bff917 	ldw	r2,-28(fp)
 401679c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40167a0:	e0bffc17 	ldw	r2,-16(fp)
 40167a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40167a8:	e0bfff17 	ldw	r2,-4(fp)
 40167ac:	10000005 	stb	zero,0(r2)
    return (len);
 40167b0:	e0bffa03 	ldbu	r2,-24(fp)
}
 40167b4:	e037883a 	mov	sp,fp
 40167b8:	dfc00117 	ldw	ra,4(sp)
 40167bc:	df000017 	ldw	fp,0(sp)
 40167c0:	dec00204 	addi	sp,sp,8
 40167c4:	f800283a 	ret

040167c8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 40167c8:	defff604 	addi	sp,sp,-40
 40167cc:	dfc00915 	stw	ra,36(sp)
 40167d0:	df000815 	stw	fp,32(sp)
 40167d4:	df000804 	addi	fp,sp,32
 40167d8:	e13ffd15 	stw	r4,-12(fp)
 40167dc:	e17ffe15 	stw	r5,-8(fp)
 40167e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40167e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40167e8:	e0bfff17 	ldw	r2,-4(fp)
 40167ec:	10003526 	beq	r2,zero,40168c4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 40167f0:	e0bffd17 	ldw	r2,-12(fp)
 40167f4:	1000041e 	bne	r2,zero,4016808 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 40167f8:	e0bfff17 	ldw	r2,-4(fp)
 40167fc:	00c01804 	movi	r3,96
 4016800:	10c00005 	stb	r3,0(r2)
        return;
 4016804:	00003006 	br	40168c8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4016808:	e0bffe17 	ldw	r2,-8(fp)
 401680c:	1000041e 	bne	r2,zero,4016820 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4016810:	e0bfff17 	ldw	r2,-4(fp)
 4016814:	00c00304 	movi	r3,12
 4016818:	10c00005 	stb	r3,0(r2)
        return;
 401681c:	00002a06 	br	40168c8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4016820:	d0a75203 	ldbu	r2,-25272(gp)
 4016824:	10803fcc 	andi	r2,r2,255
 4016828:	10000426 	beq	r2,zero,401683c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 401682c:	e0bfff17 	ldw	r2,-4(fp)
 4016830:	00c00484 	movi	r3,18
 4016834:	10c00005 	stb	r3,0(r2)
        return;
 4016838:	00002306 	br	40168c8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401683c:	0005303a 	rdctl	r2,status
 4016840:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016844:	e0fffc17 	ldw	r3,-16(fp)
 4016848:	00bfff84 	movi	r2,-2
 401684c:	1884703a 	and	r2,r3,r2
 4016850:	1001703a 	wrctl	status,r2
  
  return context;
 4016854:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4016858:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 401685c:	e13ffe17 	ldw	r4,-8(fp)
 4016860:	4013b8c0 	call	4013b8c <OS_StrLen>
 4016864:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4016868:	e0bffa03 	ldbu	r2,-24(fp)
 401686c:	10800830 	cmpltui	r2,r2,32
 4016870:	1000081e 	bne	r2,zero,4016894 <OSMemNameSet+0xcc>
 4016874:	e0bff817 	ldw	r2,-32(fp)
 4016878:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401687c:	e0bff917 	ldw	r2,-28(fp)
 4016880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4016884:	e0bfff17 	ldw	r2,-4(fp)
 4016888:	00c018c4 	movi	r3,99
 401688c:	10c00005 	stb	r3,0(r2)
        return;
 4016890:	00000d06 	br	40168c8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4016894:	e0bffd17 	ldw	r2,-12(fp)
 4016898:	10800504 	addi	r2,r2,20
 401689c:	e17ffe17 	ldw	r5,-8(fp)
 40168a0:	1009883a 	mov	r4,r2
 40168a4:	4013b180 	call	4013b18 <OS_StrCopy>
 40168a8:	e0bff817 	ldw	r2,-32(fp)
 40168ac:	e0bffb15 	stw	r2,-20(fp)
 40168b0:	e0bffb17 	ldw	r2,-20(fp)
 40168b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40168b8:	e0bfff17 	ldw	r2,-4(fp)
 40168bc:	10000005 	stb	zero,0(r2)
 40168c0:	00000106 	br	40168c8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 40168c4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 40168c8:	e037883a 	mov	sp,fp
 40168cc:	dfc00117 	ldw	ra,4(sp)
 40168d0:	df000017 	ldw	fp,0(sp)
 40168d4:	dec00204 	addi	sp,sp,8
 40168d8:	f800283a 	ret

040168dc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 40168dc:	defff904 	addi	sp,sp,-28
 40168e0:	df000615 	stw	fp,24(sp)
 40168e4:	df000604 	addi	fp,sp,24
 40168e8:	e13ffe15 	stw	r4,-8(fp)
 40168ec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40168f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 40168f4:	e0bffe17 	ldw	r2,-8(fp)
 40168f8:	1000021e 	bne	r2,zero,4016904 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 40168fc:	00801804 	movi	r2,96
 4016900:	00002806 	br	40169a4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4016904:	e0bfff17 	ldw	r2,-4(fp)
 4016908:	1000021e 	bne	r2,zero,4016914 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 401690c:	008017c4 	movi	r2,95
 4016910:	00002406 	br	40169a4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016914:	0005303a 	rdctl	r2,status
 4016918:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401691c:	e0fffd17 	ldw	r3,-12(fp)
 4016920:	00bfff84 	movi	r2,-2
 4016924:	1884703a 	and	r2,r3,r2
 4016928:	1001703a 	wrctl	status,r2
  
  return context;
 401692c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4016930:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4016934:	e0bffe17 	ldw	r2,-8(fp)
 4016938:	10c00417 	ldw	r3,16(r2)
 401693c:	e0bffe17 	ldw	r2,-8(fp)
 4016940:	10800317 	ldw	r2,12(r2)
 4016944:	18800636 	bltu	r3,r2,4016960 <OSMemPut+0x84>
 4016948:	e0bffa17 	ldw	r2,-24(fp)
 401694c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016950:	e0bffb17 	ldw	r2,-20(fp)
 4016954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4016958:	00801784 	movi	r2,94
 401695c:	00001106 	br	40169a4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4016960:	e0bffe17 	ldw	r2,-8(fp)
 4016964:	10c00117 	ldw	r3,4(r2)
 4016968:	e0bfff17 	ldw	r2,-4(fp)
 401696c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4016970:	e0bffe17 	ldw	r2,-8(fp)
 4016974:	e0ffff17 	ldw	r3,-4(fp)
 4016978:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 401697c:	e0bffe17 	ldw	r2,-8(fp)
 4016980:	10800417 	ldw	r2,16(r2)
 4016984:	10c00044 	addi	r3,r2,1
 4016988:	e0bffe17 	ldw	r2,-8(fp)
 401698c:	10c00415 	stw	r3,16(r2)
 4016990:	e0bffa17 	ldw	r2,-24(fp)
 4016994:	e0bffc15 	stw	r2,-16(fp)
 4016998:	e0bffc17 	ldw	r2,-16(fp)
 401699c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 40169a0:	0005883a 	mov	r2,zero
}
 40169a4:	e037883a 	mov	sp,fp
 40169a8:	df000017 	ldw	fp,0(sp)
 40169ac:	dec00104 	addi	sp,sp,4
 40169b0:	f800283a 	ret

040169b4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 40169b4:	defffa04 	addi	sp,sp,-24
 40169b8:	df000515 	stw	fp,20(sp)
 40169bc:	df000504 	addi	fp,sp,20
 40169c0:	e13ffe15 	stw	r4,-8(fp)
 40169c4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40169c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 40169cc:	e0bffe17 	ldw	r2,-8(fp)
 40169d0:	1000021e 	bne	r2,zero,40169dc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 40169d4:	00801804 	movi	r2,96
 40169d8:	00002c06 	br	4016a8c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 40169dc:	e0bfff17 	ldw	r2,-4(fp)
 40169e0:	1000021e 	bne	r2,zero,40169ec <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 40169e4:	00801844 	movi	r2,97
 40169e8:	00002806 	br	4016a8c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40169ec:	0005303a 	rdctl	r2,status
 40169f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40169f4:	e0fffc17 	ldw	r3,-16(fp)
 40169f8:	00bfff84 	movi	r2,-2
 40169fc:	1884703a 	and	r2,r3,r2
 4016a00:	1001703a 	wrctl	status,r2
  
  return context;
 4016a04:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4016a08:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4016a0c:	e0bffe17 	ldw	r2,-8(fp)
 4016a10:	10c00017 	ldw	r3,0(r2)
 4016a14:	e0bfff17 	ldw	r2,-4(fp)
 4016a18:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4016a1c:	e0bffe17 	ldw	r2,-8(fp)
 4016a20:	10c00117 	ldw	r3,4(r2)
 4016a24:	e0bfff17 	ldw	r2,-4(fp)
 4016a28:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4016a2c:	e0bffe17 	ldw	r2,-8(fp)
 4016a30:	10c00217 	ldw	r3,8(r2)
 4016a34:	e0bfff17 	ldw	r2,-4(fp)
 4016a38:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4016a3c:	e0bffe17 	ldw	r2,-8(fp)
 4016a40:	10c00317 	ldw	r3,12(r2)
 4016a44:	e0bfff17 	ldw	r2,-4(fp)
 4016a48:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4016a4c:	e0bffe17 	ldw	r2,-8(fp)
 4016a50:	10c00417 	ldw	r3,16(r2)
 4016a54:	e0bfff17 	ldw	r2,-4(fp)
 4016a58:	10c00415 	stw	r3,16(r2)
 4016a5c:	e0bffb17 	ldw	r2,-20(fp)
 4016a60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016a64:	e0bffd17 	ldw	r2,-12(fp)
 4016a68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4016a6c:	e0bfff17 	ldw	r2,-4(fp)
 4016a70:	10c00317 	ldw	r3,12(r2)
 4016a74:	e0bfff17 	ldw	r2,-4(fp)
 4016a78:	10800417 	ldw	r2,16(r2)
 4016a7c:	1887c83a 	sub	r3,r3,r2
 4016a80:	e0bfff17 	ldw	r2,-4(fp)
 4016a84:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4016a88:	0005883a 	mov	r2,zero
}
 4016a8c:	e037883a 	mov	sp,fp
 4016a90:	df000017 	ldw	fp,0(sp)
 4016a94:	dec00104 	addi	sp,sp,4
 4016a98:	f800283a 	ret

04016a9c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4016a9c:	defffc04 	addi	sp,sp,-16
 4016aa0:	dfc00315 	stw	ra,12(sp)
 4016aa4:	df000215 	stw	fp,8(sp)
 4016aa8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4016aac:	01430c04 	movi	r5,3120
 4016ab0:	010100b4 	movhi	r4,1026
 4016ab4:	211a9804 	addi	r4,r4,27232
 4016ab8:	40139180 	call	4013918 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4016abc:	008100b4 	movhi	r2,1026
 4016ac0:	109a9804 	addi	r2,r2,27232
 4016ac4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4016ac8:	e03fff0d 	sth	zero,-4(fp)
 4016acc:	00001306 	br	4016b1c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4016ad0:	e0bfff0b 	ldhu	r2,-4(fp)
 4016ad4:	10800044 	addi	r2,r2,1
 4016ad8:	10c00d24 	muli	r3,r2,52
 4016adc:	008100b4 	movhi	r2,1026
 4016ae0:	109a9804 	addi	r2,r2,27232
 4016ae4:	1887883a 	add	r3,r3,r2
 4016ae8:	e0bffe17 	ldw	r2,-8(fp)
 4016aec:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4016af0:	e0bffe17 	ldw	r2,-8(fp)
 4016af4:	00c00fc4 	movi	r3,63
 4016af8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4016afc:	e0bffe17 	ldw	r2,-8(fp)
 4016b00:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4016b04:	e0bffe17 	ldw	r2,-8(fp)
 4016b08:	10800d04 	addi	r2,r2,52
 4016b0c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4016b10:	e0bfff0b 	ldhu	r2,-4(fp)
 4016b14:	10800044 	addi	r2,r2,1
 4016b18:	e0bfff0d 	sth	r2,-4(fp)
 4016b1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4016b20:	10800ef0 	cmpltui	r2,r2,59
 4016b24:	103fea1e 	bne	r2,zero,4016ad0 <__alt_mem_onchip_memory2_0+0xfc014ad0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4016b28:	e0bffe17 	ldw	r2,-8(fp)
 4016b2c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4016b30:	e0bffe17 	ldw	r2,-8(fp)
 4016b34:	00c00fc4 	movi	r3,63
 4016b38:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4016b3c:	e0bffe17 	ldw	r2,-8(fp)
 4016b40:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4016b44:	008100b4 	movhi	r2,1026
 4016b48:	109a9804 	addi	r2,r2,27232
 4016b4c:	d0a74d15 	stw	r2,-25292(gp)
#endif
}
 4016b50:	0001883a 	nop
 4016b54:	e037883a 	mov	sp,fp
 4016b58:	dfc00117 	ldw	ra,4(sp)
 4016b5c:	df000017 	ldw	fp,0(sp)
 4016b60:	dec00204 	addi	sp,sp,8
 4016b64:	f800283a 	ret

04016b68 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4016b68:	defff804 	addi	sp,sp,-32
 4016b6c:	df000715 	stw	fp,28(sp)
 4016b70:	df000704 	addi	fp,sp,28
 4016b74:	e13ffe15 	stw	r4,-8(fp)
 4016b78:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4016b7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4016b80:	e0bfff17 	ldw	r2,-4(fp)
 4016b84:	1000021e 	bne	r2,zero,4016b90 <OSQAccept+0x28>
        return ((void *)0);
 4016b88:	0005883a 	mov	r2,zero
 4016b8c:	00004206 	br	4016c98 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4016b90:	e0bffe17 	ldw	r2,-8(fp)
 4016b94:	1000051e 	bne	r2,zero,4016bac <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4016b98:	e0bfff17 	ldw	r2,-4(fp)
 4016b9c:	00c00104 	movi	r3,4
 4016ba0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4016ba4:	0005883a 	mov	r2,zero
 4016ba8:	00003b06 	br	4016c98 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4016bac:	e0bffe17 	ldw	r2,-8(fp)
 4016bb0:	10800003 	ldbu	r2,0(r2)
 4016bb4:	10803fcc 	andi	r2,r2,255
 4016bb8:	108000a0 	cmpeqi	r2,r2,2
 4016bbc:	1000051e 	bne	r2,zero,4016bd4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4016bc0:	e0bfff17 	ldw	r2,-4(fp)
 4016bc4:	00c00044 	movi	r3,1
 4016bc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4016bcc:	0005883a 	mov	r2,zero
 4016bd0:	00003106 	br	4016c98 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016bd4:	0005303a 	rdctl	r2,status
 4016bd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016bdc:	e0fffd17 	ldw	r3,-12(fp)
 4016be0:	00bfff84 	movi	r2,-2
 4016be4:	1884703a 	and	r2,r3,r2
 4016be8:	1001703a 	wrctl	status,r2
  
  return context;
 4016bec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4016bf0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4016bf4:	e0bffe17 	ldw	r2,-8(fp)
 4016bf8:	10800117 	ldw	r2,4(r2)
 4016bfc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4016c00:	e0bffc17 	ldw	r2,-16(fp)
 4016c04:	1080058b 	ldhu	r2,22(r2)
 4016c08:	10bfffcc 	andi	r2,r2,65535
 4016c0c:	10001926 	beq	r2,zero,4016c74 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4016c10:	e0bffc17 	ldw	r2,-16(fp)
 4016c14:	10800417 	ldw	r2,16(r2)
 4016c18:	11000104 	addi	r4,r2,4
 4016c1c:	e0fffc17 	ldw	r3,-16(fp)
 4016c20:	19000415 	stw	r4,16(r3)
 4016c24:	10800017 	ldw	r2,0(r2)
 4016c28:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4016c2c:	e0bffc17 	ldw	r2,-16(fp)
 4016c30:	1080058b 	ldhu	r2,22(r2)
 4016c34:	10bfffc4 	addi	r2,r2,-1
 4016c38:	1007883a 	mov	r3,r2
 4016c3c:	e0bffc17 	ldw	r2,-16(fp)
 4016c40:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4016c44:	e0bffc17 	ldw	r2,-16(fp)
 4016c48:	10c00417 	ldw	r3,16(r2)
 4016c4c:	e0bffc17 	ldw	r2,-16(fp)
 4016c50:	10800217 	ldw	r2,8(r2)
 4016c54:	1880041e 	bne	r3,r2,4016c68 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 4016c58:	e0bffc17 	ldw	r2,-16(fp)
 4016c5c:	10c00117 	ldw	r3,4(r2)
 4016c60:	e0bffc17 	ldw	r2,-16(fp)
 4016c64:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4016c68:	e0bfff17 	ldw	r2,-4(fp)
 4016c6c:	10000005 	stb	zero,0(r2)
 4016c70:	00000406 	br	4016c84 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4016c74:	e0bfff17 	ldw	r2,-4(fp)
 4016c78:	00c007c4 	movi	r3,31
 4016c7c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4016c80:	e03ff915 	stw	zero,-28(fp)
 4016c84:	e0bffa17 	ldw	r2,-24(fp)
 4016c88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016c8c:	e0bffb17 	ldw	r2,-20(fp)
 4016c90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4016c94:	e0bff917 	ldw	r2,-28(fp)
}
 4016c98:	e037883a 	mov	sp,fp
 4016c9c:	df000017 	ldw	fp,0(sp)
 4016ca0:	dec00104 	addi	sp,sp,4
 4016ca4:	f800283a 	ret

04016ca8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4016ca8:	defff404 	addi	sp,sp,-48
 4016cac:	dfc00b15 	stw	ra,44(sp)
 4016cb0:	df000a15 	stw	fp,40(sp)
 4016cb4:	df000a04 	addi	fp,sp,40
 4016cb8:	e13ffe15 	stw	r4,-8(fp)
 4016cbc:	2805883a 	mov	r2,r5
 4016cc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4016cc4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4016cc8:	d0a75203 	ldbu	r2,-25272(gp)
 4016ccc:	10803fcc 	andi	r2,r2,255
 4016cd0:	10000226 	beq	r2,zero,4016cdc <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4016cd4:	0005883a 	mov	r2,zero
 4016cd8:	00005906 	br	4016e40 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016cdc:	0005303a 	rdctl	r2,status
 4016ce0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016ce4:	e0fffd17 	ldw	r3,-12(fp)
 4016ce8:	00bfff84 	movi	r2,-2
 4016cec:	1884703a 	and	r2,r3,r2
 4016cf0:	1001703a 	wrctl	status,r2
  
  return context;
 4016cf4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4016cf8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4016cfc:	d0a75117 	ldw	r2,-25276(gp)
 4016d00:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4016d04:	d0a75117 	ldw	r2,-25276(gp)
 4016d08:	10000326 	beq	r2,zero,4016d18 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4016d0c:	d0a75117 	ldw	r2,-25276(gp)
 4016d10:	10800117 	ldw	r2,4(r2)
 4016d14:	d0a75115 	stw	r2,-25276(gp)
 4016d18:	e0bff717 	ldw	r2,-36(fp)
 4016d1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016d20:	e0bff817 	ldw	r2,-32(fp)
 4016d24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 4016d28:	e0bff617 	ldw	r2,-40(fp)
 4016d2c:	10004326 	beq	r2,zero,4016e3c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016d30:	0005303a 	rdctl	r2,status
 4016d34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016d38:	e0fff917 	ldw	r3,-28(fp)
 4016d3c:	00bfff84 	movi	r2,-2
 4016d40:	1884703a 	and	r2,r3,r2
 4016d44:	1001703a 	wrctl	status,r2
  
  return context;
 4016d48:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 4016d4c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4016d50:	d0a74f17 	ldw	r2,-25284(gp)
 4016d54:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4016d58:	e0bffb17 	ldw	r2,-20(fp)
 4016d5c:	10002d26 	beq	r2,zero,4016e14 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4016d60:	d0a74f17 	ldw	r2,-25284(gp)
 4016d64:	10800017 	ldw	r2,0(r2)
 4016d68:	d0a74f15 	stw	r2,-25284(gp)
 4016d6c:	e0bff717 	ldw	r2,-36(fp)
 4016d70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016d74:	e0bffa17 	ldw	r2,-24(fp)
 4016d78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 4016d7c:	e0bffb17 	ldw	r2,-20(fp)
 4016d80:	e0fffe17 	ldw	r3,-8(fp)
 4016d84:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4016d88:	e0bfff0b 	ldhu	r2,-4(fp)
 4016d8c:	1085883a 	add	r2,r2,r2
 4016d90:	1085883a 	add	r2,r2,r2
 4016d94:	1007883a 	mov	r3,r2
 4016d98:	e0bffe17 	ldw	r2,-8(fp)
 4016d9c:	10c7883a 	add	r3,r2,r3
 4016da0:	e0bffb17 	ldw	r2,-20(fp)
 4016da4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 4016da8:	e0bffb17 	ldw	r2,-20(fp)
 4016dac:	e0fffe17 	ldw	r3,-8(fp)
 4016db0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4016db4:	e0bffb17 	ldw	r2,-20(fp)
 4016db8:	e0fffe17 	ldw	r3,-8(fp)
 4016dbc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 4016dc0:	e0bffb17 	ldw	r2,-20(fp)
 4016dc4:	e0ffff0b 	ldhu	r3,-4(fp)
 4016dc8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 4016dcc:	e0bffb17 	ldw	r2,-20(fp)
 4016dd0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4016dd4:	e0bff617 	ldw	r2,-40(fp)
 4016dd8:	00c00084 	movi	r3,2
 4016ddc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 4016de0:	e0bff617 	ldw	r2,-40(fp)
 4016de4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 4016de8:	e0bff617 	ldw	r2,-40(fp)
 4016dec:	e0fffb17 	ldw	r3,-20(fp)
 4016df0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4016df4:	e0bff617 	ldw	r2,-40(fp)
 4016df8:	00c00fc4 	movi	r3,63
 4016dfc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4016e00:	e0bff617 	ldw	r2,-40(fp)
 4016e04:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 4016e08:	e13ff617 	ldw	r4,-40(fp)
 4016e0c:	40135380 	call	4013538 <OS_EventWaitListInit>
 4016e10:	00000a06 	br	4016e3c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4016e14:	d0e75117 	ldw	r3,-25276(gp)
 4016e18:	e0bff617 	ldw	r2,-40(fp)
 4016e1c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 4016e20:	e0bff617 	ldw	r2,-40(fp)
 4016e24:	d0a75115 	stw	r2,-25276(gp)
 4016e28:	e0bff717 	ldw	r2,-36(fp)
 4016e2c:	e0bffc15 	stw	r2,-16(fp)
 4016e30:	e0bffc17 	ldw	r2,-16(fp)
 4016e34:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 4016e38:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 4016e3c:	e0bff617 	ldw	r2,-40(fp)
}
 4016e40:	e037883a 	mov	sp,fp
 4016e44:	dfc00117 	ldw	ra,4(sp)
 4016e48:	df000017 	ldw	fp,0(sp)
 4016e4c:	dec00204 	addi	sp,sp,8
 4016e50:	f800283a 	ret

04016e54 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4016e54:	defff204 	addi	sp,sp,-56
 4016e58:	dfc00d15 	stw	ra,52(sp)
 4016e5c:	df000c15 	stw	fp,48(sp)
 4016e60:	df000c04 	addi	fp,sp,48
 4016e64:	e13ffd15 	stw	r4,-12(fp)
 4016e68:	2805883a 	mov	r2,r5
 4016e6c:	e1bfff15 	stw	r6,-4(fp)
 4016e70:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4016e74:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4016e78:	e0bfff17 	ldw	r2,-4(fp)
 4016e7c:	1000021e 	bne	r2,zero,4016e88 <OSQDel+0x34>
        return (pevent);
 4016e80:	e0bffd17 	ldw	r2,-12(fp)
 4016e84:	00008e06 	br	40170c0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4016e88:	e0bffd17 	ldw	r2,-12(fp)
 4016e8c:	1000051e 	bne	r2,zero,4016ea4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4016e90:	e0bfff17 	ldw	r2,-4(fp)
 4016e94:	00c00104 	movi	r3,4
 4016e98:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4016e9c:	e0bffd17 	ldw	r2,-12(fp)
 4016ea0:	00008706 	br	40170c0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4016ea4:	e0bffd17 	ldw	r2,-12(fp)
 4016ea8:	10800003 	ldbu	r2,0(r2)
 4016eac:	10803fcc 	andi	r2,r2,255
 4016eb0:	108000a0 	cmpeqi	r2,r2,2
 4016eb4:	1000051e 	bne	r2,zero,4016ecc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4016eb8:	e0bfff17 	ldw	r2,-4(fp)
 4016ebc:	00c00044 	movi	r3,1
 4016ec0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4016ec4:	e0bffd17 	ldw	r2,-12(fp)
 4016ec8:	00007d06 	br	40170c0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4016ecc:	d0a75203 	ldbu	r2,-25272(gp)
 4016ed0:	10803fcc 	andi	r2,r2,255
 4016ed4:	10000526 	beq	r2,zero,4016eec <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4016ed8:	e0bfff17 	ldw	r2,-4(fp)
 4016edc:	00c003c4 	movi	r3,15
 4016ee0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4016ee4:	e0bffd17 	ldw	r2,-12(fp)
 4016ee8:	00007506 	br	40170c0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016eec:	0005303a 	rdctl	r2,status
 4016ef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016ef4:	e0fffc17 	ldw	r3,-16(fp)
 4016ef8:	00bfff84 	movi	r2,-2
 4016efc:	1884703a 	and	r2,r3,r2
 4016f00:	1001703a 	wrctl	status,r2
  
  return context;
 4016f04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4016f08:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4016f0c:	e0bffd17 	ldw	r2,-12(fp)
 4016f10:	10800283 	ldbu	r2,10(r2)
 4016f14:	10803fcc 	andi	r2,r2,255
 4016f18:	10000326 	beq	r2,zero,4016f28 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4016f1c:	00800044 	movi	r2,1
 4016f20:	e0bff405 	stb	r2,-48(fp)
 4016f24:	00000106 	br	4016f2c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4016f28:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4016f2c:	e0bffe03 	ldbu	r2,-8(fp)
 4016f30:	10000326 	beq	r2,zero,4016f40 <OSQDel+0xec>
 4016f34:	10800060 	cmpeqi	r2,r2,1
 4016f38:	1000301e 	bne	r2,zero,4016ffc <OSQDel+0x1a8>
 4016f3c:	00005506 	br	4017094 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 4016f40:	e0bff403 	ldbu	r2,-48(fp)
 4016f44:	10001e1e 	bne	r2,zero,4016fc0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4016f48:	e0bffd17 	ldw	r2,-12(fp)
 4016f4c:	00c00fc4 	movi	r3,63
 4016f50:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4016f54:	e0bffd17 	ldw	r2,-12(fp)
 4016f58:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 4016f5c:	e0bffd17 	ldw	r2,-12(fp)
 4016f60:	10800117 	ldw	r2,4(r2)
 4016f64:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 4016f68:	d0e74f17 	ldw	r3,-25284(gp)
 4016f6c:	e0bff817 	ldw	r2,-32(fp)
 4016f70:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 4016f74:	e0bff817 	ldw	r2,-32(fp)
 4016f78:	d0a74f15 	stw	r2,-25284(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4016f7c:	e0bffd17 	ldw	r2,-12(fp)
 4016f80:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4016f84:	d0e75117 	ldw	r3,-25276(gp)
 4016f88:	e0bffd17 	ldw	r2,-12(fp)
 4016f8c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4016f90:	e0bffd17 	ldw	r2,-12(fp)
 4016f94:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4016f98:	e0bffd17 	ldw	r2,-12(fp)
 4016f9c:	d0a75115 	stw	r2,-25276(gp)
 4016fa0:	e0bff617 	ldw	r2,-40(fp)
 4016fa4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016fa8:	e0bff717 	ldw	r2,-36(fp)
 4016fac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4016fb0:	e0bfff17 	ldw	r2,-4(fp)
 4016fb4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 4016fb8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4016fbc:	00003f06 	br	40170bc <OSQDel+0x268>
 4016fc0:	e0bff617 	ldw	r2,-40(fp)
 4016fc4:	e0bff915 	stw	r2,-28(fp)
 4016fc8:	e0bff917 	ldw	r2,-28(fp)
 4016fcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4016fd0:	e0bfff17 	ldw	r2,-4(fp)
 4016fd4:	00c01244 	movi	r3,73
 4016fd8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4016fdc:	e0bffd17 	ldw	r2,-12(fp)
 4016fe0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 4016fe4:	00003506 	br	40170bc <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 4016fe8:	000f883a 	mov	r7,zero
 4016fec:	01800104 	movi	r6,4
 4016ff0:	000b883a 	mov	r5,zero
 4016ff4:	e13ffd17 	ldw	r4,-12(fp)
 4016ff8:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4016ffc:	e0bffd17 	ldw	r2,-12(fp)
 4017000:	10800283 	ldbu	r2,10(r2)
 4017004:	10803fcc 	andi	r2,r2,255
 4017008:	103ff71e 	bne	r2,zero,4016fe8 <__alt_mem_onchip_memory2_0+0xfc014fe8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 401700c:	e0bffd17 	ldw	r2,-12(fp)
 4017010:	00c00fc4 	movi	r3,63
 4017014:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4017018:	e0bffd17 	ldw	r2,-12(fp)
 401701c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 4017020:	e0bffd17 	ldw	r2,-12(fp)
 4017024:	10800117 	ldw	r2,4(r2)
 4017028:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 401702c:	d0e74f17 	ldw	r3,-25284(gp)
 4017030:	e0bff817 	ldw	r2,-32(fp)
 4017034:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 4017038:	e0bff817 	ldw	r2,-32(fp)
 401703c:	d0a74f15 	stw	r2,-25284(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4017040:	e0bffd17 	ldw	r2,-12(fp)
 4017044:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4017048:	d0e75117 	ldw	r3,-25276(gp)
 401704c:	e0bffd17 	ldw	r2,-12(fp)
 4017050:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4017054:	e0bffd17 	ldw	r2,-12(fp)
 4017058:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401705c:	e0bffd17 	ldw	r2,-12(fp)
 4017060:	d0a75115 	stw	r2,-25276(gp)
 4017064:	e0bff617 	ldw	r2,-40(fp)
 4017068:	e0bffa15 	stw	r2,-24(fp)
 401706c:	e0bffa17 	ldw	r2,-24(fp)
 4017070:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4017074:	e0bff403 	ldbu	r2,-48(fp)
 4017078:	10800058 	cmpnei	r2,r2,1
 401707c:	1000011e 	bne	r2,zero,4017084 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4017080:	40139d40 	call	40139d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4017084:	e0bfff17 	ldw	r2,-4(fp)
 4017088:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 401708c:	e03ff515 	stw	zero,-44(fp)
             break;
 4017090:	00000a06 	br	40170bc <OSQDel+0x268>
 4017094:	e0bff617 	ldw	r2,-40(fp)
 4017098:	e0bffb15 	stw	r2,-20(fp)
 401709c:	e0bffb17 	ldw	r2,-20(fp)
 40170a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 40170a4:	e0bfff17 	ldw	r2,-4(fp)
 40170a8:	00c001c4 	movi	r3,7
 40170ac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 40170b0:	e0bffd17 	ldw	r2,-12(fp)
 40170b4:	e0bff515 	stw	r2,-44(fp)
             break;
 40170b8:	0001883a 	nop
    }
    return (pevent_return);
 40170bc:	e0bff517 	ldw	r2,-44(fp)
}
 40170c0:	e037883a 	mov	sp,fp
 40170c4:	dfc00117 	ldw	ra,4(sp)
 40170c8:	df000017 	ldw	fp,0(sp)
 40170cc:	dec00204 	addi	sp,sp,8
 40170d0:	f800283a 	ret

040170d4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 40170d4:	defffa04 	addi	sp,sp,-24
 40170d8:	df000515 	stw	fp,20(sp)
 40170dc:	df000504 	addi	fp,sp,20
 40170e0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40170e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40170e8:	e0bfff17 	ldw	r2,-4(fp)
 40170ec:	1000021e 	bne	r2,zero,40170f8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 40170f0:	00800104 	movi	r2,4
 40170f4:	00002106 	br	401717c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40170f8:	e0bfff17 	ldw	r2,-4(fp)
 40170fc:	10800003 	ldbu	r2,0(r2)
 4017100:	10803fcc 	andi	r2,r2,255
 4017104:	108000a0 	cmpeqi	r2,r2,2
 4017108:	1000021e 	bne	r2,zero,4017114 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 401710c:	00800044 	movi	r2,1
 4017110:	00001a06 	br	401717c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017114:	0005303a 	rdctl	r2,status
 4017118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401711c:	e0fffd17 	ldw	r3,-12(fp)
 4017120:	00bfff84 	movi	r2,-2
 4017124:	1884703a 	and	r2,r3,r2
 4017128:	1001703a 	wrctl	status,r2
  
  return context;
 401712c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4017130:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 4017134:	e0bfff17 	ldw	r2,-4(fp)
 4017138:	10800117 	ldw	r2,4(r2)
 401713c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 4017140:	e0bffc17 	ldw	r2,-16(fp)
 4017144:	10c00117 	ldw	r3,4(r2)
 4017148:	e0bffc17 	ldw	r2,-16(fp)
 401714c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 4017150:	e0bffc17 	ldw	r2,-16(fp)
 4017154:	10c00117 	ldw	r3,4(r2)
 4017158:	e0bffc17 	ldw	r2,-16(fp)
 401715c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 4017160:	e0bffc17 	ldw	r2,-16(fp)
 4017164:	1000058d 	sth	zero,22(r2)
 4017168:	e0bffb17 	ldw	r2,-20(fp)
 401716c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017170:	e0bffe17 	ldw	r2,-8(fp)
 4017174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4017178:	0005883a 	mov	r2,zero
}
 401717c:	e037883a 	mov	sp,fp
 4017180:	df000017 	ldw	fp,0(sp)
 4017184:	dec00104 	addi	sp,sp,4
 4017188:	f800283a 	ret

0401718c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 401718c:	defff304 	addi	sp,sp,-52
 4017190:	dfc00c15 	stw	ra,48(sp)
 4017194:	df000b15 	stw	fp,44(sp)
 4017198:	df000b04 	addi	fp,sp,44
 401719c:	e13ffd15 	stw	r4,-12(fp)
 40171a0:	2805883a 	mov	r2,r5
 40171a4:	e1bfff15 	stw	r6,-4(fp)
 40171a8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40171ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40171b0:	e0bfff17 	ldw	r2,-4(fp)
 40171b4:	1000021e 	bne	r2,zero,40171c0 <OSQPend+0x34>
        return ((void *)0);
 40171b8:	0005883a 	mov	r2,zero
 40171bc:	00009106 	br	4017404 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 40171c0:	e0bffd17 	ldw	r2,-12(fp)
 40171c4:	1000051e 	bne	r2,zero,40171dc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40171c8:	e0bfff17 	ldw	r2,-4(fp)
 40171cc:	00c00104 	movi	r3,4
 40171d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40171d4:	0005883a 	mov	r2,zero
 40171d8:	00008a06 	br	4017404 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 40171dc:	e0bffd17 	ldw	r2,-12(fp)
 40171e0:	10800003 	ldbu	r2,0(r2)
 40171e4:	10803fcc 	andi	r2,r2,255
 40171e8:	108000a0 	cmpeqi	r2,r2,2
 40171ec:	1000051e 	bne	r2,zero,4017204 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40171f0:	e0bfff17 	ldw	r2,-4(fp)
 40171f4:	00c00044 	movi	r3,1
 40171f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40171fc:	0005883a 	mov	r2,zero
 4017200:	00008006 	br	4017404 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4017204:	d0a75203 	ldbu	r2,-25272(gp)
 4017208:	10803fcc 	andi	r2,r2,255
 401720c:	10000526 	beq	r2,zero,4017224 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 4017210:	e0bfff17 	ldw	r2,-4(fp)
 4017214:	00c00084 	movi	r3,2
 4017218:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 401721c:	0005883a 	mov	r2,zero
 4017220:	00007806 	br	4017404 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4017224:	d0a74403 	ldbu	r2,-25328(gp)
 4017228:	10803fcc 	andi	r2,r2,255
 401722c:	10000526 	beq	r2,zero,4017244 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4017230:	e0bfff17 	ldw	r2,-4(fp)
 4017234:	00c00344 	movi	r3,13
 4017238:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 401723c:	0005883a 	mov	r2,zero
 4017240:	00007006 	br	4017404 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017244:	0005303a 	rdctl	r2,status
 4017248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401724c:	e0fffc17 	ldw	r3,-16(fp)
 4017250:	00bfff84 	movi	r2,-2
 4017254:	1884703a 	and	r2,r3,r2
 4017258:	1001703a 	wrctl	status,r2
  
  return context;
 401725c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4017260:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4017264:	e0bffd17 	ldw	r2,-12(fp)
 4017268:	10800117 	ldw	r2,4(r2)
 401726c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4017270:	e0bff817 	ldw	r2,-32(fp)
 4017274:	1080058b 	ldhu	r2,22(r2)
 4017278:	10bfffcc 	andi	r2,r2,65535
 401727c:	10001e26 	beq	r2,zero,40172f8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4017280:	e0bff817 	ldw	r2,-32(fp)
 4017284:	10800417 	ldw	r2,16(r2)
 4017288:	11000104 	addi	r4,r2,4
 401728c:	e0fff817 	ldw	r3,-32(fp)
 4017290:	19000415 	stw	r4,16(r3)
 4017294:	10800017 	ldw	r2,0(r2)
 4017298:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 401729c:	e0bff817 	ldw	r2,-32(fp)
 40172a0:	1080058b 	ldhu	r2,22(r2)
 40172a4:	10bfffc4 	addi	r2,r2,-1
 40172a8:	1007883a 	mov	r3,r2
 40172ac:	e0bff817 	ldw	r2,-32(fp)
 40172b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 40172b4:	e0bff817 	ldw	r2,-32(fp)
 40172b8:	10c00417 	ldw	r3,16(r2)
 40172bc:	e0bff817 	ldw	r2,-32(fp)
 40172c0:	10800217 	ldw	r2,8(r2)
 40172c4:	1880041e 	bne	r3,r2,40172d8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 40172c8:	e0bff817 	ldw	r2,-32(fp)
 40172cc:	10c00117 	ldw	r3,4(r2)
 40172d0:	e0bff817 	ldw	r2,-32(fp)
 40172d4:	10c00415 	stw	r3,16(r2)
 40172d8:	e0bff617 	ldw	r2,-40(fp)
 40172dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40172e0:	e0bff717 	ldw	r2,-36(fp)
 40172e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 40172e8:	e0bfff17 	ldw	r2,-4(fp)
 40172ec:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 40172f0:	e0bff517 	ldw	r2,-44(fp)
 40172f4:	00004306 	br	4017404 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 40172f8:	d0a75317 	ldw	r2,-25268(gp)
 40172fc:	d0e75317 	ldw	r3,-25268(gp)
 4017300:	18c00c03 	ldbu	r3,48(r3)
 4017304:	18c00114 	ori	r3,r3,4
 4017308:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401730c:	d0a75317 	ldw	r2,-25268(gp)
 4017310:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 4017314:	d0a75317 	ldw	r2,-25268(gp)
 4017318:	e0fffe0b 	ldhu	r3,-8(fp)
 401731c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4017320:	e13ffd17 	ldw	r4,-12(fp)
 4017324:	40131200 	call	4013120 <OS_EventTaskWait>
 4017328:	e0bff617 	ldw	r2,-40(fp)
 401732c:	e0bffb15 	stw	r2,-20(fp)
 4017330:	e0bffb17 	ldw	r2,-20(fp)
 4017334:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 4017338:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401733c:	0005303a 	rdctl	r2,status
 4017340:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017344:	e0fff917 	ldw	r3,-28(fp)
 4017348:	00bfff84 	movi	r2,-2
 401734c:	1884703a 	and	r2,r3,r2
 4017350:	1001703a 	wrctl	status,r2
  
  return context;
 4017354:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4017358:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 401735c:	d0a75317 	ldw	r2,-25268(gp)
 4017360:	10800c43 	ldbu	r2,49(r2)
 4017364:	10803fcc 	andi	r2,r2,255
 4017368:	10000326 	beq	r2,zero,4017378 <OSQPend+0x1ec>
 401736c:	108000a0 	cmpeqi	r2,r2,2
 4017370:	1000071e 	bne	r2,zero,4017390 <OSQPend+0x204>
 4017374:	00000b06 	br	40173a4 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4017378:	d0a75317 	ldw	r2,-25268(gp)
 401737c:	10800917 	ldw	r2,36(r2)
 4017380:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 4017384:	e0bfff17 	ldw	r2,-4(fp)
 4017388:	10000005 	stb	zero,0(r2)
             break;
 401738c:	00000e06 	br	40173c8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4017390:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4017394:	e0bfff17 	ldw	r2,-4(fp)
 4017398:	00c00384 	movi	r3,14
 401739c:	10c00005 	stb	r3,0(r2)
             break;
 40173a0:	00000906 	br	40173c8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 40173a4:	d0a75317 	ldw	r2,-25268(gp)
 40173a8:	e17ffd17 	ldw	r5,-12(fp)
 40173ac:	1009883a 	mov	r4,r2
 40173b0:	40133800 	call	4013380 <OS_EventTaskRemove>
             pmsg = (void *)0;
 40173b4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40173b8:	e0bfff17 	ldw	r2,-4(fp)
 40173bc:	00c00284 	movi	r3,10
 40173c0:	10c00005 	stb	r3,0(r2)
             break;
 40173c4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40173c8:	d0a75317 	ldw	r2,-25268(gp)
 40173cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 40173d0:	d0a75317 	ldw	r2,-25268(gp)
 40173d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 40173d8:	d0a75317 	ldw	r2,-25268(gp)
 40173dc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40173e0:	d0a75317 	ldw	r2,-25268(gp)
 40173e4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 40173e8:	d0a75317 	ldw	r2,-25268(gp)
 40173ec:	10000915 	stw	zero,36(r2)
 40173f0:	e0bff617 	ldw	r2,-40(fp)
 40173f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40173f8:	e0bffa17 	ldw	r2,-24(fp)
 40173fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4017400:	e0bff517 	ldw	r2,-44(fp)
}
 4017404:	e037883a 	mov	sp,fp
 4017408:	dfc00117 	ldw	ra,4(sp)
 401740c:	df000017 	ldw	fp,0(sp)
 4017410:	dec00204 	addi	sp,sp,8
 4017414:	f800283a 	ret

04017418 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4017418:	defff604 	addi	sp,sp,-40
 401741c:	dfc00915 	stw	ra,36(sp)
 4017420:	df000815 	stw	fp,32(sp)
 4017424:	df000804 	addi	fp,sp,32
 4017428:	e13ffd15 	stw	r4,-12(fp)
 401742c:	2805883a 	mov	r2,r5
 4017430:	e1bfff15 	stw	r6,-4(fp)
 4017434:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4017438:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401743c:	e0bfff17 	ldw	r2,-4(fp)
 4017440:	1000021e 	bne	r2,zero,401744c <OSQPendAbort+0x34>
        return (0);
 4017444:	0005883a 	mov	r2,zero
 4017448:	00004906 	br	4017570 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401744c:	e0bffd17 	ldw	r2,-12(fp)
 4017450:	1000051e 	bne	r2,zero,4017468 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4017454:	e0bfff17 	ldw	r2,-4(fp)
 4017458:	00c00104 	movi	r3,4
 401745c:	10c00005 	stb	r3,0(r2)
        return (0);
 4017460:	0005883a 	mov	r2,zero
 4017464:	00004206 	br	4017570 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4017468:	e0bffd17 	ldw	r2,-12(fp)
 401746c:	10800003 	ldbu	r2,0(r2)
 4017470:	10803fcc 	andi	r2,r2,255
 4017474:	108000a0 	cmpeqi	r2,r2,2
 4017478:	1000051e 	bne	r2,zero,4017490 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 401747c:	e0bfff17 	ldw	r2,-4(fp)
 4017480:	00c00044 	movi	r3,1
 4017484:	10c00005 	stb	r3,0(r2)
        return (0);
 4017488:	0005883a 	mov	r2,zero
 401748c:	00003806 	br	4017570 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017490:	0005303a 	rdctl	r2,status
 4017494:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017498:	e0fffc17 	ldw	r3,-16(fp)
 401749c:	00bfff84 	movi	r2,-2
 40174a0:	1884703a 	and	r2,r3,r2
 40174a4:	1001703a 	wrctl	status,r2
  
  return context;
 40174a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40174ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 40174b0:	e0bffd17 	ldw	r2,-12(fp)
 40174b4:	10800283 	ldbu	r2,10(r2)
 40174b8:	10803fcc 	andi	r2,r2,255
 40174bc:	10002526 	beq	r2,zero,4017554 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 40174c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 40174c4:	e0bffe03 	ldbu	r2,-8(fp)
 40174c8:	10800060 	cmpeqi	r2,r2,1
 40174cc:	10000e26 	beq	r2,zero,4017508 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 40174d0:	00000806 	br	40174f4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 40174d4:	01c00084 	movi	r7,2
 40174d8:	01800104 	movi	r6,4
 40174dc:	000b883a 	mov	r5,zero
 40174e0:	e13ffd17 	ldw	r4,-12(fp)
 40174e4:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                     nbr_tasks++;
 40174e8:	e0bff803 	ldbu	r2,-32(fp)
 40174ec:	10800044 	addi	r2,r2,1
 40174f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 40174f4:	e0bffd17 	ldw	r2,-12(fp)
 40174f8:	10800283 	ldbu	r2,10(r2)
 40174fc:	10803fcc 	andi	r2,r2,255
 4017500:	103ff41e 	bne	r2,zero,40174d4 <__alt_mem_onchip_memory2_0+0xfc0154d4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4017504:	00000906 	br	401752c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4017508:	01c00084 	movi	r7,2
 401750c:	01800104 	movi	r6,4
 4017510:	000b883a 	mov	r5,zero
 4017514:	e13ffd17 	ldw	r4,-12(fp)
 4017518:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 nbr_tasks++;
 401751c:	e0bff803 	ldbu	r2,-32(fp)
 4017520:	10800044 	addi	r2,r2,1
 4017524:	e0bff805 	stb	r2,-32(fp)
                 break;
 4017528:	0001883a 	nop
 401752c:	e0bff917 	ldw	r2,-28(fp)
 4017530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017534:	e0bffa17 	ldw	r2,-24(fp)
 4017538:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 401753c:	40139d40 	call	40139d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4017540:	e0bfff17 	ldw	r2,-4(fp)
 4017544:	00c00384 	movi	r3,14
 4017548:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 401754c:	e0bff803 	ldbu	r2,-32(fp)
 4017550:	00000706 	br	4017570 <OSQPendAbort+0x158>
 4017554:	e0bff917 	ldw	r2,-28(fp)
 4017558:	e0bffb15 	stw	r2,-20(fp)
 401755c:	e0bffb17 	ldw	r2,-20(fp)
 4017560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4017564:	e0bfff17 	ldw	r2,-4(fp)
 4017568:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 401756c:	0005883a 	mov	r2,zero
}
 4017570:	e037883a 	mov	sp,fp
 4017574:	dfc00117 	ldw	ra,4(sp)
 4017578:	df000017 	ldw	fp,0(sp)
 401757c:	dec00204 	addi	sp,sp,8
 4017580:	f800283a 	ret

04017584 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4017584:	defff604 	addi	sp,sp,-40
 4017588:	dfc00915 	stw	ra,36(sp)
 401758c:	df000815 	stw	fp,32(sp)
 4017590:	df000804 	addi	fp,sp,32
 4017594:	e13ffe15 	stw	r4,-8(fp)
 4017598:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 401759c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 40175a0:	e0bffe17 	ldw	r2,-8(fp)
 40175a4:	1000021e 	bne	r2,zero,40175b0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40175a8:	00800104 	movi	r2,4
 40175ac:	00004a06 	br	40176d8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 40175b0:	e0bffe17 	ldw	r2,-8(fp)
 40175b4:	10800003 	ldbu	r2,0(r2)
 40175b8:	10803fcc 	andi	r2,r2,255
 40175bc:	108000a0 	cmpeqi	r2,r2,2
 40175c0:	1000021e 	bne	r2,zero,40175cc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 40175c4:	00800044 	movi	r2,1
 40175c8:	00004306 	br	40176d8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40175cc:	0005303a 	rdctl	r2,status
 40175d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40175d4:	e0fffd17 	ldw	r3,-12(fp)
 40175d8:	00bfff84 	movi	r2,-2
 40175dc:	1884703a 	and	r2,r3,r2
 40175e0:	1001703a 	wrctl	status,r2
  
  return context;
 40175e4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40175e8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 40175ec:	e0bffe17 	ldw	r2,-8(fp)
 40175f0:	10800283 	ldbu	r2,10(r2)
 40175f4:	10803fcc 	andi	r2,r2,255
 40175f8:	10000c26 	beq	r2,zero,401762c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40175fc:	000f883a 	mov	r7,zero
 4017600:	01800104 	movi	r6,4
 4017604:	e17fff17 	ldw	r5,-4(fp)
 4017608:	e13ffe17 	ldw	r4,-8(fp)
 401760c:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4017610:	e0bff817 	ldw	r2,-32(fp)
 4017614:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017618:	e0bff917 	ldw	r2,-28(fp)
 401761c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 4017620:	40139d40 	call	40139d4 <OS_Sched>
        return (OS_ERR_NONE);
 4017624:	0005883a 	mov	r2,zero
 4017628:	00002b06 	br	40176d8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 401762c:	e0bffe17 	ldw	r2,-8(fp)
 4017630:	10800117 	ldw	r2,4(r2)
 4017634:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 4017638:	e0bffb17 	ldw	r2,-20(fp)
 401763c:	10c0058b 	ldhu	r3,22(r2)
 4017640:	e0bffb17 	ldw	r2,-20(fp)
 4017644:	1080050b 	ldhu	r2,20(r2)
 4017648:	18ffffcc 	andi	r3,r3,65535
 401764c:	10bfffcc 	andi	r2,r2,65535
 4017650:	18800636 	bltu	r3,r2,401766c <OSQPost+0xe8>
 4017654:	e0bff817 	ldw	r2,-32(fp)
 4017658:	e0bffa15 	stw	r2,-24(fp)
 401765c:	e0bffa17 	ldw	r2,-24(fp)
 4017660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4017664:	00800784 	movi	r2,30
 4017668:	00001b06 	br	40176d8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 401766c:	e0bffb17 	ldw	r2,-20(fp)
 4017670:	10800317 	ldw	r2,12(r2)
 4017674:	11000104 	addi	r4,r2,4
 4017678:	e0fffb17 	ldw	r3,-20(fp)
 401767c:	19000315 	stw	r4,12(r3)
 4017680:	e0ffff17 	ldw	r3,-4(fp)
 4017684:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4017688:	e0bffb17 	ldw	r2,-20(fp)
 401768c:	1080058b 	ldhu	r2,22(r2)
 4017690:	10800044 	addi	r2,r2,1
 4017694:	1007883a 	mov	r3,r2
 4017698:	e0bffb17 	ldw	r2,-20(fp)
 401769c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 40176a0:	e0bffb17 	ldw	r2,-20(fp)
 40176a4:	10c00317 	ldw	r3,12(r2)
 40176a8:	e0bffb17 	ldw	r2,-20(fp)
 40176ac:	10800217 	ldw	r2,8(r2)
 40176b0:	1880041e 	bne	r3,r2,40176c4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 40176b4:	e0bffb17 	ldw	r2,-20(fp)
 40176b8:	10c00117 	ldw	r3,4(r2)
 40176bc:	e0bffb17 	ldw	r2,-20(fp)
 40176c0:	10c00315 	stw	r3,12(r2)
 40176c4:	e0bff817 	ldw	r2,-32(fp)
 40176c8:	e0bffc15 	stw	r2,-16(fp)
 40176cc:	e0bffc17 	ldw	r2,-16(fp)
 40176d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40176d4:	0005883a 	mov	r2,zero
}
 40176d8:	e037883a 	mov	sp,fp
 40176dc:	dfc00117 	ldw	ra,4(sp)
 40176e0:	df000017 	ldw	fp,0(sp)
 40176e4:	dec00204 	addi	sp,sp,8
 40176e8:	f800283a 	ret

040176ec <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 40176ec:	defff604 	addi	sp,sp,-40
 40176f0:	dfc00915 	stw	ra,36(sp)
 40176f4:	df000815 	stw	fp,32(sp)
 40176f8:	df000804 	addi	fp,sp,32
 40176fc:	e13ffe15 	stw	r4,-8(fp)
 4017700:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4017704:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4017708:	e0bffe17 	ldw	r2,-8(fp)
 401770c:	1000021e 	bne	r2,zero,4017718 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4017710:	00800104 	movi	r2,4
 4017714:	00004c06 	br	4017848 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4017718:	e0bffe17 	ldw	r2,-8(fp)
 401771c:	10800003 	ldbu	r2,0(r2)
 4017720:	10803fcc 	andi	r2,r2,255
 4017724:	108000a0 	cmpeqi	r2,r2,2
 4017728:	1000021e 	bne	r2,zero,4017734 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 401772c:	00800044 	movi	r2,1
 4017730:	00004506 	br	4017848 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017734:	0005303a 	rdctl	r2,status
 4017738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401773c:	e0fffd17 	ldw	r3,-12(fp)
 4017740:	00bfff84 	movi	r2,-2
 4017744:	1884703a 	and	r2,r3,r2
 4017748:	1001703a 	wrctl	status,r2
  
  return context;
 401774c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4017750:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 4017754:	e0bffe17 	ldw	r2,-8(fp)
 4017758:	10800283 	ldbu	r2,10(r2)
 401775c:	10803fcc 	andi	r2,r2,255
 4017760:	10000c26 	beq	r2,zero,4017794 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4017764:	000f883a 	mov	r7,zero
 4017768:	01800104 	movi	r6,4
 401776c:	e17fff17 	ldw	r5,-4(fp)
 4017770:	e13ffe17 	ldw	r4,-8(fp)
 4017774:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4017778:	e0bff817 	ldw	r2,-32(fp)
 401777c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017780:	e0bff917 	ldw	r2,-28(fp)
 4017784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4017788:	40139d40 	call	40139d4 <OS_Sched>
        return (OS_ERR_NONE);
 401778c:	0005883a 	mov	r2,zero
 4017790:	00002d06 	br	4017848 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4017794:	e0bffe17 	ldw	r2,-8(fp)
 4017798:	10800117 	ldw	r2,4(r2)
 401779c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 40177a0:	e0bffb17 	ldw	r2,-20(fp)
 40177a4:	10c0058b 	ldhu	r3,22(r2)
 40177a8:	e0bffb17 	ldw	r2,-20(fp)
 40177ac:	1080050b 	ldhu	r2,20(r2)
 40177b0:	18ffffcc 	andi	r3,r3,65535
 40177b4:	10bfffcc 	andi	r2,r2,65535
 40177b8:	18800636 	bltu	r3,r2,40177d4 <OSQPostFront+0xe8>
 40177bc:	e0bff817 	ldw	r2,-32(fp)
 40177c0:	e0bffa15 	stw	r2,-24(fp)
 40177c4:	e0bffa17 	ldw	r2,-24(fp)
 40177c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 40177cc:	00800784 	movi	r2,30
 40177d0:	00001d06 	br	4017848 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 40177d4:	e0bffb17 	ldw	r2,-20(fp)
 40177d8:	10c00417 	ldw	r3,16(r2)
 40177dc:	e0bffb17 	ldw	r2,-20(fp)
 40177e0:	10800117 	ldw	r2,4(r2)
 40177e4:	1880041e 	bne	r3,r2,40177f8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 40177e8:	e0bffb17 	ldw	r2,-20(fp)
 40177ec:	10c00217 	ldw	r3,8(r2)
 40177f0:	e0bffb17 	ldw	r2,-20(fp)
 40177f4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 40177f8:	e0bffb17 	ldw	r2,-20(fp)
 40177fc:	10800417 	ldw	r2,16(r2)
 4017800:	10ffff04 	addi	r3,r2,-4
 4017804:	e0bffb17 	ldw	r2,-20(fp)
 4017808:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 401780c:	e0bffb17 	ldw	r2,-20(fp)
 4017810:	10800417 	ldw	r2,16(r2)
 4017814:	e0ffff17 	ldw	r3,-4(fp)
 4017818:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 401781c:	e0bffb17 	ldw	r2,-20(fp)
 4017820:	1080058b 	ldhu	r2,22(r2)
 4017824:	10800044 	addi	r2,r2,1
 4017828:	1007883a 	mov	r3,r2
 401782c:	e0bffb17 	ldw	r2,-20(fp)
 4017830:	10c0058d 	sth	r3,22(r2)
 4017834:	e0bff817 	ldw	r2,-32(fp)
 4017838:	e0bffc15 	stw	r2,-16(fp)
 401783c:	e0bffc17 	ldw	r2,-16(fp)
 4017840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4017844:	0005883a 	mov	r2,zero
}
 4017848:	e037883a 	mov	sp,fp
 401784c:	dfc00117 	ldw	ra,4(sp)
 4017850:	df000017 	ldw	fp,0(sp)
 4017854:	dec00204 	addi	sp,sp,8
 4017858:	f800283a 	ret

0401785c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 401785c:	defff504 	addi	sp,sp,-44
 4017860:	dfc00a15 	stw	ra,40(sp)
 4017864:	df000915 	stw	fp,36(sp)
 4017868:	df000904 	addi	fp,sp,36
 401786c:	e13ffd15 	stw	r4,-12(fp)
 4017870:	e17ffe15 	stw	r5,-8(fp)
 4017874:	3005883a 	mov	r2,r6
 4017878:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401787c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4017880:	e0bffd17 	ldw	r2,-12(fp)
 4017884:	1000021e 	bne	r2,zero,4017890 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4017888:	00800104 	movi	r2,4
 401788c:	00007106 	br	4017a54 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4017890:	e0bffd17 	ldw	r2,-12(fp)
 4017894:	10800003 	ldbu	r2,0(r2)
 4017898:	10803fcc 	andi	r2,r2,255
 401789c:	108000a0 	cmpeqi	r2,r2,2
 40178a0:	1000021e 	bne	r2,zero,40178ac <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 40178a4:	00800044 	movi	r2,1
 40178a8:	00006a06 	br	4017a54 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40178ac:	0005303a 	rdctl	r2,status
 40178b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40178b4:	e0fffc17 	ldw	r3,-16(fp)
 40178b8:	00bfff84 	movi	r2,-2
 40178bc:	1884703a 	and	r2,r3,r2
 40178c0:	1001703a 	wrctl	status,r2
  
  return context;
 40178c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40178c8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 40178cc:	e0bffd17 	ldw	r2,-12(fp)
 40178d0:	10800283 	ldbu	r2,10(r2)
 40178d4:	10803fcc 	andi	r2,r2,255
 40178d8:	10001d26 	beq	r2,zero,4017950 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 40178dc:	e0bfff03 	ldbu	r2,-4(fp)
 40178e0:	1080004c 	andi	r2,r2,1
 40178e4:	10000b26 	beq	r2,zero,4017914 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 40178e8:	00000506 	br	4017900 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40178ec:	000f883a 	mov	r7,zero
 40178f0:	01800104 	movi	r6,4
 40178f4:	e17ffe17 	ldw	r5,-8(fp)
 40178f8:	e13ffd17 	ldw	r4,-12(fp)
 40178fc:	4012f880 	call	4012f88 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4017900:	e0bffd17 	ldw	r2,-12(fp)
 4017904:	10800283 	ldbu	r2,10(r2)
 4017908:	10803fcc 	andi	r2,r2,255
 401790c:	103ff71e 	bne	r2,zero,40178ec <__alt_mem_onchip_memory2_0+0xfc0158ec>
 4017910:	00000506 	br	4017928 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4017914:	000f883a 	mov	r7,zero
 4017918:	01800104 	movi	r6,4
 401791c:	e17ffe17 	ldw	r5,-8(fp)
 4017920:	e13ffd17 	ldw	r4,-12(fp)
 4017924:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4017928:	e0bff717 	ldw	r2,-36(fp)
 401792c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017930:	e0bff817 	ldw	r2,-32(fp)
 4017934:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4017938:	e0bfff03 	ldbu	r2,-4(fp)
 401793c:	1080010c 	andi	r2,r2,4
 4017940:	1000011e 	bne	r2,zero,4017948 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4017944:	40139d40 	call	40139d4 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4017948:	0005883a 	mov	r2,zero
 401794c:	00004106 	br	4017a54 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4017950:	e0bffd17 	ldw	r2,-12(fp)
 4017954:	10800117 	ldw	r2,4(r2)
 4017958:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 401795c:	e0bffa17 	ldw	r2,-24(fp)
 4017960:	10c0058b 	ldhu	r3,22(r2)
 4017964:	e0bffa17 	ldw	r2,-24(fp)
 4017968:	1080050b 	ldhu	r2,20(r2)
 401796c:	18ffffcc 	andi	r3,r3,65535
 4017970:	10bfffcc 	andi	r2,r2,65535
 4017974:	18800636 	bltu	r3,r2,4017990 <OSQPostOpt+0x134>
 4017978:	e0bff717 	ldw	r2,-36(fp)
 401797c:	e0bff915 	stw	r2,-28(fp)
 4017980:	e0bff917 	ldw	r2,-28(fp)
 4017984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4017988:	00800784 	movi	r2,30
 401798c:	00003106 	br	4017a54 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4017990:	e0bfff03 	ldbu	r2,-4(fp)
 4017994:	1080008c 	andi	r2,r2,2
 4017998:	10001326 	beq	r2,zero,40179e8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 401799c:	e0bffa17 	ldw	r2,-24(fp)
 40179a0:	10c00417 	ldw	r3,16(r2)
 40179a4:	e0bffa17 	ldw	r2,-24(fp)
 40179a8:	10800117 	ldw	r2,4(r2)
 40179ac:	1880041e 	bne	r3,r2,40179c0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 40179b0:	e0bffa17 	ldw	r2,-24(fp)
 40179b4:	10c00217 	ldw	r3,8(r2)
 40179b8:	e0bffa17 	ldw	r2,-24(fp)
 40179bc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 40179c0:	e0bffa17 	ldw	r2,-24(fp)
 40179c4:	10800417 	ldw	r2,16(r2)
 40179c8:	10ffff04 	addi	r3,r2,-4
 40179cc:	e0bffa17 	ldw	r2,-24(fp)
 40179d0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 40179d4:	e0bffa17 	ldw	r2,-24(fp)
 40179d8:	10800417 	ldw	r2,16(r2)
 40179dc:	e0fffe17 	ldw	r3,-8(fp)
 40179e0:	10c00015 	stw	r3,0(r2)
 40179e4:	00001006 	br	4017a28 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 40179e8:	e0bffa17 	ldw	r2,-24(fp)
 40179ec:	10800317 	ldw	r2,12(r2)
 40179f0:	11000104 	addi	r4,r2,4
 40179f4:	e0fffa17 	ldw	r3,-24(fp)
 40179f8:	19000315 	stw	r4,12(r3)
 40179fc:	e0fffe17 	ldw	r3,-8(fp)
 4017a00:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4017a04:	e0bffa17 	ldw	r2,-24(fp)
 4017a08:	10c00317 	ldw	r3,12(r2)
 4017a0c:	e0bffa17 	ldw	r2,-24(fp)
 4017a10:	10800217 	ldw	r2,8(r2)
 4017a14:	1880041e 	bne	r3,r2,4017a28 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 4017a18:	e0bffa17 	ldw	r2,-24(fp)
 4017a1c:	10c00117 	ldw	r3,4(r2)
 4017a20:	e0bffa17 	ldw	r2,-24(fp)
 4017a24:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4017a28:	e0bffa17 	ldw	r2,-24(fp)
 4017a2c:	1080058b 	ldhu	r2,22(r2)
 4017a30:	10800044 	addi	r2,r2,1
 4017a34:	1007883a 	mov	r3,r2
 4017a38:	e0bffa17 	ldw	r2,-24(fp)
 4017a3c:	10c0058d 	sth	r3,22(r2)
 4017a40:	e0bff717 	ldw	r2,-36(fp)
 4017a44:	e0bffb15 	stw	r2,-20(fp)
 4017a48:	e0bffb17 	ldw	r2,-20(fp)
 4017a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4017a50:	0005883a 	mov	r2,zero
}
 4017a54:	e037883a 	mov	sp,fp
 4017a58:	dfc00117 	ldw	ra,4(sp)
 4017a5c:	df000017 	ldw	fp,0(sp)
 4017a60:	dec00204 	addi	sp,sp,8
 4017a64:	f800283a 	ret

04017a68 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4017a68:	defff604 	addi	sp,sp,-40
 4017a6c:	df000915 	stw	fp,36(sp)
 4017a70:	df000904 	addi	fp,sp,36
 4017a74:	e13ffe15 	stw	r4,-8(fp)
 4017a78:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4017a7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4017a80:	e0bffe17 	ldw	r2,-8(fp)
 4017a84:	1000021e 	bne	r2,zero,4017a90 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4017a88:	00800104 	movi	r2,4
 4017a8c:	00004906 	br	4017bb4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4017a90:	e0bfff17 	ldw	r2,-4(fp)
 4017a94:	1000021e 	bne	r2,zero,4017aa0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4017a98:	00800244 	movi	r2,9
 4017a9c:	00004506 	br	4017bb4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4017aa0:	e0bffe17 	ldw	r2,-8(fp)
 4017aa4:	10800003 	ldbu	r2,0(r2)
 4017aa8:	10803fcc 	andi	r2,r2,255
 4017aac:	108000a0 	cmpeqi	r2,r2,2
 4017ab0:	1000021e 	bne	r2,zero,4017abc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4017ab4:	00800044 	movi	r2,1
 4017ab8:	00003e06 	br	4017bb4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017abc:	0005303a 	rdctl	r2,status
 4017ac0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017ac4:	e0fffd17 	ldw	r3,-12(fp)
 4017ac8:	00bfff84 	movi	r2,-2
 4017acc:	1884703a 	and	r2,r3,r2
 4017ad0:	1001703a 	wrctl	status,r2
  
  return context;
 4017ad4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4017ad8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4017adc:	e0bffe17 	ldw	r2,-8(fp)
 4017ae0:	10c00283 	ldbu	r3,10(r2)
 4017ae4:	e0bfff17 	ldw	r2,-4(fp)
 4017ae8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 4017aec:	e0bffe17 	ldw	r2,-8(fp)
 4017af0:	108002c4 	addi	r2,r2,11
 4017af4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4017af8:	e0bfff17 	ldw	r2,-4(fp)
 4017afc:	10800204 	addi	r2,r2,8
 4017b00:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4017b04:	e03ff705 	stb	zero,-36(fp)
 4017b08:	00000b06 	br	4017b38 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 4017b0c:	e0bff917 	ldw	r2,-28(fp)
 4017b10:	10c00044 	addi	r3,r2,1
 4017b14:	e0fff915 	stw	r3,-28(fp)
 4017b18:	e0fff817 	ldw	r3,-32(fp)
 4017b1c:	19000044 	addi	r4,r3,1
 4017b20:	e13ff815 	stw	r4,-32(fp)
 4017b24:	18c00003 	ldbu	r3,0(r3)
 4017b28:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4017b2c:	e0bff703 	ldbu	r2,-36(fp)
 4017b30:	10800044 	addi	r2,r2,1
 4017b34:	e0bff705 	stb	r2,-36(fp)
 4017b38:	e0bff703 	ldbu	r2,-36(fp)
 4017b3c:	108000f0 	cmpltui	r2,r2,3
 4017b40:	103ff21e 	bne	r2,zero,4017b0c <__alt_mem_onchip_memory2_0+0xfc015b0c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4017b44:	e0bffe17 	ldw	r2,-8(fp)
 4017b48:	10800117 	ldw	r2,4(r2)
 4017b4c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4017b50:	e0bffc17 	ldw	r2,-16(fp)
 4017b54:	1080058b 	ldhu	r2,22(r2)
 4017b58:	10bfffcc 	andi	r2,r2,65535
 4017b5c:	10000626 	beq	r2,zero,4017b78 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4017b60:	e0bffc17 	ldw	r2,-16(fp)
 4017b64:	10800417 	ldw	r2,16(r2)
 4017b68:	10c00017 	ldw	r3,0(r2)
 4017b6c:	e0bfff17 	ldw	r2,-4(fp)
 4017b70:	10c00015 	stw	r3,0(r2)
 4017b74:	00000206 	br	4017b80 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4017b78:	e0bfff17 	ldw	r2,-4(fp)
 4017b7c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4017b80:	e0bffc17 	ldw	r2,-16(fp)
 4017b84:	10c0058b 	ldhu	r3,22(r2)
 4017b88:	e0bfff17 	ldw	r2,-4(fp)
 4017b8c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4017b90:	e0bffc17 	ldw	r2,-16(fp)
 4017b94:	10c0050b 	ldhu	r3,20(r2)
 4017b98:	e0bfff17 	ldw	r2,-4(fp)
 4017b9c:	10c0018d 	sth	r3,6(r2)
 4017ba0:	e0bffa17 	ldw	r2,-24(fp)
 4017ba4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017ba8:	e0bffb17 	ldw	r2,-20(fp)
 4017bac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4017bb0:	0005883a 	mov	r2,zero
}
 4017bb4:	e037883a 	mov	sp,fp
 4017bb8:	df000017 	ldw	fp,0(sp)
 4017bbc:	dec00104 	addi	sp,sp,4
 4017bc0:	f800283a 	ret

04017bc4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4017bc4:	defffb04 	addi	sp,sp,-20
 4017bc8:	dfc00415 	stw	ra,16(sp)
 4017bcc:	df000315 	stw	fp,12(sp)
 4017bd0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4017bd4:	01407804 	movi	r5,480
 4017bd8:	010100b4 	movhi	r4,1026
 4017bdc:	211fa404 	addi	r4,r4,32400
 4017be0:	40139180 	call	4013918 <OS_MemClr>
    pq1 = &OSQTbl[0];
 4017be4:	008100b4 	movhi	r2,1026
 4017be8:	109fa404 	addi	r2,r2,32400
 4017bec:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4017bf0:	008100b4 	movhi	r2,1026
 4017bf4:	109faa04 	addi	r2,r2,32424
 4017bf8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4017bfc:	e03ffd0d 	sth	zero,-12(fp)
 4017c00:	00000c06 	br	4017c34 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4017c04:	e0bffe17 	ldw	r2,-8(fp)
 4017c08:	e0ffff17 	ldw	r3,-4(fp)
 4017c0c:	10c00015 	stw	r3,0(r2)
        pq1++;
 4017c10:	e0bffe17 	ldw	r2,-8(fp)
 4017c14:	10800604 	addi	r2,r2,24
 4017c18:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4017c1c:	e0bfff17 	ldw	r2,-4(fp)
 4017c20:	10800604 	addi	r2,r2,24
 4017c24:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4017c28:	e0bffd0b 	ldhu	r2,-12(fp)
 4017c2c:	10800044 	addi	r2,r2,1
 4017c30:	e0bffd0d 	sth	r2,-12(fp)
 4017c34:	e0bffd0b 	ldhu	r2,-12(fp)
 4017c38:	108004f0 	cmpltui	r2,r2,19
 4017c3c:	103ff11e 	bne	r2,zero,4017c04 <__alt_mem_onchip_memory2_0+0xfc015c04>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4017c40:	e0bffe17 	ldw	r2,-8(fp)
 4017c44:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4017c48:	008100b4 	movhi	r2,1026
 4017c4c:	109fa404 	addi	r2,r2,32400
 4017c50:	d0a74f15 	stw	r2,-25284(gp)
#endif
}
 4017c54:	0001883a 	nop
 4017c58:	e037883a 	mov	sp,fp
 4017c5c:	dfc00117 	ldw	ra,4(sp)
 4017c60:	df000017 	ldw	fp,0(sp)
 4017c64:	dec00204 	addi	sp,sp,8
 4017c68:	f800283a 	ret

04017c6c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 4017c6c:	defffa04 	addi	sp,sp,-24
 4017c70:	df000515 	stw	fp,20(sp)
 4017c74:	df000504 	addi	fp,sp,20
 4017c78:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4017c7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4017c80:	e0bfff17 	ldw	r2,-4(fp)
 4017c84:	1000021e 	bne	r2,zero,4017c90 <OSSemAccept+0x24>
        return (0);
 4017c88:	0005883a 	mov	r2,zero
 4017c8c:	00001f06 	br	4017d0c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4017c90:	e0bfff17 	ldw	r2,-4(fp)
 4017c94:	10800003 	ldbu	r2,0(r2)
 4017c98:	10803fcc 	andi	r2,r2,255
 4017c9c:	108000e0 	cmpeqi	r2,r2,3
 4017ca0:	1000021e 	bne	r2,zero,4017cac <OSSemAccept+0x40>
        return (0);
 4017ca4:	0005883a 	mov	r2,zero
 4017ca8:	00001806 	br	4017d0c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017cac:	0005303a 	rdctl	r2,status
 4017cb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017cb4:	e0fffe17 	ldw	r3,-8(fp)
 4017cb8:	00bfff84 	movi	r2,-2
 4017cbc:	1884703a 	and	r2,r3,r2
 4017cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4017cc4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4017cc8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 4017ccc:	e0bfff17 	ldw	r2,-4(fp)
 4017cd0:	1080020b 	ldhu	r2,8(r2)
 4017cd4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4017cd8:	e0bffd0b 	ldhu	r2,-12(fp)
 4017cdc:	10000626 	beq	r2,zero,4017cf8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4017ce0:	e0bfff17 	ldw	r2,-4(fp)
 4017ce4:	1080020b 	ldhu	r2,8(r2)
 4017ce8:	10bfffc4 	addi	r2,r2,-1
 4017cec:	1007883a 	mov	r3,r2
 4017cf0:	e0bfff17 	ldw	r2,-4(fp)
 4017cf4:	10c0020d 	sth	r3,8(r2)
 4017cf8:	e0bffb17 	ldw	r2,-20(fp)
 4017cfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017d00:	e0bffc17 	ldw	r2,-16(fp)
 4017d04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4017d08:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4017d0c:	e037883a 	mov	sp,fp
 4017d10:	df000017 	ldw	fp,0(sp)
 4017d14:	dec00104 	addi	sp,sp,4
 4017d18:	f800283a 	ret

04017d1c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4017d1c:	defff904 	addi	sp,sp,-28
 4017d20:	dfc00615 	stw	ra,24(sp)
 4017d24:	df000515 	stw	fp,20(sp)
 4017d28:	df000504 	addi	fp,sp,20
 4017d2c:	2005883a 	mov	r2,r4
 4017d30:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4017d34:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4017d38:	d0a75203 	ldbu	r2,-25272(gp)
 4017d3c:	10803fcc 	andi	r2,r2,255
 4017d40:	10000226 	beq	r2,zero,4017d4c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 4017d44:	0005883a 	mov	r2,zero
 4017d48:	00002506 	br	4017de0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017d4c:	0005303a 	rdctl	r2,status
 4017d50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017d54:	e0fffe17 	ldw	r3,-8(fp)
 4017d58:	00bfff84 	movi	r2,-2
 4017d5c:	1884703a 	and	r2,r3,r2
 4017d60:	1001703a 	wrctl	status,r2
  
  return context;
 4017d64:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4017d68:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4017d6c:	d0a75117 	ldw	r2,-25276(gp)
 4017d70:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4017d74:	d0a75117 	ldw	r2,-25276(gp)
 4017d78:	10000326 	beq	r2,zero,4017d88 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4017d7c:	d0a75117 	ldw	r2,-25276(gp)
 4017d80:	10800117 	ldw	r2,4(r2)
 4017d84:	d0a75115 	stw	r2,-25276(gp)
 4017d88:	e0bffb17 	ldw	r2,-20(fp)
 4017d8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017d90:	e0bffc17 	ldw	r2,-16(fp)
 4017d94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4017d98:	e0bffd17 	ldw	r2,-12(fp)
 4017d9c:	10000f26 	beq	r2,zero,4017ddc <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4017da0:	e0bffd17 	ldw	r2,-12(fp)
 4017da4:	00c000c4 	movi	r3,3
 4017da8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4017dac:	e0bffd17 	ldw	r2,-12(fp)
 4017db0:	e0ffff0b 	ldhu	r3,-4(fp)
 4017db4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 4017db8:	e0bffd17 	ldw	r2,-12(fp)
 4017dbc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4017dc0:	e0bffd17 	ldw	r2,-12(fp)
 4017dc4:	00c00fc4 	movi	r3,63
 4017dc8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4017dcc:	e0bffd17 	ldw	r2,-12(fp)
 4017dd0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4017dd4:	e13ffd17 	ldw	r4,-12(fp)
 4017dd8:	40135380 	call	4013538 <OS_EventWaitListInit>
    }
    return (pevent);
 4017ddc:	e0bffd17 	ldw	r2,-12(fp)
}
 4017de0:	e037883a 	mov	sp,fp
 4017de4:	dfc00117 	ldw	ra,4(sp)
 4017de8:	df000017 	ldw	fp,0(sp)
 4017dec:	dec00204 	addi	sp,sp,8
 4017df0:	f800283a 	ret

04017df4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4017df4:	defff304 	addi	sp,sp,-52
 4017df8:	dfc00c15 	stw	ra,48(sp)
 4017dfc:	df000b15 	stw	fp,44(sp)
 4017e00:	df000b04 	addi	fp,sp,44
 4017e04:	e13ffd15 	stw	r4,-12(fp)
 4017e08:	2805883a 	mov	r2,r5
 4017e0c:	e1bfff15 	stw	r6,-4(fp)
 4017e10:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4017e14:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4017e18:	e0bfff17 	ldw	r2,-4(fp)
 4017e1c:	1000021e 	bne	r2,zero,4017e28 <OSSemDel+0x34>
        return (pevent);
 4017e20:	e0bffd17 	ldw	r2,-12(fp)
 4017e24:	00007e06 	br	4018020 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4017e28:	e0bffd17 	ldw	r2,-12(fp)
 4017e2c:	1000051e 	bne	r2,zero,4017e44 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4017e30:	e0bfff17 	ldw	r2,-4(fp)
 4017e34:	00c00104 	movi	r3,4
 4017e38:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4017e3c:	e0bffd17 	ldw	r2,-12(fp)
 4017e40:	00007706 	br	4018020 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4017e44:	e0bffd17 	ldw	r2,-12(fp)
 4017e48:	10800003 	ldbu	r2,0(r2)
 4017e4c:	10803fcc 	andi	r2,r2,255
 4017e50:	108000e0 	cmpeqi	r2,r2,3
 4017e54:	1000051e 	bne	r2,zero,4017e6c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4017e58:	e0bfff17 	ldw	r2,-4(fp)
 4017e5c:	00c00044 	movi	r3,1
 4017e60:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4017e64:	e0bffd17 	ldw	r2,-12(fp)
 4017e68:	00006d06 	br	4018020 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4017e6c:	d0a75203 	ldbu	r2,-25272(gp)
 4017e70:	10803fcc 	andi	r2,r2,255
 4017e74:	10000526 	beq	r2,zero,4017e8c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4017e78:	e0bfff17 	ldw	r2,-4(fp)
 4017e7c:	00c003c4 	movi	r3,15
 4017e80:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4017e84:	e0bffd17 	ldw	r2,-12(fp)
 4017e88:	00006506 	br	4018020 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017e8c:	0005303a 	rdctl	r2,status
 4017e90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017e94:	e0fffc17 	ldw	r3,-16(fp)
 4017e98:	00bfff84 	movi	r2,-2
 4017e9c:	1884703a 	and	r2,r3,r2
 4017ea0:	1001703a 	wrctl	status,r2
  
  return context;
 4017ea4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4017ea8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4017eac:	e0bffd17 	ldw	r2,-12(fp)
 4017eb0:	10800283 	ldbu	r2,10(r2)
 4017eb4:	10803fcc 	andi	r2,r2,255
 4017eb8:	10000326 	beq	r2,zero,4017ec8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4017ebc:	00800044 	movi	r2,1
 4017ec0:	e0bff505 	stb	r2,-44(fp)
 4017ec4:	00000106 	br	4017ecc <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4017ec8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4017ecc:	e0bffe03 	ldbu	r2,-8(fp)
 4017ed0:	10000326 	beq	r2,zero,4017ee0 <OSSemDel+0xec>
 4017ed4:	10800060 	cmpeqi	r2,r2,1
 4017ed8:	1000281e 	bne	r2,zero,4017f7c <OSSemDel+0x188>
 4017edc:	00004506 	br	4017ff4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4017ee0:	e0bff503 	ldbu	r2,-44(fp)
 4017ee4:	1000161e 	bne	r2,zero,4017f40 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4017ee8:	e0bffd17 	ldw	r2,-12(fp)
 4017eec:	00c00fc4 	movi	r3,63
 4017ef0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4017ef4:	e0bffd17 	ldw	r2,-12(fp)
 4017ef8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4017efc:	e0bffd17 	ldw	r2,-12(fp)
 4017f00:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4017f04:	d0e75117 	ldw	r3,-25276(gp)
 4017f08:	e0bffd17 	ldw	r2,-12(fp)
 4017f0c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4017f10:	e0bffd17 	ldw	r2,-12(fp)
 4017f14:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4017f18:	e0bffd17 	ldw	r2,-12(fp)
 4017f1c:	d0a75115 	stw	r2,-25276(gp)
 4017f20:	e0bff717 	ldw	r2,-36(fp)
 4017f24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017f28:	e0bff817 	ldw	r2,-32(fp)
 4017f2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4017f30:	e0bfff17 	ldw	r2,-4(fp)
 4017f34:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 4017f38:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4017f3c:	00003706 	br	401801c <OSSemDel+0x228>
 4017f40:	e0bff717 	ldw	r2,-36(fp)
 4017f44:	e0bff915 	stw	r2,-28(fp)
 4017f48:	e0bff917 	ldw	r2,-28(fp)
 4017f4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4017f50:	e0bfff17 	ldw	r2,-4(fp)
 4017f54:	00c01244 	movi	r3,73
 4017f58:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4017f5c:	e0bffd17 	ldw	r2,-12(fp)
 4017f60:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4017f64:	00002d06 	br	401801c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4017f68:	000f883a 	mov	r7,zero
 4017f6c:	01800044 	movi	r6,1
 4017f70:	000b883a 	mov	r5,zero
 4017f74:	e13ffd17 	ldw	r4,-12(fp)
 4017f78:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4017f7c:	e0bffd17 	ldw	r2,-12(fp)
 4017f80:	10800283 	ldbu	r2,10(r2)
 4017f84:	10803fcc 	andi	r2,r2,255
 4017f88:	103ff71e 	bne	r2,zero,4017f68 <__alt_mem_onchip_memory2_0+0xfc015f68>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4017f8c:	e0bffd17 	ldw	r2,-12(fp)
 4017f90:	00c00fc4 	movi	r3,63
 4017f94:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4017f98:	e0bffd17 	ldw	r2,-12(fp)
 4017f9c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4017fa0:	e0bffd17 	ldw	r2,-12(fp)
 4017fa4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4017fa8:	d0e75117 	ldw	r3,-25276(gp)
 4017fac:	e0bffd17 	ldw	r2,-12(fp)
 4017fb0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4017fb4:	e0bffd17 	ldw	r2,-12(fp)
 4017fb8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4017fbc:	e0bffd17 	ldw	r2,-12(fp)
 4017fc0:	d0a75115 	stw	r2,-25276(gp)
 4017fc4:	e0bff717 	ldw	r2,-36(fp)
 4017fc8:	e0bffa15 	stw	r2,-24(fp)
 4017fcc:	e0bffa17 	ldw	r2,-24(fp)
 4017fd0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4017fd4:	e0bff503 	ldbu	r2,-44(fp)
 4017fd8:	10800058 	cmpnei	r2,r2,1
 4017fdc:	1000011e 	bne	r2,zero,4017fe4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4017fe0:	40139d40 	call	40139d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4017fe4:	e0bfff17 	ldw	r2,-4(fp)
 4017fe8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4017fec:	e03ff615 	stw	zero,-40(fp)
             break;
 4017ff0:	00000a06 	br	401801c <OSSemDel+0x228>
 4017ff4:	e0bff717 	ldw	r2,-36(fp)
 4017ff8:	e0bffb15 	stw	r2,-20(fp)
 4017ffc:	e0bffb17 	ldw	r2,-20(fp)
 4018000:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4018004:	e0bfff17 	ldw	r2,-4(fp)
 4018008:	00c001c4 	movi	r3,7
 401800c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4018010:	e0bffd17 	ldw	r2,-12(fp)
 4018014:	e0bff615 	stw	r2,-40(fp)
             break;
 4018018:	0001883a 	nop
    }
    return (pevent_return);
 401801c:	e0bff617 	ldw	r2,-40(fp)
}
 4018020:	e037883a 	mov	sp,fp
 4018024:	dfc00117 	ldw	ra,4(sp)
 4018028:	df000017 	ldw	fp,0(sp)
 401802c:	dec00204 	addi	sp,sp,8
 4018030:	f800283a 	ret

04018034 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4018034:	defff504 	addi	sp,sp,-44
 4018038:	dfc00a15 	stw	ra,40(sp)
 401803c:	df000915 	stw	fp,36(sp)
 4018040:	df000904 	addi	fp,sp,36
 4018044:	e13ffd15 	stw	r4,-12(fp)
 4018048:	2805883a 	mov	r2,r5
 401804c:	e1bfff15 	stw	r6,-4(fp)
 4018050:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4018054:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4018058:	e0bfff17 	ldw	r2,-4(fp)
 401805c:	10007226 	beq	r2,zero,4018228 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4018060:	e0bffd17 	ldw	r2,-12(fp)
 4018064:	1000041e 	bne	r2,zero,4018078 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4018068:	e0bfff17 	ldw	r2,-4(fp)
 401806c:	00c00104 	movi	r3,4
 4018070:	10c00005 	stb	r3,0(r2)
        return;
 4018074:	00006d06 	br	401822c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4018078:	e0bffd17 	ldw	r2,-12(fp)
 401807c:	10800003 	ldbu	r2,0(r2)
 4018080:	10803fcc 	andi	r2,r2,255
 4018084:	108000e0 	cmpeqi	r2,r2,3
 4018088:	1000041e 	bne	r2,zero,401809c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 401808c:	e0bfff17 	ldw	r2,-4(fp)
 4018090:	00c00044 	movi	r3,1
 4018094:	10c00005 	stb	r3,0(r2)
        return;
 4018098:	00006406 	br	401822c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 401809c:	d0a75203 	ldbu	r2,-25272(gp)
 40180a0:	10803fcc 	andi	r2,r2,255
 40180a4:	10000426 	beq	r2,zero,40180b8 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 40180a8:	e0bfff17 	ldw	r2,-4(fp)
 40180ac:	00c00084 	movi	r3,2
 40180b0:	10c00005 	stb	r3,0(r2)
        return;
 40180b4:	00005d06 	br	401822c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 40180b8:	d0a74403 	ldbu	r2,-25328(gp)
 40180bc:	10803fcc 	andi	r2,r2,255
 40180c0:	10000426 	beq	r2,zero,40180d4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 40180c4:	e0bfff17 	ldw	r2,-4(fp)
 40180c8:	00c00344 	movi	r3,13
 40180cc:	10c00005 	stb	r3,0(r2)
        return;
 40180d0:	00005606 	br	401822c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40180d4:	0005303a 	rdctl	r2,status
 40180d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40180dc:	e0fffc17 	ldw	r3,-16(fp)
 40180e0:	00bfff84 	movi	r2,-2
 40180e4:	1884703a 	and	r2,r3,r2
 40180e8:	1001703a 	wrctl	status,r2
  
  return context;
 40180ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40180f0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 40180f4:	e0bffd17 	ldw	r2,-12(fp)
 40180f8:	1080020b 	ldhu	r2,8(r2)
 40180fc:	10bfffcc 	andi	r2,r2,65535
 4018100:	10000d26 	beq	r2,zero,4018138 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4018104:	e0bffd17 	ldw	r2,-12(fp)
 4018108:	1080020b 	ldhu	r2,8(r2)
 401810c:	10bfffc4 	addi	r2,r2,-1
 4018110:	1007883a 	mov	r3,r2
 4018114:	e0bffd17 	ldw	r2,-12(fp)
 4018118:	10c0020d 	sth	r3,8(r2)
 401811c:	e0bff717 	ldw	r2,-36(fp)
 4018120:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018124:	e0bff817 	ldw	r2,-32(fp)
 4018128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 401812c:	e0bfff17 	ldw	r2,-4(fp)
 4018130:	10000005 	stb	zero,0(r2)
        return;
 4018134:	00003d06 	br	401822c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4018138:	d0a75317 	ldw	r2,-25268(gp)
 401813c:	d0e75317 	ldw	r3,-25268(gp)
 4018140:	18c00c03 	ldbu	r3,48(r3)
 4018144:	18c00054 	ori	r3,r3,1
 4018148:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401814c:	d0a75317 	ldw	r2,-25268(gp)
 4018150:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4018154:	d0a75317 	ldw	r2,-25268(gp)
 4018158:	e0fffe0b 	ldhu	r3,-8(fp)
 401815c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4018160:	e13ffd17 	ldw	r4,-12(fp)
 4018164:	40131200 	call	4013120 <OS_EventTaskWait>
 4018168:	e0bff717 	ldw	r2,-36(fp)
 401816c:	e0bffb15 	stw	r2,-20(fp)
 4018170:	e0bffb17 	ldw	r2,-20(fp)
 4018174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4018178:	40139d40 	call	40139d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401817c:	0005303a 	rdctl	r2,status
 4018180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018184:	e0fff917 	ldw	r3,-28(fp)
 4018188:	00bfff84 	movi	r2,-2
 401818c:	1884703a 	and	r2,r3,r2
 4018190:	1001703a 	wrctl	status,r2
  
  return context;
 4018194:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4018198:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 401819c:	d0a75317 	ldw	r2,-25268(gp)
 40181a0:	10800c43 	ldbu	r2,49(r2)
 40181a4:	10803fcc 	andi	r2,r2,255
 40181a8:	10000326 	beq	r2,zero,40181b8 <OSSemPend+0x184>
 40181ac:	108000a0 	cmpeqi	r2,r2,2
 40181b0:	1000041e 	bne	r2,zero,40181c4 <OSSemPend+0x190>
 40181b4:	00000706 	br	40181d4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 40181b8:	e0bfff17 	ldw	r2,-4(fp)
 40181bc:	10000005 	stb	zero,0(r2)
             break;
 40181c0:	00000c06 	br	40181f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40181c4:	e0bfff17 	ldw	r2,-4(fp)
 40181c8:	00c00384 	movi	r3,14
 40181cc:	10c00005 	stb	r3,0(r2)
             break;
 40181d0:	00000806 	br	40181f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 40181d4:	d0a75317 	ldw	r2,-25268(gp)
 40181d8:	e17ffd17 	ldw	r5,-12(fp)
 40181dc:	1009883a 	mov	r4,r2
 40181e0:	40133800 	call	4013380 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40181e4:	e0bfff17 	ldw	r2,-4(fp)
 40181e8:	00c00284 	movi	r3,10
 40181ec:	10c00005 	stb	r3,0(r2)
             break;
 40181f0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40181f4:	d0a75317 	ldw	r2,-25268(gp)
 40181f8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 40181fc:	d0a75317 	ldw	r2,-25268(gp)
 4018200:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4018204:	d0a75317 	ldw	r2,-25268(gp)
 4018208:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 401820c:	d0a75317 	ldw	r2,-25268(gp)
 4018210:	10000815 	stw	zero,32(r2)
 4018214:	e0bff717 	ldw	r2,-36(fp)
 4018218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401821c:	e0bffa17 	ldw	r2,-24(fp)
 4018220:	1001703a 	wrctl	status,r2
 4018224:	00000106 	br	401822c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 4018228:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 401822c:	e037883a 	mov	sp,fp
 4018230:	dfc00117 	ldw	ra,4(sp)
 4018234:	df000017 	ldw	fp,0(sp)
 4018238:	dec00204 	addi	sp,sp,8
 401823c:	f800283a 	ret

04018240 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4018240:	defff604 	addi	sp,sp,-40
 4018244:	dfc00915 	stw	ra,36(sp)
 4018248:	df000815 	stw	fp,32(sp)
 401824c:	df000804 	addi	fp,sp,32
 4018250:	e13ffd15 	stw	r4,-12(fp)
 4018254:	2805883a 	mov	r2,r5
 4018258:	e1bfff15 	stw	r6,-4(fp)
 401825c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4018260:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4018264:	e0bfff17 	ldw	r2,-4(fp)
 4018268:	1000021e 	bne	r2,zero,4018274 <OSSemPendAbort+0x34>
        return (0);
 401826c:	0005883a 	mov	r2,zero
 4018270:	00004906 	br	4018398 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4018274:	e0bffd17 	ldw	r2,-12(fp)
 4018278:	1000051e 	bne	r2,zero,4018290 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 401827c:	e0bfff17 	ldw	r2,-4(fp)
 4018280:	00c00104 	movi	r3,4
 4018284:	10c00005 	stb	r3,0(r2)
        return (0);
 4018288:	0005883a 	mov	r2,zero
 401828c:	00004206 	br	4018398 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4018290:	e0bffd17 	ldw	r2,-12(fp)
 4018294:	10800003 	ldbu	r2,0(r2)
 4018298:	10803fcc 	andi	r2,r2,255
 401829c:	108000e0 	cmpeqi	r2,r2,3
 40182a0:	1000051e 	bne	r2,zero,40182b8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40182a4:	e0bfff17 	ldw	r2,-4(fp)
 40182a8:	00c00044 	movi	r3,1
 40182ac:	10c00005 	stb	r3,0(r2)
        return (0);
 40182b0:	0005883a 	mov	r2,zero
 40182b4:	00003806 	br	4018398 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40182b8:	0005303a 	rdctl	r2,status
 40182bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40182c0:	e0fffc17 	ldw	r3,-16(fp)
 40182c4:	00bfff84 	movi	r2,-2
 40182c8:	1884703a 	and	r2,r3,r2
 40182cc:	1001703a 	wrctl	status,r2
  
  return context;
 40182d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40182d4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 40182d8:	e0bffd17 	ldw	r2,-12(fp)
 40182dc:	10800283 	ldbu	r2,10(r2)
 40182e0:	10803fcc 	andi	r2,r2,255
 40182e4:	10002526 	beq	r2,zero,401837c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 40182e8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 40182ec:	e0bffe03 	ldbu	r2,-8(fp)
 40182f0:	10800060 	cmpeqi	r2,r2,1
 40182f4:	10000e26 	beq	r2,zero,4018330 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 40182f8:	00000806 	br	401831c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 40182fc:	01c00084 	movi	r7,2
 4018300:	01800044 	movi	r6,1
 4018304:	000b883a 	mov	r5,zero
 4018308:	e13ffd17 	ldw	r4,-12(fp)
 401830c:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                     nbr_tasks++;
 4018310:	e0bff803 	ldbu	r2,-32(fp)
 4018314:	10800044 	addi	r2,r2,1
 4018318:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 401831c:	e0bffd17 	ldw	r2,-12(fp)
 4018320:	10800283 	ldbu	r2,10(r2)
 4018324:	10803fcc 	andi	r2,r2,255
 4018328:	103ff41e 	bne	r2,zero,40182fc <__alt_mem_onchip_memory2_0+0xfc0162fc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 401832c:	00000906 	br	4018354 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4018330:	01c00084 	movi	r7,2
 4018334:	01800044 	movi	r6,1
 4018338:	000b883a 	mov	r5,zero
 401833c:	e13ffd17 	ldw	r4,-12(fp)
 4018340:	4012f880 	call	4012f88 <OS_EventTaskRdy>
                 nbr_tasks++;
 4018344:	e0bff803 	ldbu	r2,-32(fp)
 4018348:	10800044 	addi	r2,r2,1
 401834c:	e0bff805 	stb	r2,-32(fp)
                 break;
 4018350:	0001883a 	nop
 4018354:	e0bff917 	ldw	r2,-28(fp)
 4018358:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401835c:	e0bffa17 	ldw	r2,-24(fp)
 4018360:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4018364:	40139d40 	call	40139d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4018368:	e0bfff17 	ldw	r2,-4(fp)
 401836c:	00c00384 	movi	r3,14
 4018370:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 4018374:	e0bff803 	ldbu	r2,-32(fp)
 4018378:	00000706 	br	4018398 <OSSemPendAbort+0x158>
 401837c:	e0bff917 	ldw	r2,-28(fp)
 4018380:	e0bffb15 	stw	r2,-20(fp)
 4018384:	e0bffb17 	ldw	r2,-20(fp)
 4018388:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401838c:	e0bfff17 	ldw	r2,-4(fp)
 4018390:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4018394:	0005883a 	mov	r2,zero
}
 4018398:	e037883a 	mov	sp,fp
 401839c:	dfc00117 	ldw	ra,4(sp)
 40183a0:	df000017 	ldw	fp,0(sp)
 40183a4:	dec00204 	addi	sp,sp,8
 40183a8:	f800283a 	ret

040183ac <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 40183ac:	defff804 	addi	sp,sp,-32
 40183b0:	dfc00715 	stw	ra,28(sp)
 40183b4:	df000615 	stw	fp,24(sp)
 40183b8:	df000604 	addi	fp,sp,24
 40183bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40183c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40183c4:	e0bfff17 	ldw	r2,-4(fp)
 40183c8:	1000021e 	bne	r2,zero,40183d4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 40183cc:	00800104 	movi	r2,4
 40183d0:	00003506 	br	40184a8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40183d4:	e0bfff17 	ldw	r2,-4(fp)
 40183d8:	10800003 	ldbu	r2,0(r2)
 40183dc:	10803fcc 	andi	r2,r2,255
 40183e0:	108000e0 	cmpeqi	r2,r2,3
 40183e4:	1000021e 	bne	r2,zero,40183f0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 40183e8:	00800044 	movi	r2,1
 40183ec:	00002e06 	br	40184a8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40183f0:	0005303a 	rdctl	r2,status
 40183f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40183f8:	e0fffe17 	ldw	r3,-8(fp)
 40183fc:	00bfff84 	movi	r2,-2
 4018400:	1884703a 	and	r2,r3,r2
 4018404:	1001703a 	wrctl	status,r2
  
  return context;
 4018408:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 401840c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4018410:	e0bfff17 	ldw	r2,-4(fp)
 4018414:	10800283 	ldbu	r2,10(r2)
 4018418:	10803fcc 	andi	r2,r2,255
 401841c:	10000c26 	beq	r2,zero,4018450 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4018420:	000f883a 	mov	r7,zero
 4018424:	01800044 	movi	r6,1
 4018428:	000b883a 	mov	r5,zero
 401842c:	e13fff17 	ldw	r4,-4(fp)
 4018430:	4012f880 	call	4012f88 <OS_EventTaskRdy>
 4018434:	e0bffa17 	ldw	r2,-24(fp)
 4018438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401843c:	e0bffb17 	ldw	r2,-20(fp)
 4018440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4018444:	40139d40 	call	40139d4 <OS_Sched>
        return (OS_ERR_NONE);
 4018448:	0005883a 	mov	r2,zero
 401844c:	00001606 	br	40184a8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4018450:	e0bfff17 	ldw	r2,-4(fp)
 4018454:	1080020b 	ldhu	r2,8(r2)
 4018458:	10ffffcc 	andi	r3,r2,65535
 401845c:	00bfffd4 	movui	r2,65535
 4018460:	18800c26 	beq	r3,r2,4018494 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4018464:	e0bfff17 	ldw	r2,-4(fp)
 4018468:	1080020b 	ldhu	r2,8(r2)
 401846c:	10800044 	addi	r2,r2,1
 4018470:	1007883a 	mov	r3,r2
 4018474:	e0bfff17 	ldw	r2,-4(fp)
 4018478:	10c0020d 	sth	r3,8(r2)
 401847c:	e0bffa17 	ldw	r2,-24(fp)
 4018480:	e0bffc15 	stw	r2,-16(fp)
 4018484:	e0bffc17 	ldw	r2,-16(fp)
 4018488:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 401848c:	0005883a 	mov	r2,zero
 4018490:	00000506 	br	40184a8 <OSSemPost+0xfc>
 4018494:	e0bffa17 	ldw	r2,-24(fp)
 4018498:	e0bffd15 	stw	r2,-12(fp)
 401849c:	e0bffd17 	ldw	r2,-12(fp)
 40184a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 40184a4:	00800c84 	movi	r2,50
}
 40184a8:	e037883a 	mov	sp,fp
 40184ac:	dfc00117 	ldw	ra,4(sp)
 40184b0:	df000017 	ldw	fp,0(sp)
 40184b4:	dec00204 	addi	sp,sp,8
 40184b8:	f800283a 	ret

040184bc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 40184bc:	defff704 	addi	sp,sp,-36
 40184c0:	df000815 	stw	fp,32(sp)
 40184c4:	df000804 	addi	fp,sp,32
 40184c8:	e13ffe15 	stw	r4,-8(fp)
 40184cc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40184d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40184d4:	e0bffe17 	ldw	r2,-8(fp)
 40184d8:	1000021e 	bne	r2,zero,40184e4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 40184dc:	00800104 	movi	r2,4
 40184e0:	00003606 	br	40185bc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 40184e4:	e0bfff17 	ldw	r2,-4(fp)
 40184e8:	1000021e 	bne	r2,zero,40184f4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 40184ec:	00800244 	movi	r2,9
 40184f0:	00003206 	br	40185bc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40184f4:	e0bffe17 	ldw	r2,-8(fp)
 40184f8:	10800003 	ldbu	r2,0(r2)
 40184fc:	10803fcc 	andi	r2,r2,255
 4018500:	108000e0 	cmpeqi	r2,r2,3
 4018504:	1000021e 	bne	r2,zero,4018510 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4018508:	00800044 	movi	r2,1
 401850c:	00002b06 	br	40185bc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018510:	0005303a 	rdctl	r2,status
 4018514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018518:	e0fffd17 	ldw	r3,-12(fp)
 401851c:	00bfff84 	movi	r2,-2
 4018520:	1884703a 	and	r2,r3,r2
 4018524:	1001703a 	wrctl	status,r2
  
  return context;
 4018528:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 401852c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4018530:	e0bffe17 	ldw	r2,-8(fp)
 4018534:	10c00283 	ldbu	r3,10(r2)
 4018538:	e0bfff17 	ldw	r2,-4(fp)
 401853c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 4018540:	e0bffe17 	ldw	r2,-8(fp)
 4018544:	108002c4 	addi	r2,r2,11
 4018548:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 401854c:	e0bfff17 	ldw	r2,-4(fp)
 4018550:	10800084 	addi	r2,r2,2
 4018554:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4018558:	e03ffa05 	stb	zero,-24(fp)
 401855c:	00000b06 	br	401858c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 4018560:	e0bff917 	ldw	r2,-28(fp)
 4018564:	10c00044 	addi	r3,r2,1
 4018568:	e0fff915 	stw	r3,-28(fp)
 401856c:	e0fff817 	ldw	r3,-32(fp)
 4018570:	19000044 	addi	r4,r3,1
 4018574:	e13ff815 	stw	r4,-32(fp)
 4018578:	18c00003 	ldbu	r3,0(r3)
 401857c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4018580:	e0bffa03 	ldbu	r2,-24(fp)
 4018584:	10800044 	addi	r2,r2,1
 4018588:	e0bffa05 	stb	r2,-24(fp)
 401858c:	e0bffa03 	ldbu	r2,-24(fp)
 4018590:	108000f0 	cmpltui	r2,r2,3
 4018594:	103ff21e 	bne	r2,zero,4018560 <__alt_mem_onchip_memory2_0+0xfc016560>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4018598:	e0bffe17 	ldw	r2,-8(fp)
 401859c:	10c0020b 	ldhu	r3,8(r2)
 40185a0:	e0bfff17 	ldw	r2,-4(fp)
 40185a4:	10c0000d 	sth	r3,0(r2)
 40185a8:	e0bffb17 	ldw	r2,-20(fp)
 40185ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40185b0:	e0bffc17 	ldw	r2,-16(fp)
 40185b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40185b8:	0005883a 	mov	r2,zero
}
 40185bc:	e037883a 	mov	sp,fp
 40185c0:	df000017 	ldw	fp,0(sp)
 40185c4:	dec00104 	addi	sp,sp,4
 40185c8:	f800283a 	ret

040185cc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 40185cc:	defff904 	addi	sp,sp,-28
 40185d0:	df000615 	stw	fp,24(sp)
 40185d4:	df000604 	addi	fp,sp,24
 40185d8:	e13ffd15 	stw	r4,-12(fp)
 40185dc:	2805883a 	mov	r2,r5
 40185e0:	e1bfff15 	stw	r6,-4(fp)
 40185e4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40185e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40185ec:	e0bfff17 	ldw	r2,-4(fp)
 40185f0:	10003126 	beq	r2,zero,40186b8 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40185f4:	e0bffd17 	ldw	r2,-12(fp)
 40185f8:	1000041e 	bne	r2,zero,401860c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 40185fc:	e0bfff17 	ldw	r2,-4(fp)
 4018600:	00c00104 	movi	r3,4
 4018604:	10c00005 	stb	r3,0(r2)
        return;
 4018608:	00002c06 	br	40186bc <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401860c:	e0bffd17 	ldw	r2,-12(fp)
 4018610:	10800003 	ldbu	r2,0(r2)
 4018614:	10803fcc 	andi	r2,r2,255
 4018618:	108000e0 	cmpeqi	r2,r2,3
 401861c:	1000041e 	bne	r2,zero,4018630 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 4018620:	e0bfff17 	ldw	r2,-4(fp)
 4018624:	00c00044 	movi	r3,1
 4018628:	10c00005 	stb	r3,0(r2)
        return;
 401862c:	00002306 	br	40186bc <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018630:	0005303a 	rdctl	r2,status
 4018634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018638:	e0fffc17 	ldw	r3,-16(fp)
 401863c:	00bfff84 	movi	r2,-2
 4018640:	1884703a 	and	r2,r3,r2
 4018644:	1001703a 	wrctl	status,r2
  
  return context;
 4018648:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401864c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 4018650:	e0bfff17 	ldw	r2,-4(fp)
 4018654:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 4018658:	e0bffd17 	ldw	r2,-12(fp)
 401865c:	1080020b 	ldhu	r2,8(r2)
 4018660:	10bfffcc 	andi	r2,r2,65535
 4018664:	10000426 	beq	r2,zero,4018678 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 4018668:	e0bffd17 	ldw	r2,-12(fp)
 401866c:	e0fffe0b 	ldhu	r3,-8(fp)
 4018670:	10c0020d 	sth	r3,8(r2)
 4018674:	00000b06 	br	40186a4 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 4018678:	e0bffd17 	ldw	r2,-12(fp)
 401867c:	10800283 	ldbu	r2,10(r2)
 4018680:	10803fcc 	andi	r2,r2,255
 4018684:	1000041e 	bne	r2,zero,4018698 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4018688:	e0bffd17 	ldw	r2,-12(fp)
 401868c:	e0fffe0b 	ldhu	r3,-8(fp)
 4018690:	10c0020d 	sth	r3,8(r2)
 4018694:	00000306 	br	40186a4 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4018698:	e0bfff17 	ldw	r2,-4(fp)
 401869c:	00c01244 	movi	r3,73
 40186a0:	10c00005 	stb	r3,0(r2)
 40186a4:	e0bffa17 	ldw	r2,-24(fp)
 40186a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40186ac:	e0bffb17 	ldw	r2,-20(fp)
 40186b0:	1001703a 	wrctl	status,r2
 40186b4:	00000106 	br	40186bc <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 40186b8:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 40186bc:	e037883a 	mov	sp,fp
 40186c0:	df000017 	ldw	fp,0(sp)
 40186c4:	dec00104 	addi	sp,sp,4
 40186c8:	f800283a 	ret

040186cc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 40186cc:	defff104 	addi	sp,sp,-60
 40186d0:	dfc00e15 	stw	ra,56(sp)
 40186d4:	df000d15 	stw	fp,52(sp)
 40186d8:	df000d04 	addi	fp,sp,52
 40186dc:	2007883a 	mov	r3,r4
 40186e0:	2805883a 	mov	r2,r5
 40186e4:	e0fffe05 	stb	r3,-8(fp)
 40186e8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 40186ec:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 40186f0:	e0bffe03 	ldbu	r2,-8(fp)
 40186f4:	10800530 	cmpltui	r2,r2,20
 40186f8:	1000051e 	bne	r2,zero,4018710 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 40186fc:	e0bffe03 	ldbu	r2,-8(fp)
 4018700:	10803fe0 	cmpeqi	r2,r2,255
 4018704:	1000021e 	bne	r2,zero,4018710 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 4018708:	00800a84 	movi	r2,42
 401870c:	00012606 	br	4018ba8 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4018710:	e0bfff03 	ldbu	r2,-4(fp)
 4018714:	10800530 	cmpltui	r2,r2,20
 4018718:	1000021e 	bne	r2,zero,4018724 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 401871c:	00800a84 	movi	r2,42
 4018720:	00012106 	br	4018ba8 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018724:	0005303a 	rdctl	r2,status
 4018728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401872c:	e0fffd17 	ldw	r3,-12(fp)
 4018730:	00bfff84 	movi	r2,-2
 4018734:	1884703a 	and	r2,r3,r2
 4018738:	1001703a 	wrctl	status,r2
  
  return context;
 401873c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4018740:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 4018744:	e0ffff03 	ldbu	r3,-4(fp)
 4018748:	008100f4 	movhi	r2,1027
 401874c:	10a63004 	addi	r2,r2,-26432
 4018750:	18c7883a 	add	r3,r3,r3
 4018754:	18c7883a 	add	r3,r3,r3
 4018758:	10c5883a 	add	r2,r2,r3
 401875c:	10800017 	ldw	r2,0(r2)
 4018760:	10000626 	beq	r2,zero,401877c <OSTaskChangePrio+0xb0>
 4018764:	e0bff517 	ldw	r2,-44(fp)
 4018768:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401876c:	e0bff617 	ldw	r2,-40(fp)
 4018770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 4018774:	00800a04 	movi	r2,40
 4018778:	00010b06 	br	4018ba8 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 401877c:	e0bffe03 	ldbu	r2,-8(fp)
 4018780:	10803fd8 	cmpnei	r2,r2,255
 4018784:	1000031e 	bne	r2,zero,4018794 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4018788:	d0a75317 	ldw	r2,-25268(gp)
 401878c:	10800c83 	ldbu	r2,50(r2)
 4018790:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4018794:	e0fffe03 	ldbu	r3,-8(fp)
 4018798:	008100f4 	movhi	r2,1027
 401879c:	10a63004 	addi	r2,r2,-26432
 40187a0:	18c7883a 	add	r3,r3,r3
 40187a4:	18c7883a 	add	r3,r3,r3
 40187a8:	10c5883a 	add	r2,r2,r3
 40187ac:	10800017 	ldw	r2,0(r2)
 40187b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 40187b4:	e0bff817 	ldw	r2,-32(fp)
 40187b8:	1000061e 	bne	r2,zero,40187d4 <OSTaskChangePrio+0x108>
 40187bc:	e0bff517 	ldw	r2,-44(fp)
 40187c0:	e0bff715 	stw	r2,-36(fp)
 40187c4:	e0bff717 	ldw	r2,-36(fp)
 40187c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 40187cc:	00800a44 	movi	r2,41
 40187d0:	0000f506 	br	4018ba8 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 40187d4:	e0bff817 	ldw	r2,-32(fp)
 40187d8:	10800058 	cmpnei	r2,r2,1
 40187dc:	1000061e 	bne	r2,zero,40187f8 <OSTaskChangePrio+0x12c>
 40187e0:	e0bff517 	ldw	r2,-44(fp)
 40187e4:	e0bff915 	stw	r2,-28(fp)
 40187e8:	e0bff917 	ldw	r2,-28(fp)
 40187ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 40187f0:	008010c4 	movi	r2,67
 40187f4:	0000ec06 	br	4018ba8 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 40187f8:	e0bfff03 	ldbu	r2,-4(fp)
 40187fc:	1004d0fa 	srli	r2,r2,3
 4018800:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4018804:	e0bfff03 	ldbu	r2,-4(fp)
 4018808:	108001cc 	andi	r2,r2,7
 401880c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 4018810:	e0bffb03 	ldbu	r2,-20(fp)
 4018814:	00c00044 	movi	r3,1
 4018818:	1884983a 	sll	r2,r3,r2
 401881c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 4018820:	e0bffb43 	ldbu	r2,-19(fp)
 4018824:	00c00044 	movi	r3,1
 4018828:	1884983a 	sll	r2,r3,r2
 401882c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 4018830:	e0fffe03 	ldbu	r3,-8(fp)
 4018834:	008100f4 	movhi	r2,1027
 4018838:	10a63004 	addi	r2,r2,-26432
 401883c:	18c7883a 	add	r3,r3,r3
 4018840:	18c7883a 	add	r3,r3,r3
 4018844:	10c5883a 	add	r2,r2,r3
 4018848:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 401884c:	e0ffff03 	ldbu	r3,-4(fp)
 4018850:	008100f4 	movhi	r2,1027
 4018854:	10a63004 	addi	r2,r2,-26432
 4018858:	18c7883a 	add	r3,r3,r3
 401885c:	18c7883a 	add	r3,r3,r3
 4018860:	10c5883a 	add	r2,r2,r3
 4018864:	e0fff817 	ldw	r3,-32(fp)
 4018868:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 401886c:	e0bff817 	ldw	r2,-32(fp)
 4018870:	10800d03 	ldbu	r2,52(r2)
 4018874:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 4018878:	e0bff817 	ldw	r2,-32(fp)
 401887c:	10800d83 	ldbu	r2,54(r2)
 4018880:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4018884:	e0bff817 	ldw	r2,-32(fp)
 4018888:	10800d43 	ldbu	r2,53(r2)
 401888c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4018890:	e0fffc03 	ldbu	r3,-16(fp)
 4018894:	d0a75044 	addi	r2,gp,-25279
 4018898:	1885883a 	add	r2,r3,r2
 401889c:	10c00003 	ldbu	r3,0(r2)
 40188a0:	e0bffc83 	ldbu	r2,-14(fp)
 40188a4:	1884703a 	and	r2,r3,r2
 40188a8:	10803fcc 	andi	r2,r2,255
 40188ac:	10002826 	beq	r2,zero,4018950 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 40188b0:	e0fffc03 	ldbu	r3,-16(fp)
 40188b4:	e13ffc03 	ldbu	r4,-16(fp)
 40188b8:	d0a75044 	addi	r2,gp,-25279
 40188bc:	2085883a 	add	r2,r4,r2
 40188c0:	10800003 	ldbu	r2,0(r2)
 40188c4:	1009883a 	mov	r4,r2
 40188c8:	e0bffc83 	ldbu	r2,-14(fp)
 40188cc:	0084303a 	nor	r2,zero,r2
 40188d0:	2084703a 	and	r2,r4,r2
 40188d4:	1009883a 	mov	r4,r2
 40188d8:	d0a75044 	addi	r2,gp,-25279
 40188dc:	1885883a 	add	r2,r3,r2
 40188e0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 40188e4:	e0fffc03 	ldbu	r3,-16(fp)
 40188e8:	d0a75044 	addi	r2,gp,-25279
 40188ec:	1885883a 	add	r2,r3,r2
 40188f0:	10800003 	ldbu	r2,0(r2)
 40188f4:	10803fcc 	andi	r2,r2,255
 40188f8:	1000061e 	bne	r2,zero,4018914 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 40188fc:	e0bffc43 	ldbu	r2,-15(fp)
 4018900:	0084303a 	nor	r2,zero,r2
 4018904:	1007883a 	mov	r3,r2
 4018908:	d0a75003 	ldbu	r2,-25280(gp)
 401890c:	1884703a 	and	r2,r3,r2
 4018910:	d0a75005 	stb	r2,-25280(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4018914:	d0e75003 	ldbu	r3,-25280(gp)
 4018918:	e0bffb83 	ldbu	r2,-18(fp)
 401891c:	1884b03a 	or	r2,r3,r2
 4018920:	d0a75005 	stb	r2,-25280(gp)
         OSRdyTbl[y_new] |= bitx_new;
 4018924:	e0fffb03 	ldbu	r3,-20(fp)
 4018928:	e13ffb03 	ldbu	r4,-20(fp)
 401892c:	d0a75044 	addi	r2,gp,-25279
 4018930:	2085883a 	add	r2,r4,r2
 4018934:	11000003 	ldbu	r4,0(r2)
 4018938:	e0bffbc3 	ldbu	r2,-17(fp)
 401893c:	2084b03a 	or	r2,r4,r2
 4018940:	1009883a 	mov	r4,r2
 4018944:	d0a75044 	addi	r2,gp,-25279
 4018948:	1885883a 	add	r2,r3,r2
 401894c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 4018950:	e0bff817 	ldw	r2,-32(fp)
 4018954:	10800717 	ldw	r2,28(r2)
 4018958:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 401895c:	e0bff317 	ldw	r2,-52(fp)
 4018960:	10003326 	beq	r2,zero,4018a30 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4018964:	e0bffc03 	ldbu	r2,-16(fp)
 4018968:	e0fffc03 	ldbu	r3,-16(fp)
 401896c:	e13ff317 	ldw	r4,-52(fp)
 4018970:	20c7883a 	add	r3,r4,r3
 4018974:	18c002c4 	addi	r3,r3,11
 4018978:	18c00003 	ldbu	r3,0(r3)
 401897c:	1809883a 	mov	r4,r3
 4018980:	e0fffc83 	ldbu	r3,-14(fp)
 4018984:	00c6303a 	nor	r3,zero,r3
 4018988:	20c6703a 	and	r3,r4,r3
 401898c:	1809883a 	mov	r4,r3
 4018990:	e0fff317 	ldw	r3,-52(fp)
 4018994:	1885883a 	add	r2,r3,r2
 4018998:	108002c4 	addi	r2,r2,11
 401899c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 40189a0:	e0bffc03 	ldbu	r2,-16(fp)
 40189a4:	e0fff317 	ldw	r3,-52(fp)
 40189a8:	1885883a 	add	r2,r3,r2
 40189ac:	108002c4 	addi	r2,r2,11
 40189b0:	10800003 	ldbu	r2,0(r2)
 40189b4:	10803fcc 	andi	r2,r2,255
 40189b8:	1000091e 	bne	r2,zero,40189e0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 40189bc:	e0bff317 	ldw	r2,-52(fp)
 40189c0:	10800283 	ldbu	r2,10(r2)
 40189c4:	1007883a 	mov	r3,r2
 40189c8:	e0bffc43 	ldbu	r2,-15(fp)
 40189cc:	0084303a 	nor	r2,zero,r2
 40189d0:	1884703a 	and	r2,r3,r2
 40189d4:	1007883a 	mov	r3,r2
 40189d8:	e0bff317 	ldw	r2,-52(fp)
 40189dc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 40189e0:	e0bff317 	ldw	r2,-52(fp)
 40189e4:	10c00283 	ldbu	r3,10(r2)
 40189e8:	e0bffb83 	ldbu	r2,-18(fp)
 40189ec:	1884b03a 	or	r2,r3,r2
 40189f0:	1007883a 	mov	r3,r2
 40189f4:	e0bff317 	ldw	r2,-52(fp)
 40189f8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 40189fc:	e0bffb03 	ldbu	r2,-20(fp)
 4018a00:	e0fffb03 	ldbu	r3,-20(fp)
 4018a04:	e13ff317 	ldw	r4,-52(fp)
 4018a08:	20c7883a 	add	r3,r4,r3
 4018a0c:	18c002c4 	addi	r3,r3,11
 4018a10:	19000003 	ldbu	r4,0(r3)
 4018a14:	e0fffbc3 	ldbu	r3,-17(fp)
 4018a18:	20c6b03a 	or	r3,r4,r3
 4018a1c:	1809883a 	mov	r4,r3
 4018a20:	e0fff317 	ldw	r3,-52(fp)
 4018a24:	1885883a 	add	r2,r3,r2
 4018a28:	108002c4 	addi	r2,r2,11
 4018a2c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4018a30:	e0bff817 	ldw	r2,-32(fp)
 4018a34:	10800817 	ldw	r2,32(r2)
 4018a38:	10004226 	beq	r2,zero,4018b44 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4018a3c:	e0bff817 	ldw	r2,-32(fp)
 4018a40:	10800817 	ldw	r2,32(r2)
 4018a44:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 4018a48:	e0bff417 	ldw	r2,-48(fp)
 4018a4c:	10800017 	ldw	r2,0(r2)
 4018a50:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 4018a54:	00003906 	br	4018b3c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4018a58:	e0bffc03 	ldbu	r2,-16(fp)
 4018a5c:	e0fffc03 	ldbu	r3,-16(fp)
 4018a60:	e13ff317 	ldw	r4,-52(fp)
 4018a64:	20c7883a 	add	r3,r4,r3
 4018a68:	18c002c4 	addi	r3,r3,11
 4018a6c:	18c00003 	ldbu	r3,0(r3)
 4018a70:	1809883a 	mov	r4,r3
 4018a74:	e0fffc83 	ldbu	r3,-14(fp)
 4018a78:	00c6303a 	nor	r3,zero,r3
 4018a7c:	20c6703a 	and	r3,r4,r3
 4018a80:	1809883a 	mov	r4,r3
 4018a84:	e0fff317 	ldw	r3,-52(fp)
 4018a88:	1885883a 	add	r2,r3,r2
 4018a8c:	108002c4 	addi	r2,r2,11
 4018a90:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 4018a94:	e0bffc03 	ldbu	r2,-16(fp)
 4018a98:	e0fff317 	ldw	r3,-52(fp)
 4018a9c:	1885883a 	add	r2,r3,r2
 4018aa0:	108002c4 	addi	r2,r2,11
 4018aa4:	10800003 	ldbu	r2,0(r2)
 4018aa8:	10803fcc 	andi	r2,r2,255
 4018aac:	1000091e 	bne	r2,zero,4018ad4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 4018ab0:	e0bff317 	ldw	r2,-52(fp)
 4018ab4:	10800283 	ldbu	r2,10(r2)
 4018ab8:	1007883a 	mov	r3,r2
 4018abc:	e0bffc43 	ldbu	r2,-15(fp)
 4018ac0:	0084303a 	nor	r2,zero,r2
 4018ac4:	1884703a 	and	r2,r3,r2
 4018ac8:	1007883a 	mov	r3,r2
 4018acc:	e0bff317 	ldw	r2,-52(fp)
 4018ad0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4018ad4:	e0bff317 	ldw	r2,-52(fp)
 4018ad8:	10c00283 	ldbu	r3,10(r2)
 4018adc:	e0bffb83 	ldbu	r2,-18(fp)
 4018ae0:	1884b03a 	or	r2,r3,r2
 4018ae4:	1007883a 	mov	r3,r2
 4018ae8:	e0bff317 	ldw	r2,-52(fp)
 4018aec:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4018af0:	e0bffb03 	ldbu	r2,-20(fp)
 4018af4:	e0fffb03 	ldbu	r3,-20(fp)
 4018af8:	e13ff317 	ldw	r4,-52(fp)
 4018afc:	20c7883a 	add	r3,r4,r3
 4018b00:	18c002c4 	addi	r3,r3,11
 4018b04:	19000003 	ldbu	r4,0(r3)
 4018b08:	e0fffbc3 	ldbu	r3,-17(fp)
 4018b0c:	20c6b03a 	or	r3,r4,r3
 4018b10:	1809883a 	mov	r4,r3
 4018b14:	e0fff317 	ldw	r3,-52(fp)
 4018b18:	1885883a 	add	r2,r3,r2
 4018b1c:	108002c4 	addi	r2,r2,11
 4018b20:	11000005 	stb	r4,0(r2)
            pevents++;
 4018b24:	e0bff417 	ldw	r2,-48(fp)
 4018b28:	10800104 	addi	r2,r2,4
 4018b2c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 4018b30:	e0bff417 	ldw	r2,-48(fp)
 4018b34:	10800017 	ldw	r2,0(r2)
 4018b38:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4018b3c:	e0bff317 	ldw	r2,-52(fp)
 4018b40:	103fc51e 	bne	r2,zero,4018a58 <__alt_mem_onchip_memory2_0+0xfc016a58>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4018b44:	e0bff817 	ldw	r2,-32(fp)
 4018b48:	e0ffff03 	ldbu	r3,-4(fp)
 4018b4c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 4018b50:	e0bff817 	ldw	r2,-32(fp)
 4018b54:	e0fffb03 	ldbu	r3,-20(fp)
 4018b58:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 4018b5c:	e0bff817 	ldw	r2,-32(fp)
 4018b60:	e0fffb43 	ldbu	r3,-19(fp)
 4018b64:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 4018b68:	e0bff817 	ldw	r2,-32(fp)
 4018b6c:	e0fffb83 	ldbu	r3,-18(fp)
 4018b70:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 4018b74:	e0bff817 	ldw	r2,-32(fp)
 4018b78:	e0fffbc3 	ldbu	r3,-17(fp)
 4018b7c:	10c00d45 	stb	r3,53(r2)
 4018b80:	e0bff517 	ldw	r2,-44(fp)
 4018b84:	e0bffa15 	stw	r2,-24(fp)
 4018b88:	e0bffa17 	ldw	r2,-24(fp)
 4018b8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4018b90:	d0a74443 	ldbu	r2,-25327(gp)
 4018b94:	10803fcc 	andi	r2,r2,255
 4018b98:	10800058 	cmpnei	r2,r2,1
 4018b9c:	1000011e 	bne	r2,zero,4018ba4 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 4018ba0:	40139d40 	call	40139d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4018ba4:	0005883a 	mov	r2,zero
}
 4018ba8:	e037883a 	mov	sp,fp
 4018bac:	dfc00117 	ldw	ra,4(sp)
 4018bb0:	df000017 	ldw	fp,0(sp)
 4018bb4:	dec00204 	addi	sp,sp,8
 4018bb8:	f800283a 	ret

04018bbc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 4018bbc:	deffee04 	addi	sp,sp,-72
 4018bc0:	dfc01115 	stw	ra,68(sp)
 4018bc4:	df001015 	stw	fp,64(sp)
 4018bc8:	df001004 	addi	fp,sp,64
 4018bcc:	e13ffc15 	stw	r4,-16(fp)
 4018bd0:	e17ffd15 	stw	r5,-12(fp)
 4018bd4:	e1bffe15 	stw	r6,-8(fp)
 4018bd8:	3805883a 	mov	r2,r7
 4018bdc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4018be0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4018be4:	e0bfff03 	ldbu	r2,-4(fp)
 4018be8:	10800570 	cmpltui	r2,r2,21
 4018bec:	1000021e 	bne	r2,zero,4018bf8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 4018bf0:	00800a84 	movi	r2,42
 4018bf4:	00005706 	br	4018d54 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018bf8:	0005303a 	rdctl	r2,status
 4018bfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018c00:	e0fffb17 	ldw	r3,-20(fp)
 4018c04:	00bfff84 	movi	r2,-2
 4018c08:	1884703a 	and	r2,r3,r2
 4018c0c:	1001703a 	wrctl	status,r2
  
  return context;
 4018c10:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4018c14:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4018c18:	d0a75203 	ldbu	r2,-25272(gp)
 4018c1c:	10803fcc 	andi	r2,r2,255
 4018c20:	10000626 	beq	r2,zero,4018c3c <OSTaskCreate+0x80>
 4018c24:	e0bff317 	ldw	r2,-52(fp)
 4018c28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018c2c:	e0bff417 	ldw	r2,-48(fp)
 4018c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4018c34:	00800f04 	movi	r2,60
 4018c38:	00004606 	br	4018d54 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4018c3c:	e0ffff03 	ldbu	r3,-4(fp)
 4018c40:	008100f4 	movhi	r2,1027
 4018c44:	10a63004 	addi	r2,r2,-26432
 4018c48:	18c7883a 	add	r3,r3,r3
 4018c4c:	18c7883a 	add	r3,r3,r3
 4018c50:	10c5883a 	add	r2,r2,r3
 4018c54:	10800017 	ldw	r2,0(r2)
 4018c58:	1000391e 	bne	r2,zero,4018d40 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4018c5c:	e0ffff03 	ldbu	r3,-4(fp)
 4018c60:	008100f4 	movhi	r2,1027
 4018c64:	10a63004 	addi	r2,r2,-26432
 4018c68:	18c7883a 	add	r3,r3,r3
 4018c6c:	18c7883a 	add	r3,r3,r3
 4018c70:	10c5883a 	add	r2,r2,r3
 4018c74:	00c00044 	movi	r3,1
 4018c78:	10c00015 	stw	r3,0(r2)
 4018c7c:	e0bff317 	ldw	r2,-52(fp)
 4018c80:	e0bff515 	stw	r2,-44(fp)
 4018c84:	e0bff517 	ldw	r2,-44(fp)
 4018c88:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 4018c8c:	000f883a 	mov	r7,zero
 4018c90:	e1bffe17 	ldw	r6,-8(fp)
 4018c94:	e17ffd17 	ldw	r5,-12(fp)
 4018c98:	e13ffc17 	ldw	r4,-16(fp)
 4018c9c:	401bf780 	call	401bf78 <OSTaskStkInit>
 4018ca0:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 4018ca4:	e0bfff03 	ldbu	r2,-4(fp)
 4018ca8:	d8000215 	stw	zero,8(sp)
 4018cac:	d8000115 	stw	zero,4(sp)
 4018cb0:	d8000015 	stw	zero,0(sp)
 4018cb4:	000f883a 	mov	r7,zero
 4018cb8:	000d883a 	mov	r6,zero
 4018cbc:	e17ff717 	ldw	r5,-36(fp)
 4018cc0:	1009883a 	mov	r4,r2
 4018cc4:	4013dd40 	call	4013dd4 <OS_TCBInit>
 4018cc8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 4018ccc:	e0bff803 	ldbu	r2,-32(fp)
 4018cd0:	1000061e 	bne	r2,zero,4018cec <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4018cd4:	d0a74443 	ldbu	r2,-25327(gp)
 4018cd8:	10803fcc 	andi	r2,r2,255
 4018cdc:	10800058 	cmpnei	r2,r2,1
 4018ce0:	1000151e 	bne	r2,zero,4018d38 <OSTaskCreate+0x17c>
                OS_Sched();
 4018ce4:	40139d40 	call	40139d4 <OS_Sched>
 4018ce8:	00001306 	br	4018d38 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018cec:	0005303a 	rdctl	r2,status
 4018cf0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018cf4:	e0fffa17 	ldw	r3,-24(fp)
 4018cf8:	00bfff84 	movi	r2,-2
 4018cfc:	1884703a 	and	r2,r3,r2
 4018d00:	1001703a 	wrctl	status,r2
  
  return context;
 4018d04:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4018d08:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4018d0c:	e0ffff03 	ldbu	r3,-4(fp)
 4018d10:	008100f4 	movhi	r2,1027
 4018d14:	10a63004 	addi	r2,r2,-26432
 4018d18:	18c7883a 	add	r3,r3,r3
 4018d1c:	18c7883a 	add	r3,r3,r3
 4018d20:	10c5883a 	add	r2,r2,r3
 4018d24:	10000015 	stw	zero,0(r2)
 4018d28:	e0bff317 	ldw	r2,-52(fp)
 4018d2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018d30:	e0bff617 	ldw	r2,-40(fp)
 4018d34:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4018d38:	e0bff803 	ldbu	r2,-32(fp)
 4018d3c:	00000506 	br	4018d54 <OSTaskCreate+0x198>
 4018d40:	e0bff317 	ldw	r2,-52(fp)
 4018d44:	e0bff915 	stw	r2,-28(fp)
 4018d48:	e0bff917 	ldw	r2,-28(fp)
 4018d4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4018d50:	00800a04 	movi	r2,40
}
 4018d54:	e037883a 	mov	sp,fp
 4018d58:	dfc00117 	ldw	ra,4(sp)
 4018d5c:	df000017 	ldw	fp,0(sp)
 4018d60:	dec00204 	addi	sp,sp,8
 4018d64:	f800283a 	ret

04018d68 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 4018d68:	deffec04 	addi	sp,sp,-80
 4018d6c:	dfc01315 	stw	ra,76(sp)
 4018d70:	df001215 	stw	fp,72(sp)
 4018d74:	df001204 	addi	fp,sp,72
 4018d78:	e13ffa15 	stw	r4,-24(fp)
 4018d7c:	e17ffb15 	stw	r5,-20(fp)
 4018d80:	e1bffc15 	stw	r6,-16(fp)
 4018d84:	3809883a 	mov	r4,r7
 4018d88:	e0c00217 	ldw	r3,8(fp)
 4018d8c:	e0800617 	ldw	r2,24(fp)
 4018d90:	e13ffd05 	stb	r4,-12(fp)
 4018d94:	e0fffe0d 	sth	r3,-8(fp)
 4018d98:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4018d9c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4018da0:	e0bffd03 	ldbu	r2,-12(fp)
 4018da4:	10800570 	cmpltui	r2,r2,21
 4018da8:	1000021e 	bne	r2,zero,4018db4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 4018dac:	00800a84 	movi	r2,42
 4018db0:	00006106 	br	4018f38 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018db4:	0005303a 	rdctl	r2,status
 4018db8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018dbc:	e0fff917 	ldw	r3,-28(fp)
 4018dc0:	00bfff84 	movi	r2,-2
 4018dc4:	1884703a 	and	r2,r3,r2
 4018dc8:	1001703a 	wrctl	status,r2
  
  return context;
 4018dcc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4018dd0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4018dd4:	d0a75203 	ldbu	r2,-25272(gp)
 4018dd8:	10803fcc 	andi	r2,r2,255
 4018ddc:	10000626 	beq	r2,zero,4018df8 <OSTaskCreateExt+0x90>
 4018de0:	e0bff117 	ldw	r2,-60(fp)
 4018de4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018de8:	e0bff217 	ldw	r2,-56(fp)
 4018dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4018df0:	00800f04 	movi	r2,60
 4018df4:	00005006 	br	4018f38 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4018df8:	e0fffd03 	ldbu	r3,-12(fp)
 4018dfc:	008100f4 	movhi	r2,1027
 4018e00:	10a63004 	addi	r2,r2,-26432
 4018e04:	18c7883a 	add	r3,r3,r3
 4018e08:	18c7883a 	add	r3,r3,r3
 4018e0c:	10c5883a 	add	r2,r2,r3
 4018e10:	10800017 	ldw	r2,0(r2)
 4018e14:	1000431e 	bne	r2,zero,4018f24 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4018e18:	e0fffd03 	ldbu	r3,-12(fp)
 4018e1c:	008100f4 	movhi	r2,1027
 4018e20:	10a63004 	addi	r2,r2,-26432
 4018e24:	18c7883a 	add	r3,r3,r3
 4018e28:	18c7883a 	add	r3,r3,r3
 4018e2c:	10c5883a 	add	r2,r2,r3
 4018e30:	00c00044 	movi	r3,1
 4018e34:	10c00015 	stw	r3,0(r2)
 4018e38:	e0bff117 	ldw	r2,-60(fp)
 4018e3c:	e0bff315 	stw	r2,-52(fp)
 4018e40:	e0bff317 	ldw	r2,-52(fp)
 4018e44:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 4018e48:	e0bfff0b 	ldhu	r2,-4(fp)
 4018e4c:	100d883a 	mov	r6,r2
 4018e50:	e1400417 	ldw	r5,16(fp)
 4018e54:	e1000317 	ldw	r4,12(fp)
 4018e58:	4019dc80 	call	4019dc8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 4018e5c:	e0bfff0b 	ldhu	r2,-4(fp)
 4018e60:	100f883a 	mov	r7,r2
 4018e64:	e1bffc17 	ldw	r6,-16(fp)
 4018e68:	e17ffb17 	ldw	r5,-20(fp)
 4018e6c:	e13ffa17 	ldw	r4,-24(fp)
 4018e70:	401bf780 	call	401bf78 <OSTaskStkInit>
 4018e74:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 4018e78:	e0fffd03 	ldbu	r3,-12(fp)
 4018e7c:	e13ffe0b 	ldhu	r4,-8(fp)
 4018e80:	e0bfff0b 	ldhu	r2,-4(fp)
 4018e84:	d8800215 	stw	r2,8(sp)
 4018e88:	e0800517 	ldw	r2,20(fp)
 4018e8c:	d8800115 	stw	r2,4(sp)
 4018e90:	e0800417 	ldw	r2,16(fp)
 4018e94:	d8800015 	stw	r2,0(sp)
 4018e98:	200f883a 	mov	r7,r4
 4018e9c:	e1800317 	ldw	r6,12(fp)
 4018ea0:	e17ff517 	ldw	r5,-44(fp)
 4018ea4:	1809883a 	mov	r4,r3
 4018ea8:	4013dd40 	call	4013dd4 <OS_TCBInit>
 4018eac:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 4018eb0:	e0bff603 	ldbu	r2,-40(fp)
 4018eb4:	1000061e 	bne	r2,zero,4018ed0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 4018eb8:	d0a74443 	ldbu	r2,-25327(gp)
 4018ebc:	10803fcc 	andi	r2,r2,255
 4018ec0:	10800058 	cmpnei	r2,r2,1
 4018ec4:	1000151e 	bne	r2,zero,4018f1c <OSTaskCreateExt+0x1b4>
                OS_Sched();
 4018ec8:	40139d40 	call	40139d4 <OS_Sched>
 4018ecc:	00001306 	br	4018f1c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018ed0:	0005303a 	rdctl	r2,status
 4018ed4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018ed8:	e0fff817 	ldw	r3,-32(fp)
 4018edc:	00bfff84 	movi	r2,-2
 4018ee0:	1884703a 	and	r2,r3,r2
 4018ee4:	1001703a 	wrctl	status,r2
  
  return context;
 4018ee8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4018eec:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4018ef0:	e0fffd03 	ldbu	r3,-12(fp)
 4018ef4:	008100f4 	movhi	r2,1027
 4018ef8:	10a63004 	addi	r2,r2,-26432
 4018efc:	18c7883a 	add	r3,r3,r3
 4018f00:	18c7883a 	add	r3,r3,r3
 4018f04:	10c5883a 	add	r2,r2,r3
 4018f08:	10000015 	stw	zero,0(r2)
 4018f0c:	e0bff117 	ldw	r2,-60(fp)
 4018f10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018f14:	e0bff417 	ldw	r2,-48(fp)
 4018f18:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4018f1c:	e0bff603 	ldbu	r2,-40(fp)
 4018f20:	00000506 	br	4018f38 <OSTaskCreateExt+0x1d0>
 4018f24:	e0bff117 	ldw	r2,-60(fp)
 4018f28:	e0bff715 	stw	r2,-36(fp)
 4018f2c:	e0bff717 	ldw	r2,-36(fp)
 4018f30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4018f34:	00800a04 	movi	r2,40
}
 4018f38:	e037883a 	mov	sp,fp
 4018f3c:	dfc00117 	ldw	ra,4(sp)
 4018f40:	df000017 	ldw	fp,0(sp)
 4018f44:	dec00204 	addi	sp,sp,8
 4018f48:	f800283a 	ret

04018f4c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 4018f4c:	defff404 	addi	sp,sp,-48
 4018f50:	dfc00b15 	stw	ra,44(sp)
 4018f54:	df000a15 	stw	fp,40(sp)
 4018f58:	df000a04 	addi	fp,sp,40
 4018f5c:	2005883a 	mov	r2,r4
 4018f60:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 4018f64:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 4018f68:	d0a75203 	ldbu	r2,-25272(gp)
 4018f6c:	10803fcc 	andi	r2,r2,255
 4018f70:	10000226 	beq	r2,zero,4018f7c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 4018f74:	00801004 	movi	r2,64
 4018f78:	0000c006 	br	401927c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4018f7c:	e0bfff03 	ldbu	r2,-4(fp)
 4018f80:	10800518 	cmpnei	r2,r2,20
 4018f84:	1000021e 	bne	r2,zero,4018f90 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 4018f88:	00800f84 	movi	r2,62
 4018f8c:	0000bb06 	br	401927c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4018f90:	e0bfff03 	ldbu	r2,-4(fp)
 4018f94:	10800530 	cmpltui	r2,r2,20
 4018f98:	1000051e 	bne	r2,zero,4018fb0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 4018f9c:	e0bfff03 	ldbu	r2,-4(fp)
 4018fa0:	10803fe0 	cmpeqi	r2,r2,255
 4018fa4:	1000021e 	bne	r2,zero,4018fb0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 4018fa8:	00800a84 	movi	r2,42
 4018fac:	0000b306 	br	401927c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018fb0:	0005303a 	rdctl	r2,status
 4018fb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018fb8:	e0fffe17 	ldw	r3,-8(fp)
 4018fbc:	00bfff84 	movi	r2,-2
 4018fc0:	1884703a 	and	r2,r3,r2
 4018fc4:	1001703a 	wrctl	status,r2
  
  return context;
 4018fc8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4018fcc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 4018fd0:	e0bfff03 	ldbu	r2,-4(fp)
 4018fd4:	10803fd8 	cmpnei	r2,r2,255
 4018fd8:	1000031e 	bne	r2,zero,4018fe8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 4018fdc:	d0a75317 	ldw	r2,-25268(gp)
 4018fe0:	10800c83 	ldbu	r2,50(r2)
 4018fe4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4018fe8:	e0ffff03 	ldbu	r3,-4(fp)
 4018fec:	008100f4 	movhi	r2,1027
 4018ff0:	10a63004 	addi	r2,r2,-26432
 4018ff4:	18c7883a 	add	r3,r3,r3
 4018ff8:	18c7883a 	add	r3,r3,r3
 4018ffc:	10c5883a 	add	r2,r2,r3
 4019000:	10800017 	ldw	r2,0(r2)
 4019004:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 4019008:	e0bff817 	ldw	r2,-32(fp)
 401900c:	1000061e 	bne	r2,zero,4019028 <OSTaskDel+0xdc>
 4019010:	e0bff617 	ldw	r2,-40(fp)
 4019014:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019018:	e0bff717 	ldw	r2,-36(fp)
 401901c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4019020:	008010c4 	movi	r2,67
 4019024:	00009506 	br	401927c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 4019028:	e0bff817 	ldw	r2,-32(fp)
 401902c:	10800058 	cmpnei	r2,r2,1
 4019030:	1000061e 	bne	r2,zero,401904c <OSTaskDel+0x100>
 4019034:	e0bff617 	ldw	r2,-40(fp)
 4019038:	e0bff915 	stw	r2,-28(fp)
 401903c:	e0bff917 	ldw	r2,-28(fp)
 4019040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4019044:	00800f44 	movi	r2,61
 4019048:	00008c06 	br	401927c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 401904c:	e0bff817 	ldw	r2,-32(fp)
 4019050:	10800d03 	ldbu	r2,52(r2)
 4019054:	10c03fcc 	andi	r3,r2,255
 4019058:	e0bff817 	ldw	r2,-32(fp)
 401905c:	10800d03 	ldbu	r2,52(r2)
 4019060:	11003fcc 	andi	r4,r2,255
 4019064:	d0a75044 	addi	r2,gp,-25279
 4019068:	2085883a 	add	r2,r4,r2
 401906c:	10800003 	ldbu	r2,0(r2)
 4019070:	1009883a 	mov	r4,r2
 4019074:	e0bff817 	ldw	r2,-32(fp)
 4019078:	10800d43 	ldbu	r2,53(r2)
 401907c:	0084303a 	nor	r2,zero,r2
 4019080:	2084703a 	and	r2,r4,r2
 4019084:	1009883a 	mov	r4,r2
 4019088:	d0a75044 	addi	r2,gp,-25279
 401908c:	1885883a 	add	r2,r3,r2
 4019090:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 4019094:	e0bff817 	ldw	r2,-32(fp)
 4019098:	10800d03 	ldbu	r2,52(r2)
 401909c:	10c03fcc 	andi	r3,r2,255
 40190a0:	d0a75044 	addi	r2,gp,-25279
 40190a4:	1885883a 	add	r2,r3,r2
 40190a8:	10800003 	ldbu	r2,0(r2)
 40190ac:	10803fcc 	andi	r2,r2,255
 40190b0:	1000071e 	bne	r2,zero,40190d0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 40190b4:	e0bff817 	ldw	r2,-32(fp)
 40190b8:	10800d83 	ldbu	r2,54(r2)
 40190bc:	0084303a 	nor	r2,zero,r2
 40190c0:	1007883a 	mov	r3,r2
 40190c4:	d0a75003 	ldbu	r2,-25280(gp)
 40190c8:	1884703a 	and	r2,r3,r2
 40190cc:	d0a75005 	stb	r2,-25280(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 40190d0:	e0bff817 	ldw	r2,-32(fp)
 40190d4:	10800717 	ldw	r2,28(r2)
 40190d8:	10000526 	beq	r2,zero,40190f0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 40190dc:	e0bff817 	ldw	r2,-32(fp)
 40190e0:	10800717 	ldw	r2,28(r2)
 40190e4:	100b883a 	mov	r5,r2
 40190e8:	e13ff817 	ldw	r4,-32(fp)
 40190ec:	40133800 	call	4013380 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 40190f0:	e0bff817 	ldw	r2,-32(fp)
 40190f4:	10800817 	ldw	r2,32(r2)
 40190f8:	10000526 	beq	r2,zero,4019110 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 40190fc:	e0bff817 	ldw	r2,-32(fp)
 4019100:	10800817 	ldw	r2,32(r2)
 4019104:	100b883a 	mov	r5,r2
 4019108:	e13ff817 	ldw	r4,-32(fp)
 401910c:	40134380 	call	4013438 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 4019110:	e0bff817 	ldw	r2,-32(fp)
 4019114:	10800a17 	ldw	r2,40(r2)
 4019118:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 401911c:	e0bffb17 	ldw	r2,-20(fp)
 4019120:	10000226 	beq	r2,zero,401912c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 4019124:	e13ffb17 	ldw	r4,-20(fp)
 4019128:	40158a80 	call	40158a8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 401912c:	e0bff817 	ldw	r2,-32(fp)
 4019130:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 4019134:	e0bff817 	ldw	r2,-32(fp)
 4019138:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 401913c:	e0bff817 	ldw	r2,-32(fp)
 4019140:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 4019144:	d0a74403 	ldbu	r2,-25328(gp)
 4019148:	10803fcc 	andi	r2,r2,255
 401914c:	10803fe0 	cmpeqi	r2,r2,255
 4019150:	1000031e 	bne	r2,zero,4019160 <OSTaskDel+0x214>
        OSLockNesting++;
 4019154:	d0a74403 	ldbu	r2,-25328(gp)
 4019158:	10800044 	addi	r2,r2,1
 401915c:	d0a74405 	stb	r2,-25328(gp)
 4019160:	e0bff617 	ldw	r2,-40(fp)
 4019164:	e0bffd15 	stw	r2,-12(fp)
 4019168:	e0bffd17 	ldw	r2,-12(fp)
 401916c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 4019170:	4012f680 	call	4012f68 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019174:	0005303a 	rdctl	r2,status
 4019178:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401917c:	e0fffa17 	ldw	r3,-24(fp)
 4019180:	00bfff84 	movi	r2,-2
 4019184:	1884703a 	and	r2,r3,r2
 4019188:	1001703a 	wrctl	status,r2
  
  return context;
 401918c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4019190:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4019194:	d0a74403 	ldbu	r2,-25328(gp)
 4019198:	10803fcc 	andi	r2,r2,255
 401919c:	10000326 	beq	r2,zero,40191ac <OSTaskDel+0x260>
        OSLockNesting--;
 40191a0:	d0a74403 	ldbu	r2,-25328(gp)
 40191a4:	10bfffc4 	addi	r2,r2,-1
 40191a8:	d0a74405 	stb	r2,-25328(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 40191ac:	e13ff817 	ldw	r4,-32(fp)
 40191b0:	401c0f80 	call	401c0f8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 40191b4:	d0a74c43 	ldbu	r2,-25295(gp)
 40191b8:	10bfffc4 	addi	r2,r2,-1
 40191bc:	d0a74c45 	stb	r2,-25295(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 40191c0:	e0ffff03 	ldbu	r3,-4(fp)
 40191c4:	008100f4 	movhi	r2,1027
 40191c8:	10a63004 	addi	r2,r2,-26432
 40191cc:	18c7883a 	add	r3,r3,r3
 40191d0:	18c7883a 	add	r3,r3,r3
 40191d4:	10c5883a 	add	r2,r2,r3
 40191d8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 40191dc:	e0bff817 	ldw	r2,-32(fp)
 40191e0:	10800617 	ldw	r2,24(r2)
 40191e4:	1000071e 	bne	r2,zero,4019204 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 40191e8:	e0bff817 	ldw	r2,-32(fp)
 40191ec:	10800517 	ldw	r2,20(r2)
 40191f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 40191f4:	e0bff817 	ldw	r2,-32(fp)
 40191f8:	10800517 	ldw	r2,20(r2)
 40191fc:	d0a74715 	stw	r2,-25316(gp)
 4019200:	00000a06 	br	401922c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4019204:	e0bff817 	ldw	r2,-32(fp)
 4019208:	10800617 	ldw	r2,24(r2)
 401920c:	e0fff817 	ldw	r3,-32(fp)
 4019210:	18c00517 	ldw	r3,20(r3)
 4019214:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4019218:	e0bff817 	ldw	r2,-32(fp)
 401921c:	10800517 	ldw	r2,20(r2)
 4019220:	e0fff817 	ldw	r3,-32(fp)
 4019224:	18c00617 	ldw	r3,24(r3)
 4019228:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 401922c:	d0e74b17 	ldw	r3,-25300(gp)
 4019230:	e0bff817 	ldw	r2,-32(fp)
 4019234:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 4019238:	e0bff817 	ldw	r2,-32(fp)
 401923c:	d0a74b15 	stw	r2,-25300(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4019240:	e0bff817 	ldw	r2,-32(fp)
 4019244:	00c00fc4 	movi	r3,63
 4019248:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 401924c:	e0bff817 	ldw	r2,-32(fp)
 4019250:	10001345 	stb	zero,77(r2)
 4019254:	e0bff617 	ldw	r2,-40(fp)
 4019258:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401925c:	e0bffc17 	ldw	r2,-16(fp)
 4019260:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4019264:	d0a74443 	ldbu	r2,-25327(gp)
 4019268:	10803fcc 	andi	r2,r2,255
 401926c:	10800058 	cmpnei	r2,r2,1
 4019270:	1000011e 	bne	r2,zero,4019278 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 4019274:	40139d40 	call	40139d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4019278:	0005883a 	mov	r2,zero
}
 401927c:	e037883a 	mov	sp,fp
 4019280:	dfc00117 	ldw	ra,4(sp)
 4019284:	df000017 	ldw	fp,0(sp)
 4019288:	dec00204 	addi	sp,sp,8
 401928c:	f800283a 	ret

04019290 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4019290:	defff504 	addi	sp,sp,-44
 4019294:	df000a15 	stw	fp,40(sp)
 4019298:	df000a04 	addi	fp,sp,40
 401929c:	2005883a 	mov	r2,r4
 40192a0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40192a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 40192a8:	e0bfff03 	ldbu	r2,-4(fp)
 40192ac:	10800518 	cmpnei	r2,r2,20
 40192b0:	1000021e 	bne	r2,zero,40192bc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 40192b4:	00800f84 	movi	r2,62
 40192b8:	00004506 	br	40193d0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 40192bc:	e0bfff03 	ldbu	r2,-4(fp)
 40192c0:	10800530 	cmpltui	r2,r2,20
 40192c4:	1000051e 	bne	r2,zero,40192dc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 40192c8:	e0bfff03 	ldbu	r2,-4(fp)
 40192cc:	10803fe0 	cmpeqi	r2,r2,255
 40192d0:	1000021e 	bne	r2,zero,40192dc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 40192d4:	00800a84 	movi	r2,42
 40192d8:	00003d06 	br	40193d0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 40192dc:	e0bfff03 	ldbu	r2,-4(fp)
 40192e0:	10803fd8 	cmpnei	r2,r2,255
 40192e4:	1000111e 	bne	r2,zero,401932c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40192e8:	0005303a 	rdctl	r2,status
 40192ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40192f0:	e0fff917 	ldw	r3,-28(fp)
 40192f4:	00bfff84 	movi	r2,-2
 40192f8:	1884703a 	and	r2,r3,r2
 40192fc:	1001703a 	wrctl	status,r2
  
  return context;
 4019300:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4019304:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4019308:	d0a75317 	ldw	r2,-25268(gp)
 401930c:	10800dc3 	ldbu	r2,55(r2)
 4019310:	e0bff805 	stb	r2,-32(fp)
 4019314:	e0bff617 	ldw	r2,-40(fp)
 4019318:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401931c:	e0bffe17 	ldw	r2,-8(fp)
 4019320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 4019324:	e0bff803 	ldbu	r2,-32(fp)
 4019328:	00002906 	br	40193d0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401932c:	0005303a 	rdctl	r2,status
 4019330:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019334:	e0fff717 	ldw	r3,-36(fp)
 4019338:	00bfff84 	movi	r2,-2
 401933c:	1884703a 	and	r2,r3,r2
 4019340:	1001703a 	wrctl	status,r2
  
  return context;
 4019344:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4019348:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 401934c:	e0ffff03 	ldbu	r3,-4(fp)
 4019350:	008100f4 	movhi	r2,1027
 4019354:	10a63004 	addi	r2,r2,-26432
 4019358:	18c7883a 	add	r3,r3,r3
 401935c:	18c7883a 	add	r3,r3,r3
 4019360:	10c5883a 	add	r2,r2,r3
 4019364:	10800017 	ldw	r2,0(r2)
 4019368:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 401936c:	e0bffb17 	ldw	r2,-20(fp)
 4019370:	1000061e 	bne	r2,zero,401938c <OSTaskDelReq+0xfc>
 4019374:	e0bff617 	ldw	r2,-40(fp)
 4019378:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401937c:	e0bffa17 	ldw	r2,-24(fp)
 4019380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 4019384:	008010c4 	movi	r2,67
 4019388:	00001106 	br	40193d0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 401938c:	e0bffb17 	ldw	r2,-20(fp)
 4019390:	10800058 	cmpnei	r2,r2,1
 4019394:	1000061e 	bne	r2,zero,40193b0 <OSTaskDelReq+0x120>
 4019398:	e0bff617 	ldw	r2,-40(fp)
 401939c:	e0bffc15 	stw	r2,-16(fp)
 40193a0:	e0bffc17 	ldw	r2,-16(fp)
 40193a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 40193a8:	00800f44 	movi	r2,61
 40193ac:	00000806 	br	40193d0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 40193b0:	e0bffb17 	ldw	r2,-20(fp)
 40193b4:	00c00fc4 	movi	r3,63
 40193b8:	10c00dc5 	stb	r3,55(r2)
 40193bc:	e0bff617 	ldw	r2,-40(fp)
 40193c0:	e0bffd15 	stw	r2,-12(fp)
 40193c4:	e0bffd17 	ldw	r2,-12(fp)
 40193c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40193cc:	0005883a 	mov	r2,zero
}
 40193d0:	e037883a 	mov	sp,fp
 40193d4:	df000017 	ldw	fp,0(sp)
 40193d8:	dec00104 	addi	sp,sp,4
 40193dc:	f800283a 	ret

040193e0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 40193e0:	defff404 	addi	sp,sp,-48
 40193e4:	dfc00b15 	stw	ra,44(sp)
 40193e8:	df000a15 	stw	fp,40(sp)
 40193ec:	df000a04 	addi	fp,sp,40
 40193f0:	2005883a 	mov	r2,r4
 40193f4:	e17ffe15 	stw	r5,-8(fp)
 40193f8:	e1bfff15 	stw	r6,-4(fp)
 40193fc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4019400:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4019404:	e0bfff17 	ldw	r2,-4(fp)
 4019408:	1000021e 	bne	r2,zero,4019414 <OSTaskNameGet+0x34>
        return (0);
 401940c:	0005883a 	mov	r2,zero
 4019410:	00005406 	br	4019564 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 4019414:	e0bffd03 	ldbu	r2,-12(fp)
 4019418:	10800570 	cmpltui	r2,r2,21
 401941c:	1000081e 	bne	r2,zero,4019440 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 4019420:	e0bffd03 	ldbu	r2,-12(fp)
 4019424:	10803fe0 	cmpeqi	r2,r2,255
 4019428:	1000051e 	bne	r2,zero,4019440 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 401942c:	e0bfff17 	ldw	r2,-4(fp)
 4019430:	00c00a84 	movi	r3,42
 4019434:	10c00005 	stb	r3,0(r2)
            return (0);
 4019438:	0005883a 	mov	r2,zero
 401943c:	00004906 	br	4019564 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 4019440:	e0bffe17 	ldw	r2,-8(fp)
 4019444:	1000051e 	bne	r2,zero,401945c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4019448:	e0bfff17 	ldw	r2,-4(fp)
 401944c:	00c00304 	movi	r3,12
 4019450:	10c00005 	stb	r3,0(r2)
        return (0);
 4019454:	0005883a 	mov	r2,zero
 4019458:	00004206 	br	4019564 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 401945c:	d0a75203 	ldbu	r2,-25272(gp)
 4019460:	10803fcc 	andi	r2,r2,255
 4019464:	10000526 	beq	r2,zero,401947c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 4019468:	e0bfff17 	ldw	r2,-4(fp)
 401946c:	00c00444 	movi	r3,17
 4019470:	10c00005 	stb	r3,0(r2)
        return (0);
 4019474:	0005883a 	mov	r2,zero
 4019478:	00003a06 	br	4019564 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401947c:	0005303a 	rdctl	r2,status
 4019480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019484:	e0fffc17 	ldw	r3,-16(fp)
 4019488:	00bfff84 	movi	r2,-2
 401948c:	1884703a 	and	r2,r3,r2
 4019490:	1001703a 	wrctl	status,r2
  
  return context;
 4019494:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4019498:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 401949c:	e0bffd03 	ldbu	r2,-12(fp)
 40194a0:	10803fd8 	cmpnei	r2,r2,255
 40194a4:	1000031e 	bne	r2,zero,40194b4 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 40194a8:	d0a75317 	ldw	r2,-25268(gp)
 40194ac:	10800c83 	ldbu	r2,50(r2)
 40194b0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40194b4:	e0fffd03 	ldbu	r3,-12(fp)
 40194b8:	008100f4 	movhi	r2,1027
 40194bc:	10a63004 	addi	r2,r2,-26432
 40194c0:	18c7883a 	add	r3,r3,r3
 40194c4:	18c7883a 	add	r3,r3,r3
 40194c8:	10c5883a 	add	r2,r2,r3
 40194cc:	10800017 	ldw	r2,0(r2)
 40194d0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 40194d4:	e0bff817 	ldw	r2,-32(fp)
 40194d8:	1000091e 	bne	r2,zero,4019500 <OSTaskNameGet+0x120>
 40194dc:	e0bff617 	ldw	r2,-40(fp)
 40194e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40194e4:	e0bff717 	ldw	r2,-36(fp)
 40194e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40194ec:	e0bfff17 	ldw	r2,-4(fp)
 40194f0:	00c010c4 	movi	r3,67
 40194f4:	10c00005 	stb	r3,0(r2)
        return (0);
 40194f8:	0005883a 	mov	r2,zero
 40194fc:	00001906 	br	4019564 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4019500:	e0bff817 	ldw	r2,-32(fp)
 4019504:	10800058 	cmpnei	r2,r2,1
 4019508:	1000091e 	bne	r2,zero,4019530 <OSTaskNameGet+0x150>
 401950c:	e0bff617 	ldw	r2,-40(fp)
 4019510:	e0bff915 	stw	r2,-28(fp)
 4019514:	e0bff917 	ldw	r2,-28(fp)
 4019518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401951c:	e0bfff17 	ldw	r2,-4(fp)
 4019520:	00c010c4 	movi	r3,67
 4019524:	10c00005 	stb	r3,0(r2)
        return (0);
 4019528:	0005883a 	mov	r2,zero
 401952c:	00000d06 	br	4019564 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 4019530:	e0bff817 	ldw	r2,-32(fp)
 4019534:	10801304 	addi	r2,r2,76
 4019538:	100b883a 	mov	r5,r2
 401953c:	e13ffe17 	ldw	r4,-8(fp)
 4019540:	4013b180 	call	4013b18 <OS_StrCopy>
 4019544:	e0bffb05 	stb	r2,-20(fp)
 4019548:	e0bff617 	ldw	r2,-40(fp)
 401954c:	e0bffa15 	stw	r2,-24(fp)
 4019550:	e0bffa17 	ldw	r2,-24(fp)
 4019554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4019558:	e0bfff17 	ldw	r2,-4(fp)
 401955c:	10000005 	stb	zero,0(r2)
    return (len);
 4019560:	e0bffb03 	ldbu	r2,-20(fp)
}
 4019564:	e037883a 	mov	sp,fp
 4019568:	dfc00117 	ldw	ra,4(sp)
 401956c:	df000017 	ldw	fp,0(sp)
 4019570:	dec00204 	addi	sp,sp,8
 4019574:	f800283a 	ret

04019578 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4019578:	defff304 	addi	sp,sp,-52
 401957c:	dfc00c15 	stw	ra,48(sp)
 4019580:	df000b15 	stw	fp,44(sp)
 4019584:	df000b04 	addi	fp,sp,44
 4019588:	2005883a 	mov	r2,r4
 401958c:	e17ffe15 	stw	r5,-8(fp)
 4019590:	e1bfff15 	stw	r6,-4(fp)
 4019594:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4019598:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 401959c:	e0bfff17 	ldw	r2,-4(fp)
 40195a0:	10005c26 	beq	r2,zero,4019714 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 40195a4:	e0bffd03 	ldbu	r2,-12(fp)
 40195a8:	10800570 	cmpltui	r2,r2,21
 40195ac:	1000071e 	bne	r2,zero,40195cc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 40195b0:	e0bffd03 	ldbu	r2,-12(fp)
 40195b4:	10803fe0 	cmpeqi	r2,r2,255
 40195b8:	1000041e 	bne	r2,zero,40195cc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 40195bc:	e0bfff17 	ldw	r2,-4(fp)
 40195c0:	00c00a84 	movi	r3,42
 40195c4:	10c00005 	stb	r3,0(r2)
            return;
 40195c8:	00005306 	br	4019718 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 40195cc:	e0bffe17 	ldw	r2,-8(fp)
 40195d0:	1000041e 	bne	r2,zero,40195e4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 40195d4:	e0bfff17 	ldw	r2,-4(fp)
 40195d8:	00c00304 	movi	r3,12
 40195dc:	10c00005 	stb	r3,0(r2)
        return;
 40195e0:	00004d06 	br	4019718 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 40195e4:	d0a75203 	ldbu	r2,-25272(gp)
 40195e8:	10803fcc 	andi	r2,r2,255
 40195ec:	10000426 	beq	r2,zero,4019600 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 40195f0:	e0bfff17 	ldw	r2,-4(fp)
 40195f4:	00c00484 	movi	r3,18
 40195f8:	10c00005 	stb	r3,0(r2)
        return;
 40195fc:	00004606 	br	4019718 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019600:	0005303a 	rdctl	r2,status
 4019604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019608:	e0fffc17 	ldw	r3,-16(fp)
 401960c:	00bfff84 	movi	r2,-2
 4019610:	1884703a 	and	r2,r3,r2
 4019614:	1001703a 	wrctl	status,r2
  
  return context;
 4019618:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401961c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 4019620:	e0bffd03 	ldbu	r2,-12(fp)
 4019624:	10803fd8 	cmpnei	r2,r2,255
 4019628:	1000031e 	bne	r2,zero,4019638 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 401962c:	d0a75317 	ldw	r2,-25268(gp)
 4019630:	10800c83 	ldbu	r2,50(r2)
 4019634:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4019638:	e0fffd03 	ldbu	r3,-12(fp)
 401963c:	008100f4 	movhi	r2,1027
 4019640:	10a63004 	addi	r2,r2,-26432
 4019644:	18c7883a 	add	r3,r3,r3
 4019648:	18c7883a 	add	r3,r3,r3
 401964c:	10c5883a 	add	r2,r2,r3
 4019650:	10800017 	ldw	r2,0(r2)
 4019654:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 4019658:	e0bff717 	ldw	r2,-36(fp)
 401965c:	1000081e 	bne	r2,zero,4019680 <OSTaskNameSet+0x108>
 4019660:	e0bff517 	ldw	r2,-44(fp)
 4019664:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019668:	e0bff617 	ldw	r2,-40(fp)
 401966c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4019670:	e0bfff17 	ldw	r2,-4(fp)
 4019674:	00c010c4 	movi	r3,67
 4019678:	10c00005 	stb	r3,0(r2)
        return;
 401967c:	00002606 	br	4019718 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 4019680:	e0bff717 	ldw	r2,-36(fp)
 4019684:	10800058 	cmpnei	r2,r2,1
 4019688:	1000081e 	bne	r2,zero,40196ac <OSTaskNameSet+0x134>
 401968c:	e0bff517 	ldw	r2,-44(fp)
 4019690:	e0bff815 	stw	r2,-32(fp)
 4019694:	e0bff817 	ldw	r2,-32(fp)
 4019698:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401969c:	e0bfff17 	ldw	r2,-4(fp)
 40196a0:	00c010c4 	movi	r3,67
 40196a4:	10c00005 	stb	r3,0(r2)
        return;
 40196a8:	00001b06 	br	4019718 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 40196ac:	e13ffe17 	ldw	r4,-8(fp)
 40196b0:	4013b8c0 	call	4013b8c <OS_StrLen>
 40196b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 40196b8:	e0bffa03 	ldbu	r2,-24(fp)
 40196bc:	10800830 	cmpltui	r2,r2,32
 40196c0:	1000081e 	bne	r2,zero,40196e4 <OSTaskNameSet+0x16c>
 40196c4:	e0bff517 	ldw	r2,-44(fp)
 40196c8:	e0bff915 	stw	r2,-28(fp)
 40196cc:	e0bff917 	ldw	r2,-28(fp)
 40196d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 40196d4:	e0bfff17 	ldw	r2,-4(fp)
 40196d8:	00c01044 	movi	r3,65
 40196dc:	10c00005 	stb	r3,0(r2)
        return;
 40196e0:	00000d06 	br	4019718 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 40196e4:	e0bff717 	ldw	r2,-36(fp)
 40196e8:	10801304 	addi	r2,r2,76
 40196ec:	e17ffe17 	ldw	r5,-8(fp)
 40196f0:	1009883a 	mov	r4,r2
 40196f4:	4013b180 	call	4013b18 <OS_StrCopy>
 40196f8:	e0bff517 	ldw	r2,-44(fp)
 40196fc:	e0bffb15 	stw	r2,-20(fp)
 4019700:	e0bffb17 	ldw	r2,-20(fp)
 4019704:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4019708:	e0bfff17 	ldw	r2,-4(fp)
 401970c:	10000005 	stb	zero,0(r2)
 4019710:	00000106 	br	4019718 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 4019714:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4019718:	e037883a 	mov	sp,fp
 401971c:	dfc00117 	ldw	ra,4(sp)
 4019720:	df000017 	ldw	fp,0(sp)
 4019724:	dec00204 	addi	sp,sp,8
 4019728:	f800283a 	ret

0401972c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 401972c:	defff404 	addi	sp,sp,-48
 4019730:	dfc00b15 	stw	ra,44(sp)
 4019734:	df000a15 	stw	fp,40(sp)
 4019738:	df000a04 	addi	fp,sp,40
 401973c:	2005883a 	mov	r2,r4
 4019740:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4019744:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 4019748:	e0bfff03 	ldbu	r2,-4(fp)
 401974c:	10800530 	cmpltui	r2,r2,20
 4019750:	1000021e 	bne	r2,zero,401975c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4019754:	00800a84 	movi	r2,42
 4019758:	00006406 	br	40198ec <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401975c:	0005303a 	rdctl	r2,status
 4019760:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019764:	e0fffe17 	ldw	r3,-8(fp)
 4019768:	00bfff84 	movi	r2,-2
 401976c:	1884703a 	and	r2,r3,r2
 4019770:	1001703a 	wrctl	status,r2
  
  return context;
 4019774:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4019778:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 401977c:	e0ffff03 	ldbu	r3,-4(fp)
 4019780:	008100f4 	movhi	r2,1027
 4019784:	10a63004 	addi	r2,r2,-26432
 4019788:	18c7883a 	add	r3,r3,r3
 401978c:	18c7883a 	add	r3,r3,r3
 4019790:	10c5883a 	add	r2,r2,r3
 4019794:	10800017 	ldw	r2,0(r2)
 4019798:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 401979c:	e0bff817 	ldw	r2,-32(fp)
 40197a0:	1000061e 	bne	r2,zero,40197bc <OSTaskResume+0x90>
 40197a4:	e0bff617 	ldw	r2,-40(fp)
 40197a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40197ac:	e0bff717 	ldw	r2,-36(fp)
 40197b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 40197b4:	00801184 	movi	r2,70
 40197b8:	00004c06 	br	40198ec <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 40197bc:	e0bff817 	ldw	r2,-32(fp)
 40197c0:	10800058 	cmpnei	r2,r2,1
 40197c4:	1000061e 	bne	r2,zero,40197e0 <OSTaskResume+0xb4>
 40197c8:	e0bff617 	ldw	r2,-40(fp)
 40197cc:	e0bff915 	stw	r2,-28(fp)
 40197d0:	e0bff917 	ldw	r2,-28(fp)
 40197d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40197d8:	008010c4 	movi	r2,67
 40197dc:	00004306 	br	40198ec <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 40197e0:	e0bff817 	ldw	r2,-32(fp)
 40197e4:	10800c03 	ldbu	r2,48(r2)
 40197e8:	10803fcc 	andi	r2,r2,255
 40197ec:	1080020c 	andi	r2,r2,8
 40197f0:	10003926 	beq	r2,zero,40198d8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 40197f4:	e0bff817 	ldw	r2,-32(fp)
 40197f8:	10c00c03 	ldbu	r3,48(r2)
 40197fc:	00bffdc4 	movi	r2,-9
 4019800:	1884703a 	and	r2,r3,r2
 4019804:	1007883a 	mov	r3,r2
 4019808:	e0bff817 	ldw	r2,-32(fp)
 401980c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4019810:	e0bff817 	ldw	r2,-32(fp)
 4019814:	10800c03 	ldbu	r2,48(r2)
 4019818:	10803fcc 	andi	r2,r2,255
 401981c:	1000281e 	bne	r2,zero,40198c0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 4019820:	e0bff817 	ldw	r2,-32(fp)
 4019824:	10800b8b 	ldhu	r2,46(r2)
 4019828:	10bfffcc 	andi	r2,r2,65535
 401982c:	10001f1e 	bne	r2,zero,40198ac <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 4019830:	e0bff817 	ldw	r2,-32(fp)
 4019834:	10c00d83 	ldbu	r3,54(r2)
 4019838:	d0a75003 	ldbu	r2,-25280(gp)
 401983c:	1884b03a 	or	r2,r3,r2
 4019840:	d0a75005 	stb	r2,-25280(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4019844:	e0bff817 	ldw	r2,-32(fp)
 4019848:	10800d03 	ldbu	r2,52(r2)
 401984c:	10c03fcc 	andi	r3,r2,255
 4019850:	e0bff817 	ldw	r2,-32(fp)
 4019854:	10800d03 	ldbu	r2,52(r2)
 4019858:	11003fcc 	andi	r4,r2,255
 401985c:	d0a75044 	addi	r2,gp,-25279
 4019860:	2085883a 	add	r2,r4,r2
 4019864:	11000003 	ldbu	r4,0(r2)
 4019868:	e0bff817 	ldw	r2,-32(fp)
 401986c:	10800d43 	ldbu	r2,53(r2)
 4019870:	2084b03a 	or	r2,r4,r2
 4019874:	1009883a 	mov	r4,r2
 4019878:	d0a75044 	addi	r2,gp,-25279
 401987c:	1885883a 	add	r2,r3,r2
 4019880:	11000005 	stb	r4,0(r2)
 4019884:	e0bff617 	ldw	r2,-40(fp)
 4019888:	e0bffa15 	stw	r2,-24(fp)
 401988c:	e0bffa17 	ldw	r2,-24(fp)
 4019890:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4019894:	d0a74443 	ldbu	r2,-25327(gp)
 4019898:	10803fcc 	andi	r2,r2,255
 401989c:	10800058 	cmpnei	r2,r2,1
 40198a0:	10000b1e 	bne	r2,zero,40198d0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 40198a4:	40139d40 	call	40139d4 <OS_Sched>
 40198a8:	00000906 	br	40198d0 <OSTaskResume+0x1a4>
 40198ac:	e0bff617 	ldw	r2,-40(fp)
 40198b0:	e0bffb15 	stw	r2,-20(fp)
 40198b4:	e0bffb17 	ldw	r2,-20(fp)
 40198b8:	1001703a 	wrctl	status,r2
 40198bc:	00000406 	br	40198d0 <OSTaskResume+0x1a4>
 40198c0:	e0bff617 	ldw	r2,-40(fp)
 40198c4:	e0bffc15 	stw	r2,-16(fp)
 40198c8:	e0bffc17 	ldw	r2,-16(fp)
 40198cc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 40198d0:	0005883a 	mov	r2,zero
 40198d4:	00000506 	br	40198ec <OSTaskResume+0x1c0>
 40198d8:	e0bff617 	ldw	r2,-40(fp)
 40198dc:	e0bffd15 	stw	r2,-12(fp)
 40198e0:	e0bffd17 	ldw	r2,-12(fp)
 40198e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 40198e8:	00801104 	movi	r2,68
}
 40198ec:	e037883a 	mov	sp,fp
 40198f0:	dfc00117 	ldw	ra,4(sp)
 40198f4:	df000017 	ldw	fp,0(sp)
 40198f8:	dec00204 	addi	sp,sp,8
 40198fc:	f800283a 	ret

04019900 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 4019900:	defff304 	addi	sp,sp,-52
 4019904:	df000c15 	stw	fp,48(sp)
 4019908:	df000c04 	addi	fp,sp,48
 401990c:	2005883a 	mov	r2,r4
 4019910:	e17fff15 	stw	r5,-4(fp)
 4019914:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4019918:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 401991c:	e0bffe03 	ldbu	r2,-8(fp)
 4019920:	10800570 	cmpltui	r2,r2,21
 4019924:	1000051e 	bne	r2,zero,401993c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 4019928:	e0bffe03 	ldbu	r2,-8(fp)
 401992c:	10803fe0 	cmpeqi	r2,r2,255
 4019930:	1000021e 	bne	r2,zero,401993c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 4019934:	00800a84 	movi	r2,42
 4019938:	00005d06 	br	4019ab0 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 401993c:	e0bfff17 	ldw	r2,-4(fp)
 4019940:	1000021e 	bne	r2,zero,401994c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 4019944:	00800244 	movi	r2,9
 4019948:	00005906 	br	4019ab0 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 401994c:	e0bfff17 	ldw	r2,-4(fp)
 4019950:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 4019954:	e0bfff17 	ldw	r2,-4(fp)
 4019958:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401995c:	0005303a 	rdctl	r2,status
 4019960:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019964:	e0fffd17 	ldw	r3,-12(fp)
 4019968:	00bfff84 	movi	r2,-2
 401996c:	1884703a 	and	r2,r3,r2
 4019970:	1001703a 	wrctl	status,r2
  
  return context;
 4019974:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 4019978:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 401997c:	e0bffe03 	ldbu	r2,-8(fp)
 4019980:	10803fd8 	cmpnei	r2,r2,255
 4019984:	1000031e 	bne	r2,zero,4019994 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 4019988:	d0a75317 	ldw	r2,-25268(gp)
 401998c:	10800c83 	ldbu	r2,50(r2)
 4019990:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4019994:	e0fffe03 	ldbu	r3,-8(fp)
 4019998:	008100f4 	movhi	r2,1027
 401999c:	10a63004 	addi	r2,r2,-26432
 40199a0:	18c7883a 	add	r3,r3,r3
 40199a4:	18c7883a 	add	r3,r3,r3
 40199a8:	10c5883a 	add	r2,r2,r3
 40199ac:	10800017 	ldw	r2,0(r2)
 40199b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 40199b4:	e0bff817 	ldw	r2,-32(fp)
 40199b8:	1000061e 	bne	r2,zero,40199d4 <OSTaskStkChk+0xd4>
 40199bc:	e0bff617 	ldw	r2,-40(fp)
 40199c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40199c4:	e0bff717 	ldw	r2,-36(fp)
 40199c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40199cc:	008010c4 	movi	r2,67
 40199d0:	00003706 	br	4019ab0 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 40199d4:	e0bff817 	ldw	r2,-32(fp)
 40199d8:	10800058 	cmpnei	r2,r2,1
 40199dc:	1000061e 	bne	r2,zero,40199f8 <OSTaskStkChk+0xf8>
 40199e0:	e0bff617 	ldw	r2,-40(fp)
 40199e4:	e0bff915 	stw	r2,-28(fp)
 40199e8:	e0bff917 	ldw	r2,-28(fp)
 40199ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40199f0:	008010c4 	movi	r2,67
 40199f4:	00002e06 	br	4019ab0 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 40199f8:	e0bff817 	ldw	r2,-32(fp)
 40199fc:	1080040b 	ldhu	r2,16(r2)
 4019a00:	10bfffcc 	andi	r2,r2,65535
 4019a04:	1080004c 	andi	r2,r2,1
 4019a08:	1000061e 	bne	r2,zero,4019a24 <OSTaskStkChk+0x124>
 4019a0c:	e0bff617 	ldw	r2,-40(fp)
 4019a10:	e0bffa15 	stw	r2,-24(fp)
 4019a14:	e0bffa17 	ldw	r2,-24(fp)
 4019a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 4019a1c:	00801144 	movi	r2,69
 4019a20:	00002306 	br	4019ab0 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 4019a24:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 4019a28:	e0bff817 	ldw	r2,-32(fp)
 4019a2c:	10800317 	ldw	r2,12(r2)
 4019a30:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 4019a34:	e0bff817 	ldw	r2,-32(fp)
 4019a38:	10800217 	ldw	r2,8(r2)
 4019a3c:	e0bff415 	stw	r2,-48(fp)
 4019a40:	e0bff617 	ldw	r2,-40(fp)
 4019a44:	e0bffb15 	stw	r2,-20(fp)
 4019a48:	e0bffb17 	ldw	r2,-20(fp)
 4019a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4019a50:	00000306 	br	4019a60 <OSTaskStkChk+0x160>
        nfree++;
 4019a54:	e0bff517 	ldw	r2,-44(fp)
 4019a58:	10800044 	addi	r2,r2,1
 4019a5c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4019a60:	e0bff417 	ldw	r2,-48(fp)
 4019a64:	10c00104 	addi	r3,r2,4
 4019a68:	e0fff415 	stw	r3,-48(fp)
 4019a6c:	10800017 	ldw	r2,0(r2)
 4019a70:	103ff826 	beq	r2,zero,4019a54 <__alt_mem_onchip_memory2_0+0xfc017a54>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4019a74:	e0bff517 	ldw	r2,-44(fp)
 4019a78:	1085883a 	add	r2,r2,r2
 4019a7c:	1085883a 	add	r2,r2,r2
 4019a80:	1007883a 	mov	r3,r2
 4019a84:	e0bfff17 	ldw	r2,-4(fp)
 4019a88:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4019a8c:	e0fffc17 	ldw	r3,-16(fp)
 4019a90:	e0bff517 	ldw	r2,-44(fp)
 4019a94:	1885c83a 	sub	r2,r3,r2
 4019a98:	1085883a 	add	r2,r2,r2
 4019a9c:	1085883a 	add	r2,r2,r2
 4019aa0:	1007883a 	mov	r3,r2
 4019aa4:	e0bfff17 	ldw	r2,-4(fp)
 4019aa8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 4019aac:	0005883a 	mov	r2,zero
}
 4019ab0:	e037883a 	mov	sp,fp
 4019ab4:	df000017 	ldw	fp,0(sp)
 4019ab8:	dec00104 	addi	sp,sp,4
 4019abc:	f800283a 	ret

04019ac0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4019ac0:	defff504 	addi	sp,sp,-44
 4019ac4:	dfc00a15 	stw	ra,40(sp)
 4019ac8:	df000915 	stw	fp,36(sp)
 4019acc:	df000904 	addi	fp,sp,36
 4019ad0:	2005883a 	mov	r2,r4
 4019ad4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4019ad8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4019adc:	e0bfff03 	ldbu	r2,-4(fp)
 4019ae0:	10800518 	cmpnei	r2,r2,20
 4019ae4:	1000021e 	bne	r2,zero,4019af0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 4019ae8:	008011c4 	movi	r2,71
 4019aec:	00006806 	br	4019c90 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4019af0:	e0bfff03 	ldbu	r2,-4(fp)
 4019af4:	10800530 	cmpltui	r2,r2,20
 4019af8:	1000051e 	bne	r2,zero,4019b10 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 4019afc:	e0bfff03 	ldbu	r2,-4(fp)
 4019b00:	10803fe0 	cmpeqi	r2,r2,255
 4019b04:	1000021e 	bne	r2,zero,4019b10 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 4019b08:	00800a84 	movi	r2,42
 4019b0c:	00006006 	br	4019c90 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019b10:	0005303a 	rdctl	r2,status
 4019b14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019b18:	e0fffe17 	ldw	r3,-8(fp)
 4019b1c:	00bfff84 	movi	r2,-2
 4019b20:	1884703a 	and	r2,r3,r2
 4019b24:	1001703a 	wrctl	status,r2
  
  return context;
 4019b28:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 4019b2c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 4019b30:	e0bfff03 	ldbu	r2,-4(fp)
 4019b34:	10803fd8 	cmpnei	r2,r2,255
 4019b38:	1000061e 	bne	r2,zero,4019b54 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 4019b3c:	d0a75317 	ldw	r2,-25268(gp)
 4019b40:	10800c83 	ldbu	r2,50(r2)
 4019b44:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 4019b48:	00800044 	movi	r2,1
 4019b4c:	e0bff705 	stb	r2,-36(fp)
 4019b50:	00000906 	br	4019b78 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 4019b54:	d0a75317 	ldw	r2,-25268(gp)
 4019b58:	10800c83 	ldbu	r2,50(r2)
 4019b5c:	10c03fcc 	andi	r3,r2,255
 4019b60:	e0bfff03 	ldbu	r2,-4(fp)
 4019b64:	1880031e 	bne	r3,r2,4019b74 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 4019b68:	00800044 	movi	r2,1
 4019b6c:	e0bff705 	stb	r2,-36(fp)
 4019b70:	00000106 	br	4019b78 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4019b74:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4019b78:	e0ffff03 	ldbu	r3,-4(fp)
 4019b7c:	008100f4 	movhi	r2,1027
 4019b80:	10a63004 	addi	r2,r2,-26432
 4019b84:	18c7883a 	add	r3,r3,r3
 4019b88:	18c7883a 	add	r3,r3,r3
 4019b8c:	10c5883a 	add	r2,r2,r3
 4019b90:	10800017 	ldw	r2,0(r2)
 4019b94:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4019b98:	e0bffa17 	ldw	r2,-24(fp)
 4019b9c:	1000061e 	bne	r2,zero,4019bb8 <OSTaskSuspend+0xf8>
 4019ba0:	e0bff817 	ldw	r2,-32(fp)
 4019ba4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019ba8:	e0bff917 	ldw	r2,-28(fp)
 4019bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 4019bb0:	00801204 	movi	r2,72
 4019bb4:	00003606 	br	4019c90 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 4019bb8:	e0bffa17 	ldw	r2,-24(fp)
 4019bbc:	10800058 	cmpnei	r2,r2,1
 4019bc0:	1000061e 	bne	r2,zero,4019bdc <OSTaskSuspend+0x11c>
 4019bc4:	e0bff817 	ldw	r2,-32(fp)
 4019bc8:	e0bffb15 	stw	r2,-20(fp)
 4019bcc:	e0bffb17 	ldw	r2,-20(fp)
 4019bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4019bd4:	008010c4 	movi	r2,67
 4019bd8:	00002d06 	br	4019c90 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 4019bdc:	e0bffa17 	ldw	r2,-24(fp)
 4019be0:	10800d03 	ldbu	r2,52(r2)
 4019be4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4019be8:	e0fffd03 	ldbu	r3,-12(fp)
 4019bec:	e13ffd03 	ldbu	r4,-12(fp)
 4019bf0:	d0a75044 	addi	r2,gp,-25279
 4019bf4:	2085883a 	add	r2,r4,r2
 4019bf8:	10800003 	ldbu	r2,0(r2)
 4019bfc:	1009883a 	mov	r4,r2
 4019c00:	e0bffa17 	ldw	r2,-24(fp)
 4019c04:	10800d43 	ldbu	r2,53(r2)
 4019c08:	0084303a 	nor	r2,zero,r2
 4019c0c:	2084703a 	and	r2,r4,r2
 4019c10:	1009883a 	mov	r4,r2
 4019c14:	d0a75044 	addi	r2,gp,-25279
 4019c18:	1885883a 	add	r2,r3,r2
 4019c1c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4019c20:	e0fffd03 	ldbu	r3,-12(fp)
 4019c24:	d0a75044 	addi	r2,gp,-25279
 4019c28:	1885883a 	add	r2,r3,r2
 4019c2c:	10800003 	ldbu	r2,0(r2)
 4019c30:	10803fcc 	andi	r2,r2,255
 4019c34:	1000071e 	bne	r2,zero,4019c54 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 4019c38:	e0bffa17 	ldw	r2,-24(fp)
 4019c3c:	10800d83 	ldbu	r2,54(r2)
 4019c40:	0084303a 	nor	r2,zero,r2
 4019c44:	1007883a 	mov	r3,r2
 4019c48:	d0a75003 	ldbu	r2,-25280(gp)
 4019c4c:	1884703a 	and	r2,r3,r2
 4019c50:	d0a75005 	stb	r2,-25280(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4019c54:	e0bffa17 	ldw	r2,-24(fp)
 4019c58:	10800c03 	ldbu	r2,48(r2)
 4019c5c:	10800214 	ori	r2,r2,8
 4019c60:	1007883a 	mov	r3,r2
 4019c64:	e0bffa17 	ldw	r2,-24(fp)
 4019c68:	10c00c05 	stb	r3,48(r2)
 4019c6c:	e0bff817 	ldw	r2,-32(fp)
 4019c70:	e0bffc15 	stw	r2,-16(fp)
 4019c74:	e0bffc17 	ldw	r2,-16(fp)
 4019c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4019c7c:	e0bff703 	ldbu	r2,-36(fp)
 4019c80:	10800058 	cmpnei	r2,r2,1
 4019c84:	1000011e 	bne	r2,zero,4019c8c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 4019c88:	40139d40 	call	40139d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4019c8c:	0005883a 	mov	r2,zero
}
 4019c90:	e037883a 	mov	sp,fp
 4019c94:	dfc00117 	ldw	ra,4(sp)
 4019c98:	df000017 	ldw	fp,0(sp)
 4019c9c:	dec00204 	addi	sp,sp,8
 4019ca0:	f800283a 	ret

04019ca4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4019ca4:	defff604 	addi	sp,sp,-40
 4019ca8:	dfc00915 	stw	ra,36(sp)
 4019cac:	df000815 	stw	fp,32(sp)
 4019cb0:	df000804 	addi	fp,sp,32
 4019cb4:	2005883a 	mov	r2,r4
 4019cb8:	e17fff15 	stw	r5,-4(fp)
 4019cbc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4019cc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4019cc4:	e0bffe03 	ldbu	r2,-8(fp)
 4019cc8:	10800570 	cmpltui	r2,r2,21
 4019ccc:	1000051e 	bne	r2,zero,4019ce4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 4019cd0:	e0bffe03 	ldbu	r2,-8(fp)
 4019cd4:	10803fe0 	cmpeqi	r2,r2,255
 4019cd8:	1000021e 	bne	r2,zero,4019ce4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 4019cdc:	00800a84 	movi	r2,42
 4019ce0:	00003406 	br	4019db4 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4019ce4:	e0bfff17 	ldw	r2,-4(fp)
 4019ce8:	1000021e 	bne	r2,zero,4019cf4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 4019cec:	00800244 	movi	r2,9
 4019cf0:	00003006 	br	4019db4 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019cf4:	0005303a 	rdctl	r2,status
 4019cf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019cfc:	e0fffd17 	ldw	r3,-12(fp)
 4019d00:	00bfff84 	movi	r2,-2
 4019d04:	1884703a 	and	r2,r3,r2
 4019d08:	1001703a 	wrctl	status,r2
  
  return context;
 4019d0c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4019d10:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 4019d14:	e0bffe03 	ldbu	r2,-8(fp)
 4019d18:	10803fd8 	cmpnei	r2,r2,255
 4019d1c:	1000031e 	bne	r2,zero,4019d2c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 4019d20:	d0a75317 	ldw	r2,-25268(gp)
 4019d24:	10800c83 	ldbu	r2,50(r2)
 4019d28:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4019d2c:	e0fffe03 	ldbu	r3,-8(fp)
 4019d30:	008100f4 	movhi	r2,1027
 4019d34:	10a63004 	addi	r2,r2,-26432
 4019d38:	18c7883a 	add	r3,r3,r3
 4019d3c:	18c7883a 	add	r3,r3,r3
 4019d40:	10c5883a 	add	r2,r2,r3
 4019d44:	10800017 	ldw	r2,0(r2)
 4019d48:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 4019d4c:	e0bffa17 	ldw	r2,-24(fp)
 4019d50:	1000061e 	bne	r2,zero,4019d6c <OSTaskQuery+0xc8>
 4019d54:	e0bff817 	ldw	r2,-32(fp)
 4019d58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019d5c:	e0bff917 	ldw	r2,-28(fp)
 4019d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 4019d64:	00800a44 	movi	r2,41
 4019d68:	00001206 	br	4019db4 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 4019d6c:	e0bffa17 	ldw	r2,-24(fp)
 4019d70:	10800058 	cmpnei	r2,r2,1
 4019d74:	1000061e 	bne	r2,zero,4019d90 <OSTaskQuery+0xec>
 4019d78:	e0bff817 	ldw	r2,-32(fp)
 4019d7c:	e0bffb15 	stw	r2,-20(fp)
 4019d80:	e0bffb17 	ldw	r2,-20(fp)
 4019d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4019d88:	008010c4 	movi	r2,67
 4019d8c:	00000906 	br	4019db4 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 4019d90:	01801b04 	movi	r6,108
 4019d94:	e17ffa17 	ldw	r5,-24(fp)
 4019d98:	e13fff17 	ldw	r4,-4(fp)
 4019d9c:	401396c0 	call	401396c <OS_MemCopy>
 4019da0:	e0bff817 	ldw	r2,-32(fp)
 4019da4:	e0bffc15 	stw	r2,-16(fp)
 4019da8:	e0bffc17 	ldw	r2,-16(fp)
 4019dac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4019db0:	0005883a 	mov	r2,zero
}
 4019db4:	e037883a 	mov	sp,fp
 4019db8:	dfc00117 	ldw	ra,4(sp)
 4019dbc:	df000017 	ldw	fp,0(sp)
 4019dc0:	dec00204 	addi	sp,sp,8
 4019dc4:	f800283a 	ret

04019dc8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 4019dc8:	defffc04 	addi	sp,sp,-16
 4019dcc:	df000315 	stw	fp,12(sp)
 4019dd0:	df000304 	addi	fp,sp,12
 4019dd4:	e13ffd15 	stw	r4,-12(fp)
 4019dd8:	e17ffe15 	stw	r5,-8(fp)
 4019ddc:	3005883a 	mov	r2,r6
 4019de0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4019de4:	e0bfff0b 	ldhu	r2,-4(fp)
 4019de8:	1080004c 	andi	r2,r2,1
 4019dec:	10000d26 	beq	r2,zero,4019e24 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4019df0:	e0bfff0b 	ldhu	r2,-4(fp)
 4019df4:	1080008c 	andi	r2,r2,2
 4019df8:	10000a26 	beq	r2,zero,4019e24 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4019dfc:	00000706 	br	4019e1c <OS_TaskStkClr+0x54>
                size--;
 4019e00:	e0bffe17 	ldw	r2,-8(fp)
 4019e04:	10bfffc4 	addi	r2,r2,-1
 4019e08:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 4019e0c:	e0bffd17 	ldw	r2,-12(fp)
 4019e10:	10c00104 	addi	r3,r2,4
 4019e14:	e0fffd15 	stw	r3,-12(fp)
 4019e18:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4019e1c:	e0bffe17 	ldw	r2,-8(fp)
 4019e20:	103ff71e 	bne	r2,zero,4019e00 <__alt_mem_onchip_memory2_0+0xfc017e00>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 4019e24:	0001883a 	nop
 4019e28:	e037883a 	mov	sp,fp
 4019e2c:	df000017 	ldw	fp,0(sp)
 4019e30:	dec00104 	addi	sp,sp,4
 4019e34:	f800283a 	ret

04019e38 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 4019e38:	defff904 	addi	sp,sp,-28
 4019e3c:	dfc00615 	stw	ra,24(sp)
 4019e40:	df000515 	stw	fp,20(sp)
 4019e44:	df000504 	addi	fp,sp,20
 4019e48:	2005883a 	mov	r2,r4
 4019e4c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4019e50:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4019e54:	d0a75203 	ldbu	r2,-25272(gp)
 4019e58:	10803fcc 	andi	r2,r2,255
 4019e5c:	1000311e 	bne	r2,zero,4019f24 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 4019e60:	e0bfff0b 	ldhu	r2,-4(fp)
 4019e64:	10003026 	beq	r2,zero,4019f28 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019e68:	0005303a 	rdctl	r2,status
 4019e6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019e70:	e0fffe17 	ldw	r3,-8(fp)
 4019e74:	00bfff84 	movi	r2,-2
 4019e78:	1884703a 	and	r2,r3,r2
 4019e7c:	1001703a 	wrctl	status,r2
  
  return context;
 4019e80:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4019e84:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 4019e88:	d0a75317 	ldw	r2,-25268(gp)
 4019e8c:	10800d03 	ldbu	r2,52(r2)
 4019e90:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4019e94:	e0fffd03 	ldbu	r3,-12(fp)
 4019e98:	e13ffd03 	ldbu	r4,-12(fp)
 4019e9c:	d0a75044 	addi	r2,gp,-25279
 4019ea0:	2085883a 	add	r2,r4,r2
 4019ea4:	10800003 	ldbu	r2,0(r2)
 4019ea8:	1009883a 	mov	r4,r2
 4019eac:	d0a75317 	ldw	r2,-25268(gp)
 4019eb0:	10800d43 	ldbu	r2,53(r2)
 4019eb4:	0084303a 	nor	r2,zero,r2
 4019eb8:	2084703a 	and	r2,r4,r2
 4019ebc:	1009883a 	mov	r4,r2
 4019ec0:	d0a75044 	addi	r2,gp,-25279
 4019ec4:	1885883a 	add	r2,r3,r2
 4019ec8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 4019ecc:	e0fffd03 	ldbu	r3,-12(fp)
 4019ed0:	d0a75044 	addi	r2,gp,-25279
 4019ed4:	1885883a 	add	r2,r3,r2
 4019ed8:	10800003 	ldbu	r2,0(r2)
 4019edc:	10803fcc 	andi	r2,r2,255
 4019ee0:	1000071e 	bne	r2,zero,4019f00 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4019ee4:	d0a75317 	ldw	r2,-25268(gp)
 4019ee8:	10800d83 	ldbu	r2,54(r2)
 4019eec:	0084303a 	nor	r2,zero,r2
 4019ef0:	1007883a 	mov	r3,r2
 4019ef4:	d0a75003 	ldbu	r2,-25280(gp)
 4019ef8:	1884703a 	and	r2,r3,r2
 4019efc:	d0a75005 	stb	r2,-25280(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4019f00:	d0a75317 	ldw	r2,-25268(gp)
 4019f04:	e0ffff0b 	ldhu	r3,-4(fp)
 4019f08:	10c00b8d 	sth	r3,46(r2)
 4019f0c:	e0bffb17 	ldw	r2,-20(fp)
 4019f10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019f14:	e0bffc17 	ldw	r2,-16(fp)
 4019f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4019f1c:	40139d40 	call	40139d4 <OS_Sched>
 4019f20:	00000106 	br	4019f28 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 4019f24:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 4019f28:	e037883a 	mov	sp,fp
 4019f2c:	dfc00117 	ldw	ra,4(sp)
 4019f30:	df000017 	ldw	fp,0(sp)
 4019f34:	dec00204 	addi	sp,sp,8
 4019f38:	f800283a 	ret

04019f3c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 4019f3c:	defff704 	addi	sp,sp,-36
 4019f40:	dfc00815 	stw	ra,32(sp)
 4019f44:	df000715 	stw	fp,28(sp)
 4019f48:	dc000615 	stw	r16,24(sp)
 4019f4c:	df000704 	addi	fp,sp,28
 4019f50:	2011883a 	mov	r8,r4
 4019f54:	2809883a 	mov	r4,r5
 4019f58:	3007883a 	mov	r3,r6
 4019f5c:	3805883a 	mov	r2,r7
 4019f60:	e23ffb05 	stb	r8,-20(fp)
 4019f64:	e13ffc05 	stb	r4,-16(fp)
 4019f68:	e0fffd05 	stb	r3,-12(fp)
 4019f6c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4019f70:	d0a75203 	ldbu	r2,-25272(gp)
 4019f74:	10803fcc 	andi	r2,r2,255
 4019f78:	10000226 	beq	r2,zero,4019f84 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 4019f7c:	00801544 	movi	r2,85
 4019f80:	00003d06 	br	401a078 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4019f84:	e0bffb03 	ldbu	r2,-20(fp)
 4019f88:	1000081e 	bne	r2,zero,4019fac <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 4019f8c:	e0bffc03 	ldbu	r2,-16(fp)
 4019f90:	1000061e 	bne	r2,zero,4019fac <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 4019f94:	e0bffd03 	ldbu	r2,-12(fp)
 4019f98:	1000041e 	bne	r2,zero,4019fac <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 4019f9c:	e0bffe0b 	ldhu	r2,-8(fp)
 4019fa0:	1000021e 	bne	r2,zero,4019fac <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 4019fa4:	00801504 	movi	r2,84
 4019fa8:	00003306 	br	401a078 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 4019fac:	e0bffc03 	ldbu	r2,-16(fp)
 4019fb0:	10800f30 	cmpltui	r2,r2,60
 4019fb4:	1000021e 	bne	r2,zero,4019fc0 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 4019fb8:	00801444 	movi	r2,81
 4019fbc:	00002e06 	br	401a078 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 4019fc0:	e0bffd03 	ldbu	r2,-12(fp)
 4019fc4:	10800f30 	cmpltui	r2,r2,60
 4019fc8:	1000021e 	bne	r2,zero,4019fd4 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4019fcc:	00801484 	movi	r2,82
 4019fd0:	00002906 	br	401a078 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 4019fd4:	e0bffe0b 	ldhu	r2,-8(fp)
 4019fd8:	1080fa30 	cmpltui	r2,r2,1000
 4019fdc:	1000021e 	bne	r2,zero,4019fe8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 4019fe0:	008014c4 	movi	r2,83
 4019fe4:	00002406 	br	401a078 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4019fe8:	e0bffb03 	ldbu	r2,-20(fp)
 4019fec:	10c38424 	muli	r3,r2,3600
 4019ff0:	e0bffc03 	ldbu	r2,-16(fp)
 4019ff4:	10800f24 	muli	r2,r2,60
 4019ff8:	1887883a 	add	r3,r3,r2
 4019ffc:	e0bffd03 	ldbu	r2,-12(fp)
 401a000:	1885883a 	add	r2,r3,r2
 401a004:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 401a008:	e0bffe0b 	ldhu	r2,-8(fp)
 401a00c:	1080fa24 	muli	r2,r2,1000
 401a010:	0140fa04 	movi	r5,1000
 401a014:	1009883a 	mov	r4,r2
 401a018:	4000dbc0 	call	4000dbc <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 401a01c:	8085883a 	add	r2,r16,r2
 401a020:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 401a024:	e0bffa17 	ldw	r2,-24(fp)
 401a028:	1004d43a 	srli	r2,r2,16
 401a02c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 401a030:	e0bffa17 	ldw	r2,-24(fp)
 401a034:	10bfffcc 	andi	r2,r2,65535
 401a038:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 401a03c:	e0bffa17 	ldw	r2,-24(fp)
 401a040:	10bfffcc 	andi	r2,r2,65535
 401a044:	1009883a 	mov	r4,r2
 401a048:	4019e380 	call	4019e38 <OSTimeDly>
    while (loops > 0) {
 401a04c:	00000706 	br	401a06c <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 401a050:	01200014 	movui	r4,32768
 401a054:	4019e380 	call	4019e38 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 401a058:	01200014 	movui	r4,32768
 401a05c:	4019e380 	call	4019e38 <OSTimeDly>
        loops--;
 401a060:	e0bff90b 	ldhu	r2,-28(fp)
 401a064:	10bfffc4 	addi	r2,r2,-1
 401a068:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 401a06c:	e0bff90b 	ldhu	r2,-28(fp)
 401a070:	103ff71e 	bne	r2,zero,401a050 <__alt_mem_onchip_memory2_0+0xfc018050>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 401a074:	0005883a 	mov	r2,zero
}
 401a078:	e6ffff04 	addi	sp,fp,-4
 401a07c:	dfc00217 	ldw	ra,8(sp)
 401a080:	df000117 	ldw	fp,4(sp)
 401a084:	dc000017 	ldw	r16,0(sp)
 401a088:	dec00304 	addi	sp,sp,12
 401a08c:	f800283a 	ret

0401a090 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 401a090:	defff504 	addi	sp,sp,-44
 401a094:	dfc00a15 	stw	ra,40(sp)
 401a098:	df000915 	stw	fp,36(sp)
 401a09c:	df000904 	addi	fp,sp,36
 401a0a0:	2005883a 	mov	r2,r4
 401a0a4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401a0a8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 401a0ac:	e0bfff03 	ldbu	r2,-4(fp)
 401a0b0:	10800530 	cmpltui	r2,r2,20
 401a0b4:	1000021e 	bne	r2,zero,401a0c0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 401a0b8:	00800a84 	movi	r2,42
 401a0bc:	00006406 	br	401a250 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a0c0:	0005303a 	rdctl	r2,status
 401a0c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a0c8:	e0fffe17 	ldw	r3,-8(fp)
 401a0cc:	00bfff84 	movi	r2,-2
 401a0d0:	1884703a 	and	r2,r3,r2
 401a0d4:	1001703a 	wrctl	status,r2
  
  return context;
 401a0d8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 401a0dc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 401a0e0:	e0ffff03 	ldbu	r3,-4(fp)
 401a0e4:	008100f4 	movhi	r2,1027
 401a0e8:	10a63004 	addi	r2,r2,-26432
 401a0ec:	18c7883a 	add	r3,r3,r3
 401a0f0:	18c7883a 	add	r3,r3,r3
 401a0f4:	10c5883a 	add	r2,r2,r3
 401a0f8:	10800017 	ldw	r2,0(r2)
 401a0fc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 401a100:	e0bff917 	ldw	r2,-28(fp)
 401a104:	1000061e 	bne	r2,zero,401a120 <OSTimeDlyResume+0x90>
 401a108:	e0bff717 	ldw	r2,-36(fp)
 401a10c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a110:	e0bff817 	ldw	r2,-32(fp)
 401a114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 401a118:	008010c4 	movi	r2,67
 401a11c:	00004c06 	br	401a250 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 401a120:	e0bff917 	ldw	r2,-28(fp)
 401a124:	10800058 	cmpnei	r2,r2,1
 401a128:	1000061e 	bne	r2,zero,401a144 <OSTimeDlyResume+0xb4>
 401a12c:	e0bff717 	ldw	r2,-36(fp)
 401a130:	e0bffa15 	stw	r2,-24(fp)
 401a134:	e0bffa17 	ldw	r2,-24(fp)
 401a138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 401a13c:	008010c4 	movi	r2,67
 401a140:	00004306 	br	401a250 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 401a144:	e0bff917 	ldw	r2,-28(fp)
 401a148:	10800b8b 	ldhu	r2,46(r2)
 401a14c:	10bfffcc 	andi	r2,r2,65535
 401a150:	1000061e 	bne	r2,zero,401a16c <OSTimeDlyResume+0xdc>
 401a154:	e0bff717 	ldw	r2,-36(fp)
 401a158:	e0bffb15 	stw	r2,-20(fp)
 401a15c:	e0bffb17 	ldw	r2,-20(fp)
 401a160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 401a164:	00801404 	movi	r2,80
 401a168:	00003906 	br	401a250 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 401a16c:	e0bff917 	ldw	r2,-28(fp)
 401a170:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 401a174:	e0bff917 	ldw	r2,-28(fp)
 401a178:	10800c03 	ldbu	r2,48(r2)
 401a17c:	10803fcc 	andi	r2,r2,255
 401a180:	10800dcc 	andi	r2,r2,55
 401a184:	10000b26 	beq	r2,zero,401a1b4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 401a188:	e0bff917 	ldw	r2,-28(fp)
 401a18c:	10c00c03 	ldbu	r3,48(r2)
 401a190:	00bff204 	movi	r2,-56
 401a194:	1884703a 	and	r2,r3,r2
 401a198:	1007883a 	mov	r3,r2
 401a19c:	e0bff917 	ldw	r2,-28(fp)
 401a1a0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 401a1a4:	e0bff917 	ldw	r2,-28(fp)
 401a1a8:	00c00044 	movi	r3,1
 401a1ac:	10c00c45 	stb	r3,49(r2)
 401a1b0:	00000206 	br	401a1bc <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 401a1b4:	e0bff917 	ldw	r2,-28(fp)
 401a1b8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 401a1bc:	e0bff917 	ldw	r2,-28(fp)
 401a1c0:	10800c03 	ldbu	r2,48(r2)
 401a1c4:	10803fcc 	andi	r2,r2,255
 401a1c8:	1080020c 	andi	r2,r2,8
 401a1cc:	10001b1e 	bne	r2,zero,401a23c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 401a1d0:	e0bff917 	ldw	r2,-28(fp)
 401a1d4:	10c00d83 	ldbu	r3,54(r2)
 401a1d8:	d0a75003 	ldbu	r2,-25280(gp)
 401a1dc:	1884b03a 	or	r2,r3,r2
 401a1e0:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401a1e4:	e0bff917 	ldw	r2,-28(fp)
 401a1e8:	10800d03 	ldbu	r2,52(r2)
 401a1ec:	10c03fcc 	andi	r3,r2,255
 401a1f0:	e0bff917 	ldw	r2,-28(fp)
 401a1f4:	10800d03 	ldbu	r2,52(r2)
 401a1f8:	11003fcc 	andi	r4,r2,255
 401a1fc:	d0a75044 	addi	r2,gp,-25279
 401a200:	2085883a 	add	r2,r4,r2
 401a204:	11000003 	ldbu	r4,0(r2)
 401a208:	e0bff917 	ldw	r2,-28(fp)
 401a20c:	10800d43 	ldbu	r2,53(r2)
 401a210:	2084b03a 	or	r2,r4,r2
 401a214:	1009883a 	mov	r4,r2
 401a218:	d0a75044 	addi	r2,gp,-25279
 401a21c:	1885883a 	add	r2,r3,r2
 401a220:	11000005 	stb	r4,0(r2)
 401a224:	e0bff717 	ldw	r2,-36(fp)
 401a228:	e0bffc15 	stw	r2,-16(fp)
 401a22c:	e0bffc17 	ldw	r2,-16(fp)
 401a230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 401a234:	40139d40 	call	40139d4 <OS_Sched>
 401a238:	00000406 	br	401a24c <OSTimeDlyResume+0x1bc>
 401a23c:	e0bff717 	ldw	r2,-36(fp)
 401a240:	e0bffd15 	stw	r2,-12(fp)
 401a244:	e0bffd17 	ldw	r2,-12(fp)
 401a248:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 401a24c:	0005883a 	mov	r2,zero
}
 401a250:	e037883a 	mov	sp,fp
 401a254:	dfc00117 	ldw	ra,4(sp)
 401a258:	df000017 	ldw	fp,0(sp)
 401a25c:	dec00204 	addi	sp,sp,8
 401a260:	f800283a 	ret

0401a264 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 401a264:	defffb04 	addi	sp,sp,-20
 401a268:	df000415 	stw	fp,16(sp)
 401a26c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401a270:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a274:	0005303a 	rdctl	r2,status
 401a278:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a27c:	e0fffe17 	ldw	r3,-8(fp)
 401a280:	00bfff84 	movi	r2,-2
 401a284:	1884703a 	and	r2,r3,r2
 401a288:	1001703a 	wrctl	status,r2
  
  return context;
 401a28c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 401a290:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 401a294:	d0a75417 	ldw	r2,-25264(gp)
 401a298:	e0bffd15 	stw	r2,-12(fp)
 401a29c:	e0bffc17 	ldw	r2,-16(fp)
 401a2a0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a2a4:	e0bfff17 	ldw	r2,-4(fp)
 401a2a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 401a2ac:	e0bffd17 	ldw	r2,-12(fp)
}
 401a2b0:	e037883a 	mov	sp,fp
 401a2b4:	df000017 	ldw	fp,0(sp)
 401a2b8:	dec00104 	addi	sp,sp,4
 401a2bc:	f800283a 	ret

0401a2c0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 401a2c0:	defffb04 	addi	sp,sp,-20
 401a2c4:	df000415 	stw	fp,16(sp)
 401a2c8:	df000404 	addi	fp,sp,16
 401a2cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401a2d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a2d4:	0005303a 	rdctl	r2,status
 401a2d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a2dc:	e0fffd17 	ldw	r3,-12(fp)
 401a2e0:	00bfff84 	movi	r2,-2
 401a2e4:	1884703a 	and	r2,r3,r2
 401a2e8:	1001703a 	wrctl	status,r2
  
  return context;
 401a2ec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 401a2f0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 401a2f4:	e0bfff17 	ldw	r2,-4(fp)
 401a2f8:	d0a75415 	stw	r2,-25264(gp)
 401a2fc:	e0bffc17 	ldw	r2,-16(fp)
 401a300:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a304:	e0bffe17 	ldw	r2,-8(fp)
 401a308:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 401a30c:	0001883a 	nop
 401a310:	e037883a 	mov	sp,fp
 401a314:	df000017 	ldw	fp,0(sp)
 401a318:	dec00104 	addi	sp,sp,4
 401a31c:	f800283a 	ret

0401a320 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401a320:	defffd04 	addi	sp,sp,-12
 401a324:	dfc00215 	stw	ra,8(sp)
 401a328:	df000115 	stw	fp,4(sp)
 401a32c:	df000104 	addi	fp,sp,4
 401a330:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401a334:	d1601504 	addi	r5,gp,-32684
 401a338:	e13fff17 	ldw	r4,-4(fp)
 401a33c:	401b5140 	call	401b514 <alt_dev_llist_insert>
}
 401a340:	e037883a 	mov	sp,fp
 401a344:	dfc00117 	ldw	ra,4(sp)
 401a348:	df000017 	ldw	fp,0(sp)
 401a34c:	dec00204 	addi	sp,sp,8
 401a350:	f800283a 	ret

0401a354 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401a354:	defffd04 	addi	sp,sp,-12
 401a358:	dfc00215 	stw	ra,8(sp)
 401a35c:	df000115 	stw	fp,4(sp)
 401a360:	df000104 	addi	fp,sp,4
 401a364:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 401a368:	401be840 	call	401be84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401a36c:	00800044 	movi	r2,1
 401a370:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401a374:	0001883a 	nop
 401a378:	e037883a 	mov	sp,fp
 401a37c:	dfc00117 	ldw	ra,4(sp)
 401a380:	df000017 	ldw	fp,0(sp)
 401a384:	dec00204 	addi	sp,sp,8
 401a388:	f800283a 	ret

0401a38c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401a38c:	defffe04 	addi	sp,sp,-8
 401a390:	dfc00115 	stw	ra,4(sp)
 401a394:	df000015 	stw	fp,0(sp)
 401a398:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 401a39c:	01c0fa04 	movi	r7,1000
 401a3a0:	01800044 	movi	r6,1
 401a3a4:	000b883a 	mov	r5,zero
 401a3a8:	01020034 	movhi	r4,2048
 401a3ac:	21140004 	addi	r4,r4,20480
 401a3b0:	401b1900 	call	401b190 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401a3b4:	000d883a 	mov	r6,zero
 401a3b8:	000b883a 	mov	r5,zero
 401a3bc:	010100b4 	movhi	r4,1026
 401a3c0:	21361704 	addi	r4,r4,-10148
 401a3c4:	401a5500 	call	401a550 <altera_avalon_jtag_uart_init>
 401a3c8:	010100b4 	movhi	r4,1026
 401a3cc:	21360d04 	addi	r4,r4,-10188
 401a3d0:	401a3200 	call	401a320 <alt_dev_reg>
}
 401a3d4:	0001883a 	nop
 401a3d8:	e037883a 	mov	sp,fp
 401a3dc:	dfc00117 	ldw	ra,4(sp)
 401a3e0:	df000017 	ldw	fp,0(sp)
 401a3e4:	dec00204 	addi	sp,sp,8
 401a3e8:	f800283a 	ret

0401a3ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401a3ec:	defffa04 	addi	sp,sp,-24
 401a3f0:	dfc00515 	stw	ra,20(sp)
 401a3f4:	df000415 	stw	fp,16(sp)
 401a3f8:	df000404 	addi	fp,sp,16
 401a3fc:	e13ffd15 	stw	r4,-12(fp)
 401a400:	e17ffe15 	stw	r5,-8(fp)
 401a404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401a408:	e0bffd17 	ldw	r2,-12(fp)
 401a40c:	10800017 	ldw	r2,0(r2)
 401a410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401a414:	e0bffc17 	ldw	r2,-16(fp)
 401a418:	10c00a04 	addi	r3,r2,40
 401a41c:	e0bffd17 	ldw	r2,-12(fp)
 401a420:	10800217 	ldw	r2,8(r2)
 401a424:	100f883a 	mov	r7,r2
 401a428:	e1bfff17 	ldw	r6,-4(fp)
 401a42c:	e17ffe17 	ldw	r5,-8(fp)
 401a430:	1809883a 	mov	r4,r3
 401a434:	401ab980 	call	401ab98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401a438:	e037883a 	mov	sp,fp
 401a43c:	dfc00117 	ldw	ra,4(sp)
 401a440:	df000017 	ldw	fp,0(sp)
 401a444:	dec00204 	addi	sp,sp,8
 401a448:	f800283a 	ret

0401a44c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401a44c:	defffa04 	addi	sp,sp,-24
 401a450:	dfc00515 	stw	ra,20(sp)
 401a454:	df000415 	stw	fp,16(sp)
 401a458:	df000404 	addi	fp,sp,16
 401a45c:	e13ffd15 	stw	r4,-12(fp)
 401a460:	e17ffe15 	stw	r5,-8(fp)
 401a464:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401a468:	e0bffd17 	ldw	r2,-12(fp)
 401a46c:	10800017 	ldw	r2,0(r2)
 401a470:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401a474:	e0bffc17 	ldw	r2,-16(fp)
 401a478:	10c00a04 	addi	r3,r2,40
 401a47c:	e0bffd17 	ldw	r2,-12(fp)
 401a480:	10800217 	ldw	r2,8(r2)
 401a484:	100f883a 	mov	r7,r2
 401a488:	e1bfff17 	ldw	r6,-4(fp)
 401a48c:	e17ffe17 	ldw	r5,-8(fp)
 401a490:	1809883a 	mov	r4,r3
 401a494:	401ae540 	call	401ae54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401a498:	e037883a 	mov	sp,fp
 401a49c:	dfc00117 	ldw	ra,4(sp)
 401a4a0:	df000017 	ldw	fp,0(sp)
 401a4a4:	dec00204 	addi	sp,sp,8
 401a4a8:	f800283a 	ret

0401a4ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401a4ac:	defffc04 	addi	sp,sp,-16
 401a4b0:	dfc00315 	stw	ra,12(sp)
 401a4b4:	df000215 	stw	fp,8(sp)
 401a4b8:	df000204 	addi	fp,sp,8
 401a4bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401a4c0:	e0bfff17 	ldw	r2,-4(fp)
 401a4c4:	10800017 	ldw	r2,0(r2)
 401a4c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401a4cc:	e0bffe17 	ldw	r2,-8(fp)
 401a4d0:	10c00a04 	addi	r3,r2,40
 401a4d4:	e0bfff17 	ldw	r2,-4(fp)
 401a4d8:	10800217 	ldw	r2,8(r2)
 401a4dc:	100b883a 	mov	r5,r2
 401a4e0:	1809883a 	mov	r4,r3
 401a4e4:	401aa400 	call	401aa40 <altera_avalon_jtag_uart_close>
}
 401a4e8:	e037883a 	mov	sp,fp
 401a4ec:	dfc00117 	ldw	ra,4(sp)
 401a4f0:	df000017 	ldw	fp,0(sp)
 401a4f4:	dec00204 	addi	sp,sp,8
 401a4f8:	f800283a 	ret

0401a4fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401a4fc:	defffa04 	addi	sp,sp,-24
 401a500:	dfc00515 	stw	ra,20(sp)
 401a504:	df000415 	stw	fp,16(sp)
 401a508:	df000404 	addi	fp,sp,16
 401a50c:	e13ffd15 	stw	r4,-12(fp)
 401a510:	e17ffe15 	stw	r5,-8(fp)
 401a514:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401a518:	e0bffd17 	ldw	r2,-12(fp)
 401a51c:	10800017 	ldw	r2,0(r2)
 401a520:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401a524:	e0bffc17 	ldw	r2,-16(fp)
 401a528:	10800a04 	addi	r2,r2,40
 401a52c:	e1bfff17 	ldw	r6,-4(fp)
 401a530:	e17ffe17 	ldw	r5,-8(fp)
 401a534:	1009883a 	mov	r4,r2
 401a538:	401aaa80 	call	401aaa8 <altera_avalon_jtag_uart_ioctl>
}
 401a53c:	e037883a 	mov	sp,fp
 401a540:	dfc00117 	ldw	ra,4(sp)
 401a544:	df000017 	ldw	fp,0(sp)
 401a548:	dec00204 	addi	sp,sp,8
 401a54c:	f800283a 	ret

0401a550 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401a550:	defff104 	addi	sp,sp,-60
 401a554:	dfc00e15 	stw	ra,56(sp)
 401a558:	df000d15 	stw	fp,52(sp)
 401a55c:	df000d04 	addi	fp,sp,52
 401a560:	e13ff915 	stw	r4,-28(fp)
 401a564:	e17ffa15 	stw	r5,-24(fp)
 401a568:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 401a56c:	e0bff917 	ldw	r2,-28(fp)
 401a570:	10800c04 	addi	r2,r2,48
 401a574:	e0bff415 	stw	r2,-48(fp)
 401a578:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 401a57c:	e0bff80b 	ldhu	r2,-32(fp)
 401a580:	e0fff884 	addi	r3,fp,-30
 401a584:	180b883a 	mov	r5,r3
 401a588:	1009883a 	mov	r4,r2
 401a58c:	40145400 	call	4014540 <OSFlagCreate>
 401a590:	1007883a 	mov	r3,r2
 401a594:	e0bff417 	ldw	r2,-48(fp)
 401a598:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 401a59c:	e0bff917 	ldw	r2,-28(fp)
 401a5a0:	10800a04 	addi	r2,r2,40
 401a5a4:	e0bff515 	stw	r2,-44(fp)
 401a5a8:	00800044 	movi	r2,1
 401a5ac:	e0bff78d 	sth	r2,-34(fp)
 401a5b0:	e0bff78b 	ldhu	r2,-34(fp)
 401a5b4:	1009883a 	mov	r4,r2
 401a5b8:	4017d1c0 	call	4017d1c <OSSemCreate>
 401a5bc:	1007883a 	mov	r3,r2
 401a5c0:	e0bff517 	ldw	r2,-44(fp)
 401a5c4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 401a5c8:	e0bff917 	ldw	r2,-28(fp)
 401a5cc:	10800b04 	addi	r2,r2,44
 401a5d0:	e0bff615 	stw	r2,-40(fp)
 401a5d4:	00800044 	movi	r2,1
 401a5d8:	e0bff70d 	sth	r2,-36(fp)
 401a5dc:	e0bff70b 	ldhu	r2,-36(fp)
 401a5e0:	1009883a 	mov	r4,r2
 401a5e4:	4017d1c0 	call	4017d1c <OSSemCreate>
 401a5e8:	1007883a 	mov	r3,r2
 401a5ec:	e0bff617 	ldw	r2,-40(fp)
 401a5f0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401a5f4:	e0bff917 	ldw	r2,-28(fp)
 401a5f8:	00c00044 	movi	r3,1
 401a5fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401a600:	e0bff917 	ldw	r2,-28(fp)
 401a604:	10800017 	ldw	r2,0(r2)
 401a608:	10800104 	addi	r2,r2,4
 401a60c:	1007883a 	mov	r3,r2
 401a610:	e0bff917 	ldw	r2,-28(fp)
 401a614:	10800817 	ldw	r2,32(r2)
 401a618:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401a61c:	e0bffa17 	ldw	r2,-24(fp)
 401a620:	e0fffb17 	ldw	r3,-20(fp)
 401a624:	d8000015 	stw	zero,0(sp)
 401a628:	e1fff917 	ldw	r7,-28(fp)
 401a62c:	018100b4 	movhi	r6,1026
 401a630:	31a9a604 	addi	r6,r6,-22888
 401a634:	180b883a 	mov	r5,r3
 401a638:	1009883a 	mov	r4,r2
 401a63c:	401b6ac0 	call	401b6ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401a640:	e0bff917 	ldw	r2,-28(fp)
 401a644:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401a648:	e0bff917 	ldw	r2,-28(fp)
 401a64c:	10800204 	addi	r2,r2,8
 401a650:	d0e75817 	ldw	r3,-25248(gp)
 401a654:	e1fff917 	ldw	r7,-28(fp)
 401a658:	018100b4 	movhi	r6,1026
 401a65c:	31aa4f04 	addi	r6,r6,-22212
 401a660:	180b883a 	mov	r5,r3
 401a664:	1009883a 	mov	r4,r2
 401a668:	401b20c0 	call	401b20c <alt_alarm_start>
 401a66c:	1000040e 	bge	r2,zero,401a680 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401a670:	e0fff917 	ldw	r3,-28(fp)
 401a674:	00a00034 	movhi	r2,32768
 401a678:	10bfffc4 	addi	r2,r2,-1
 401a67c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401a680:	0001883a 	nop
 401a684:	e037883a 	mov	sp,fp
 401a688:	dfc00117 	ldw	ra,4(sp)
 401a68c:	df000017 	ldw	fp,0(sp)
 401a690:	dec00204 	addi	sp,sp,8
 401a694:	f800283a 	ret

0401a698 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401a698:	defff204 	addi	sp,sp,-56
 401a69c:	dfc00d15 	stw	ra,52(sp)
 401a6a0:	df000c15 	stw	fp,48(sp)
 401a6a4:	df000c04 	addi	fp,sp,48
 401a6a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401a6ac:	e0bfff17 	ldw	r2,-4(fp)
 401a6b0:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 401a6b4:	e0bff617 	ldw	r2,-40(fp)
 401a6b8:	10800017 	ldw	r2,0(r2)
 401a6bc:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401a6c0:	e0bff717 	ldw	r2,-36(fp)
 401a6c4:	10800104 	addi	r2,r2,4
 401a6c8:	10800037 	ldwio	r2,0(r2)
 401a6cc:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401a6d0:	e0bff817 	ldw	r2,-32(fp)
 401a6d4:	1080c00c 	andi	r2,r2,768
 401a6d8:	10009126 	beq	r2,zero,401a920 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401a6dc:	e0bff817 	ldw	r2,-32(fp)
 401a6e0:	1080400c 	andi	r2,r2,256
 401a6e4:	10004726 	beq	r2,zero,401a804 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401a6e8:	00800074 	movhi	r2,1
 401a6ec:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a6f0:	e0bff617 	ldw	r2,-40(fp)
 401a6f4:	10800d17 	ldw	r2,52(r2)
 401a6f8:	10800044 	addi	r2,r2,1
 401a6fc:	1081ffcc 	andi	r2,r2,2047
 401a700:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 401a704:	e0bff617 	ldw	r2,-40(fp)
 401a708:	10c00e17 	ldw	r3,56(r2)
 401a70c:	e0bff917 	ldw	r2,-28(fp)
 401a710:	18802726 	beq	r3,r2,401a7b0 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401a714:	e0bff717 	ldw	r2,-36(fp)
 401a718:	10800037 	ldwio	r2,0(r2)
 401a71c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401a720:	e0bff417 	ldw	r2,-48(fp)
 401a724:	10a0000c 	andi	r2,r2,32768
 401a728:	10002326 	beq	r2,zero,401a7b8 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401a72c:	e0bff617 	ldw	r2,-40(fp)
 401a730:	10800d17 	ldw	r2,52(r2)
 401a734:	e0fff417 	ldw	r3,-48(fp)
 401a738:	1809883a 	mov	r4,r3
 401a73c:	e0fff617 	ldw	r3,-40(fp)
 401a740:	1885883a 	add	r2,r3,r2
 401a744:	10801104 	addi	r2,r2,68
 401a748:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a74c:	e0bff617 	ldw	r2,-40(fp)
 401a750:	10800d17 	ldw	r2,52(r2)
 401a754:	10800044 	addi	r2,r2,1
 401a758:	10c1ffcc 	andi	r3,r2,2047
 401a75c:	e0bff617 	ldw	r2,-40(fp)
 401a760:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 401a764:	e0bff617 	ldw	r2,-40(fp)
 401a768:	10800c17 	ldw	r2,48(r2)
 401a76c:	e0bffb15 	stw	r2,-20(fp)
 401a770:	00800044 	movi	r2,1
 401a774:	e0bffc0d 	sth	r2,-16(fp)
 401a778:	00800044 	movi	r2,1
 401a77c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 401a780:	d0a74443 	ldbu	r2,-25327(gp)
 401a784:	10803fcc 	andi	r2,r2,255
 401a788:	103fd926 	beq	r2,zero,401a6f0 <__alt_mem_onchip_memory2_0+0xfc0186f0>
  {
    OSFlagPost (group, flags, opt, &err);
 401a78c:	e0bffc0b 	ldhu	r2,-16(fp)
 401a790:	e0fffc83 	ldbu	r3,-14(fp)
 401a794:	e13ffdc4 	addi	r4,fp,-9
 401a798:	200f883a 	mov	r7,r4
 401a79c:	180d883a 	mov	r6,r3
 401a7a0:	100b883a 	mov	r5,r2
 401a7a4:	e13ffb17 	ldw	r4,-20(fp)
 401a7a8:	401511c0 	call	401511c <OSFlagPost>
      }
 401a7ac:	003fd006 	br	401a6f0 <__alt_mem_onchip_memory2_0+0xfc0186f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401a7b0:	0001883a 	nop
 401a7b4:	00000106 	br	401a7bc <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401a7b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401a7bc:	e0bff417 	ldw	r2,-48(fp)
 401a7c0:	10bfffec 	andhi	r2,r2,65535
 401a7c4:	10000f26 	beq	r2,zero,401a804 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401a7c8:	e0bff617 	ldw	r2,-40(fp)
 401a7cc:	10c00817 	ldw	r3,32(r2)
 401a7d0:	00bfff84 	movi	r2,-2
 401a7d4:	1886703a 	and	r3,r3,r2
 401a7d8:	e0bff617 	ldw	r2,-40(fp)
 401a7dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401a7e0:	e0bff717 	ldw	r2,-36(fp)
 401a7e4:	10800104 	addi	r2,r2,4
 401a7e8:	1007883a 	mov	r3,r2
 401a7ec:	e0bff617 	ldw	r2,-40(fp)
 401a7f0:	10800817 	ldw	r2,32(r2)
 401a7f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401a7f8:	e0bff717 	ldw	r2,-36(fp)
 401a7fc:	10800104 	addi	r2,r2,4
 401a800:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401a804:	e0bff817 	ldw	r2,-32(fp)
 401a808:	1080800c 	andi	r2,r2,512
 401a80c:	103fac26 	beq	r2,zero,401a6c0 <__alt_mem_onchip_memory2_0+0xfc0186c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401a810:	e0bff817 	ldw	r2,-32(fp)
 401a814:	1004d43a 	srli	r2,r2,16
 401a818:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401a81c:	00002606 	br	401a8b8 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401a820:	e0bff717 	ldw	r2,-36(fp)
 401a824:	e0fff617 	ldw	r3,-40(fp)
 401a828:	18c01017 	ldw	r3,64(r3)
 401a82c:	e13ff617 	ldw	r4,-40(fp)
 401a830:	20c7883a 	add	r3,r4,r3
 401a834:	18c21104 	addi	r3,r3,2116
 401a838:	18c00003 	ldbu	r3,0(r3)
 401a83c:	18c03fcc 	andi	r3,r3,255
 401a840:	18c0201c 	xori	r3,r3,128
 401a844:	18ffe004 	addi	r3,r3,-128
 401a848:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a84c:	e0bff617 	ldw	r2,-40(fp)
 401a850:	10801017 	ldw	r2,64(r2)
 401a854:	10800044 	addi	r2,r2,1
 401a858:	10c1ffcc 	andi	r3,r2,2047
 401a85c:	e0bff617 	ldw	r2,-40(fp)
 401a860:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 401a864:	e0bff617 	ldw	r2,-40(fp)
 401a868:	10800c17 	ldw	r2,48(r2)
 401a86c:	e0bffa15 	stw	r2,-24(fp)
 401a870:	00800084 	movi	r2,2
 401a874:	e0bffd0d 	sth	r2,-12(fp)
 401a878:	00800044 	movi	r2,1
 401a87c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 401a880:	d0a74443 	ldbu	r2,-25327(gp)
 401a884:	10803fcc 	andi	r2,r2,255
 401a888:	10000826 	beq	r2,zero,401a8ac <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 401a88c:	e0bffd0b 	ldhu	r2,-12(fp)
 401a890:	e0fffd83 	ldbu	r3,-10(fp)
 401a894:	e13ffe04 	addi	r4,fp,-8
 401a898:	200f883a 	mov	r7,r4
 401a89c:	180d883a 	mov	r6,r3
 401a8a0:	100b883a 	mov	r5,r2
 401a8a4:	e13ffa17 	ldw	r4,-24(fp)
 401a8a8:	401511c0 	call	401511c <OSFlagPost>

        space--;
 401a8ac:	e0bff517 	ldw	r2,-44(fp)
 401a8b0:	10bfffc4 	addi	r2,r2,-1
 401a8b4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401a8b8:	e0bff517 	ldw	r2,-44(fp)
 401a8bc:	10000526 	beq	r2,zero,401a8d4 <altera_avalon_jtag_uart_irq+0x23c>
 401a8c0:	e0bff617 	ldw	r2,-40(fp)
 401a8c4:	10c01017 	ldw	r3,64(r2)
 401a8c8:	e0bff617 	ldw	r2,-40(fp)
 401a8cc:	10800f17 	ldw	r2,60(r2)
 401a8d0:	18bfd31e 	bne	r3,r2,401a820 <__alt_mem_onchip_memory2_0+0xfc018820>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401a8d4:	e0bff517 	ldw	r2,-44(fp)
 401a8d8:	103f7926 	beq	r2,zero,401a6c0 <__alt_mem_onchip_memory2_0+0xfc0186c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a8dc:	e0bff617 	ldw	r2,-40(fp)
 401a8e0:	10c00817 	ldw	r3,32(r2)
 401a8e4:	00bfff44 	movi	r2,-3
 401a8e8:	1886703a 	and	r3,r3,r2
 401a8ec:	e0bff617 	ldw	r2,-40(fp)
 401a8f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a8f4:	e0bff617 	ldw	r2,-40(fp)
 401a8f8:	10800017 	ldw	r2,0(r2)
 401a8fc:	10800104 	addi	r2,r2,4
 401a900:	1007883a 	mov	r3,r2
 401a904:	e0bff617 	ldw	r2,-40(fp)
 401a908:	10800817 	ldw	r2,32(r2)
 401a90c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401a910:	e0bff717 	ldw	r2,-36(fp)
 401a914:	10800104 	addi	r2,r2,4
 401a918:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401a91c:	003f6806 	br	401a6c0 <__alt_mem_onchip_memory2_0+0xfc0186c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401a920:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401a924:	0001883a 	nop
 401a928:	e037883a 	mov	sp,fp
 401a92c:	dfc00117 	ldw	ra,4(sp)
 401a930:	df000017 	ldw	fp,0(sp)
 401a934:	dec00204 	addi	sp,sp,8
 401a938:	f800283a 	ret

0401a93c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401a93c:	defff904 	addi	sp,sp,-28
 401a940:	dfc00615 	stw	ra,24(sp)
 401a944:	df000515 	stw	fp,20(sp)
 401a948:	df000504 	addi	fp,sp,20
 401a94c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401a950:	e0bfff17 	ldw	r2,-4(fp)
 401a954:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401a958:	e0bffb17 	ldw	r2,-20(fp)
 401a95c:	10800017 	ldw	r2,0(r2)
 401a960:	10800104 	addi	r2,r2,4
 401a964:	10800037 	ldwio	r2,0(r2)
 401a968:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401a96c:	e0bffc17 	ldw	r2,-16(fp)
 401a970:	1081000c 	andi	r2,r2,1024
 401a974:	10000b26 	beq	r2,zero,401a9a4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401a978:	e0bffb17 	ldw	r2,-20(fp)
 401a97c:	10800017 	ldw	r2,0(r2)
 401a980:	10800104 	addi	r2,r2,4
 401a984:	1007883a 	mov	r3,r2
 401a988:	e0bffb17 	ldw	r2,-20(fp)
 401a98c:	10800817 	ldw	r2,32(r2)
 401a990:	10810014 	ori	r2,r2,1024
 401a994:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401a998:	e0bffb17 	ldw	r2,-20(fp)
 401a99c:	10000915 	stw	zero,36(r2)
 401a9a0:	00002106 	br	401aa28 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401a9a4:	e0bffb17 	ldw	r2,-20(fp)
 401a9a8:	10c00917 	ldw	r3,36(r2)
 401a9ac:	00a00034 	movhi	r2,32768
 401a9b0:	10bfff04 	addi	r2,r2,-4
 401a9b4:	10c01c36 	bltu	r2,r3,401aa28 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 401a9b8:	e0bffb17 	ldw	r2,-20(fp)
 401a9bc:	10800917 	ldw	r2,36(r2)
 401a9c0:	10c00044 	addi	r3,r2,1
 401a9c4:	e0bffb17 	ldw	r2,-20(fp)
 401a9c8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 401a9cc:	e0bffb17 	ldw	r2,-20(fp)
 401a9d0:	10c00917 	ldw	r3,36(r2)
 401a9d4:	e0bffb17 	ldw	r2,-20(fp)
 401a9d8:	10800117 	ldw	r2,4(r2)
 401a9dc:	18801236 	bltu	r3,r2,401aa28 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 401a9e0:	e0bffb17 	ldw	r2,-20(fp)
 401a9e4:	10800c17 	ldw	r2,48(r2)
 401a9e8:	e0bffd15 	stw	r2,-12(fp)
 401a9ec:	00800104 	movi	r2,4
 401a9f0:	e0bffe0d 	sth	r2,-8(fp)
 401a9f4:	00800044 	movi	r2,1
 401a9f8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 401a9fc:	d0a74443 	ldbu	r2,-25327(gp)
 401aa00:	10803fcc 	andi	r2,r2,255
 401aa04:	10000826 	beq	r2,zero,401aa28 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 401aa08:	e0bffe0b 	ldhu	r2,-8(fp)
 401aa0c:	e0fffe83 	ldbu	r3,-6(fp)
 401aa10:	e13ffec4 	addi	r4,fp,-5
 401aa14:	200f883a 	mov	r7,r4
 401aa18:	180d883a 	mov	r6,r3
 401aa1c:	100b883a 	mov	r5,r2
 401aa20:	e13ffd17 	ldw	r4,-12(fp)
 401aa24:	401511c0 	call	401511c <OSFlagPost>
 401aa28:	d0a75817 	ldw	r2,-25248(gp)
    }
  }

  return alt_ticks_per_second();
}
 401aa2c:	e037883a 	mov	sp,fp
 401aa30:	dfc00117 	ldw	ra,4(sp)
 401aa34:	df000017 	ldw	fp,0(sp)
 401aa38:	dec00204 	addi	sp,sp,8
 401aa3c:	f800283a 	ret

0401aa40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401aa40:	defffd04 	addi	sp,sp,-12
 401aa44:	df000215 	stw	fp,8(sp)
 401aa48:	df000204 	addi	fp,sp,8
 401aa4c:	e13ffe15 	stw	r4,-8(fp)
 401aa50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401aa54:	00000506 	br	401aa6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401aa58:	e0bfff17 	ldw	r2,-4(fp)
 401aa5c:	1090000c 	andi	r2,r2,16384
 401aa60:	10000226 	beq	r2,zero,401aa6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401aa64:	00bffd44 	movi	r2,-11
 401aa68:	00000b06 	br	401aa98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401aa6c:	e0bffe17 	ldw	r2,-8(fp)
 401aa70:	10c01017 	ldw	r3,64(r2)
 401aa74:	e0bffe17 	ldw	r2,-8(fp)
 401aa78:	10800f17 	ldw	r2,60(r2)
 401aa7c:	18800526 	beq	r3,r2,401aa94 <altera_avalon_jtag_uart_close+0x54>
 401aa80:	e0bffe17 	ldw	r2,-8(fp)
 401aa84:	10c00917 	ldw	r3,36(r2)
 401aa88:	e0bffe17 	ldw	r2,-8(fp)
 401aa8c:	10800117 	ldw	r2,4(r2)
 401aa90:	18bff136 	bltu	r3,r2,401aa58 <__alt_mem_onchip_memory2_0+0xfc018a58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401aa94:	0005883a 	mov	r2,zero
}
 401aa98:	e037883a 	mov	sp,fp
 401aa9c:	df000017 	ldw	fp,0(sp)
 401aaa0:	dec00104 	addi	sp,sp,4
 401aaa4:	f800283a 	ret

0401aaa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401aaa8:	defffa04 	addi	sp,sp,-24
 401aaac:	df000515 	stw	fp,20(sp)
 401aab0:	df000504 	addi	fp,sp,20
 401aab4:	e13ffd15 	stw	r4,-12(fp)
 401aab8:	e17ffe15 	stw	r5,-8(fp)
 401aabc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401aac0:	00bff9c4 	movi	r2,-25
 401aac4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401aac8:	e0bffe17 	ldw	r2,-8(fp)
 401aacc:	10da8060 	cmpeqi	r3,r2,27137
 401aad0:	1800031e 	bne	r3,zero,401aae0 <altera_avalon_jtag_uart_ioctl+0x38>
 401aad4:	109a80a0 	cmpeqi	r2,r2,27138
 401aad8:	1000181e 	bne	r2,zero,401ab3c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401aadc:	00002906 	br	401ab84 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401aae0:	e0bffd17 	ldw	r2,-12(fp)
 401aae4:	10c00117 	ldw	r3,4(r2)
 401aae8:	00a00034 	movhi	r2,32768
 401aaec:	10bfffc4 	addi	r2,r2,-1
 401aaf0:	18802126 	beq	r3,r2,401ab78 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401aaf4:	e0bfff17 	ldw	r2,-4(fp)
 401aaf8:	10800017 	ldw	r2,0(r2)
 401aafc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401ab00:	e0bffc17 	ldw	r2,-16(fp)
 401ab04:	10800090 	cmplti	r2,r2,2
 401ab08:	1000061e 	bne	r2,zero,401ab24 <altera_avalon_jtag_uart_ioctl+0x7c>
 401ab0c:	e0fffc17 	ldw	r3,-16(fp)
 401ab10:	00a00034 	movhi	r2,32768
 401ab14:	10bfffc4 	addi	r2,r2,-1
 401ab18:	18800226 	beq	r3,r2,401ab24 <altera_avalon_jtag_uart_ioctl+0x7c>
 401ab1c:	e0bffc17 	ldw	r2,-16(fp)
 401ab20:	00000206 	br	401ab2c <altera_avalon_jtag_uart_ioctl+0x84>
 401ab24:	00a00034 	movhi	r2,32768
 401ab28:	10bfff84 	addi	r2,r2,-2
 401ab2c:	e0fffd17 	ldw	r3,-12(fp)
 401ab30:	18800115 	stw	r2,4(r3)
      rc = 0;
 401ab34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401ab38:	00000f06 	br	401ab78 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401ab3c:	e0bffd17 	ldw	r2,-12(fp)
 401ab40:	10c00117 	ldw	r3,4(r2)
 401ab44:	00a00034 	movhi	r2,32768
 401ab48:	10bfffc4 	addi	r2,r2,-1
 401ab4c:	18800c26 	beq	r3,r2,401ab80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401ab50:	e0bffd17 	ldw	r2,-12(fp)
 401ab54:	10c00917 	ldw	r3,36(r2)
 401ab58:	e0bffd17 	ldw	r2,-12(fp)
 401ab5c:	10800117 	ldw	r2,4(r2)
 401ab60:	1885803a 	cmpltu	r2,r3,r2
 401ab64:	10c03fcc 	andi	r3,r2,255
 401ab68:	e0bfff17 	ldw	r2,-4(fp)
 401ab6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401ab70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401ab74:	00000206 	br	401ab80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401ab78:	0001883a 	nop
 401ab7c:	00000106 	br	401ab84 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401ab80:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401ab84:	e0bffb17 	ldw	r2,-20(fp)
}
 401ab88:	e037883a 	mov	sp,fp
 401ab8c:	df000017 	ldw	fp,0(sp)
 401ab90:	dec00104 	addi	sp,sp,4
 401ab94:	f800283a 	ret

0401ab98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401ab98:	deffed04 	addi	sp,sp,-76
 401ab9c:	dfc01215 	stw	ra,72(sp)
 401aba0:	df001115 	stw	fp,68(sp)
 401aba4:	df001104 	addi	fp,sp,68
 401aba8:	e13ffc15 	stw	r4,-16(fp)
 401abac:	e17ffd15 	stw	r5,-12(fp)
 401abb0:	e1bffe15 	stw	r6,-8(fp)
 401abb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401abb8:	e0bffd17 	ldw	r2,-12(fp)
 401abbc:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 401abc0:	e0bffc17 	ldw	r2,-16(fp)
 401abc4:	10800a17 	ldw	r2,40(r2)
 401abc8:	e0bff815 	stw	r2,-32(fp)
 401abcc:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 401abd0:	e0bff90b 	ldhu	r2,-28(fp)
 401abd4:	e0fffb04 	addi	r3,fp,-20
 401abd8:	180d883a 	mov	r6,r3
 401abdc:	100b883a 	mov	r5,r2
 401abe0:	e13ff817 	ldw	r4,-32(fp)
 401abe4:	40180340 	call	4018034 <OSSemPend>

  while (space > 0)
 401abe8:	00006106 	br	401ad70 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401abec:	e0bffc17 	ldw	r2,-16(fp)
 401abf0:	10800d17 	ldw	r2,52(r2)
 401abf4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 401abf8:	e0bffc17 	ldw	r2,-16(fp)
 401abfc:	10800e17 	ldw	r2,56(r2)
 401ac00:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 401ac04:	e0fff317 	ldw	r3,-52(fp)
 401ac08:	e0bff417 	ldw	r2,-48(fp)
 401ac0c:	18800536 	bltu	r3,r2,401ac24 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 401ac10:	e0fff317 	ldw	r3,-52(fp)
 401ac14:	e0bff417 	ldw	r2,-48(fp)
 401ac18:	1885c83a 	sub	r2,r3,r2
 401ac1c:	e0bff115 	stw	r2,-60(fp)
 401ac20:	00000406 	br	401ac34 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401ac24:	00c20004 	movi	r3,2048
 401ac28:	e0bff417 	ldw	r2,-48(fp)
 401ac2c:	1885c83a 	sub	r2,r3,r2
 401ac30:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 401ac34:	e0bff117 	ldw	r2,-60(fp)
 401ac38:	10001e26 	beq	r2,zero,401acb4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 401ac3c:	e0fffe17 	ldw	r3,-8(fp)
 401ac40:	e0bff117 	ldw	r2,-60(fp)
 401ac44:	1880022e 	bgeu	r3,r2,401ac50 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 401ac48:	e0bffe17 	ldw	r2,-8(fp)
 401ac4c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401ac50:	e0bffc17 	ldw	r2,-16(fp)
 401ac54:	10c01104 	addi	r3,r2,68
 401ac58:	e0bff417 	ldw	r2,-48(fp)
 401ac5c:	1885883a 	add	r2,r3,r2
 401ac60:	e1bff117 	ldw	r6,-60(fp)
 401ac64:	100b883a 	mov	r5,r2
 401ac68:	e13ff017 	ldw	r4,-64(fp)
 401ac6c:	40091b40 	call	40091b4 <memcpy>
      ptr   += n;
 401ac70:	e0fff017 	ldw	r3,-64(fp)
 401ac74:	e0bff117 	ldw	r2,-60(fp)
 401ac78:	1885883a 	add	r2,r3,r2
 401ac7c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 401ac80:	e0fffe17 	ldw	r3,-8(fp)
 401ac84:	e0bff117 	ldw	r2,-60(fp)
 401ac88:	1885c83a 	sub	r2,r3,r2
 401ac8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401ac90:	e0fff417 	ldw	r3,-48(fp)
 401ac94:	e0bff117 	ldw	r2,-60(fp)
 401ac98:	1885883a 	add	r2,r3,r2
 401ac9c:	10c1ffcc 	andi	r3,r2,2047
 401aca0:	e0bffc17 	ldw	r2,-16(fp)
 401aca4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 401aca8:	e0bffe17 	ldw	r2,-8(fp)
 401acac:	00bfcf16 	blt	zero,r2,401abec <__alt_mem_onchip_memory2_0+0xfc018bec>
 401acb0:	00000106 	br	401acb8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401acb4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401acb8:	e0fff017 	ldw	r3,-64(fp)
 401acbc:	e0bffd17 	ldw	r2,-12(fp)
 401acc0:	18802e1e 	bne	r3,r2,401ad7c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401acc4:	e0bfff17 	ldw	r2,-4(fp)
 401acc8:	1090000c 	andi	r2,r2,16384
 401accc:	10002d1e 	bne	r2,zero,401ad84 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 401acd0:	d0a74443 	ldbu	r2,-25327(gp)
 401acd4:	10803fcc 	andi	r2,r2,255
 401acd8:	10800058 	cmpnei	r2,r2,1
 401acdc:	1000161e 	bne	r2,zero,401ad38 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 401ace0:	e0bffc17 	ldw	r2,-16(fp)
 401ace4:	10800c17 	ldw	r2,48(r2)
 401ace8:	e0bff215 	stw	r2,-56(fp)
 401acec:	00800144 	movi	r2,5
 401acf0:	e0bff98d 	sth	r2,-26(fp)
 401acf4:	00bfe0c4 	movi	r2,-125
 401acf8:	e0bffa05 	stb	r2,-24(fp)
 401acfc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 401ad00:	d0a74443 	ldbu	r2,-25327(gp)
 401ad04:	10803fcc 	andi	r2,r2,255
 401ad08:	10001526 	beq	r2,zero,401ad60 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 401ad0c:	e0fff98b 	ldhu	r3,-26(fp)
 401ad10:	e13ffa03 	ldbu	r4,-24(fp)
 401ad14:	e17ffa8b 	ldhu	r5,-22(fp)
 401ad18:	e0bffb44 	addi	r2,fp,-19
 401ad1c:	d8800015 	stw	r2,0(sp)
 401ad20:	280f883a 	mov	r7,r5
 401ad24:	200d883a 	mov	r6,r4
 401ad28:	180b883a 	mov	r5,r3
 401ad2c:	e13ff217 	ldw	r4,-56(fp)
 401ad30:	4014b040 	call	4014b04 <OSFlagPend>
 401ad34:	00000a06 	br	401ad60 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401ad38:	0001883a 	nop
 401ad3c:	e0bffc17 	ldw	r2,-16(fp)
 401ad40:	10c00d17 	ldw	r3,52(r2)
 401ad44:	e0bff317 	ldw	r2,-52(fp)
 401ad48:	1880051e 	bne	r3,r2,401ad60 <altera_avalon_jtag_uart_read+0x1c8>
 401ad4c:	e0bffc17 	ldw	r2,-16(fp)
 401ad50:	10c00917 	ldw	r3,36(r2)
 401ad54:	e0bffc17 	ldw	r2,-16(fp)
 401ad58:	10800117 	ldw	r2,4(r2)
 401ad5c:	18bff736 	bltu	r3,r2,401ad3c <__alt_mem_onchip_memory2_0+0xfc018d3c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401ad60:	e0bffc17 	ldw	r2,-16(fp)
 401ad64:	10c00d17 	ldw	r3,52(r2)
 401ad68:	e0bff317 	ldw	r2,-52(fp)
 401ad6c:	18800726 	beq	r3,r2,401ad8c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401ad70:	e0bffe17 	ldw	r2,-8(fp)
 401ad74:	00bf9d16 	blt	zero,r2,401abec <__alt_mem_onchip_memory2_0+0xfc018bec>
 401ad78:	00000506 	br	401ad90 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401ad7c:	0001883a 	nop
 401ad80:	00000306 	br	401ad90 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401ad84:	0001883a 	nop
 401ad88:	00000106 	br	401ad90 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401ad8c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 401ad90:	e0bffc17 	ldw	r2,-16(fp)
 401ad94:	10800a17 	ldw	r2,40(r2)
 401ad98:	1009883a 	mov	r4,r2
 401ad9c:	40183ac0 	call	40183ac <OSSemPost>

  if (ptr != buffer)
 401ada0:	e0fff017 	ldw	r3,-64(fp)
 401ada4:	e0bffd17 	ldw	r2,-12(fp)
 401ada8:	18801826 	beq	r3,r2,401ae0c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401adac:	0005303a 	rdctl	r2,status
 401adb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401adb4:	e0fff717 	ldw	r3,-36(fp)
 401adb8:	00bfff84 	movi	r2,-2
 401adbc:	1884703a 	and	r2,r3,r2
 401adc0:	1001703a 	wrctl	status,r2
  
  return context;
 401adc4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401adc8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401adcc:	e0bffc17 	ldw	r2,-16(fp)
 401add0:	10800817 	ldw	r2,32(r2)
 401add4:	10c00054 	ori	r3,r2,1
 401add8:	e0bffc17 	ldw	r2,-16(fp)
 401addc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401ade0:	e0bffc17 	ldw	r2,-16(fp)
 401ade4:	10800017 	ldw	r2,0(r2)
 401ade8:	10800104 	addi	r2,r2,4
 401adec:	1007883a 	mov	r3,r2
 401adf0:	e0bffc17 	ldw	r2,-16(fp)
 401adf4:	10800817 	ldw	r2,32(r2)
 401adf8:	18800035 	stwio	r2,0(r3)
 401adfc:	e0bff617 	ldw	r2,-40(fp)
 401ae00:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ae04:	e0bff517 	ldw	r2,-44(fp)
 401ae08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401ae0c:	e0fff017 	ldw	r3,-64(fp)
 401ae10:	e0bffd17 	ldw	r2,-12(fp)
 401ae14:	18800426 	beq	r3,r2,401ae28 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 401ae18:	e0fff017 	ldw	r3,-64(fp)
 401ae1c:	e0bffd17 	ldw	r2,-12(fp)
 401ae20:	1885c83a 	sub	r2,r3,r2
 401ae24:	00000606 	br	401ae40 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 401ae28:	e0bfff17 	ldw	r2,-4(fp)
 401ae2c:	1090000c 	andi	r2,r2,16384
 401ae30:	10000226 	beq	r2,zero,401ae3c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 401ae34:	00bffd44 	movi	r2,-11
 401ae38:	00000106 	br	401ae40 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 401ae3c:	00bffec4 	movi	r2,-5
}
 401ae40:	e037883a 	mov	sp,fp
 401ae44:	dfc00117 	ldw	ra,4(sp)
 401ae48:	df000017 	ldw	fp,0(sp)
 401ae4c:	dec00204 	addi	sp,sp,8
 401ae50:	f800283a 	ret

0401ae54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401ae54:	deffed04 	addi	sp,sp,-76
 401ae58:	dfc01215 	stw	ra,72(sp)
 401ae5c:	df001115 	stw	fp,68(sp)
 401ae60:	df001104 	addi	fp,sp,68
 401ae64:	e13ffc15 	stw	r4,-16(fp)
 401ae68:	e17ffd15 	stw	r5,-12(fp)
 401ae6c:	e1bffe15 	stw	r6,-8(fp)
 401ae70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401ae74:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401ae78:	e0bffd17 	ldw	r2,-12(fp)
 401ae7c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 401ae80:	e0bffc17 	ldw	r2,-16(fp)
 401ae84:	10800b17 	ldw	r2,44(r2)
 401ae88:	e0bff815 	stw	r2,-32(fp)
 401ae8c:	e03ff90d 	sth	zero,-28(fp)
 401ae90:	e0bff90b 	ldhu	r2,-28(fp)
 401ae94:	e0fffb44 	addi	r3,fp,-19
 401ae98:	180d883a 	mov	r6,r3
 401ae9c:	100b883a 	mov	r5,r2
 401aea0:	e13ff817 	ldw	r4,-32(fp)
 401aea4:	40180340 	call	4018034 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401aea8:	00003706 	br	401af88 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401aeac:	e0bffc17 	ldw	r2,-16(fp)
 401aeb0:	10800f17 	ldw	r2,60(r2)
 401aeb4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 401aeb8:	e0bffc17 	ldw	r2,-16(fp)
 401aebc:	10801017 	ldw	r2,64(r2)
 401aec0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 401aec4:	e0fff417 	ldw	r3,-48(fp)
 401aec8:	e0bff017 	ldw	r2,-64(fp)
 401aecc:	1880062e 	bgeu	r3,r2,401aee8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 401aed0:	e0fff017 	ldw	r3,-64(fp)
 401aed4:	e0bff417 	ldw	r2,-48(fp)
 401aed8:	1885c83a 	sub	r2,r3,r2
 401aedc:	10bfffc4 	addi	r2,r2,-1
 401aee0:	e0bff115 	stw	r2,-60(fp)
 401aee4:	00000b06 	br	401af14 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 401aee8:	e0bff017 	ldw	r2,-64(fp)
 401aeec:	10000526 	beq	r2,zero,401af04 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401aef0:	00c20004 	movi	r3,2048
 401aef4:	e0bff417 	ldw	r2,-48(fp)
 401aef8:	1885c83a 	sub	r2,r3,r2
 401aefc:	e0bff115 	stw	r2,-60(fp)
 401af00:	00000406 	br	401af14 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401af04:	00c1ffc4 	movi	r3,2047
 401af08:	e0bff417 	ldw	r2,-48(fp)
 401af0c:	1885c83a 	sub	r2,r3,r2
 401af10:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 401af14:	e0bff117 	ldw	r2,-60(fp)
 401af18:	10001e26 	beq	r2,zero,401af94 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 401af1c:	e0fffe17 	ldw	r3,-8(fp)
 401af20:	e0bff117 	ldw	r2,-60(fp)
 401af24:	1880022e 	bgeu	r3,r2,401af30 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 401af28:	e0bffe17 	ldw	r2,-8(fp)
 401af2c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401af30:	e0bffc17 	ldw	r2,-16(fp)
 401af34:	10c21104 	addi	r3,r2,2116
 401af38:	e0bff417 	ldw	r2,-48(fp)
 401af3c:	1885883a 	add	r2,r3,r2
 401af40:	e1bff117 	ldw	r6,-60(fp)
 401af44:	e17ffd17 	ldw	r5,-12(fp)
 401af48:	1009883a 	mov	r4,r2
 401af4c:	40091b40 	call	40091b4 <memcpy>
      ptr   += n;
 401af50:	e0fffd17 	ldw	r3,-12(fp)
 401af54:	e0bff117 	ldw	r2,-60(fp)
 401af58:	1885883a 	add	r2,r3,r2
 401af5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401af60:	e0fffe17 	ldw	r3,-8(fp)
 401af64:	e0bff117 	ldw	r2,-60(fp)
 401af68:	1885c83a 	sub	r2,r3,r2
 401af6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401af70:	e0fff417 	ldw	r3,-48(fp)
 401af74:	e0bff117 	ldw	r2,-60(fp)
 401af78:	1885883a 	add	r2,r3,r2
 401af7c:	10c1ffcc 	andi	r3,r2,2047
 401af80:	e0bffc17 	ldw	r2,-16(fp)
 401af84:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401af88:	e0bffe17 	ldw	r2,-8(fp)
 401af8c:	00bfc716 	blt	zero,r2,401aeac <__alt_mem_onchip_memory2_0+0xfc018eac>
 401af90:	00000106 	br	401af98 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401af94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401af98:	0005303a 	rdctl	r2,status
 401af9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401afa0:	e0fff717 	ldw	r3,-36(fp)
 401afa4:	00bfff84 	movi	r2,-2
 401afa8:	1884703a 	and	r2,r3,r2
 401afac:	1001703a 	wrctl	status,r2
  
  return context;
 401afb0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401afb4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401afb8:	e0bffc17 	ldw	r2,-16(fp)
 401afbc:	10800817 	ldw	r2,32(r2)
 401afc0:	10c00094 	ori	r3,r2,2
 401afc4:	e0bffc17 	ldw	r2,-16(fp)
 401afc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401afcc:	e0bffc17 	ldw	r2,-16(fp)
 401afd0:	10800017 	ldw	r2,0(r2)
 401afd4:	10800104 	addi	r2,r2,4
 401afd8:	1007883a 	mov	r3,r2
 401afdc:	e0bffc17 	ldw	r2,-16(fp)
 401afe0:	10800817 	ldw	r2,32(r2)
 401afe4:	18800035 	stwio	r2,0(r3)
 401afe8:	e0bff617 	ldw	r2,-40(fp)
 401afec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401aff0:	e0bff317 	ldw	r2,-52(fp)
 401aff4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401aff8:	e0bffe17 	ldw	r2,-8(fp)
 401affc:	00802a0e 	bge	zero,r2,401b0a8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 401b000:	e0bfff17 	ldw	r2,-4(fp)
 401b004:	1090000c 	andi	r2,r2,16384
 401b008:	10002a1e 	bne	r2,zero,401b0b4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 401b00c:	d0a74443 	ldbu	r2,-25327(gp)
 401b010:	10803fcc 	andi	r2,r2,255
 401b014:	10800058 	cmpnei	r2,r2,1
 401b018:	1000161e 	bne	r2,zero,401b074 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 401b01c:	e0bffc17 	ldw	r2,-16(fp)
 401b020:	10800c17 	ldw	r2,48(r2)
 401b024:	e0bff515 	stw	r2,-44(fp)
 401b028:	00800184 	movi	r2,6
 401b02c:	e0bff98d 	sth	r2,-26(fp)
 401b030:	00bfe0c4 	movi	r2,-125
 401b034:	e0bffa05 	stb	r2,-24(fp)
 401b038:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 401b03c:	d0a74443 	ldbu	r2,-25327(gp)
 401b040:	10803fcc 	andi	r2,r2,255
 401b044:	10001526 	beq	r2,zero,401b09c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 401b048:	e0fff98b 	ldhu	r3,-26(fp)
 401b04c:	e13ffa03 	ldbu	r4,-24(fp)
 401b050:	e17ffa8b 	ldhu	r5,-22(fp)
 401b054:	e0bffb04 	addi	r2,fp,-20
 401b058:	d8800015 	stw	r2,0(sp)
 401b05c:	280f883a 	mov	r7,r5
 401b060:	200d883a 	mov	r6,r4
 401b064:	180b883a 	mov	r5,r3
 401b068:	e13ff517 	ldw	r4,-44(fp)
 401b06c:	4014b040 	call	4014b04 <OSFlagPend>
 401b070:	00000a06 	br	401b09c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401b074:	0001883a 	nop
 401b078:	e0bffc17 	ldw	r2,-16(fp)
 401b07c:	10c01017 	ldw	r3,64(r2)
 401b080:	e0bff017 	ldw	r2,-64(fp)
 401b084:	1880051e 	bne	r3,r2,401b09c <altera_avalon_jtag_uart_write+0x248>
 401b088:	e0bffc17 	ldw	r2,-16(fp)
 401b08c:	10c00917 	ldw	r3,36(r2)
 401b090:	e0bffc17 	ldw	r2,-16(fp)
 401b094:	10800117 	ldw	r2,4(r2)
 401b098:	18bff736 	bltu	r3,r2,401b078 <__alt_mem_onchip_memory2_0+0xfc019078>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401b09c:	e0bffc17 	ldw	r2,-16(fp)
 401b0a0:	10800917 	ldw	r2,36(r2)
 401b0a4:	1000051e 	bne	r2,zero,401b0bc <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 401b0a8:	e0bffe17 	ldw	r2,-8(fp)
 401b0ac:	00bfb616 	blt	zero,r2,401af88 <__alt_mem_onchip_memory2_0+0xfc018f88>
 401b0b0:	00000306 	br	401b0c0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401b0b4:	0001883a 	nop
 401b0b8:	00000106 	br	401b0c0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401b0bc:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 401b0c0:	e0bffc17 	ldw	r2,-16(fp)
 401b0c4:	10800b17 	ldw	r2,44(r2)
 401b0c8:	1009883a 	mov	r4,r2
 401b0cc:	40183ac0 	call	40183ac <OSSemPost>

  if (ptr != start)
 401b0d0:	e0fffd17 	ldw	r3,-12(fp)
 401b0d4:	e0bff217 	ldw	r2,-56(fp)
 401b0d8:	18800426 	beq	r3,r2,401b0ec <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 401b0dc:	e0fffd17 	ldw	r3,-12(fp)
 401b0e0:	e0bff217 	ldw	r2,-56(fp)
 401b0e4:	1885c83a 	sub	r2,r3,r2
 401b0e8:	00000606 	br	401b104 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 401b0ec:	e0bfff17 	ldw	r2,-4(fp)
 401b0f0:	1090000c 	andi	r2,r2,16384
 401b0f4:	10000226 	beq	r2,zero,401b100 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 401b0f8:	00bffd44 	movi	r2,-11
 401b0fc:	00000106 	br	401b104 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401b100:	00bffec4 	movi	r2,-5
}
 401b104:	e037883a 	mov	sp,fp
 401b108:	dfc00117 	ldw	ra,4(sp)
 401b10c:	df000017 	ldw	fp,0(sp)
 401b110:	dec00204 	addi	sp,sp,8
 401b114:	f800283a 	ret

0401b118 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401b118:	defffa04 	addi	sp,sp,-24
 401b11c:	dfc00515 	stw	ra,20(sp)
 401b120:	df000415 	stw	fp,16(sp)
 401b124:	df000404 	addi	fp,sp,16
 401b128:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401b12c:	0007883a 	mov	r3,zero
 401b130:	e0bfff17 	ldw	r2,-4(fp)
 401b134:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401b138:	e0bfff17 	ldw	r2,-4(fp)
 401b13c:	10800104 	addi	r2,r2,4
 401b140:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b144:	0005303a 	rdctl	r2,status
 401b148:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b14c:	e0fffd17 	ldw	r3,-12(fp)
 401b150:	00bfff84 	movi	r2,-2
 401b154:	1884703a 	and	r2,r3,r2
 401b158:	1001703a 	wrctl	status,r2
  
  return context;
 401b15c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401b160:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401b164:	401bd7c0 	call	401bd7c <alt_tick>
 401b168:	e0bffc17 	ldw	r2,-16(fp)
 401b16c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b170:	e0bffe17 	ldw	r2,-8(fp)
 401b174:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401b178:	0001883a 	nop
 401b17c:	e037883a 	mov	sp,fp
 401b180:	dfc00117 	ldw	ra,4(sp)
 401b184:	df000017 	ldw	fp,0(sp)
 401b188:	dec00204 	addi	sp,sp,8
 401b18c:	f800283a 	ret

0401b190 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401b190:	defff804 	addi	sp,sp,-32
 401b194:	dfc00715 	stw	ra,28(sp)
 401b198:	df000615 	stw	fp,24(sp)
 401b19c:	df000604 	addi	fp,sp,24
 401b1a0:	e13ffc15 	stw	r4,-16(fp)
 401b1a4:	e17ffd15 	stw	r5,-12(fp)
 401b1a8:	e1bffe15 	stw	r6,-8(fp)
 401b1ac:	e1ffff15 	stw	r7,-4(fp)
 401b1b0:	e0bfff17 	ldw	r2,-4(fp)
 401b1b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401b1b8:	d0a75817 	ldw	r2,-25248(gp)
 401b1bc:	1000021e 	bne	r2,zero,401b1c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401b1c0:	e0bffb17 	ldw	r2,-20(fp)
 401b1c4:	d0a75815 	stw	r2,-25248(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401b1c8:	e0bffc17 	ldw	r2,-16(fp)
 401b1cc:	10800104 	addi	r2,r2,4
 401b1d0:	00c001c4 	movi	r3,7
 401b1d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401b1d8:	d8000015 	stw	zero,0(sp)
 401b1dc:	e1fffc17 	ldw	r7,-16(fp)
 401b1e0:	018100b4 	movhi	r6,1026
 401b1e4:	31ac4604 	addi	r6,r6,-20200
 401b1e8:	e17ffe17 	ldw	r5,-8(fp)
 401b1ec:	e13ffd17 	ldw	r4,-12(fp)
 401b1f0:	401b6ac0 	call	401b6ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401b1f4:	0001883a 	nop
 401b1f8:	e037883a 	mov	sp,fp
 401b1fc:	dfc00117 	ldw	ra,4(sp)
 401b200:	df000017 	ldw	fp,0(sp)
 401b204:	dec00204 	addi	sp,sp,8
 401b208:	f800283a 	ret

0401b20c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401b20c:	defff504 	addi	sp,sp,-44
 401b210:	df000a15 	stw	fp,40(sp)
 401b214:	df000a04 	addi	fp,sp,40
 401b218:	e13ffc15 	stw	r4,-16(fp)
 401b21c:	e17ffd15 	stw	r5,-12(fp)
 401b220:	e1bffe15 	stw	r6,-8(fp)
 401b224:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401b228:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401b22c:	d0a75817 	ldw	r2,-25248(gp)
  
  if (alt_ticks_per_second ())
 401b230:	10003c26 	beq	r2,zero,401b324 <alt_alarm_start+0x118>
  {
    if (alarm)
 401b234:	e0bffc17 	ldw	r2,-16(fp)
 401b238:	10003826 	beq	r2,zero,401b31c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401b23c:	e0bffc17 	ldw	r2,-16(fp)
 401b240:	e0fffe17 	ldw	r3,-8(fp)
 401b244:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401b248:	e0bffc17 	ldw	r2,-16(fp)
 401b24c:	e0ffff17 	ldw	r3,-4(fp)
 401b250:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b254:	0005303a 	rdctl	r2,status
 401b258:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b25c:	e0fff917 	ldw	r3,-28(fp)
 401b260:	00bfff84 	movi	r2,-2
 401b264:	1884703a 	and	r2,r3,r2
 401b268:	1001703a 	wrctl	status,r2
  
  return context;
 401b26c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401b270:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401b274:	d0a75917 	ldw	r2,-25244(gp)
      
      current_nticks = alt_nticks();
 401b278:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401b27c:	e0fffd17 	ldw	r3,-12(fp)
 401b280:	e0bff617 	ldw	r2,-40(fp)
 401b284:	1885883a 	add	r2,r3,r2
 401b288:	10c00044 	addi	r3,r2,1
 401b28c:	e0bffc17 	ldw	r2,-16(fp)
 401b290:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401b294:	e0bffc17 	ldw	r2,-16(fp)
 401b298:	10c00217 	ldw	r3,8(r2)
 401b29c:	e0bff617 	ldw	r2,-40(fp)
 401b2a0:	1880042e 	bgeu	r3,r2,401b2b4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401b2a4:	e0bffc17 	ldw	r2,-16(fp)
 401b2a8:	00c00044 	movi	r3,1
 401b2ac:	10c00405 	stb	r3,16(r2)
 401b2b0:	00000206 	br	401b2bc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401b2b4:	e0bffc17 	ldw	r2,-16(fp)
 401b2b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401b2bc:	e0bffc17 	ldw	r2,-16(fp)
 401b2c0:	d0e03a04 	addi	r3,gp,-32536
 401b2c4:	e0fffa15 	stw	r3,-24(fp)
 401b2c8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401b2cc:	e0bffb17 	ldw	r2,-20(fp)
 401b2d0:	e0fffa17 	ldw	r3,-24(fp)
 401b2d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401b2d8:	e0bffa17 	ldw	r2,-24(fp)
 401b2dc:	10c00017 	ldw	r3,0(r2)
 401b2e0:	e0bffb17 	ldw	r2,-20(fp)
 401b2e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401b2e8:	e0bffa17 	ldw	r2,-24(fp)
 401b2ec:	10800017 	ldw	r2,0(r2)
 401b2f0:	e0fffb17 	ldw	r3,-20(fp)
 401b2f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401b2f8:	e0bffa17 	ldw	r2,-24(fp)
 401b2fc:	e0fffb17 	ldw	r3,-20(fp)
 401b300:	10c00015 	stw	r3,0(r2)
 401b304:	e0bff817 	ldw	r2,-32(fp)
 401b308:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b30c:	e0bff717 	ldw	r2,-36(fp)
 401b310:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401b314:	0005883a 	mov	r2,zero
 401b318:	00000306 	br	401b328 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401b31c:	00bffa84 	movi	r2,-22
 401b320:	00000106 	br	401b328 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401b324:	00bfde84 	movi	r2,-134
  }
}
 401b328:	e037883a 	mov	sp,fp
 401b32c:	df000017 	ldw	fp,0(sp)
 401b330:	dec00104 	addi	sp,sp,4
 401b334:	f800283a 	ret

0401b338 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401b338:	defffa04 	addi	sp,sp,-24
 401b33c:	dfc00515 	stw	ra,20(sp)
 401b340:	df000415 	stw	fp,16(sp)
 401b344:	df000404 	addi	fp,sp,16
 401b348:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 401b34c:	008000c4 	movi	r2,3
 401b350:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401b354:	e0fffd17 	ldw	r3,-12(fp)
 401b358:	008003f4 	movhi	r2,15
 401b35c:	10909004 	addi	r2,r2,16960
 401b360:	1885383a 	mul	r2,r3,r2
 401b364:	100b883a 	mov	r5,r2
 401b368:	0100bef4 	movhi	r4,763
 401b36c:	213c2004 	addi	r4,r4,-3968
 401b370:	4000dbc0 	call	4000dbc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401b374:	100b883a 	mov	r5,r2
 401b378:	01200034 	movhi	r4,32768
 401b37c:	213fffc4 	addi	r4,r4,-1
 401b380:	4000dbc0 	call	4000dbc <__udivsi3>
 401b384:	100b883a 	mov	r5,r2
 401b388:	e13fff17 	ldw	r4,-4(fp)
 401b38c:	4000dbc0 	call	4000dbc <__udivsi3>
 401b390:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401b394:	e0bffe17 	ldw	r2,-8(fp)
 401b398:	10002a26 	beq	r2,zero,401b444 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401b39c:	e03ffc15 	stw	zero,-16(fp)
 401b3a0:	00001706 	br	401b400 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401b3a4:	00a00034 	movhi	r2,32768
 401b3a8:	10bfffc4 	addi	r2,r2,-1
 401b3ac:	10bfffc4 	addi	r2,r2,-1
 401b3b0:	103ffe1e 	bne	r2,zero,401b3ac <__alt_mem_onchip_memory2_0+0xfc0193ac>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401b3b4:	e0fffd17 	ldw	r3,-12(fp)
 401b3b8:	008003f4 	movhi	r2,15
 401b3bc:	10909004 	addi	r2,r2,16960
 401b3c0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401b3c4:	100b883a 	mov	r5,r2
 401b3c8:	0100bef4 	movhi	r4,763
 401b3cc:	213c2004 	addi	r4,r4,-3968
 401b3d0:	4000dbc0 	call	4000dbc <__udivsi3>
 401b3d4:	100b883a 	mov	r5,r2
 401b3d8:	01200034 	movhi	r4,32768
 401b3dc:	213fffc4 	addi	r4,r4,-1
 401b3e0:	4000dbc0 	call	4000dbc <__udivsi3>
 401b3e4:	1007883a 	mov	r3,r2
 401b3e8:	e0bfff17 	ldw	r2,-4(fp)
 401b3ec:	10c5c83a 	sub	r2,r2,r3
 401b3f0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401b3f4:	e0bffc17 	ldw	r2,-16(fp)
 401b3f8:	10800044 	addi	r2,r2,1
 401b3fc:	e0bffc15 	stw	r2,-16(fp)
 401b400:	e0fffc17 	ldw	r3,-16(fp)
 401b404:	e0bffe17 	ldw	r2,-8(fp)
 401b408:	18bfe616 	blt	r3,r2,401b3a4 <__alt_mem_onchip_memory2_0+0xfc0193a4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401b40c:	e0fffd17 	ldw	r3,-12(fp)
 401b410:	008003f4 	movhi	r2,15
 401b414:	10909004 	addi	r2,r2,16960
 401b418:	1885383a 	mul	r2,r3,r2
 401b41c:	100b883a 	mov	r5,r2
 401b420:	0100bef4 	movhi	r4,763
 401b424:	213c2004 	addi	r4,r4,-3968
 401b428:	4000dbc0 	call	4000dbc <__udivsi3>
 401b42c:	1007883a 	mov	r3,r2
 401b430:	e0bfff17 	ldw	r2,-4(fp)
 401b434:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401b438:	10bfffc4 	addi	r2,r2,-1
 401b43c:	103ffe1e 	bne	r2,zero,401b438 <__alt_mem_onchip_memory2_0+0xfc019438>
 401b440:	00000d06 	br	401b478 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401b444:	e0fffd17 	ldw	r3,-12(fp)
 401b448:	008003f4 	movhi	r2,15
 401b44c:	10909004 	addi	r2,r2,16960
 401b450:	1885383a 	mul	r2,r3,r2
 401b454:	100b883a 	mov	r5,r2
 401b458:	0100bef4 	movhi	r4,763
 401b45c:	213c2004 	addi	r4,r4,-3968
 401b460:	4000dbc0 	call	4000dbc <__udivsi3>
 401b464:	1007883a 	mov	r3,r2
 401b468:	e0bfff17 	ldw	r2,-4(fp)
 401b46c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401b470:	10bfffc4 	addi	r2,r2,-1
 401b474:	00bffe16 	blt	zero,r2,401b470 <__alt_mem_onchip_memory2_0+0xfc019470>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401b478:	0005883a 	mov	r2,zero
}
 401b47c:	e037883a 	mov	sp,fp
 401b480:	dfc00117 	ldw	ra,4(sp)
 401b484:	df000017 	ldw	fp,0(sp)
 401b488:	dec00204 	addi	sp,sp,8
 401b48c:	f800283a 	ret

0401b490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401b490:	defffe04 	addi	sp,sp,-8
 401b494:	df000115 	stw	fp,4(sp)
 401b498:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401b49c:	e03fff15 	stw	zero,-4(fp)
 401b4a0:	00000506 	br	401b4b8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 401b4a4:	e0bfff17 	ldw	r2,-4(fp)
 401b4a8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401b4ac:	e0bfff17 	ldw	r2,-4(fp)
 401b4b0:	10800804 	addi	r2,r2,32
 401b4b4:	e0bfff15 	stw	r2,-4(fp)
 401b4b8:	e0bfff17 	ldw	r2,-4(fp)
 401b4bc:	10820030 	cmpltui	r2,r2,2048
 401b4c0:	103ff81e 	bne	r2,zero,401b4a4 <__alt_mem_onchip_memory2_0+0xfc0194a4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401b4c4:	0001883a 	nop
 401b4c8:	e037883a 	mov	sp,fp
 401b4cc:	df000017 	ldw	fp,0(sp)
 401b4d0:	dec00104 	addi	sp,sp,4
 401b4d4:	f800283a 	ret

0401b4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b4d8:	defffe04 	addi	sp,sp,-8
 401b4dc:	dfc00115 	stw	ra,4(sp)
 401b4e0:	df000015 	stw	fp,0(sp)
 401b4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b4e8:	d0a01817 	ldw	r2,-32672(gp)
 401b4ec:	10000326 	beq	r2,zero,401b4fc <alt_get_errno+0x24>
 401b4f0:	d0a01817 	ldw	r2,-32672(gp)
 401b4f4:	103ee83a 	callr	r2
 401b4f8:	00000106 	br	401b500 <alt_get_errno+0x28>
 401b4fc:	d0a73a04 	addi	r2,gp,-25368
}
 401b500:	e037883a 	mov	sp,fp
 401b504:	dfc00117 	ldw	ra,4(sp)
 401b508:	df000017 	ldw	fp,0(sp)
 401b50c:	dec00204 	addi	sp,sp,8
 401b510:	f800283a 	ret

0401b514 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401b514:	defffa04 	addi	sp,sp,-24
 401b518:	dfc00515 	stw	ra,20(sp)
 401b51c:	df000415 	stw	fp,16(sp)
 401b520:	df000404 	addi	fp,sp,16
 401b524:	e13ffe15 	stw	r4,-8(fp)
 401b528:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401b52c:	e0bffe17 	ldw	r2,-8(fp)
 401b530:	10000326 	beq	r2,zero,401b540 <alt_dev_llist_insert+0x2c>
 401b534:	e0bffe17 	ldw	r2,-8(fp)
 401b538:	10800217 	ldw	r2,8(r2)
 401b53c:	1000061e 	bne	r2,zero,401b558 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401b540:	401b4d80 	call	401b4d8 <alt_get_errno>
 401b544:	1007883a 	mov	r3,r2
 401b548:	00800584 	movi	r2,22
 401b54c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401b550:	00bffa84 	movi	r2,-22
 401b554:	00001306 	br	401b5a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401b558:	e0bffe17 	ldw	r2,-8(fp)
 401b55c:	e0ffff17 	ldw	r3,-4(fp)
 401b560:	e0fffc15 	stw	r3,-16(fp)
 401b564:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401b568:	e0bffd17 	ldw	r2,-12(fp)
 401b56c:	e0fffc17 	ldw	r3,-16(fp)
 401b570:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401b574:	e0bffc17 	ldw	r2,-16(fp)
 401b578:	10c00017 	ldw	r3,0(r2)
 401b57c:	e0bffd17 	ldw	r2,-12(fp)
 401b580:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401b584:	e0bffc17 	ldw	r2,-16(fp)
 401b588:	10800017 	ldw	r2,0(r2)
 401b58c:	e0fffd17 	ldw	r3,-12(fp)
 401b590:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401b594:	e0bffc17 	ldw	r2,-16(fp)
 401b598:	e0fffd17 	ldw	r3,-12(fp)
 401b59c:	10c00015 	stw	r3,0(r2)

  return 0;  
 401b5a0:	0005883a 	mov	r2,zero
}
 401b5a4:	e037883a 	mov	sp,fp
 401b5a8:	dfc00117 	ldw	ra,4(sp)
 401b5ac:	df000017 	ldw	fp,0(sp)
 401b5b0:	dec00204 	addi	sp,sp,8
 401b5b4:	f800283a 	ret

0401b5b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401b5b8:	defffd04 	addi	sp,sp,-12
 401b5bc:	dfc00215 	stw	ra,8(sp)
 401b5c0:	df000115 	stw	fp,4(sp)
 401b5c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401b5c8:	008100b4 	movhi	r2,1026
 401b5cc:	10b24c04 	addi	r2,r2,-14032
 401b5d0:	e0bfff15 	stw	r2,-4(fp)
 401b5d4:	00000606 	br	401b5f0 <_do_ctors+0x38>
        (*ctor) (); 
 401b5d8:	e0bfff17 	ldw	r2,-4(fp)
 401b5dc:	10800017 	ldw	r2,0(r2)
 401b5e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401b5e4:	e0bfff17 	ldw	r2,-4(fp)
 401b5e8:	10bfff04 	addi	r2,r2,-4
 401b5ec:	e0bfff15 	stw	r2,-4(fp)
 401b5f0:	e0ffff17 	ldw	r3,-4(fp)
 401b5f4:	008100b4 	movhi	r2,1026
 401b5f8:	10b24d04 	addi	r2,r2,-14028
 401b5fc:	18bff62e 	bgeu	r3,r2,401b5d8 <__alt_mem_onchip_memory2_0+0xfc0195d8>
        (*ctor) (); 
}
 401b600:	0001883a 	nop
 401b604:	e037883a 	mov	sp,fp
 401b608:	dfc00117 	ldw	ra,4(sp)
 401b60c:	df000017 	ldw	fp,0(sp)
 401b610:	dec00204 	addi	sp,sp,8
 401b614:	f800283a 	ret

0401b618 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401b618:	defffd04 	addi	sp,sp,-12
 401b61c:	dfc00215 	stw	ra,8(sp)
 401b620:	df000115 	stw	fp,4(sp)
 401b624:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401b628:	008100b4 	movhi	r2,1026
 401b62c:	10b24c04 	addi	r2,r2,-14032
 401b630:	e0bfff15 	stw	r2,-4(fp)
 401b634:	00000606 	br	401b650 <_do_dtors+0x38>
        (*dtor) (); 
 401b638:	e0bfff17 	ldw	r2,-4(fp)
 401b63c:	10800017 	ldw	r2,0(r2)
 401b640:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401b644:	e0bfff17 	ldw	r2,-4(fp)
 401b648:	10bfff04 	addi	r2,r2,-4
 401b64c:	e0bfff15 	stw	r2,-4(fp)
 401b650:	e0ffff17 	ldw	r3,-4(fp)
 401b654:	008100b4 	movhi	r2,1026
 401b658:	10b24d04 	addi	r2,r2,-14028
 401b65c:	18bff62e 	bgeu	r3,r2,401b638 <__alt_mem_onchip_memory2_0+0xfc019638>
        (*dtor) (); 
}
 401b660:	0001883a 	nop
 401b664:	e037883a 	mov	sp,fp
 401b668:	dfc00117 	ldw	ra,4(sp)
 401b66c:	df000017 	ldw	fp,0(sp)
 401b670:	dec00204 	addi	sp,sp,8
 401b674:	f800283a 	ret

0401b678 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401b678:	defffe04 	addi	sp,sp,-8
 401b67c:	dfc00115 	stw	ra,4(sp)
 401b680:	df000015 	stw	fp,0(sp)
 401b684:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 401b688:	01440004 	movi	r5,4096
 401b68c:	0009883a 	mov	r4,zero
 401b690:	401c4740 	call	401c474 <alt_icache_flush>
#endif
}
 401b694:	0001883a 	nop
 401b698:	e037883a 	mov	sp,fp
 401b69c:	dfc00117 	ldw	ra,4(sp)
 401b6a0:	df000017 	ldw	fp,0(sp)
 401b6a4:	dec00204 	addi	sp,sp,8
 401b6a8:	f800283a 	ret

0401b6ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401b6ac:	defff904 	addi	sp,sp,-28
 401b6b0:	dfc00615 	stw	ra,24(sp)
 401b6b4:	df000515 	stw	fp,20(sp)
 401b6b8:	df000504 	addi	fp,sp,20
 401b6bc:	e13ffc15 	stw	r4,-16(fp)
 401b6c0:	e17ffd15 	stw	r5,-12(fp)
 401b6c4:	e1bffe15 	stw	r6,-8(fp)
 401b6c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401b6cc:	e0800217 	ldw	r2,8(fp)
 401b6d0:	d8800015 	stw	r2,0(sp)
 401b6d4:	e1ffff17 	ldw	r7,-4(fp)
 401b6d8:	e1bffe17 	ldw	r6,-8(fp)
 401b6dc:	e17ffd17 	ldw	r5,-12(fp)
 401b6e0:	e13ffc17 	ldw	r4,-16(fp)
 401b6e4:	401b85c0 	call	401b85c <alt_iic_isr_register>
}  
 401b6e8:	e037883a 	mov	sp,fp
 401b6ec:	dfc00117 	ldw	ra,4(sp)
 401b6f0:	df000017 	ldw	fp,0(sp)
 401b6f4:	dec00204 	addi	sp,sp,8
 401b6f8:	f800283a 	ret

0401b6fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401b6fc:	defff904 	addi	sp,sp,-28
 401b700:	df000615 	stw	fp,24(sp)
 401b704:	df000604 	addi	fp,sp,24
 401b708:	e13ffe15 	stw	r4,-8(fp)
 401b70c:	e17fff15 	stw	r5,-4(fp)
 401b710:	e0bfff17 	ldw	r2,-4(fp)
 401b714:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b718:	0005303a 	rdctl	r2,status
 401b71c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b720:	e0fffb17 	ldw	r3,-20(fp)
 401b724:	00bfff84 	movi	r2,-2
 401b728:	1884703a 	and	r2,r3,r2
 401b72c:	1001703a 	wrctl	status,r2
  
  return context;
 401b730:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401b734:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401b738:	00c00044 	movi	r3,1
 401b73c:	e0bffa17 	ldw	r2,-24(fp)
 401b740:	1884983a 	sll	r2,r3,r2
 401b744:	1007883a 	mov	r3,r2
 401b748:	d0a73c17 	ldw	r2,-25360(gp)
 401b74c:	1884b03a 	or	r2,r3,r2
 401b750:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401b754:	d0a73c17 	ldw	r2,-25360(gp)
 401b758:	100170fa 	wrctl	ienable,r2
 401b75c:	e0bffc17 	ldw	r2,-16(fp)
 401b760:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b764:	e0bffd17 	ldw	r2,-12(fp)
 401b768:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401b76c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401b770:	0001883a 	nop
}
 401b774:	e037883a 	mov	sp,fp
 401b778:	df000017 	ldw	fp,0(sp)
 401b77c:	dec00104 	addi	sp,sp,4
 401b780:	f800283a 	ret

0401b784 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401b784:	defff904 	addi	sp,sp,-28
 401b788:	df000615 	stw	fp,24(sp)
 401b78c:	df000604 	addi	fp,sp,24
 401b790:	e13ffe15 	stw	r4,-8(fp)
 401b794:	e17fff15 	stw	r5,-4(fp)
 401b798:	e0bfff17 	ldw	r2,-4(fp)
 401b79c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b7a0:	0005303a 	rdctl	r2,status
 401b7a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b7a8:	e0fffb17 	ldw	r3,-20(fp)
 401b7ac:	00bfff84 	movi	r2,-2
 401b7b0:	1884703a 	and	r2,r3,r2
 401b7b4:	1001703a 	wrctl	status,r2
  
  return context;
 401b7b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401b7bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401b7c0:	00c00044 	movi	r3,1
 401b7c4:	e0bffa17 	ldw	r2,-24(fp)
 401b7c8:	1884983a 	sll	r2,r3,r2
 401b7cc:	0084303a 	nor	r2,zero,r2
 401b7d0:	1007883a 	mov	r3,r2
 401b7d4:	d0a73c17 	ldw	r2,-25360(gp)
 401b7d8:	1884703a 	and	r2,r3,r2
 401b7dc:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401b7e0:	d0a73c17 	ldw	r2,-25360(gp)
 401b7e4:	100170fa 	wrctl	ienable,r2
 401b7e8:	e0bffc17 	ldw	r2,-16(fp)
 401b7ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b7f0:	e0bffd17 	ldw	r2,-12(fp)
 401b7f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401b7f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401b7fc:	0001883a 	nop
}
 401b800:	e037883a 	mov	sp,fp
 401b804:	df000017 	ldw	fp,0(sp)
 401b808:	dec00104 	addi	sp,sp,4
 401b80c:	f800283a 	ret

0401b810 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401b810:	defffc04 	addi	sp,sp,-16
 401b814:	df000315 	stw	fp,12(sp)
 401b818:	df000304 	addi	fp,sp,12
 401b81c:	e13ffe15 	stw	r4,-8(fp)
 401b820:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401b824:	000530fa 	rdctl	r2,ienable
 401b828:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401b82c:	00c00044 	movi	r3,1
 401b830:	e0bfff17 	ldw	r2,-4(fp)
 401b834:	1884983a 	sll	r2,r3,r2
 401b838:	1007883a 	mov	r3,r2
 401b83c:	e0bffd17 	ldw	r2,-12(fp)
 401b840:	1884703a 	and	r2,r3,r2
 401b844:	1004c03a 	cmpne	r2,r2,zero
 401b848:	10803fcc 	andi	r2,r2,255
}
 401b84c:	e037883a 	mov	sp,fp
 401b850:	df000017 	ldw	fp,0(sp)
 401b854:	dec00104 	addi	sp,sp,4
 401b858:	f800283a 	ret

0401b85c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401b85c:	defff504 	addi	sp,sp,-44
 401b860:	dfc00a15 	stw	ra,40(sp)
 401b864:	df000915 	stw	fp,36(sp)
 401b868:	df000904 	addi	fp,sp,36
 401b86c:	e13ffc15 	stw	r4,-16(fp)
 401b870:	e17ffd15 	stw	r5,-12(fp)
 401b874:	e1bffe15 	stw	r6,-8(fp)
 401b878:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401b87c:	00bffa84 	movi	r2,-22
 401b880:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401b884:	e0bffd17 	ldw	r2,-12(fp)
 401b888:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401b88c:	e0bff817 	ldw	r2,-32(fp)
 401b890:	10800808 	cmpgei	r2,r2,32
 401b894:	1000271e 	bne	r2,zero,401b934 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b898:	0005303a 	rdctl	r2,status
 401b89c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b8a0:	e0fffb17 	ldw	r3,-20(fp)
 401b8a4:	00bfff84 	movi	r2,-2
 401b8a8:	1884703a 	and	r2,r3,r2
 401b8ac:	1001703a 	wrctl	status,r2
  
  return context;
 401b8b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401b8b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401b8b8:	008100f4 	movhi	r2,1027
 401b8bc:	10a64504 	addi	r2,r2,-26348
 401b8c0:	e0fff817 	ldw	r3,-32(fp)
 401b8c4:	180690fa 	slli	r3,r3,3
 401b8c8:	10c5883a 	add	r2,r2,r3
 401b8cc:	e0fffe17 	ldw	r3,-8(fp)
 401b8d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401b8d4:	008100f4 	movhi	r2,1027
 401b8d8:	10a64504 	addi	r2,r2,-26348
 401b8dc:	e0fff817 	ldw	r3,-32(fp)
 401b8e0:	180690fa 	slli	r3,r3,3
 401b8e4:	10c5883a 	add	r2,r2,r3
 401b8e8:	10800104 	addi	r2,r2,4
 401b8ec:	e0ffff17 	ldw	r3,-4(fp)
 401b8f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401b8f4:	e0bffe17 	ldw	r2,-8(fp)
 401b8f8:	10000526 	beq	r2,zero,401b910 <alt_iic_isr_register+0xb4>
 401b8fc:	e0bff817 	ldw	r2,-32(fp)
 401b900:	100b883a 	mov	r5,r2
 401b904:	e13ffc17 	ldw	r4,-16(fp)
 401b908:	401b6fc0 	call	401b6fc <alt_ic_irq_enable>
 401b90c:	00000406 	br	401b920 <alt_iic_isr_register+0xc4>
 401b910:	e0bff817 	ldw	r2,-32(fp)
 401b914:	100b883a 	mov	r5,r2
 401b918:	e13ffc17 	ldw	r4,-16(fp)
 401b91c:	401b7840 	call	401b784 <alt_ic_irq_disable>
 401b920:	e0bff715 	stw	r2,-36(fp)
 401b924:	e0bffa17 	ldw	r2,-24(fp)
 401b928:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b92c:	e0bff917 	ldw	r2,-28(fp)
 401b930:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401b934:	e0bff717 	ldw	r2,-36(fp)
}
 401b938:	e037883a 	mov	sp,fp
 401b93c:	dfc00117 	ldw	ra,4(sp)
 401b940:	df000017 	ldw	fp,0(sp)
 401b944:	dec00204 	addi	sp,sp,8
 401b948:	f800283a 	ret

0401b94c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401b94c:	defff904 	addi	sp,sp,-28
 401b950:	dfc00615 	stw	ra,24(sp)
 401b954:	df000515 	stw	fp,20(sp)
 401b958:	df000504 	addi	fp,sp,20
 401b95c:	e13ffc15 	stw	r4,-16(fp)
 401b960:	e17ffd15 	stw	r5,-12(fp)
 401b964:	e1bffe15 	stw	r6,-8(fp)
 401b968:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401b96c:	e1bfff17 	ldw	r6,-4(fp)
 401b970:	e17ffe17 	ldw	r5,-8(fp)
 401b974:	e13ffd17 	ldw	r4,-12(fp)
 401b978:	401bb8c0 	call	401bb8c <open>
 401b97c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401b980:	e0bffb17 	ldw	r2,-20(fp)
 401b984:	10001c16 	blt	r2,zero,401b9f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 401b988:	008100b4 	movhi	r2,1026
 401b98c:	10b5ad04 	addi	r2,r2,-10572
 401b990:	e0fffb17 	ldw	r3,-20(fp)
 401b994:	18c00324 	muli	r3,r3,12
 401b998:	10c5883a 	add	r2,r2,r3
 401b99c:	10c00017 	ldw	r3,0(r2)
 401b9a0:	e0bffc17 	ldw	r2,-16(fp)
 401b9a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401b9a8:	008100b4 	movhi	r2,1026
 401b9ac:	10b5ad04 	addi	r2,r2,-10572
 401b9b0:	e0fffb17 	ldw	r3,-20(fp)
 401b9b4:	18c00324 	muli	r3,r3,12
 401b9b8:	10c5883a 	add	r2,r2,r3
 401b9bc:	10800104 	addi	r2,r2,4
 401b9c0:	10c00017 	ldw	r3,0(r2)
 401b9c4:	e0bffc17 	ldw	r2,-16(fp)
 401b9c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401b9cc:	008100b4 	movhi	r2,1026
 401b9d0:	10b5ad04 	addi	r2,r2,-10572
 401b9d4:	e0fffb17 	ldw	r3,-20(fp)
 401b9d8:	18c00324 	muli	r3,r3,12
 401b9dc:	10c5883a 	add	r2,r2,r3
 401b9e0:	10800204 	addi	r2,r2,8
 401b9e4:	10c00017 	ldw	r3,0(r2)
 401b9e8:	e0bffc17 	ldw	r2,-16(fp)
 401b9ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401b9f0:	e13ffb17 	ldw	r4,-20(fp)
 401b9f4:	4011a280 	call	4011a28 <alt_release_fd>
  }
} 
 401b9f8:	0001883a 	nop
 401b9fc:	e037883a 	mov	sp,fp
 401ba00:	dfc00117 	ldw	ra,4(sp)
 401ba04:	df000017 	ldw	fp,0(sp)
 401ba08:	dec00204 	addi	sp,sp,8
 401ba0c:	f800283a 	ret

0401ba10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401ba10:	defffb04 	addi	sp,sp,-20
 401ba14:	dfc00415 	stw	ra,16(sp)
 401ba18:	df000315 	stw	fp,12(sp)
 401ba1c:	df000304 	addi	fp,sp,12
 401ba20:	e13ffd15 	stw	r4,-12(fp)
 401ba24:	e17ffe15 	stw	r5,-8(fp)
 401ba28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401ba2c:	01c07fc4 	movi	r7,511
 401ba30:	01800044 	movi	r6,1
 401ba34:	e17ffd17 	ldw	r5,-12(fp)
 401ba38:	010100b4 	movhi	r4,1026
 401ba3c:	2135b004 	addi	r4,r4,-10560
 401ba40:	401b94c0 	call	401b94c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401ba44:	01c07fc4 	movi	r7,511
 401ba48:	000d883a 	mov	r6,zero
 401ba4c:	e17ffe17 	ldw	r5,-8(fp)
 401ba50:	010100b4 	movhi	r4,1026
 401ba54:	2135ad04 	addi	r4,r4,-10572
 401ba58:	401b94c0 	call	401b94c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401ba5c:	01c07fc4 	movi	r7,511
 401ba60:	01800044 	movi	r6,1
 401ba64:	e17fff17 	ldw	r5,-4(fp)
 401ba68:	010100b4 	movhi	r4,1026
 401ba6c:	2135b304 	addi	r4,r4,-10548
 401ba70:	401b94c0 	call	401b94c <alt_open_fd>
}  
 401ba74:	0001883a 	nop
 401ba78:	e037883a 	mov	sp,fp
 401ba7c:	dfc00117 	ldw	ra,4(sp)
 401ba80:	df000017 	ldw	fp,0(sp)
 401ba84:	dec00204 	addi	sp,sp,8
 401ba88:	f800283a 	ret

0401ba8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ba8c:	defffe04 	addi	sp,sp,-8
 401ba90:	dfc00115 	stw	ra,4(sp)
 401ba94:	df000015 	stw	fp,0(sp)
 401ba98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ba9c:	d0a01817 	ldw	r2,-32672(gp)
 401baa0:	10000326 	beq	r2,zero,401bab0 <alt_get_errno+0x24>
 401baa4:	d0a01817 	ldw	r2,-32672(gp)
 401baa8:	103ee83a 	callr	r2
 401baac:	00000106 	br	401bab4 <alt_get_errno+0x28>
 401bab0:	d0a73a04 	addi	r2,gp,-25368
}
 401bab4:	e037883a 	mov	sp,fp
 401bab8:	dfc00117 	ldw	ra,4(sp)
 401babc:	df000017 	ldw	fp,0(sp)
 401bac0:	dec00204 	addi	sp,sp,8
 401bac4:	f800283a 	ret

0401bac8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401bac8:	defffd04 	addi	sp,sp,-12
 401bacc:	df000215 	stw	fp,8(sp)
 401bad0:	df000204 	addi	fp,sp,8
 401bad4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401bad8:	e0bfff17 	ldw	r2,-4(fp)
 401badc:	10800217 	ldw	r2,8(r2)
 401bae0:	10d00034 	orhi	r3,r2,16384
 401bae4:	e0bfff17 	ldw	r2,-4(fp)
 401bae8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401baec:	e03ffe15 	stw	zero,-8(fp)
 401baf0:	00001d06 	br	401bb68 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401baf4:	008100b4 	movhi	r2,1026
 401baf8:	10b5ad04 	addi	r2,r2,-10572
 401bafc:	e0fffe17 	ldw	r3,-8(fp)
 401bb00:	18c00324 	muli	r3,r3,12
 401bb04:	10c5883a 	add	r2,r2,r3
 401bb08:	10c00017 	ldw	r3,0(r2)
 401bb0c:	e0bfff17 	ldw	r2,-4(fp)
 401bb10:	10800017 	ldw	r2,0(r2)
 401bb14:	1880111e 	bne	r3,r2,401bb5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401bb18:	008100b4 	movhi	r2,1026
 401bb1c:	10b5ad04 	addi	r2,r2,-10572
 401bb20:	e0fffe17 	ldw	r3,-8(fp)
 401bb24:	18c00324 	muli	r3,r3,12
 401bb28:	10c5883a 	add	r2,r2,r3
 401bb2c:	10800204 	addi	r2,r2,8
 401bb30:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401bb34:	1000090e 	bge	r2,zero,401bb5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401bb38:	e0bffe17 	ldw	r2,-8(fp)
 401bb3c:	10c00324 	muli	r3,r2,12
 401bb40:	008100b4 	movhi	r2,1026
 401bb44:	10b5ad04 	addi	r2,r2,-10572
 401bb48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401bb4c:	e0bfff17 	ldw	r2,-4(fp)
 401bb50:	18800226 	beq	r3,r2,401bb5c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401bb54:	00bffcc4 	movi	r2,-13
 401bb58:	00000806 	br	401bb7c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401bb5c:	e0bffe17 	ldw	r2,-8(fp)
 401bb60:	10800044 	addi	r2,r2,1
 401bb64:	e0bffe15 	stw	r2,-8(fp)
 401bb68:	d0a01717 	ldw	r2,-32676(gp)
 401bb6c:	1007883a 	mov	r3,r2
 401bb70:	e0bffe17 	ldw	r2,-8(fp)
 401bb74:	18bfdf2e 	bgeu	r3,r2,401baf4 <__alt_mem_onchip_memory2_0+0xfc019af4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401bb78:	0005883a 	mov	r2,zero
}
 401bb7c:	e037883a 	mov	sp,fp
 401bb80:	df000017 	ldw	fp,0(sp)
 401bb84:	dec00104 	addi	sp,sp,4
 401bb88:	f800283a 	ret

0401bb8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401bb8c:	defff604 	addi	sp,sp,-40
 401bb90:	dfc00915 	stw	ra,36(sp)
 401bb94:	df000815 	stw	fp,32(sp)
 401bb98:	df000804 	addi	fp,sp,32
 401bb9c:	e13ffd15 	stw	r4,-12(fp)
 401bba0:	e17ffe15 	stw	r5,-8(fp)
 401bba4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401bba8:	00bfffc4 	movi	r2,-1
 401bbac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401bbb0:	00bffb44 	movi	r2,-19
 401bbb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401bbb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401bbbc:	d1601504 	addi	r5,gp,-32684
 401bbc0:	e13ffd17 	ldw	r4,-12(fp)
 401bbc4:	401c2000 	call	401c200 <alt_find_dev>
 401bbc8:	e0bff815 	stw	r2,-32(fp)
 401bbcc:	e0bff817 	ldw	r2,-32(fp)
 401bbd0:	1000051e 	bne	r2,zero,401bbe8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401bbd4:	e13ffd17 	ldw	r4,-12(fp)
 401bbd8:	401c2900 	call	401c290 <alt_find_file>
 401bbdc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401bbe0:	00800044 	movi	r2,1
 401bbe4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401bbe8:	e0bff817 	ldw	r2,-32(fp)
 401bbec:	10002926 	beq	r2,zero,401bc94 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401bbf0:	e13ff817 	ldw	r4,-32(fp)
 401bbf4:	401c3980 	call	401c398 <alt_get_fd>
 401bbf8:	e0bff915 	stw	r2,-28(fp)
 401bbfc:	e0bff917 	ldw	r2,-28(fp)
 401bc00:	1000030e 	bge	r2,zero,401bc10 <open+0x84>
    {
      status = index;
 401bc04:	e0bff917 	ldw	r2,-28(fp)
 401bc08:	e0bffa15 	stw	r2,-24(fp)
 401bc0c:	00002306 	br	401bc9c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401bc10:	e0bff917 	ldw	r2,-28(fp)
 401bc14:	10c00324 	muli	r3,r2,12
 401bc18:	008100b4 	movhi	r2,1026
 401bc1c:	10b5ad04 	addi	r2,r2,-10572
 401bc20:	1885883a 	add	r2,r3,r2
 401bc24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401bc28:	e0fffe17 	ldw	r3,-8(fp)
 401bc2c:	00900034 	movhi	r2,16384
 401bc30:	10bfffc4 	addi	r2,r2,-1
 401bc34:	1886703a 	and	r3,r3,r2
 401bc38:	e0bffc17 	ldw	r2,-16(fp)
 401bc3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401bc40:	e0bffb17 	ldw	r2,-20(fp)
 401bc44:	1000051e 	bne	r2,zero,401bc5c <open+0xd0>
 401bc48:	e13ffc17 	ldw	r4,-16(fp)
 401bc4c:	401bac80 	call	401bac8 <alt_file_locked>
 401bc50:	e0bffa15 	stw	r2,-24(fp)
 401bc54:	e0bffa17 	ldw	r2,-24(fp)
 401bc58:	10001016 	blt	r2,zero,401bc9c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401bc5c:	e0bff817 	ldw	r2,-32(fp)
 401bc60:	10800317 	ldw	r2,12(r2)
 401bc64:	10000826 	beq	r2,zero,401bc88 <open+0xfc>
 401bc68:	e0bff817 	ldw	r2,-32(fp)
 401bc6c:	10800317 	ldw	r2,12(r2)
 401bc70:	e1ffff17 	ldw	r7,-4(fp)
 401bc74:	e1bffe17 	ldw	r6,-8(fp)
 401bc78:	e17ffd17 	ldw	r5,-12(fp)
 401bc7c:	e13ffc17 	ldw	r4,-16(fp)
 401bc80:	103ee83a 	callr	r2
 401bc84:	00000106 	br	401bc8c <open+0x100>
 401bc88:	0005883a 	mov	r2,zero
 401bc8c:	e0bffa15 	stw	r2,-24(fp)
 401bc90:	00000206 	br	401bc9c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401bc94:	00bffb44 	movi	r2,-19
 401bc98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401bc9c:	e0bffa17 	ldw	r2,-24(fp)
 401bca0:	1000090e 	bge	r2,zero,401bcc8 <open+0x13c>
  {
    alt_release_fd (index);  
 401bca4:	e13ff917 	ldw	r4,-28(fp)
 401bca8:	4011a280 	call	4011a28 <alt_release_fd>
    ALT_ERRNO = -status;
 401bcac:	401ba8c0 	call	401ba8c <alt_get_errno>
 401bcb0:	1007883a 	mov	r3,r2
 401bcb4:	e0bffa17 	ldw	r2,-24(fp)
 401bcb8:	0085c83a 	sub	r2,zero,r2
 401bcbc:	18800015 	stw	r2,0(r3)
    return -1;
 401bcc0:	00bfffc4 	movi	r2,-1
 401bcc4:	00000106 	br	401bccc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401bcc8:	e0bff917 	ldw	r2,-28(fp)
}
 401bccc:	e037883a 	mov	sp,fp
 401bcd0:	dfc00117 	ldw	ra,4(sp)
 401bcd4:	df000017 	ldw	fp,0(sp)
 401bcd8:	dec00204 	addi	sp,sp,8
 401bcdc:	f800283a 	ret

0401bce0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401bce0:	defffa04 	addi	sp,sp,-24
 401bce4:	df000515 	stw	fp,20(sp)
 401bce8:	df000504 	addi	fp,sp,20
 401bcec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bcf0:	0005303a 	rdctl	r2,status
 401bcf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bcf8:	e0fffc17 	ldw	r3,-16(fp)
 401bcfc:	00bfff84 	movi	r2,-2
 401bd00:	1884703a 	and	r2,r3,r2
 401bd04:	1001703a 	wrctl	status,r2
  
  return context;
 401bd08:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401bd0c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401bd10:	e0bfff17 	ldw	r2,-4(fp)
 401bd14:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401bd18:	e0bffd17 	ldw	r2,-12(fp)
 401bd1c:	10800017 	ldw	r2,0(r2)
 401bd20:	e0fffd17 	ldw	r3,-12(fp)
 401bd24:	18c00117 	ldw	r3,4(r3)
 401bd28:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401bd2c:	e0bffd17 	ldw	r2,-12(fp)
 401bd30:	10800117 	ldw	r2,4(r2)
 401bd34:	e0fffd17 	ldw	r3,-12(fp)
 401bd38:	18c00017 	ldw	r3,0(r3)
 401bd3c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401bd40:	e0bffd17 	ldw	r2,-12(fp)
 401bd44:	e0fffd17 	ldw	r3,-12(fp)
 401bd48:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401bd4c:	e0bffd17 	ldw	r2,-12(fp)
 401bd50:	e0fffd17 	ldw	r3,-12(fp)
 401bd54:	10c00015 	stw	r3,0(r2)
 401bd58:	e0bffb17 	ldw	r2,-20(fp)
 401bd5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bd60:	e0bffe17 	ldw	r2,-8(fp)
 401bd64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401bd68:	0001883a 	nop
 401bd6c:	e037883a 	mov	sp,fp
 401bd70:	df000017 	ldw	fp,0(sp)
 401bd74:	dec00104 	addi	sp,sp,4
 401bd78:	f800283a 	ret

0401bd7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401bd7c:	defffb04 	addi	sp,sp,-20
 401bd80:	dfc00415 	stw	ra,16(sp)
 401bd84:	df000315 	stw	fp,12(sp)
 401bd88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401bd8c:	d0a03a17 	ldw	r2,-32536(gp)
 401bd90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401bd94:	d0a75917 	ldw	r2,-25244(gp)
 401bd98:	10800044 	addi	r2,r2,1
 401bd9c:	d0a75915 	stw	r2,-25244(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401bda0:	00002e06 	br	401be5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401bda4:	e0bffd17 	ldw	r2,-12(fp)
 401bda8:	10800017 	ldw	r2,0(r2)
 401bdac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401bdb0:	e0bffd17 	ldw	r2,-12(fp)
 401bdb4:	10800403 	ldbu	r2,16(r2)
 401bdb8:	10803fcc 	andi	r2,r2,255
 401bdbc:	10000426 	beq	r2,zero,401bdd0 <alt_tick+0x54>
 401bdc0:	d0a75917 	ldw	r2,-25244(gp)
 401bdc4:	1000021e 	bne	r2,zero,401bdd0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401bdc8:	e0bffd17 	ldw	r2,-12(fp)
 401bdcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401bdd0:	e0bffd17 	ldw	r2,-12(fp)
 401bdd4:	10800217 	ldw	r2,8(r2)
 401bdd8:	d0e75917 	ldw	r3,-25244(gp)
 401bddc:	18801d36 	bltu	r3,r2,401be54 <alt_tick+0xd8>
 401bde0:	e0bffd17 	ldw	r2,-12(fp)
 401bde4:	10800403 	ldbu	r2,16(r2)
 401bde8:	10803fcc 	andi	r2,r2,255
 401bdec:	1000191e 	bne	r2,zero,401be54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401bdf0:	e0bffd17 	ldw	r2,-12(fp)
 401bdf4:	10800317 	ldw	r2,12(r2)
 401bdf8:	e0fffd17 	ldw	r3,-12(fp)
 401bdfc:	18c00517 	ldw	r3,20(r3)
 401be00:	1809883a 	mov	r4,r3
 401be04:	103ee83a 	callr	r2
 401be08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401be0c:	e0bfff17 	ldw	r2,-4(fp)
 401be10:	1000031e 	bne	r2,zero,401be20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401be14:	e13ffd17 	ldw	r4,-12(fp)
 401be18:	401bce00 	call	401bce0 <alt_alarm_stop>
 401be1c:	00000d06 	br	401be54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401be20:	e0bffd17 	ldw	r2,-12(fp)
 401be24:	10c00217 	ldw	r3,8(r2)
 401be28:	e0bfff17 	ldw	r2,-4(fp)
 401be2c:	1887883a 	add	r3,r3,r2
 401be30:	e0bffd17 	ldw	r2,-12(fp)
 401be34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401be38:	e0bffd17 	ldw	r2,-12(fp)
 401be3c:	10c00217 	ldw	r3,8(r2)
 401be40:	d0a75917 	ldw	r2,-25244(gp)
 401be44:	1880032e 	bgeu	r3,r2,401be54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401be48:	e0bffd17 	ldw	r2,-12(fp)
 401be4c:	00c00044 	movi	r3,1
 401be50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401be54:	e0bffe17 	ldw	r2,-8(fp)
 401be58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401be5c:	e0fffd17 	ldw	r3,-12(fp)
 401be60:	d0a03a04 	addi	r2,gp,-32536
 401be64:	18bfcf1e 	bne	r3,r2,401bda4 <__alt_mem_onchip_memory2_0+0xfc019da4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401be68:	4012d280 	call	4012d28 <OSTimeTick>
}
 401be6c:	0001883a 	nop
 401be70:	e037883a 	mov	sp,fp
 401be74:	dfc00117 	ldw	ra,4(sp)
 401be78:	df000017 	ldw	fp,0(sp)
 401be7c:	dec00204 	addi	sp,sp,8
 401be80:	f800283a 	ret

0401be84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401be84:	deffff04 	addi	sp,sp,-4
 401be88:	df000015 	stw	fp,0(sp)
 401be8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401be90:	000170fa 	wrctl	ienable,zero
}
 401be94:	0001883a 	nop
 401be98:	e037883a 	mov	sp,fp
 401be9c:	df000017 	ldw	fp,0(sp)
 401bea0:	dec00104 	addi	sp,sp,4
 401bea4:	f800283a 	ret

0401bea8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 401bea8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 401beac:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 401beb0:	d1275317 	ldw	r4,-25268(gp)

      stw ra,  0(sp)
 401beb4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 401beb8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 401bebc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 401bec0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 401bec4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 401bec8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 401becc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 401bed0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 401bed4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 401bed8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 401bedc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 401bee0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 401bee4:	401c11c0 	call	401c11c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 401bee8:	d1274e17 	ldw	r4,-25288(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 401beec:	d1674607 	ldb	r5,-25320(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 401bef0:	d1275315 	stw	r4,-25268(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 401bef4:	d1674645 	stb	r5,-25319(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 401bef8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 401befc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 401bf00:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 401bf04:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 401bf08:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 401bf0c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 401bf10:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 401bf14:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 401bf18:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 401bf1c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 401bf20:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 401bf24:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 401bf28:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 401bf2c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 401bf30:	f800283a 	ret

0401bf34 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 401bf34:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 401bf38:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 401bf3c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 401bf40:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 401bf44:	401c11c0 	call	401c11c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 401bf48:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 401bf4c:	d4a74445 	stb	r18,-25327(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 401bf50:	003fe506 	br	401bee8 <__alt_mem_onchip_memory2_0+0xfc019ee8>

0401bf54 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 401bf54:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 401bf58:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 401bf5c:	10800054 	ori	r2,r2,1
      wrctl status, r2
 401bf60:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 401bf64:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 401bf68:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 401bf6c:	dec00204 	addi	sp,sp,8

      callr r2
 401bf70:	103ee83a 	callr	r2

      nop
 401bf74:	0001883a 	nop

0401bf78 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 401bf78:	defff704 	addi	sp,sp,-36
 401bf7c:	dfc00815 	stw	ra,32(sp)
 401bf80:	df000715 	stw	fp,28(sp)
 401bf84:	df000704 	addi	fp,sp,28
 401bf88:	e13ffc15 	stw	r4,-16(fp)
 401bf8c:	e17ffd15 	stw	r5,-12(fp)
 401bf90:	e1bffe15 	stw	r6,-8(fp)
 401bf94:	3805883a 	mov	r2,r7
 401bf98:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 401bf9c:	e0fffe17 	ldw	r3,-8(fp)
 401bfa0:	00bfff04 	movi	r2,-4
 401bfa4:	1884703a 	and	r2,r3,r2
 401bfa8:	10bef704 	addi	r2,r2,-1060
 401bfac:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 401bfb0:	01810904 	movi	r6,1060
 401bfb4:	000b883a 	mov	r5,zero
 401bfb8:	e13ff917 	ldw	r4,-28(fp)
 401bfbc:	40094580 	call	4009458 <memset>
 401bfc0:	e0bff917 	ldw	r2,-28(fp)
 401bfc4:	10c0bb04 	addi	r3,r2,748
 401bfc8:	e0bff917 	ldw	r2,-28(fp)
 401bfcc:	10c00115 	stw	r3,4(r2)
 401bfd0:	e0bff917 	ldw	r2,-28(fp)
 401bfd4:	10c0d504 	addi	r3,r2,852
 401bfd8:	e0bff917 	ldw	r2,-28(fp)
 401bfdc:	10c00215 	stw	r3,8(r2)
 401bfe0:	e0bff917 	ldw	r2,-28(fp)
 401bfe4:	10c0ef04 	addi	r3,r2,956
 401bfe8:	e0bff917 	ldw	r2,-28(fp)
 401bfec:	10c00315 	stw	r3,12(r2)
 401bff0:	e0fff917 	ldw	r3,-28(fp)
 401bff4:	008100b4 	movhi	r2,1026
 401bff8:	10b37904 	addi	r2,r2,-12828
 401bffc:	18800d15 	stw	r2,52(r3)
 401c000:	e0bff917 	ldw	r2,-28(fp)
 401c004:	00c00044 	movi	r3,1
 401c008:	10c02915 	stw	r3,164(r2)
 401c00c:	10002a15 	stw	zero,168(r2)
 401c010:	e0bff917 	ldw	r2,-28(fp)
 401c014:	00ccc384 	movi	r3,13070
 401c018:	10c02b0d 	sth	r3,172(r2)
 401c01c:	e0bff917 	ldw	r2,-28(fp)
 401c020:	00eaf344 	movi	r3,-21555
 401c024:	10c02b8d 	sth	r3,174(r2)
 401c028:	e0bff917 	ldw	r2,-28(fp)
 401c02c:	00c48d04 	movi	r3,4660
 401c030:	10c02c0d 	sth	r3,176(r2)
 401c034:	e0bff917 	ldw	r2,-28(fp)
 401c038:	00f99b44 	movi	r3,-6547
 401c03c:	10c02c8d 	sth	r3,178(r2)
 401c040:	e0bff917 	ldw	r2,-28(fp)
 401c044:	00f7bb04 	movi	r3,-8468
 401c048:	10c02d0d 	sth	r3,180(r2)
 401c04c:	e0bff917 	ldw	r2,-28(fp)
 401c050:	00c00144 	movi	r3,5
 401c054:	10c02d8d 	sth	r3,182(r2)
 401c058:	e0bff917 	ldw	r2,-28(fp)
 401c05c:	00c002c4 	movi	r3,11
 401c060:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 401c064:	e0bff917 	ldw	r2,-28(fp)
 401c068:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 401c06c:	e0bffa17 	ldw	r2,-24(fp)
 401c070:	10bff304 	addi	r2,r2,-52
 401c074:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 401c078:	e0bffb17 	ldw	r2,-20(fp)
 401c07c:	10800c04 	addi	r2,r2,48
 401c080:	e0fffc17 	ldw	r3,-16(fp)
 401c084:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 401c088:	e0bffb17 	ldw	r2,-20(fp)
 401c08c:	10800b04 	addi	r2,r2,44
 401c090:	e0fffd17 	ldw	r3,-12(fp)
 401c094:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 401c098:	e0bffb17 	ldw	r2,-20(fp)
 401c09c:	10800a04 	addi	r2,r2,40
 401c0a0:	e0fff917 	ldw	r3,-28(fp)
 401c0a4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 401c0a8:	008100b4 	movhi	r2,1026
 401c0ac:	10afd504 	addi	r2,r2,-16556
 401c0b0:	10c00104 	addi	r3,r2,4
 401c0b4:	e0bffb17 	ldw	r2,-20(fp)
 401c0b8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 401c0bc:	e0bffb17 	ldw	r2,-20(fp)
}
 401c0c0:	e037883a 	mov	sp,fp
 401c0c4:	dfc00117 	ldw	ra,4(sp)
 401c0c8:	df000017 	ldw	fp,0(sp)
 401c0cc:	dec00204 	addi	sp,sp,8
 401c0d0:	f800283a 	ret

0401c0d4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 401c0d4:	defffe04 	addi	sp,sp,-8
 401c0d8:	df000115 	stw	fp,4(sp)
 401c0dc:	df000104 	addi	fp,sp,4
 401c0e0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 401c0e4:	0001883a 	nop
 401c0e8:	e037883a 	mov	sp,fp
 401c0ec:	df000017 	ldw	fp,0(sp)
 401c0f0:	dec00104 	addi	sp,sp,4
 401c0f4:	f800283a 	ret

0401c0f8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 401c0f8:	defffe04 	addi	sp,sp,-8
 401c0fc:	df000115 	stw	fp,4(sp)
 401c100:	df000104 	addi	fp,sp,4
 401c104:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 401c108:	0001883a 	nop
 401c10c:	e037883a 	mov	sp,fp
 401c110:	df000017 	ldw	fp,0(sp)
 401c114:	dec00104 	addi	sp,sp,4
 401c118:	f800283a 	ret

0401c11c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 401c11c:	deffff04 	addi	sp,sp,-4
 401c120:	df000015 	stw	fp,0(sp)
 401c124:	d839883a 	mov	fp,sp
}
 401c128:	0001883a 	nop
 401c12c:	e037883a 	mov	sp,fp
 401c130:	df000017 	ldw	fp,0(sp)
 401c134:	dec00104 	addi	sp,sp,4
 401c138:	f800283a 	ret

0401c13c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 401c13c:	deffff04 	addi	sp,sp,-4
 401c140:	df000015 	stw	fp,0(sp)
 401c144:	d839883a 	mov	fp,sp
}
 401c148:	0001883a 	nop
 401c14c:	e037883a 	mov	sp,fp
 401c150:	df000017 	ldw	fp,0(sp)
 401c154:	dec00104 	addi	sp,sp,4
 401c158:	f800283a 	ret

0401c15c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 401c15c:	deffff04 	addi	sp,sp,-4
 401c160:	df000015 	stw	fp,0(sp)
 401c164:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 401c168:	0001883a 	nop
 401c16c:	e037883a 	mov	sp,fp
 401c170:	df000017 	ldw	fp,0(sp)
 401c174:	dec00104 	addi	sp,sp,4
 401c178:	f800283a 	ret

0401c17c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 401c17c:	deffff04 	addi	sp,sp,-4
 401c180:	df000015 	stw	fp,0(sp)
 401c184:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 401c188:	0001883a 	nop
 401c18c:	e037883a 	mov	sp,fp
 401c190:	df000017 	ldw	fp,0(sp)
 401c194:	dec00104 	addi	sp,sp,4
 401c198:	f800283a 	ret

0401c19c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 401c19c:	deffff04 	addi	sp,sp,-4
 401c1a0:	df000015 	stw	fp,0(sp)
 401c1a4:	d839883a 	mov	fp,sp
}
 401c1a8:	0001883a 	nop
 401c1ac:	e037883a 	mov	sp,fp
 401c1b0:	df000017 	ldw	fp,0(sp)
 401c1b4:	dec00104 	addi	sp,sp,4
 401c1b8:	f800283a 	ret

0401c1bc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 401c1bc:	deffff04 	addi	sp,sp,-4
 401c1c0:	df000015 	stw	fp,0(sp)
 401c1c4:	d839883a 	mov	fp,sp
}
 401c1c8:	0001883a 	nop
 401c1cc:	e037883a 	mov	sp,fp
 401c1d0:	df000017 	ldw	fp,0(sp)
 401c1d4:	dec00104 	addi	sp,sp,4
 401c1d8:	f800283a 	ret

0401c1dc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 401c1dc:	defffe04 	addi	sp,sp,-8
 401c1e0:	df000115 	stw	fp,4(sp)
 401c1e4:	df000104 	addi	fp,sp,4
 401c1e8:	e13fff15 	stw	r4,-4(fp)
}
 401c1ec:	0001883a 	nop
 401c1f0:	e037883a 	mov	sp,fp
 401c1f4:	df000017 	ldw	fp,0(sp)
 401c1f8:	dec00104 	addi	sp,sp,4
 401c1fc:	f800283a 	ret

0401c200 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401c200:	defffa04 	addi	sp,sp,-24
 401c204:	dfc00515 	stw	ra,20(sp)
 401c208:	df000415 	stw	fp,16(sp)
 401c20c:	df000404 	addi	fp,sp,16
 401c210:	e13ffe15 	stw	r4,-8(fp)
 401c214:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401c218:	e0bfff17 	ldw	r2,-4(fp)
 401c21c:	10800017 	ldw	r2,0(r2)
 401c220:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401c224:	e13ffe17 	ldw	r4,-8(fp)
 401c228:	40016500 	call	4001650 <strlen>
 401c22c:	10800044 	addi	r2,r2,1
 401c230:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401c234:	00000d06 	br	401c26c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401c238:	e0bffc17 	ldw	r2,-16(fp)
 401c23c:	10800217 	ldw	r2,8(r2)
 401c240:	e0fffd17 	ldw	r3,-12(fp)
 401c244:	180d883a 	mov	r6,r3
 401c248:	e17ffe17 	ldw	r5,-8(fp)
 401c24c:	1009883a 	mov	r4,r2
 401c250:	401c5ec0 	call	401c5ec <memcmp>
 401c254:	1000021e 	bne	r2,zero,401c260 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401c258:	e0bffc17 	ldw	r2,-16(fp)
 401c25c:	00000706 	br	401c27c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401c260:	e0bffc17 	ldw	r2,-16(fp)
 401c264:	10800017 	ldw	r2,0(r2)
 401c268:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401c26c:	e0fffc17 	ldw	r3,-16(fp)
 401c270:	e0bfff17 	ldw	r2,-4(fp)
 401c274:	18bff01e 	bne	r3,r2,401c238 <__alt_mem_onchip_memory2_0+0xfc01a238>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401c278:	0005883a 	mov	r2,zero
}
 401c27c:	e037883a 	mov	sp,fp
 401c280:	dfc00117 	ldw	ra,4(sp)
 401c284:	df000017 	ldw	fp,0(sp)
 401c288:	dec00204 	addi	sp,sp,8
 401c28c:	f800283a 	ret

0401c290 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401c290:	defffb04 	addi	sp,sp,-20
 401c294:	dfc00415 	stw	ra,16(sp)
 401c298:	df000315 	stw	fp,12(sp)
 401c29c:	df000304 	addi	fp,sp,12
 401c2a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401c2a4:	d0a01317 	ldw	r2,-32692(gp)
 401c2a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401c2ac:	00003106 	br	401c374 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401c2b0:	e0bffd17 	ldw	r2,-12(fp)
 401c2b4:	10800217 	ldw	r2,8(r2)
 401c2b8:	1009883a 	mov	r4,r2
 401c2bc:	40016500 	call	4001650 <strlen>
 401c2c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401c2c4:	e0bffd17 	ldw	r2,-12(fp)
 401c2c8:	10c00217 	ldw	r3,8(r2)
 401c2cc:	e0bffe17 	ldw	r2,-8(fp)
 401c2d0:	10bfffc4 	addi	r2,r2,-1
 401c2d4:	1885883a 	add	r2,r3,r2
 401c2d8:	10800003 	ldbu	r2,0(r2)
 401c2dc:	10803fcc 	andi	r2,r2,255
 401c2e0:	1080201c 	xori	r2,r2,128
 401c2e4:	10bfe004 	addi	r2,r2,-128
 401c2e8:	10800bd8 	cmpnei	r2,r2,47
 401c2ec:	1000031e 	bne	r2,zero,401c2fc <alt_find_file+0x6c>
    {
      len -= 1;
 401c2f0:	e0bffe17 	ldw	r2,-8(fp)
 401c2f4:	10bfffc4 	addi	r2,r2,-1
 401c2f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401c2fc:	e0bffe17 	ldw	r2,-8(fp)
 401c300:	e0ffff17 	ldw	r3,-4(fp)
 401c304:	1885883a 	add	r2,r3,r2
 401c308:	10800003 	ldbu	r2,0(r2)
 401c30c:	10803fcc 	andi	r2,r2,255
 401c310:	1080201c 	xori	r2,r2,128
 401c314:	10bfe004 	addi	r2,r2,-128
 401c318:	10800be0 	cmpeqi	r2,r2,47
 401c31c:	1000081e 	bne	r2,zero,401c340 <alt_find_file+0xb0>
 401c320:	e0bffe17 	ldw	r2,-8(fp)
 401c324:	e0ffff17 	ldw	r3,-4(fp)
 401c328:	1885883a 	add	r2,r3,r2
 401c32c:	10800003 	ldbu	r2,0(r2)
 401c330:	10803fcc 	andi	r2,r2,255
 401c334:	1080201c 	xori	r2,r2,128
 401c338:	10bfe004 	addi	r2,r2,-128
 401c33c:	10000a1e 	bne	r2,zero,401c368 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401c340:	e0bffd17 	ldw	r2,-12(fp)
 401c344:	10800217 	ldw	r2,8(r2)
 401c348:	e0fffe17 	ldw	r3,-8(fp)
 401c34c:	180d883a 	mov	r6,r3
 401c350:	e17fff17 	ldw	r5,-4(fp)
 401c354:	1009883a 	mov	r4,r2
 401c358:	401c5ec0 	call	401c5ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401c35c:	1000021e 	bne	r2,zero,401c368 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401c360:	e0bffd17 	ldw	r2,-12(fp)
 401c364:	00000706 	br	401c384 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401c368:	e0bffd17 	ldw	r2,-12(fp)
 401c36c:	10800017 	ldw	r2,0(r2)
 401c370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401c374:	e0fffd17 	ldw	r3,-12(fp)
 401c378:	d0a01304 	addi	r2,gp,-32692
 401c37c:	18bfcc1e 	bne	r3,r2,401c2b0 <__alt_mem_onchip_memory2_0+0xfc01a2b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401c380:	0005883a 	mov	r2,zero
}
 401c384:	e037883a 	mov	sp,fp
 401c388:	dfc00117 	ldw	ra,4(sp)
 401c38c:	df000017 	ldw	fp,0(sp)
 401c390:	dec00204 	addi	sp,sp,8
 401c394:	f800283a 	ret

0401c398 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401c398:	defff904 	addi	sp,sp,-28
 401c39c:	dfc00615 	stw	ra,24(sp)
 401c3a0:	df000515 	stw	fp,20(sp)
 401c3a4:	df000504 	addi	fp,sp,20
 401c3a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401c3ac:	00bffa04 	movi	r2,-24
 401c3b0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 401c3b4:	d0a73b17 	ldw	r2,-25364(gp)
 401c3b8:	e0bffd15 	stw	r2,-12(fp)
 401c3bc:	e03ffe0d 	sth	zero,-8(fp)
 401c3c0:	e0bffe0b 	ldhu	r2,-8(fp)
 401c3c4:	e0fffe84 	addi	r3,fp,-6
 401c3c8:	180d883a 	mov	r6,r3
 401c3cc:	100b883a 	mov	r5,r2
 401c3d0:	e13ffd17 	ldw	r4,-12(fp)
 401c3d4:	40180340 	call	4018034 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401c3d8:	e03ffb15 	stw	zero,-20(fp)
 401c3dc:	00001906 	br	401c444 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 401c3e0:	008100b4 	movhi	r2,1026
 401c3e4:	10b5ad04 	addi	r2,r2,-10572
 401c3e8:	e0fffb17 	ldw	r3,-20(fp)
 401c3ec:	18c00324 	muli	r3,r3,12
 401c3f0:	10c5883a 	add	r2,r2,r3
 401c3f4:	10800017 	ldw	r2,0(r2)
 401c3f8:	10000f1e 	bne	r2,zero,401c438 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 401c3fc:	008100b4 	movhi	r2,1026
 401c400:	10b5ad04 	addi	r2,r2,-10572
 401c404:	e0fffb17 	ldw	r3,-20(fp)
 401c408:	18c00324 	muli	r3,r3,12
 401c40c:	10c5883a 	add	r2,r2,r3
 401c410:	e0ffff17 	ldw	r3,-4(fp)
 401c414:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401c418:	d0e01717 	ldw	r3,-32676(gp)
 401c41c:	e0bffb17 	ldw	r2,-20(fp)
 401c420:	1880020e 	bge	r3,r2,401c42c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 401c424:	e0bffb17 	ldw	r2,-20(fp)
 401c428:	d0a01715 	stw	r2,-32676(gp)
      }
      rc = i;
 401c42c:	e0bffb17 	ldw	r2,-20(fp)
 401c430:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 401c434:	00000606 	br	401c450 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401c438:	e0bffb17 	ldw	r2,-20(fp)
 401c43c:	10800044 	addi	r2,r2,1
 401c440:	e0bffb15 	stw	r2,-20(fp)
 401c444:	e0bffb17 	ldw	r2,-20(fp)
 401c448:	10800810 	cmplti	r2,r2,32
 401c44c:	103fe41e 	bne	r2,zero,401c3e0 <__alt_mem_onchip_memory2_0+0xfc01a3e0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 401c450:	d0a73b17 	ldw	r2,-25364(gp)
 401c454:	1009883a 	mov	r4,r2
 401c458:	40183ac0 	call	40183ac <OSSemPost>

  return rc;
 401c45c:	e0bffc17 	ldw	r2,-16(fp)
}
 401c460:	e037883a 	mov	sp,fp
 401c464:	dfc00117 	ldw	ra,4(sp)
 401c468:	df000017 	ldw	fp,0(sp)
 401c46c:	dec00204 	addi	sp,sp,8
 401c470:	f800283a 	ret

0401c474 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 401c474:	defffb04 	addi	sp,sp,-20
 401c478:	df000415 	stw	fp,16(sp)
 401c47c:	df000404 	addi	fp,sp,16
 401c480:	e13ffe15 	stw	r4,-8(fp)
 401c484:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 401c488:	e0bfff17 	ldw	r2,-4(fp)
 401c48c:	10840070 	cmpltui	r2,r2,4097
 401c490:	1000021e 	bne	r2,zero,401c49c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401c494:	00840004 	movi	r2,4096
 401c498:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 401c49c:	e0fffe17 	ldw	r3,-8(fp)
 401c4a0:	e0bfff17 	ldw	r2,-4(fp)
 401c4a4:	1885883a 	add	r2,r3,r2
 401c4a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401c4ac:	e0bffe17 	ldw	r2,-8(fp)
 401c4b0:	e0bffc15 	stw	r2,-16(fp)
 401c4b4:	00000506 	br	401c4cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 401c4b8:	e0bffc17 	ldw	r2,-16(fp)
 401c4bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401c4c0:	e0bffc17 	ldw	r2,-16(fp)
 401c4c4:	10800804 	addi	r2,r2,32
 401c4c8:	e0bffc15 	stw	r2,-16(fp)
 401c4cc:	e0fffc17 	ldw	r3,-16(fp)
 401c4d0:	e0bffd17 	ldw	r2,-12(fp)
 401c4d4:	18bff836 	bltu	r3,r2,401c4b8 <__alt_mem_onchip_memory2_0+0xfc01a4b8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 401c4d8:	e0bffe17 	ldw	r2,-8(fp)
 401c4dc:	108007cc 	andi	r2,r2,31
 401c4e0:	10000226 	beq	r2,zero,401c4ec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 401c4e4:	e0bffc17 	ldw	r2,-16(fp)
 401c4e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 401c4ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 401c4f0:	0001883a 	nop
 401c4f4:	e037883a 	mov	sp,fp
 401c4f8:	df000017 	ldw	fp,0(sp)
 401c4fc:	dec00104 	addi	sp,sp,4
 401c500:	f800283a 	ret

0401c504 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401c504:	defffe04 	addi	sp,sp,-8
 401c508:	df000115 	stw	fp,4(sp)
 401c50c:	df000104 	addi	fp,sp,4
 401c510:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401c514:	e0bfff17 	ldw	r2,-4(fp)
 401c518:	10bffe84 	addi	r2,r2,-6
 401c51c:	10c00428 	cmpgeui	r3,r2,16
 401c520:	18001a1e 	bne	r3,zero,401c58c <alt_exception_cause_generated_bad_addr+0x88>
 401c524:	100690ba 	slli	r3,r2,2
 401c528:	008100b4 	movhi	r2,1026
 401c52c:	10b14f04 	addi	r2,r2,-15044
 401c530:	1885883a 	add	r2,r3,r2
 401c534:	10800017 	ldw	r2,0(r2)
 401c538:	1000683a 	jmp	r2
 401c53c:	0401c57c 	xorhi	r16,zero,1813
 401c540:	0401c57c 	xorhi	r16,zero,1813
 401c544:	0401c58c 	andi	r16,zero,1814
 401c548:	0401c58c 	andi	r16,zero,1814
 401c54c:	0401c58c 	andi	r16,zero,1814
 401c550:	0401c57c 	xorhi	r16,zero,1813
 401c554:	0401c584 	movi	r16,1814
 401c558:	0401c58c 	andi	r16,zero,1814
 401c55c:	0401c57c 	xorhi	r16,zero,1813
 401c560:	0401c57c 	xorhi	r16,zero,1813
 401c564:	0401c58c 	andi	r16,zero,1814
 401c568:	0401c57c 	xorhi	r16,zero,1813
 401c56c:	0401c584 	movi	r16,1814
 401c570:	0401c58c 	andi	r16,zero,1814
 401c574:	0401c58c 	andi	r16,zero,1814
 401c578:	0401c57c 	xorhi	r16,zero,1813
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401c57c:	00800044 	movi	r2,1
 401c580:	00000306 	br	401c590 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401c584:	0005883a 	mov	r2,zero
 401c588:	00000106 	br	401c590 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401c58c:	0005883a 	mov	r2,zero
  }
}
 401c590:	e037883a 	mov	sp,fp
 401c594:	df000017 	ldw	fp,0(sp)
 401c598:	dec00104 	addi	sp,sp,4
 401c59c:	f800283a 	ret

0401c5a0 <atexit>:
 401c5a0:	200b883a 	mov	r5,r4
 401c5a4:	000f883a 	mov	r7,zero
 401c5a8:	000d883a 	mov	r6,zero
 401c5ac:	0009883a 	mov	r4,zero
 401c5b0:	401c6681 	jmpi	401c668 <__register_exitproc>

0401c5b4 <exit>:
 401c5b4:	defffe04 	addi	sp,sp,-8
 401c5b8:	000b883a 	mov	r5,zero
 401c5bc:	dc000015 	stw	r16,0(sp)
 401c5c0:	dfc00115 	stw	ra,4(sp)
 401c5c4:	2021883a 	mov	r16,r4
 401c5c8:	401c7800 	call	401c780 <__call_exitprocs>
 401c5cc:	008100b4 	movhi	r2,1026
 401c5d0:	10ba3504 	addi	r2,r2,-5932
 401c5d4:	11000017 	ldw	r4,0(r2)
 401c5d8:	20800f17 	ldw	r2,60(r4)
 401c5dc:	10000126 	beq	r2,zero,401c5e4 <exit+0x30>
 401c5e0:	103ee83a 	callr	r2
 401c5e4:	8009883a 	mov	r4,r16
 401c5e8:	401c9000 	call	401c900 <_exit>

0401c5ec <memcmp>:
 401c5ec:	01c000c4 	movi	r7,3
 401c5f0:	3980192e 	bgeu	r7,r6,401c658 <memcmp+0x6c>
 401c5f4:	2144b03a 	or	r2,r4,r5
 401c5f8:	11c4703a 	and	r2,r2,r7
 401c5fc:	10000f26 	beq	r2,zero,401c63c <memcmp+0x50>
 401c600:	20800003 	ldbu	r2,0(r4)
 401c604:	28c00003 	ldbu	r3,0(r5)
 401c608:	10c0151e 	bne	r2,r3,401c660 <memcmp+0x74>
 401c60c:	31bfff84 	addi	r6,r6,-2
 401c610:	01ffffc4 	movi	r7,-1
 401c614:	00000406 	br	401c628 <memcmp+0x3c>
 401c618:	20800003 	ldbu	r2,0(r4)
 401c61c:	28c00003 	ldbu	r3,0(r5)
 401c620:	31bfffc4 	addi	r6,r6,-1
 401c624:	10c00e1e 	bne	r2,r3,401c660 <memcmp+0x74>
 401c628:	21000044 	addi	r4,r4,1
 401c62c:	29400044 	addi	r5,r5,1
 401c630:	31fff91e 	bne	r6,r7,401c618 <__alt_mem_onchip_memory2_0+0xfc01a618>
 401c634:	0005883a 	mov	r2,zero
 401c638:	f800283a 	ret
 401c63c:	20c00017 	ldw	r3,0(r4)
 401c640:	28800017 	ldw	r2,0(r5)
 401c644:	18bfee1e 	bne	r3,r2,401c600 <__alt_mem_onchip_memory2_0+0xfc01a600>
 401c648:	31bfff04 	addi	r6,r6,-4
 401c64c:	21000104 	addi	r4,r4,4
 401c650:	29400104 	addi	r5,r5,4
 401c654:	39bff936 	bltu	r7,r6,401c63c <__alt_mem_onchip_memory2_0+0xfc01a63c>
 401c658:	303fe91e 	bne	r6,zero,401c600 <__alt_mem_onchip_memory2_0+0xfc01a600>
 401c65c:	003ff506 	br	401c634 <__alt_mem_onchip_memory2_0+0xfc01a634>
 401c660:	10c5c83a 	sub	r2,r2,r3
 401c664:	f800283a 	ret

0401c668 <__register_exitproc>:
 401c668:	defffa04 	addi	sp,sp,-24
 401c66c:	dc000315 	stw	r16,12(sp)
 401c670:	040100b4 	movhi	r16,1026
 401c674:	843a3504 	addi	r16,r16,-5932
 401c678:	80c00017 	ldw	r3,0(r16)
 401c67c:	dc400415 	stw	r17,16(sp)
 401c680:	dfc00515 	stw	ra,20(sp)
 401c684:	18805217 	ldw	r2,328(r3)
 401c688:	2023883a 	mov	r17,r4
 401c68c:	10003726 	beq	r2,zero,401c76c <__register_exitproc+0x104>
 401c690:	10c00117 	ldw	r3,4(r2)
 401c694:	010007c4 	movi	r4,31
 401c698:	20c00e16 	blt	r4,r3,401c6d4 <__register_exitproc+0x6c>
 401c69c:	1a000044 	addi	r8,r3,1
 401c6a0:	8800221e 	bne	r17,zero,401c72c <__register_exitproc+0xc4>
 401c6a4:	18c00084 	addi	r3,r3,2
 401c6a8:	18c7883a 	add	r3,r3,r3
 401c6ac:	18c7883a 	add	r3,r3,r3
 401c6b0:	12000115 	stw	r8,4(r2)
 401c6b4:	10c7883a 	add	r3,r2,r3
 401c6b8:	19400015 	stw	r5,0(r3)
 401c6bc:	0005883a 	mov	r2,zero
 401c6c0:	dfc00517 	ldw	ra,20(sp)
 401c6c4:	dc400417 	ldw	r17,16(sp)
 401c6c8:	dc000317 	ldw	r16,12(sp)
 401c6cc:	dec00604 	addi	sp,sp,24
 401c6d0:	f800283a 	ret
 401c6d4:	00800034 	movhi	r2,0
 401c6d8:	10800004 	addi	r2,r2,0
 401c6dc:	10002626 	beq	r2,zero,401c778 <__register_exitproc+0x110>
 401c6e0:	01006404 	movi	r4,400
 401c6e4:	d9400015 	stw	r5,0(sp)
 401c6e8:	d9800115 	stw	r6,4(sp)
 401c6ec:	d9c00215 	stw	r7,8(sp)
 401c6f0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 401c6f4:	d9400017 	ldw	r5,0(sp)
 401c6f8:	d9800117 	ldw	r6,4(sp)
 401c6fc:	d9c00217 	ldw	r7,8(sp)
 401c700:	10001d26 	beq	r2,zero,401c778 <__register_exitproc+0x110>
 401c704:	81000017 	ldw	r4,0(r16)
 401c708:	10000115 	stw	zero,4(r2)
 401c70c:	02000044 	movi	r8,1
 401c710:	22405217 	ldw	r9,328(r4)
 401c714:	0007883a 	mov	r3,zero
 401c718:	12400015 	stw	r9,0(r2)
 401c71c:	20805215 	stw	r2,328(r4)
 401c720:	10006215 	stw	zero,392(r2)
 401c724:	10006315 	stw	zero,396(r2)
 401c728:	883fde26 	beq	r17,zero,401c6a4 <__alt_mem_onchip_memory2_0+0xfc01a6a4>
 401c72c:	18c9883a 	add	r4,r3,r3
 401c730:	2109883a 	add	r4,r4,r4
 401c734:	1109883a 	add	r4,r2,r4
 401c738:	21802215 	stw	r6,136(r4)
 401c73c:	01800044 	movi	r6,1
 401c740:	12406217 	ldw	r9,392(r2)
 401c744:	30cc983a 	sll	r6,r6,r3
 401c748:	4992b03a 	or	r9,r9,r6
 401c74c:	12406215 	stw	r9,392(r2)
 401c750:	21c04215 	stw	r7,264(r4)
 401c754:	01000084 	movi	r4,2
 401c758:	893fd21e 	bne	r17,r4,401c6a4 <__alt_mem_onchip_memory2_0+0xfc01a6a4>
 401c75c:	11006317 	ldw	r4,396(r2)
 401c760:	218cb03a 	or	r6,r4,r6
 401c764:	11806315 	stw	r6,396(r2)
 401c768:	003fce06 	br	401c6a4 <__alt_mem_onchip_memory2_0+0xfc01a6a4>
 401c76c:	18805304 	addi	r2,r3,332
 401c770:	18805215 	stw	r2,328(r3)
 401c774:	003fc606 	br	401c690 <__alt_mem_onchip_memory2_0+0xfc01a690>
 401c778:	00bfffc4 	movi	r2,-1
 401c77c:	003fd006 	br	401c6c0 <__alt_mem_onchip_memory2_0+0xfc01a6c0>

0401c780 <__call_exitprocs>:
 401c780:	defff504 	addi	sp,sp,-44
 401c784:	df000915 	stw	fp,36(sp)
 401c788:	dd400615 	stw	r21,24(sp)
 401c78c:	dc800315 	stw	r18,12(sp)
 401c790:	dfc00a15 	stw	ra,40(sp)
 401c794:	ddc00815 	stw	r23,32(sp)
 401c798:	dd800715 	stw	r22,28(sp)
 401c79c:	dd000515 	stw	r20,20(sp)
 401c7a0:	dcc00415 	stw	r19,16(sp)
 401c7a4:	dc400215 	stw	r17,8(sp)
 401c7a8:	dc000115 	stw	r16,4(sp)
 401c7ac:	d9000015 	stw	r4,0(sp)
 401c7b0:	2839883a 	mov	fp,r5
 401c7b4:	04800044 	movi	r18,1
 401c7b8:	057fffc4 	movi	r21,-1
 401c7bc:	008100b4 	movhi	r2,1026
 401c7c0:	10ba3504 	addi	r2,r2,-5932
 401c7c4:	12000017 	ldw	r8,0(r2)
 401c7c8:	45005217 	ldw	r20,328(r8)
 401c7cc:	44c05204 	addi	r19,r8,328
 401c7d0:	a0001c26 	beq	r20,zero,401c844 <__call_exitprocs+0xc4>
 401c7d4:	a0800117 	ldw	r2,4(r20)
 401c7d8:	15ffffc4 	addi	r23,r2,-1
 401c7dc:	b8000d16 	blt	r23,zero,401c814 <__call_exitprocs+0x94>
 401c7e0:	14000044 	addi	r16,r2,1
 401c7e4:	8421883a 	add	r16,r16,r16
 401c7e8:	8421883a 	add	r16,r16,r16
 401c7ec:	84402004 	addi	r17,r16,128
 401c7f0:	a463883a 	add	r17,r20,r17
 401c7f4:	a421883a 	add	r16,r20,r16
 401c7f8:	e0001e26 	beq	fp,zero,401c874 <__call_exitprocs+0xf4>
 401c7fc:	80804017 	ldw	r2,256(r16)
 401c800:	e0801c26 	beq	fp,r2,401c874 <__call_exitprocs+0xf4>
 401c804:	bdffffc4 	addi	r23,r23,-1
 401c808:	843fff04 	addi	r16,r16,-4
 401c80c:	8c7fff04 	addi	r17,r17,-4
 401c810:	bd7ff91e 	bne	r23,r21,401c7f8 <__alt_mem_onchip_memory2_0+0xfc01a7f8>
 401c814:	00800034 	movhi	r2,0
 401c818:	10800004 	addi	r2,r2,0
 401c81c:	10000926 	beq	r2,zero,401c844 <__call_exitprocs+0xc4>
 401c820:	a0800117 	ldw	r2,4(r20)
 401c824:	1000301e 	bne	r2,zero,401c8e8 <__call_exitprocs+0x168>
 401c828:	a0800017 	ldw	r2,0(r20)
 401c82c:	10003226 	beq	r2,zero,401c8f8 <__call_exitprocs+0x178>
 401c830:	a009883a 	mov	r4,r20
 401c834:	98800015 	stw	r2,0(r19)
 401c838:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 401c83c:	9d000017 	ldw	r20,0(r19)
 401c840:	a03fe41e 	bne	r20,zero,401c7d4 <__alt_mem_onchip_memory2_0+0xfc01a7d4>
 401c844:	dfc00a17 	ldw	ra,40(sp)
 401c848:	df000917 	ldw	fp,36(sp)
 401c84c:	ddc00817 	ldw	r23,32(sp)
 401c850:	dd800717 	ldw	r22,28(sp)
 401c854:	dd400617 	ldw	r21,24(sp)
 401c858:	dd000517 	ldw	r20,20(sp)
 401c85c:	dcc00417 	ldw	r19,16(sp)
 401c860:	dc800317 	ldw	r18,12(sp)
 401c864:	dc400217 	ldw	r17,8(sp)
 401c868:	dc000117 	ldw	r16,4(sp)
 401c86c:	dec00b04 	addi	sp,sp,44
 401c870:	f800283a 	ret
 401c874:	a0800117 	ldw	r2,4(r20)
 401c878:	80c00017 	ldw	r3,0(r16)
 401c87c:	10bfffc4 	addi	r2,r2,-1
 401c880:	15c01426 	beq	r2,r23,401c8d4 <__call_exitprocs+0x154>
 401c884:	80000015 	stw	zero,0(r16)
 401c888:	183fde26 	beq	r3,zero,401c804 <__alt_mem_onchip_memory2_0+0xfc01a804>
 401c88c:	95c8983a 	sll	r4,r18,r23
 401c890:	a0806217 	ldw	r2,392(r20)
 401c894:	a5800117 	ldw	r22,4(r20)
 401c898:	2084703a 	and	r2,r4,r2
 401c89c:	10000b26 	beq	r2,zero,401c8cc <__call_exitprocs+0x14c>
 401c8a0:	a0806317 	ldw	r2,396(r20)
 401c8a4:	2088703a 	and	r4,r4,r2
 401c8a8:	20000c1e 	bne	r4,zero,401c8dc <__call_exitprocs+0x15c>
 401c8ac:	89400017 	ldw	r5,0(r17)
 401c8b0:	d9000017 	ldw	r4,0(sp)
 401c8b4:	183ee83a 	callr	r3
 401c8b8:	a0800117 	ldw	r2,4(r20)
 401c8bc:	15bfbf1e 	bne	r2,r22,401c7bc <__alt_mem_onchip_memory2_0+0xfc01a7bc>
 401c8c0:	98800017 	ldw	r2,0(r19)
 401c8c4:	153fcf26 	beq	r2,r20,401c804 <__alt_mem_onchip_memory2_0+0xfc01a804>
 401c8c8:	003fbc06 	br	401c7bc <__alt_mem_onchip_memory2_0+0xfc01a7bc>
 401c8cc:	183ee83a 	callr	r3
 401c8d0:	003ff906 	br	401c8b8 <__alt_mem_onchip_memory2_0+0xfc01a8b8>
 401c8d4:	a5c00115 	stw	r23,4(r20)
 401c8d8:	003feb06 	br	401c888 <__alt_mem_onchip_memory2_0+0xfc01a888>
 401c8dc:	89000017 	ldw	r4,0(r17)
 401c8e0:	183ee83a 	callr	r3
 401c8e4:	003ff406 	br	401c8b8 <__alt_mem_onchip_memory2_0+0xfc01a8b8>
 401c8e8:	a0800017 	ldw	r2,0(r20)
 401c8ec:	a027883a 	mov	r19,r20
 401c8f0:	1029883a 	mov	r20,r2
 401c8f4:	003fb606 	br	401c7d0 <__alt_mem_onchip_memory2_0+0xfc01a7d0>
 401c8f8:	0005883a 	mov	r2,zero
 401c8fc:	003ffb06 	br	401c8ec <__alt_mem_onchip_memory2_0+0xfc01a8ec>

0401c900 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401c900:	defffd04 	addi	sp,sp,-12
 401c904:	df000215 	stw	fp,8(sp)
 401c908:	df000204 	addi	fp,sp,8
 401c90c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401c910:	d0274445 	stb	zero,-25327(gp)
 401c914:	e0bfff17 	ldw	r2,-4(fp)
 401c918:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401c91c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401c920:	10000226 	beq	r2,zero,401c92c <_exit+0x2c>
    ALT_SIM_FAIL();
 401c924:	002af070 	cmpltui	zero,zero,43969
 401c928:	00000106 	br	401c930 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401c92c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401c930:	003fff06 	br	401c930 <__alt_mem_onchip_memory2_0+0xfc01a930>
