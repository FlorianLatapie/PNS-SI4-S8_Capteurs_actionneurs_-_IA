
TP2.elf:     file format elf32-littlenios2
TP2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000dba0 memsz 0x0000dba0 flags r-x
    LOAD off    0x0000ebc0 vaddr 0x0400dbc0 paddr 0x0400f6b4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000111a8 vaddr 0x040111a8 paddr 0x040111a8 align 2**12
         filesz 0x00000000 memsz 0x000073dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d7fc  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  0400da40  0400da40  0000ea40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0400dbc0  0400f6b4  0000ebc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  040111a8  040111a8  000111a8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04018584  04018584  000106b4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08002000  08002000  000106b4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000106b4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b90  00000000  00000000  000106d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001fc40  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007aff  00000000  00000000  00030ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008ebb  00000000  00000000  000389a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002600  00000000  00000000  00041864  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003830  00000000  00000000  00043e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  00047694  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0004c0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0004c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00050539  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0005053f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00050542  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00050543  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00050544  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0005054d  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00050556  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000005  00000000  00000000  0005055f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  00050564  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00073258  00000000  00000000  0005059f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0400da40 l    d  .rodata	00000000 .rodata
0400dbc0 l    d  .rwdata	00000000 .rwdata
040111a8 l    d  .bss	00000000 .bss
04018584 l    d  .sdram	00000000 .sdram
08002000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TP2_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04000518 l     F .text	00000008 __fp_unlock
0400052c l     F .text	0000019c __sinit.part.1
040006c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400dbc0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
04003174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04003280 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040032ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04003398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003478 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04003564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
04003730 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400f628 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400397c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0400f62c l     O .rwdata	00000004 lockid
040111c8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0400f630 l     O .rwdata	00000004 lockid
040111d0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
040053ac l     F .text	00000048 OS_InitMisc
040053f4 l     F .text	0000006c OS_InitRdyList
04005560 l     F .text	000000e4 OS_InitTCBList
040052cc l     F .text	000000e0 OS_InitEventList
04005460 l     F .text	00000080 OS_InitTaskIdle
040054e0 l     F .text	00000080 OS_InitTaskStat
040057d0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
040074e0 l     F .text	000000f4 OS_FlagTaskRdy
040072a0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400b584 l     F .text	00000034 alt_dev_reg
0400e594 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400b8fc l     F .text	000002a4 altera_avalon_jtag_uart_irq
0400bba0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400c37c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400c5e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400ca58 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400cb98 l     F .text	0000003c alt_get_errno
0400cbd4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04011234 g     O .bss	00000004 alt_instruction_exception_handler
0400f67e g     O .rwdata	00000002 OSTaskNameSize
04002f6c g     F .text	00000054 _isatty_r
04003674 g     F .text	000000bc alt_main
040003ac g     F .text	000000c0 _puts_r
04018484 g     O .bss	00000100 alt_irq
04002c94 g     F .text	00000060 _lseek_r
04007d00 g     F .text	000000cc OS_MemInit
0400f6b4 g       *ABS*	00000000 __flash_rwdata_start
0400b524 g     F .text	00000060 OSTimeSet
04004020 g     F .text	00000610 OSEventPendMulti
04018584 g       *ABS*	00000000 __alt_heap_start
0400d1e0 g     F .text	00000024 OSTaskCreateHook
04011260 g     O .bss	00002000 task1_stk
0400f656 g     O .rwdata	00000002 OSMboxEn
04004688 g     F .text	0000004c OSIntEnter
04002248 g     F .text	0000005c __sseek
04000868 g     F .text	00000010 __sinit
0400f666 g     O .rwdata	00000002 OSQEn
040006d0 g     F .text	00000068 __sfmoreglue
04003cf4 g     F .text	000000cc __malloc_unlock
0400d248 g     F .text	00000020 OSTaskStatHook
040111d8 g     O .bss	00000001 OSLockNesting
0400f6a4 g     O .rwdata	00000002 OSDataSize
040111d9 g     O .bss	00000001 OSRunning
04001934 g     F .text	0000015c memmove
0400d288 g     F .text	00000020 OSInitHookBegin
0400f69c g     O .rwdata	00000002 OSTmrSize
04000850 g     F .text	00000018 _cleanup
040111dc g     O .bss	00000004 OSIdleCtr
0400cf90 g     F .text	00000024 altera_nios2_gen2_irq_init
0400d060 g       .text	00000000 OSStartTsk
04005b00 g     F .text	000002d4 OS_TCBInit
04000000 g     F .entry	0000001c __reset
0400f6a2 g     O .rwdata	00000002 OSTmrWheelTblSize
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400f642 g     O .rwdata	00000002 OSEventSize
040111e0 g     O .bss	00000001 OSPrioHighRdy
04002f10 g     F .text	0000005c _fstat_r
0400d204 g     F .text	00000024 OSTaskDelHook
040111b4 g     O .bss	00000004 errno
040021c4 g     F .text	00000008 __seofread
0400d040 g       .text	00000000 OSStartHighRdy
04009fcc g     F .text	000001e4 OSTaskCreateExt
04006de8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0400f682 g     O .rwdata	00000002 OSTaskStatStkSize
04005f64 g     F .text	00000308 OSFlagAccept
04008338 g     F .text	000000b8 OSQFlush
04007dcc g     F .text	00000140 OSQAccept
040111c0 g     O .bss	00000004 alt_argv
04017600 g       *ABS*	00000000 _gp
04009e20 g     F .text	000001ac OSTaskCreate
04009930 g     F .text	000004f0 OSTaskChangePrio
040111d4 g     O .bss	00000004 alt_heapsem
04005dd4 g     F .text	00000190 OSDebugInit
0400a1b0 g     F .text	00000344 OSTaskDel
0400e414 g     O .rwdata	00000180 alt_fd_list
04015260 g     O .bss	00000370 OSFlagTbl
040050ac g     F .text	000000b8 OS_EventTaskRemove
0400d30c g     F .text	00000090 alt_find_dev
040017ec g     F .text	00000148 memcpy
0400f66c g     O .rwdata	00000002 OSRdyTblSize
04000520 g     F .text	0000000c _cleanup_r
0400cb1c g     F .text	0000007c alt_io_redirect
0400da40 g       *ABS*	00000000 __DTOR_END__
0400046c g     F .text	00000014 puts
0400d610 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04003dc0 g     F .text	00000120 OSEventNameGet
0400f650 g     O .rwdata	00000002 OSFlagMax
040046d4 g     F .text	000000f8 OSIntExit
0400f68a g     O .rwdata	00000002 OSTCBSize
040111e1 g     O .bss	00000001 OSPrioCur
0400bdfc g     F .text	000002bc altera_avalon_jtag_uart_read
08002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
040030b8 g     F .text	00000064 .hidden __udivsi3
040033d4 g     F .text	000000a4 isatty
0400f670 g     O .rwdata	00000002 OSStkWidth
0400f664 g     O .rwdata	00000002 OSPtrSize
0400f644 g     O .rwdata	00000002 OSEventTblSize
0400cfb4 g       .text	00000000 OSCtxSw
0400d580 g     F .text	00000090 alt_icache_flush
040111b0 g     O .bss	00000004 __malloc_top_pad
040111e4 g     O .bss	00000004 OSTCBList
040111b8 g     O .bss	00000004 alt_fd_list_lock
040008b8 g     F .text	000004bc __sfvwrite_r
040155d0 g     O .bss	00000c30 OSMemTbl
040111e8 g     O .bss	00000001 OSTickStepState
0400211c g     F .text	00000054 _sbrk_r
0400f668 g     O .rwdata	00000002 OSQMax
04016200 g     O .bss	00000800 OSTaskStatStk
0400793c g     F .text	000000f0 OSMemNameGet
0400f648 g     O .rwdata	00000002 OSFlagEn
04002eb0 g     F .text	00000060 _read_r
0400f68e g     O .rwdata	00000002 OSTimeTickHookEn
040087e8 g     F .text	00000168 OSQPost
040075d4 g     F .text	000000a4 OS_FlagUnlink
0400f620 g     O .rwdata	00000004 alt_max_fd
04005698 g     F .text	00000068 OS_MemCopy
04005700 g     F .text	000000d0 OS_Sched
040024b4 g     F .text	000000f0 _fclose_r
0400784c g     F .text	000000f0 OSMemGet
0400a7dc g     F .text	000001b4 OSTaskNameSet
04002830 g     F .text	00000030 fflush
040111ac g     O .bss	00000004 __malloc_max_sbrked_mem
040111ec g     O .bss	00000004 OSCtxSwCtr
0400d268 g     F .text	00000020 OSTimeTickHook
0400f652 g     O .rwdata	00000002 OSFlagNameSize
04005164 g     F .text	00000100 OS_EventTaskRemoveMulti
04004f5c g     F .text	00000150 OS_EventTaskWaitMulti
0400f66a g     O .rwdata	00000002 OSQSize
040035a0 g     F .text	000000d4 lseek
04009298 g     F .text	0000020c OSSemPend
0400f600 g     O .rwdata	00000004 _global_impure_ptr
04001bb8 g     F .text	00000564 _realloc_r
0400f654 g     O .rwdata	00000002 OSLowestPrio
04018584 g       *ABS*	00000000 __bss_end
0400c968 g     F .text	000000f0 alt_iic_isr_register
0400d2e8 g     F .text	00000024 OSTCBInitHook
0400f69a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0400ce88 g     F .text	00000108 alt_tick
0400f63c g     O .rwdata	00000002 OSEventEn
0400f696 g     O .rwdata	00000002 OSTmrCfgNameSize
04000888 g     F .text	00000018 __fp_lock_all
0400c91c g     F .text	0000004c alt_ic_irq_enabled
04007400 g     F .text	000000e0 OS_FlagInit
0400cdec g     F .text	0000009c alt_alarm_stop
0400f678 g     O .rwdata	00000002 OSTaskIdleStkSize
04011228 g     O .bss	00000004 alt_irq_active
04008ed0 g     F .text	000000b0 OSSemAccept
04007b40 g     F .text	000000d8 OSMemPut
04007678 g     F .text	000001d4 OSMemCreate
040111f0 g     O .bss	00000004 OSIdleCtrMax
040000fc g     F .exceptions	000000d4 alt_irq_handler
0400e3ec g     O .rwdata	00000028 alt_dev_null
0400f68c g     O .rwdata	00000002 OSTicksPerSec
0400cfb4 g       .text	00000000 OSIntCtxSw
0400c59c g     F .text	00000048 alt_dcache_flush_all
040111f4 g     O .bss	00000004 OSTCBFreeList
0400f6b4 g       *ABS*	00000000 __ram_rwdata_end
040094a4 g     F .text	0000016c OSSemPendAbort
0400f618 g     O .rwdata	00000008 alt_dev_list
040039b8 g     F .text	000000f8 write
0400f690 g     O .rwdata	00000002 OSVersionNbr
0400dbc0 g       *ABS*	00000000 __ram_rodata_end
040032e8 g     F .text	000000b0 fstat
0400f638 g     O .rwdata	00000004 OSEndiannessTest
0400311c g     F .text	00000058 .hidden __umodsi3
0400f64a g     O .rwdata	00000002 OSFlagGrpSize
04018584 g       *ABS*	00000000 end
0400b7b4 g     F .text	00000148 altera_avalon_jtag_uart_init
04005968 g     F .text	000000cc OS_TaskStat
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0400da40 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400c3f4 g     F .text	0000007c alt_avalon_timer_sc_init
0400c0b8 g     F .text	000002c4 altera_avalon_jtag_uart_write
04000878 g     F .text	00000004 __sfp_lock_acquire
04001708 g     F .text	000000e4 memchr
04005644 g     F .text	00000054 OS_MemClr
0400d084 g     F .text	0000015c OSTaskStkInit
04000290 g     F .text	00000038 task1
04002984 g     F .text	00000310 _free_r
04004cb4 g     F .text	00000198 OS_EventTaskRdy
0400d88c g     F .text	00000180 __call_exitprocs
040111f8 g     O .bss	00000001 OSCPUUsage
0400f608 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
040002c8 g     F .text	00000038 task2
0401122c g     O .bss	00000004 _alt_tick_rate
040083f0 g     F .text	0000028c OSQPend
0400b09c g     F .text	00000104 OSTimeDly
04011230 g     O .bss	00000004 _alt_nticks
0400376c g     F .text	000000fc read
0400b5f0 g     F .text	00000060 alt_sys_init
0400d774 g     F .text	00000118 __register_exitproc
040111f9 g     O .bss	00000001 OSTaskCtr
0400b1a0 g     F .text	00000154 OSTimeDlyHMSM
0400bca4 g     F .text	00000068 altera_avalon_jtag_uart_close
0400dbc0 g       *ABS*	00000000 __ram_rwdata_start
0400da40 g       *ABS*	00000000 __ram_rodata_start
04011238 g     O .bss	00000028 __malloc_current_mallinfo
0400f63e g     O .rwdata	00000002 OSEventMax
04009610 g     F .text	00000110 OSSemPost
04004858 g     F .text	000000dc OSSchedUnlock
0400b650 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400d4a4 g     F .text	000000dc alt_get_fd
040111fc g     O .bss	00000004 OSMemFreeList
040049a4 g     F .text	000000b0 OSStatInit
040071dc g     F .text	000000c4 OSFlagQuery
0400f674 g     O .rwdata	00000002 OSTaskCreateExtEn
04002460 g     F .text	00000054 _close_r
0400d6f8 g     F .text	0000007c memcmp
04004c94 g     F .text	00000020 OS_Dummy
0400b710 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04018584 g       *ABS*	00000000 __alt_stack_base
0400b760 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400230c g     F .text	00000154 __swsetup_r
04016a00 g     O .bss	000001e0 OSQTbl
04000738 g     F .text	00000118 __sfp
0400dfe4 g     O .rwdata	00000408 __malloc_av_
04000884 g     F .text	00000004 __sinit_lock_release
04011200 g     O .bss	00000004 OSTCBHighRdy
04002170 g     F .text	00000054 __sread
04011204 g     O .bss	00000004 OSQFreeList
0400d39c g     F .text	00000108 alt_find_file
0400c620 g     F .text	000000a4 alt_dev_llist_insert
04003bd4 g     F .text	00000120 __malloc_lock
040038cc g     F .text	000000b0 sbrk
04003ee0 g     F .text	00000140 OSEventNameSet
040027d4 g     F .text	0000005c _fflush_r
04011208 g     O .bss	00000001 OSRdyGrp
040111a8 g       *ABS*	00000000 __bss_start
04001a90 g     F .text	00000128 memset
04000300 g     F .text	000000ac main
040111c4 g     O .bss	00000004 alt_envp
040111a8 g     O .bss	00000004 __malloc_max_total_mem
0400b6b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400da8c g     O .rodata	00000100 OSUnMapTbl
0400f66e g     O .rwdata	00000002 OSSemEn
04006e48 g     F .text	00000394 OSFlagPost
040022a4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
040025a4 g     F .text	00000014 fclose
04004e4c g     F .text	00000110 OS_EventTaskWait
04013260 g     O .bss	00002000 task2_stk
04005a34 g     F .text	000000cc OS_TaskStatStkChk
0400a4f4 g     F .text	00000150 OSTaskDelReq
04000efc g     F .text	0000080c _malloc_r
0400f624 g     O .rwdata	00000004 alt_errno
04004934 g     F .text	00000070 OSStart
04003b74 g     F .text	00000060 __env_unlock
04000d74 g     F .text	000000c4 _fwalk
0400a990 g     F .text	000001d4 OSTaskResume
04007c18 g     F .text	000000e8 OSMemQuery
0400f680 g     O .rwdata	00000002 OSTaskStatEn
0400f65a g     O .rwdata	00000002 OSMemMax
04008950 g     F .text	00000170 OSQPostFront
04002fc0 g     F .text	00000084 .hidden __divsi3
04011209 g     O .bss	00000003 OSRdyTbl
0400f634 g     O .rwdata	00000002 OSDebugEn
04002860 g     F .text	00000124 _malloc_trim_r
0400da40 g       *ABS*	00000000 __CTOR_END__
0400f64c g     O .rwdata	00000002 OSFlagNodeSize
0400f694 g     O .rwdata	00000002 OSTmrCfgMax
04007f0c g     F .text	000001ac OSQCreate
0400a644 g     F .text	00000198 OSTaskNameGet
0400da40 g       *ABS*	00000000 __flash_rodata_start
04008ac0 g     F .text	0000020c OSQPostOpt
04004a54 g     F .text	00000220 OSTimeTick
0400f67c g     O .rwdata	00000002 OSTaskMax
0400da40 g       *ABS*	00000000 __DTOR_LIST__
04008f80 g     F .text	000000d8 OSSemCreate
0400f6a0 g     O .rwdata	00000002 OSTmrWheelSize
0400f676 g     O .rwdata	00000002 OSTaskDelEn
04009720 g     F .text	00000110 OSSemQuery
040080b8 g     F .text	00000280 OSQDel
0400867c g     F .text	0000016c OSQPendAbort
0400b5b8 g     F .text	00000038 alt_irq_init
04003868 g     F .text	00000064 alt_release_fd
0400d6ac g     F .text	00000014 atexit
040022ac g     F .text	00000060 _write_r
040047cc g     F .text	0000008c OSSchedLock
0400626c g     F .text	00000108 OSFlagCreate
0400f604 g     O .rwdata	00000004 _impure_ptr
040111bc g     O .bss	00000004 alt_argc
040025b8 g     F .text	0000021c __sflush_r
0400c724 g     F .text	00000060 _do_dtors
0400f646 g     O .rwdata	00000002 OSEventMultiEn
04006374 g     F .text	00000248 OSFlagDel
0401120c g     O .bss	00000004 OSEventFreeList
04000020 g       .exceptions	00000000 alt_irq_entry
04006830 g     F .text	000005b8 OSFlagPend
0400f692 g     O .rwdata	00000002 OSTmrEn
040008a0 g     F .text	00000018 __fp_unlock_all
0400f610 g     O .rwdata	00000008 alt_fs_list
04005844 g     F .text	00000074 OS_StrCopy
0400f65c g     O .rwdata	00000002 OSMemNameSize
0400d2a8 g     F .text	00000020 OSInitHookEnd
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400f688 g     O .rwdata	00000002 OSTCBPrioTblMax
0400f684 g     O .rwdata	00000002 OSTaskStatStkChkEn
0400c7b8 g     F .text	00000050 alt_ic_isr_register
0400f658 g     O .rwdata	00000002 OSMemEn
0400f662 g     O .rwdata	00000002 OSMutexEn
0400f6b4 g       *ABS*	00000000 _edata
04018584 g       *ABS*	00000000 _end
04011210 g     O .bss	00000001 OSIntNesting
04000244 g       *ABS*	00000000 __ram_exceptions_end
0400bd0c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400b2f4 g     F .text	000001d4 OSTimeDlyResume
040066e4 g     F .text	0000014c OSFlagNameSet
0400ab64 g     F .text	000001c0 OSTaskStkChk
0400c890 g     F .text	0000008c alt_ic_irq_disable
0400f65e g     O .rwdata	00000002 OSMemSize
040021cc g     F .text	0000007c __swrite
0400f60c g     O .rwdata	00000004 __malloc_trim_threshold
04011214 g     O .bss	00000004 OSTCBCur
0400d6c0 g     F .text	00000038 exit
0400f660 g     O .rwdata	00000002 OSMemTblSize
04000e38 g     F .text	000000c4 _fwalk_reent
04003044 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400087c g     F .text	00000004 __sfp_lock_release
04004630 g     F .text	00000058 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400af08 g     F .text	00000124 OSTaskQuery
04008e28 g     F .text	000000a8 OS_QInit
040058b8 g     F .text	00000054 OS_StrLen
04007a2c g     F .text	00000114 OSMemNameSet
0400f67a g     O .rwdata	00000002 OSTaskProfileEn
04011218 g     O .bss	00000004 OSTime
04016be0 g     O .bss	00000800 OSTaskIdleStk
0400da0c g     F .text	00000034 _exit
0400c470 g     F .text	0000012c alt_alarm_start
040065bc g     F .text	00000128 OSFlagNameGet
0400b4c8 g     F .text	0000005c OSTimeGet
04002cf4 g     F .text	000001bc __smakebuf_r
04000480 g     F .text	00000098 strlen
0400d228 g     F .text	00000020 OSTaskSwHook
0400cc98 g     F .text	00000154 open
040173e0 g     O .bss	00000b40 OSEventTbl
04017f20 g     O .bss	00000510 OSTCBTbl
04009830 g     F .text	00000100 OSSemSet
0400c784 g     F .text	00000034 alt_icache_flush_all
0400f6a8 g     O .rwdata	00000004 alt_priority_mask
04009058 g     F .text	00000240 OSSemDel
0401121c g     O .bss	00000004 OSFlagFreeList
0400c808 g     F .text	00000088 alt_ic_irq_enable
0400f640 g     O .rwdata	00000002 OSEventNameSize
04011220 g     O .bss	00000001 OSStatRdy
04018430 g     O .bss	00000054 OSTCBPrioTbl
04003ab0 g     F .text	000000c4 __env_lock
0400f686 g     O .rwdata	00000002 OSTaskSwHookEn
0400f6ac g     O .rwdata	00000008 alt_alarm_list
0400f64e g     O .rwdata	00000002 OSFlagWidth
0400c6c4 g     F .text	00000060 _do_ctors
040031b0 g     F .text	000000d0 close
040111cc g     O .bss	00000004 alt_envsem
04011224 g     O .bss	00000004 OSIdleCtrRun
04004c74 g     F .text	00000020 OSVersion
0400f698 g     O .rwdata	00000002 OSTmrCfgWheelSize
040034e0 g     F .text	00000084 alt_load
0400b02c g     F .text	00000070 OS_TaskStkClr
0400f672 g     O .rwdata	00000002 OSTaskCreateEn
04005264 g     F .text	00000068 OS_EventWaitListInit
0400d2c8 g     F .text	00000020 OSTaskIdleHook
04000880 g     F .text	00000004 __sinit_lock_acquire
0400ad24 g     F .text	000001e4 OSTaskSuspend
0400590c g     F .text	0000005c OS_TaskIdle
0400f69e g     O .rwdata	00000002 OSTmrTblSize
04008ccc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory2_0+0xfbffe004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	40046880 	call	4004688 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10a12104 	addi	r2,r2,-31612
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10a12104 	addi	r2,r2,-31612
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffe12c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffe120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	40046d40 	call	40046d4 <OSIntExit>
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a70d17 	ldw	r2,-25548(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a70d17 	ldw	r2,-25548(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory2_0+0xfbffe248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d69d8014 	ori	gp,gp,30208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	10846a14 	ori	r2,r2,4520

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18e16114 	ori	r3,r3,34180

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory2_0+0xfbffe278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40034e00 	call	40034e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40036740 	call	4003674 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory2_0+0xfbffe28c>

04000290 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 4000290:	defffd04 	addi	sp,sp,-12
 4000294:	dfc00215 	stw	ra,8(sp)
 4000298:	df000115 	stw	fp,4(sp)
 400029c:	df000104 	addi	fp,sp,4
 40002a0:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
 40002a4:	01010074 	movhi	r4,1025
 40002a8:	21369004 	addi	r4,r4,-9664
 40002ac:	400046c0 	call	400046c <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 40002b0:	000f883a 	mov	r7,zero
 40002b4:	018000c4 	movi	r6,3
 40002b8:	000b883a 	mov	r5,zero
 40002bc:	0009883a 	mov	r4,zero
 40002c0:	400b1a00 	call	400b1a0 <OSTimeDlyHMSM>
  }
 40002c4:	003ff706 	br	40002a4 <__alt_mem_onchip_memory2_0+0xfbffe2a4>

040002c8 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
 40002c8:	defffd04 	addi	sp,sp,-12
 40002cc:	dfc00215 	stw	ra,8(sp)
 40002d0:	df000115 	stw	fp,4(sp)
 40002d4:	df000104 	addi	fp,sp,4
 40002d8:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
 40002dc:	01010074 	movhi	r4,1025
 40002e0:	21369504 	addi	r4,r4,-9644
 40002e4:	400046c0 	call	400046c <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 40002e8:	000f883a 	mov	r7,zero
 40002ec:	018000c4 	movi	r6,3
 40002f0:	000b883a 	mov	r5,zero
 40002f4:	0009883a 	mov	r4,zero
 40002f8:	400b1a00 	call	400b1a0 <OSTimeDlyHMSM>
  }
 40002fc:	003ff706 	br	40002dc <__alt_mem_onchip_memory2_0+0xfbffe2dc>

04000300 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 4000300:	defff904 	addi	sp,sp,-28
 4000304:	dfc00615 	stw	ra,24(sp)
 4000308:	df000515 	stw	fp,20(sp)
 400030c:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
 4000310:	d8000415 	stw	zero,16(sp)
 4000314:	d8000315 	stw	zero,12(sp)
 4000318:	00820004 	movi	r2,2048
 400031c:	d8800215 	stw	r2,8(sp)
 4000320:	00810074 	movhi	r2,1025
 4000324:	10849804 	addi	r2,r2,4704
 4000328:	d8800115 	stw	r2,4(sp)
 400032c:	00800044 	movi	r2,1
 4000330:	d8800015 	stw	r2,0(sp)
 4000334:	01c00044 	movi	r7,1
 4000338:	01810074 	movhi	r6,1025
 400033c:	318c9704 	addi	r6,r6,12892
 4000340:	000b883a 	mov	r5,zero
 4000344:	01010034 	movhi	r4,1024
 4000348:	2100a404 	addi	r4,r4,656
 400034c:	4009fcc0 	call	4009fcc <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
 4000350:	d8000415 	stw	zero,16(sp)
 4000354:	d8000315 	stw	zero,12(sp)
 4000358:	00820004 	movi	r2,2048
 400035c:	d8800215 	stw	r2,8(sp)
 4000360:	00810074 	movhi	r2,1025
 4000364:	108c9804 	addi	r2,r2,12896
 4000368:	d8800115 	stw	r2,4(sp)
 400036c:	00800084 	movi	r2,2
 4000370:	d8800015 	stw	r2,0(sp)
 4000374:	01c00084 	movi	r7,2
 4000378:	01810074 	movhi	r6,1025
 400037c:	31949704 	addi	r6,r6,21084
 4000380:	000b883a 	mov	r5,zero
 4000384:	01010034 	movhi	r4,1024
 4000388:	2100b204 	addi	r4,r4,712
 400038c:	4009fcc0 	call	4009fcc <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
 4000390:	40049340 	call	4004934 <OSStart>
  return 0;
 4000394:	0005883a 	mov	r2,zero
}
 4000398:	e037883a 	mov	sp,fp
 400039c:	dfc00117 	ldw	ra,4(sp)
 40003a0:	df000017 	ldw	fp,0(sp)
 40003a4:	dec00204 	addi	sp,sp,8
 40003a8:	f800283a 	ret

040003ac <_puts_r>:
 40003ac:	defff604 	addi	sp,sp,-40
 40003b0:	dc000715 	stw	r16,28(sp)
 40003b4:	2021883a 	mov	r16,r4
 40003b8:	2809883a 	mov	r4,r5
 40003bc:	dc400815 	stw	r17,32(sp)
 40003c0:	dfc00915 	stw	ra,36(sp)
 40003c4:	2823883a 	mov	r17,r5
 40003c8:	40004800 	call	4000480 <strlen>
 40003cc:	10c00044 	addi	r3,r2,1
 40003d0:	d8800115 	stw	r2,4(sp)
 40003d4:	00810074 	movhi	r2,1025
 40003d8:	10b69a04 	addi	r2,r2,-9624
 40003dc:	d8800215 	stw	r2,8(sp)
 40003e0:	00800044 	movi	r2,1
 40003e4:	d8800315 	stw	r2,12(sp)
 40003e8:	00800084 	movi	r2,2
 40003ec:	dc400015 	stw	r17,0(sp)
 40003f0:	d8c00615 	stw	r3,24(sp)
 40003f4:	dec00415 	stw	sp,16(sp)
 40003f8:	d8800515 	stw	r2,20(sp)
 40003fc:	80000226 	beq	r16,zero,4000408 <_puts_r+0x5c>
 4000400:	80800e17 	ldw	r2,56(r16)
 4000404:	10001426 	beq	r2,zero,4000458 <_puts_r+0xac>
 4000408:	81400217 	ldw	r5,8(r16)
 400040c:	2880030b 	ldhu	r2,12(r5)
 4000410:	10c8000c 	andi	r3,r2,8192
 4000414:	1800061e 	bne	r3,zero,4000430 <_puts_r+0x84>
 4000418:	29001917 	ldw	r4,100(r5)
 400041c:	00f7ffc4 	movi	r3,-8193
 4000420:	10880014 	ori	r2,r2,8192
 4000424:	20c6703a 	and	r3,r4,r3
 4000428:	2880030d 	sth	r2,12(r5)
 400042c:	28c01915 	stw	r3,100(r5)
 4000430:	d9800404 	addi	r6,sp,16
 4000434:	8009883a 	mov	r4,r16
 4000438:	40008b80 	call	40008b8 <__sfvwrite_r>
 400043c:	1000091e 	bne	r2,zero,4000464 <_puts_r+0xb8>
 4000440:	00800284 	movi	r2,10
 4000444:	dfc00917 	ldw	ra,36(sp)
 4000448:	dc400817 	ldw	r17,32(sp)
 400044c:	dc000717 	ldw	r16,28(sp)
 4000450:	dec00a04 	addi	sp,sp,40
 4000454:	f800283a 	ret
 4000458:	8009883a 	mov	r4,r16
 400045c:	40008680 	call	4000868 <__sinit>
 4000460:	003fe906 	br	4000408 <__alt_mem_onchip_memory2_0+0xfbffe408>
 4000464:	00bfffc4 	movi	r2,-1
 4000468:	003ff606 	br	4000444 <__alt_mem_onchip_memory2_0+0xfbffe444>

0400046c <puts>:
 400046c:	00810074 	movhi	r2,1025
 4000470:	10bd8104 	addi	r2,r2,-2556
 4000474:	200b883a 	mov	r5,r4
 4000478:	11000017 	ldw	r4,0(r2)
 400047c:	40003ac1 	jmpi	40003ac <_puts_r>

04000480 <strlen>:
 4000480:	208000cc 	andi	r2,r4,3
 4000484:	10002026 	beq	r2,zero,4000508 <strlen+0x88>
 4000488:	20800007 	ldb	r2,0(r4)
 400048c:	10002026 	beq	r2,zero,4000510 <strlen+0x90>
 4000490:	2005883a 	mov	r2,r4
 4000494:	00000206 	br	40004a0 <strlen+0x20>
 4000498:	10c00007 	ldb	r3,0(r2)
 400049c:	18001826 	beq	r3,zero,4000500 <strlen+0x80>
 40004a0:	10800044 	addi	r2,r2,1
 40004a4:	10c000cc 	andi	r3,r2,3
 40004a8:	183ffb1e 	bne	r3,zero,4000498 <__alt_mem_onchip_memory2_0+0xfbffe498>
 40004ac:	10c00017 	ldw	r3,0(r2)
 40004b0:	01ffbff4 	movhi	r7,65279
 40004b4:	39ffbfc4 	addi	r7,r7,-257
 40004b8:	00ca303a 	nor	r5,zero,r3
 40004bc:	01a02074 	movhi	r6,32897
 40004c0:	19c7883a 	add	r3,r3,r7
 40004c4:	31a02004 	addi	r6,r6,-32640
 40004c8:	1946703a 	and	r3,r3,r5
 40004cc:	1986703a 	and	r3,r3,r6
 40004d0:	1800091e 	bne	r3,zero,40004f8 <strlen+0x78>
 40004d4:	10800104 	addi	r2,r2,4
 40004d8:	10c00017 	ldw	r3,0(r2)
 40004dc:	19cb883a 	add	r5,r3,r7
 40004e0:	00c6303a 	nor	r3,zero,r3
 40004e4:	28c6703a 	and	r3,r5,r3
 40004e8:	1986703a 	and	r3,r3,r6
 40004ec:	183ff926 	beq	r3,zero,40004d4 <__alt_mem_onchip_memory2_0+0xfbffe4d4>
 40004f0:	00000106 	br	40004f8 <strlen+0x78>
 40004f4:	10800044 	addi	r2,r2,1
 40004f8:	10c00007 	ldb	r3,0(r2)
 40004fc:	183ffd1e 	bne	r3,zero,40004f4 <__alt_mem_onchip_memory2_0+0xfbffe4f4>
 4000500:	1105c83a 	sub	r2,r2,r4
 4000504:	f800283a 	ret
 4000508:	2005883a 	mov	r2,r4
 400050c:	003fe706 	br	40004ac <__alt_mem_onchip_memory2_0+0xfbffe4ac>
 4000510:	0005883a 	mov	r2,zero
 4000514:	f800283a 	ret

04000518 <__fp_unlock>:
 4000518:	0005883a 	mov	r2,zero
 400051c:	f800283a 	ret

04000520 <_cleanup_r>:
 4000520:	01410034 	movhi	r5,1024
 4000524:	29492d04 	addi	r5,r5,9396
 4000528:	4000e381 	jmpi	4000e38 <_fwalk_reent>

0400052c <__sinit.part.1>:
 400052c:	defff704 	addi	sp,sp,-36
 4000530:	00c10034 	movhi	r3,1024
 4000534:	dfc00815 	stw	ra,32(sp)
 4000538:	ddc00715 	stw	r23,28(sp)
 400053c:	dd800615 	stw	r22,24(sp)
 4000540:	dd400515 	stw	r21,20(sp)
 4000544:	dd000415 	stw	r20,16(sp)
 4000548:	dcc00315 	stw	r19,12(sp)
 400054c:	dc800215 	stw	r18,8(sp)
 4000550:	dc400115 	stw	r17,4(sp)
 4000554:	dc000015 	stw	r16,0(sp)
 4000558:	18c14804 	addi	r3,r3,1312
 400055c:	24000117 	ldw	r16,4(r4)
 4000560:	20c00f15 	stw	r3,60(r4)
 4000564:	2080bb04 	addi	r2,r4,748
 4000568:	00c000c4 	movi	r3,3
 400056c:	20c0b915 	stw	r3,740(r4)
 4000570:	2080ba15 	stw	r2,744(r4)
 4000574:	2000b815 	stw	zero,736(r4)
 4000578:	05c00204 	movi	r23,8
 400057c:	00800104 	movi	r2,4
 4000580:	2025883a 	mov	r18,r4
 4000584:	b80d883a 	mov	r6,r23
 4000588:	81001704 	addi	r4,r16,92
 400058c:	000b883a 	mov	r5,zero
 4000590:	80000015 	stw	zero,0(r16)
 4000594:	80000115 	stw	zero,4(r16)
 4000598:	80000215 	stw	zero,8(r16)
 400059c:	8080030d 	sth	r2,12(r16)
 40005a0:	80001915 	stw	zero,100(r16)
 40005a4:	8000038d 	sth	zero,14(r16)
 40005a8:	80000415 	stw	zero,16(r16)
 40005ac:	80000515 	stw	zero,20(r16)
 40005b0:	80000615 	stw	zero,24(r16)
 40005b4:	4001a900 	call	4001a90 <memset>
 40005b8:	05810034 	movhi	r22,1024
 40005bc:	94400217 	ldw	r17,8(r18)
 40005c0:	05410034 	movhi	r21,1024
 40005c4:	05010034 	movhi	r20,1024
 40005c8:	04c10034 	movhi	r19,1024
 40005cc:	b5885c04 	addi	r22,r22,8560
 40005d0:	ad487304 	addi	r21,r21,8652
 40005d4:	a5089204 	addi	r20,r20,8776
 40005d8:	9cc8a904 	addi	r19,r19,8868
 40005dc:	85800815 	stw	r22,32(r16)
 40005e0:	85400915 	stw	r21,36(r16)
 40005e4:	85000a15 	stw	r20,40(r16)
 40005e8:	84c00b15 	stw	r19,44(r16)
 40005ec:	84000715 	stw	r16,28(r16)
 40005f0:	00800284 	movi	r2,10
 40005f4:	8880030d 	sth	r2,12(r17)
 40005f8:	00800044 	movi	r2,1
 40005fc:	b80d883a 	mov	r6,r23
 4000600:	89001704 	addi	r4,r17,92
 4000604:	000b883a 	mov	r5,zero
 4000608:	88000015 	stw	zero,0(r17)
 400060c:	88000115 	stw	zero,4(r17)
 4000610:	88000215 	stw	zero,8(r17)
 4000614:	88001915 	stw	zero,100(r17)
 4000618:	8880038d 	sth	r2,14(r17)
 400061c:	88000415 	stw	zero,16(r17)
 4000620:	88000515 	stw	zero,20(r17)
 4000624:	88000615 	stw	zero,24(r17)
 4000628:	4001a900 	call	4001a90 <memset>
 400062c:	94000317 	ldw	r16,12(r18)
 4000630:	00800484 	movi	r2,18
 4000634:	8c400715 	stw	r17,28(r17)
 4000638:	8d800815 	stw	r22,32(r17)
 400063c:	8d400915 	stw	r21,36(r17)
 4000640:	8d000a15 	stw	r20,40(r17)
 4000644:	8cc00b15 	stw	r19,44(r17)
 4000648:	8080030d 	sth	r2,12(r16)
 400064c:	00800084 	movi	r2,2
 4000650:	80000015 	stw	zero,0(r16)
 4000654:	80000115 	stw	zero,4(r16)
 4000658:	80000215 	stw	zero,8(r16)
 400065c:	80001915 	stw	zero,100(r16)
 4000660:	8080038d 	sth	r2,14(r16)
 4000664:	80000415 	stw	zero,16(r16)
 4000668:	80000515 	stw	zero,20(r16)
 400066c:	80000615 	stw	zero,24(r16)
 4000670:	b80d883a 	mov	r6,r23
 4000674:	000b883a 	mov	r5,zero
 4000678:	81001704 	addi	r4,r16,92
 400067c:	4001a900 	call	4001a90 <memset>
 4000680:	00800044 	movi	r2,1
 4000684:	84000715 	stw	r16,28(r16)
 4000688:	85800815 	stw	r22,32(r16)
 400068c:	85400915 	stw	r21,36(r16)
 4000690:	85000a15 	stw	r20,40(r16)
 4000694:	84c00b15 	stw	r19,44(r16)
 4000698:	90800e15 	stw	r2,56(r18)
 400069c:	dfc00817 	ldw	ra,32(sp)
 40006a0:	ddc00717 	ldw	r23,28(sp)
 40006a4:	dd800617 	ldw	r22,24(sp)
 40006a8:	dd400517 	ldw	r21,20(sp)
 40006ac:	dd000417 	ldw	r20,16(sp)
 40006b0:	dcc00317 	ldw	r19,12(sp)
 40006b4:	dc800217 	ldw	r18,8(sp)
 40006b8:	dc400117 	ldw	r17,4(sp)
 40006bc:	dc000017 	ldw	r16,0(sp)
 40006c0:	dec00904 	addi	sp,sp,36
 40006c4:	f800283a 	ret

040006c8 <__fp_lock>:
 40006c8:	0005883a 	mov	r2,zero
 40006cc:	f800283a 	ret

040006d0 <__sfmoreglue>:
 40006d0:	defffc04 	addi	sp,sp,-16
 40006d4:	dc400115 	stw	r17,4(sp)
 40006d8:	2c7fffc4 	addi	r17,r5,-1
 40006dc:	8c401a24 	muli	r17,r17,104
 40006e0:	dc800215 	stw	r18,8(sp)
 40006e4:	2825883a 	mov	r18,r5
 40006e8:	89401d04 	addi	r5,r17,116
 40006ec:	dc000015 	stw	r16,0(sp)
 40006f0:	dfc00315 	stw	ra,12(sp)
 40006f4:	4000efc0 	call	4000efc <_malloc_r>
 40006f8:	1021883a 	mov	r16,r2
 40006fc:	10000726 	beq	r2,zero,400071c <__sfmoreglue+0x4c>
 4000700:	11000304 	addi	r4,r2,12
 4000704:	10000015 	stw	zero,0(r2)
 4000708:	14800115 	stw	r18,4(r2)
 400070c:	11000215 	stw	r4,8(r2)
 4000710:	89801a04 	addi	r6,r17,104
 4000714:	000b883a 	mov	r5,zero
 4000718:	4001a900 	call	4001a90 <memset>
 400071c:	8005883a 	mov	r2,r16
 4000720:	dfc00317 	ldw	ra,12(sp)
 4000724:	dc800217 	ldw	r18,8(sp)
 4000728:	dc400117 	ldw	r17,4(sp)
 400072c:	dc000017 	ldw	r16,0(sp)
 4000730:	dec00404 	addi	sp,sp,16
 4000734:	f800283a 	ret

04000738 <__sfp>:
 4000738:	defffb04 	addi	sp,sp,-20
 400073c:	dc000015 	stw	r16,0(sp)
 4000740:	04010074 	movhi	r16,1025
 4000744:	843d8004 	addi	r16,r16,-2560
 4000748:	dcc00315 	stw	r19,12(sp)
 400074c:	2027883a 	mov	r19,r4
 4000750:	81000017 	ldw	r4,0(r16)
 4000754:	dfc00415 	stw	ra,16(sp)
 4000758:	dc800215 	stw	r18,8(sp)
 400075c:	20800e17 	ldw	r2,56(r4)
 4000760:	dc400115 	stw	r17,4(sp)
 4000764:	1000021e 	bne	r2,zero,4000770 <__sfp+0x38>
 4000768:	400052c0 	call	400052c <__sinit.part.1>
 400076c:	81000017 	ldw	r4,0(r16)
 4000770:	2480b804 	addi	r18,r4,736
 4000774:	047fffc4 	movi	r17,-1
 4000778:	91000117 	ldw	r4,4(r18)
 400077c:	94000217 	ldw	r16,8(r18)
 4000780:	213fffc4 	addi	r4,r4,-1
 4000784:	20000a16 	blt	r4,zero,40007b0 <__sfp+0x78>
 4000788:	8080030f 	ldh	r2,12(r16)
 400078c:	10000c26 	beq	r2,zero,40007c0 <__sfp+0x88>
 4000790:	80c01d04 	addi	r3,r16,116
 4000794:	00000206 	br	40007a0 <__sfp+0x68>
 4000798:	18bfe60f 	ldh	r2,-104(r3)
 400079c:	10000826 	beq	r2,zero,40007c0 <__sfp+0x88>
 40007a0:	213fffc4 	addi	r4,r4,-1
 40007a4:	1c3ffd04 	addi	r16,r3,-12
 40007a8:	18c01a04 	addi	r3,r3,104
 40007ac:	247ffa1e 	bne	r4,r17,4000798 <__alt_mem_onchip_memory2_0+0xfbffe798>
 40007b0:	90800017 	ldw	r2,0(r18)
 40007b4:	10001d26 	beq	r2,zero,400082c <__sfp+0xf4>
 40007b8:	1025883a 	mov	r18,r2
 40007bc:	003fee06 	br	4000778 <__alt_mem_onchip_memory2_0+0xfbffe778>
 40007c0:	00bfffc4 	movi	r2,-1
 40007c4:	8080038d 	sth	r2,14(r16)
 40007c8:	00800044 	movi	r2,1
 40007cc:	8080030d 	sth	r2,12(r16)
 40007d0:	80001915 	stw	zero,100(r16)
 40007d4:	80000015 	stw	zero,0(r16)
 40007d8:	80000215 	stw	zero,8(r16)
 40007dc:	80000115 	stw	zero,4(r16)
 40007e0:	80000415 	stw	zero,16(r16)
 40007e4:	80000515 	stw	zero,20(r16)
 40007e8:	80000615 	stw	zero,24(r16)
 40007ec:	01800204 	movi	r6,8
 40007f0:	000b883a 	mov	r5,zero
 40007f4:	81001704 	addi	r4,r16,92
 40007f8:	4001a900 	call	4001a90 <memset>
 40007fc:	8005883a 	mov	r2,r16
 4000800:	80000c15 	stw	zero,48(r16)
 4000804:	80000d15 	stw	zero,52(r16)
 4000808:	80001115 	stw	zero,68(r16)
 400080c:	80001215 	stw	zero,72(r16)
 4000810:	dfc00417 	ldw	ra,16(sp)
 4000814:	dcc00317 	ldw	r19,12(sp)
 4000818:	dc800217 	ldw	r18,8(sp)
 400081c:	dc400117 	ldw	r17,4(sp)
 4000820:	dc000017 	ldw	r16,0(sp)
 4000824:	dec00504 	addi	sp,sp,20
 4000828:	f800283a 	ret
 400082c:	01400104 	movi	r5,4
 4000830:	9809883a 	mov	r4,r19
 4000834:	40006d00 	call	40006d0 <__sfmoreglue>
 4000838:	90800015 	stw	r2,0(r18)
 400083c:	103fde1e 	bne	r2,zero,40007b8 <__alt_mem_onchip_memory2_0+0xfbffe7b8>
 4000840:	00800304 	movi	r2,12
 4000844:	98800015 	stw	r2,0(r19)
 4000848:	0005883a 	mov	r2,zero
 400084c:	003ff006 	br	4000810 <__alt_mem_onchip_memory2_0+0xfbffe810>

04000850 <_cleanup>:
 4000850:	00810074 	movhi	r2,1025
 4000854:	10bd8004 	addi	r2,r2,-2560
 4000858:	11000017 	ldw	r4,0(r2)
 400085c:	01410034 	movhi	r5,1024
 4000860:	29492d04 	addi	r5,r5,9396
 4000864:	4000e381 	jmpi	4000e38 <_fwalk_reent>

04000868 <__sinit>:
 4000868:	20800e17 	ldw	r2,56(r4)
 400086c:	10000126 	beq	r2,zero,4000874 <__sinit+0xc>
 4000870:	f800283a 	ret
 4000874:	400052c1 	jmpi	400052c <__sinit.part.1>

04000878 <__sfp_lock_acquire>:
 4000878:	f800283a 	ret

0400087c <__sfp_lock_release>:
 400087c:	f800283a 	ret

04000880 <__sinit_lock_acquire>:
 4000880:	f800283a 	ret

04000884 <__sinit_lock_release>:
 4000884:	f800283a 	ret

04000888 <__fp_lock_all>:
 4000888:	00810074 	movhi	r2,1025
 400088c:	10bd8104 	addi	r2,r2,-2556
 4000890:	11000017 	ldw	r4,0(r2)
 4000894:	01410034 	movhi	r5,1024
 4000898:	2941b204 	addi	r5,r5,1736
 400089c:	4000d741 	jmpi	4000d74 <_fwalk>

040008a0 <__fp_unlock_all>:
 40008a0:	00810074 	movhi	r2,1025
 40008a4:	10bd8104 	addi	r2,r2,-2556
 40008a8:	11000017 	ldw	r4,0(r2)
 40008ac:	01410034 	movhi	r5,1024
 40008b0:	29414604 	addi	r5,r5,1304
 40008b4:	4000d741 	jmpi	4000d74 <_fwalk>

040008b8 <__sfvwrite_r>:
 40008b8:	30800217 	ldw	r2,8(r6)
 40008bc:	10006726 	beq	r2,zero,4000a5c <__sfvwrite_r+0x1a4>
 40008c0:	28c0030b 	ldhu	r3,12(r5)
 40008c4:	defff404 	addi	sp,sp,-48
 40008c8:	dd400715 	stw	r21,28(sp)
 40008cc:	dd000615 	stw	r20,24(sp)
 40008d0:	dc000215 	stw	r16,8(sp)
 40008d4:	dfc00b15 	stw	ra,44(sp)
 40008d8:	df000a15 	stw	fp,40(sp)
 40008dc:	ddc00915 	stw	r23,36(sp)
 40008e0:	dd800815 	stw	r22,32(sp)
 40008e4:	dcc00515 	stw	r19,20(sp)
 40008e8:	dc800415 	stw	r18,16(sp)
 40008ec:	dc400315 	stw	r17,12(sp)
 40008f0:	1880020c 	andi	r2,r3,8
 40008f4:	2821883a 	mov	r16,r5
 40008f8:	202b883a 	mov	r21,r4
 40008fc:	3029883a 	mov	r20,r6
 4000900:	10002726 	beq	r2,zero,40009a0 <__sfvwrite_r+0xe8>
 4000904:	28800417 	ldw	r2,16(r5)
 4000908:	10002526 	beq	r2,zero,40009a0 <__sfvwrite_r+0xe8>
 400090c:	1880008c 	andi	r2,r3,2
 4000910:	a4400017 	ldw	r17,0(r20)
 4000914:	10002a26 	beq	r2,zero,40009c0 <__sfvwrite_r+0x108>
 4000918:	05a00034 	movhi	r22,32768
 400091c:	0027883a 	mov	r19,zero
 4000920:	0025883a 	mov	r18,zero
 4000924:	b5bf0004 	addi	r22,r22,-1024
 4000928:	980d883a 	mov	r6,r19
 400092c:	a809883a 	mov	r4,r21
 4000930:	90004626 	beq	r18,zero,4000a4c <__sfvwrite_r+0x194>
 4000934:	900f883a 	mov	r7,r18
 4000938:	b480022e 	bgeu	r22,r18,4000944 <__sfvwrite_r+0x8c>
 400093c:	01e00034 	movhi	r7,32768
 4000940:	39ff0004 	addi	r7,r7,-1024
 4000944:	80800917 	ldw	r2,36(r16)
 4000948:	81400717 	ldw	r5,28(r16)
 400094c:	103ee83a 	callr	r2
 4000950:	0080570e 	bge	zero,r2,4000ab0 <__sfvwrite_r+0x1f8>
 4000954:	a0c00217 	ldw	r3,8(r20)
 4000958:	98a7883a 	add	r19,r19,r2
 400095c:	90a5c83a 	sub	r18,r18,r2
 4000960:	1885c83a 	sub	r2,r3,r2
 4000964:	a0800215 	stw	r2,8(r20)
 4000968:	103fef1e 	bne	r2,zero,4000928 <__alt_mem_onchip_memory2_0+0xfbffe928>
 400096c:	0005883a 	mov	r2,zero
 4000970:	dfc00b17 	ldw	ra,44(sp)
 4000974:	df000a17 	ldw	fp,40(sp)
 4000978:	ddc00917 	ldw	r23,36(sp)
 400097c:	dd800817 	ldw	r22,32(sp)
 4000980:	dd400717 	ldw	r21,28(sp)
 4000984:	dd000617 	ldw	r20,24(sp)
 4000988:	dcc00517 	ldw	r19,20(sp)
 400098c:	dc800417 	ldw	r18,16(sp)
 4000990:	dc400317 	ldw	r17,12(sp)
 4000994:	dc000217 	ldw	r16,8(sp)
 4000998:	dec00c04 	addi	sp,sp,48
 400099c:	f800283a 	ret
 40009a0:	800b883a 	mov	r5,r16
 40009a4:	a809883a 	mov	r4,r21
 40009a8:	400230c0 	call	400230c <__swsetup_r>
 40009ac:	1000eb1e 	bne	r2,zero,4000d5c <__sfvwrite_r+0x4a4>
 40009b0:	80c0030b 	ldhu	r3,12(r16)
 40009b4:	a4400017 	ldw	r17,0(r20)
 40009b8:	1880008c 	andi	r2,r3,2
 40009bc:	103fd61e 	bne	r2,zero,4000918 <__alt_mem_onchip_memory2_0+0xfbffe918>
 40009c0:	1880004c 	andi	r2,r3,1
 40009c4:	10003f1e 	bne	r2,zero,4000ac4 <__sfvwrite_r+0x20c>
 40009c8:	0039883a 	mov	fp,zero
 40009cc:	0025883a 	mov	r18,zero
 40009d0:	90001a26 	beq	r18,zero,4000a3c <__sfvwrite_r+0x184>
 40009d4:	1880800c 	andi	r2,r3,512
 40009d8:	84c00217 	ldw	r19,8(r16)
 40009dc:	10002126 	beq	r2,zero,4000a64 <__sfvwrite_r+0x1ac>
 40009e0:	982f883a 	mov	r23,r19
 40009e4:	94c09336 	bltu	r18,r19,4000c34 <__sfvwrite_r+0x37c>
 40009e8:	1881200c 	andi	r2,r3,1152
 40009ec:	10009e1e 	bne	r2,zero,4000c68 <__sfvwrite_r+0x3b0>
 40009f0:	81000017 	ldw	r4,0(r16)
 40009f4:	b80d883a 	mov	r6,r23
 40009f8:	e00b883a 	mov	r5,fp
 40009fc:	40019340 	call	4001934 <memmove>
 4000a00:	80c00217 	ldw	r3,8(r16)
 4000a04:	81000017 	ldw	r4,0(r16)
 4000a08:	9005883a 	mov	r2,r18
 4000a0c:	1ce7c83a 	sub	r19,r3,r19
 4000a10:	25cf883a 	add	r7,r4,r23
 4000a14:	84c00215 	stw	r19,8(r16)
 4000a18:	81c00015 	stw	r7,0(r16)
 4000a1c:	a0c00217 	ldw	r3,8(r20)
 4000a20:	e0b9883a 	add	fp,fp,r2
 4000a24:	90a5c83a 	sub	r18,r18,r2
 4000a28:	18a7c83a 	sub	r19,r3,r2
 4000a2c:	a4c00215 	stw	r19,8(r20)
 4000a30:	983fce26 	beq	r19,zero,400096c <__alt_mem_onchip_memory2_0+0xfbffe96c>
 4000a34:	80c0030b 	ldhu	r3,12(r16)
 4000a38:	903fe61e 	bne	r18,zero,40009d4 <__alt_mem_onchip_memory2_0+0xfbffe9d4>
 4000a3c:	8f000017 	ldw	fp,0(r17)
 4000a40:	8c800117 	ldw	r18,4(r17)
 4000a44:	8c400204 	addi	r17,r17,8
 4000a48:	003fe106 	br	40009d0 <__alt_mem_onchip_memory2_0+0xfbffe9d0>
 4000a4c:	8cc00017 	ldw	r19,0(r17)
 4000a50:	8c800117 	ldw	r18,4(r17)
 4000a54:	8c400204 	addi	r17,r17,8
 4000a58:	003fb306 	br	4000928 <__alt_mem_onchip_memory2_0+0xfbffe928>
 4000a5c:	0005883a 	mov	r2,zero
 4000a60:	f800283a 	ret
 4000a64:	81000017 	ldw	r4,0(r16)
 4000a68:	80800417 	ldw	r2,16(r16)
 4000a6c:	11005736 	bltu	r2,r4,4000bcc <__sfvwrite_r+0x314>
 4000a70:	85c00517 	ldw	r23,20(r16)
 4000a74:	95c05536 	bltu	r18,r23,4000bcc <__sfvwrite_r+0x314>
 4000a78:	00a00034 	movhi	r2,32768
 4000a7c:	10bfffc4 	addi	r2,r2,-1
 4000a80:	9009883a 	mov	r4,r18
 4000a84:	1480012e 	bgeu	r2,r18,4000a8c <__sfvwrite_r+0x1d4>
 4000a88:	1009883a 	mov	r4,r2
 4000a8c:	b80b883a 	mov	r5,r23
 4000a90:	4002fc00 	call	4002fc0 <__divsi3>
 4000a94:	15cf383a 	mul	r7,r2,r23
 4000a98:	81400717 	ldw	r5,28(r16)
 4000a9c:	80800917 	ldw	r2,36(r16)
 4000aa0:	e00d883a 	mov	r6,fp
 4000aa4:	a809883a 	mov	r4,r21
 4000aa8:	103ee83a 	callr	r2
 4000aac:	00bfdb16 	blt	zero,r2,4000a1c <__alt_mem_onchip_memory2_0+0xfbffea1c>
 4000ab0:	8080030b 	ldhu	r2,12(r16)
 4000ab4:	10801014 	ori	r2,r2,64
 4000ab8:	8080030d 	sth	r2,12(r16)
 4000abc:	00bfffc4 	movi	r2,-1
 4000ac0:	003fab06 	br	4000970 <__alt_mem_onchip_memory2_0+0xfbffe970>
 4000ac4:	0027883a 	mov	r19,zero
 4000ac8:	0011883a 	mov	r8,zero
 4000acc:	0039883a 	mov	fp,zero
 4000ad0:	0025883a 	mov	r18,zero
 4000ad4:	90001f26 	beq	r18,zero,4000b54 <__sfvwrite_r+0x29c>
 4000ad8:	40005a26 	beq	r8,zero,4000c44 <__sfvwrite_r+0x38c>
 4000adc:	982d883a 	mov	r22,r19
 4000ae0:	94c0012e 	bgeu	r18,r19,4000ae8 <__sfvwrite_r+0x230>
 4000ae4:	902d883a 	mov	r22,r18
 4000ae8:	81000017 	ldw	r4,0(r16)
 4000aec:	80800417 	ldw	r2,16(r16)
 4000af0:	b02f883a 	mov	r23,r22
 4000af4:	81c00517 	ldw	r7,20(r16)
 4000af8:	1100032e 	bgeu	r2,r4,4000b08 <__sfvwrite_r+0x250>
 4000afc:	80c00217 	ldw	r3,8(r16)
 4000b00:	38c7883a 	add	r3,r7,r3
 4000b04:	1d801816 	blt	r3,r22,4000b68 <__sfvwrite_r+0x2b0>
 4000b08:	b1c03e16 	blt	r22,r7,4000c04 <__sfvwrite_r+0x34c>
 4000b0c:	80800917 	ldw	r2,36(r16)
 4000b10:	81400717 	ldw	r5,28(r16)
 4000b14:	e00d883a 	mov	r6,fp
 4000b18:	da000115 	stw	r8,4(sp)
 4000b1c:	a809883a 	mov	r4,r21
 4000b20:	103ee83a 	callr	r2
 4000b24:	102f883a 	mov	r23,r2
 4000b28:	da000117 	ldw	r8,4(sp)
 4000b2c:	00bfe00e 	bge	zero,r2,4000ab0 <__alt_mem_onchip_memory2_0+0xfbffeab0>
 4000b30:	9de7c83a 	sub	r19,r19,r23
 4000b34:	98001f26 	beq	r19,zero,4000bb4 <__sfvwrite_r+0x2fc>
 4000b38:	a0800217 	ldw	r2,8(r20)
 4000b3c:	e5f9883a 	add	fp,fp,r23
 4000b40:	95e5c83a 	sub	r18,r18,r23
 4000b44:	15efc83a 	sub	r23,r2,r23
 4000b48:	a5c00215 	stw	r23,8(r20)
 4000b4c:	b83f8726 	beq	r23,zero,400096c <__alt_mem_onchip_memory2_0+0xfbffe96c>
 4000b50:	903fe11e 	bne	r18,zero,4000ad8 <__alt_mem_onchip_memory2_0+0xfbffead8>
 4000b54:	8f000017 	ldw	fp,0(r17)
 4000b58:	8c800117 	ldw	r18,4(r17)
 4000b5c:	0011883a 	mov	r8,zero
 4000b60:	8c400204 	addi	r17,r17,8
 4000b64:	003fdb06 	br	4000ad4 <__alt_mem_onchip_memory2_0+0xfbffead4>
 4000b68:	180d883a 	mov	r6,r3
 4000b6c:	e00b883a 	mov	r5,fp
 4000b70:	da000115 	stw	r8,4(sp)
 4000b74:	d8c00015 	stw	r3,0(sp)
 4000b78:	40019340 	call	4001934 <memmove>
 4000b7c:	d8c00017 	ldw	r3,0(sp)
 4000b80:	80800017 	ldw	r2,0(r16)
 4000b84:	800b883a 	mov	r5,r16
 4000b88:	a809883a 	mov	r4,r21
 4000b8c:	10c5883a 	add	r2,r2,r3
 4000b90:	80800015 	stw	r2,0(r16)
 4000b94:	d8c00015 	stw	r3,0(sp)
 4000b98:	40027d40 	call	40027d4 <_fflush_r>
 4000b9c:	d8c00017 	ldw	r3,0(sp)
 4000ba0:	da000117 	ldw	r8,4(sp)
 4000ba4:	103fc21e 	bne	r2,zero,4000ab0 <__alt_mem_onchip_memory2_0+0xfbffeab0>
 4000ba8:	182f883a 	mov	r23,r3
 4000bac:	9de7c83a 	sub	r19,r19,r23
 4000bb0:	983fe11e 	bne	r19,zero,4000b38 <__alt_mem_onchip_memory2_0+0xfbffeb38>
 4000bb4:	800b883a 	mov	r5,r16
 4000bb8:	a809883a 	mov	r4,r21
 4000bbc:	40027d40 	call	40027d4 <_fflush_r>
 4000bc0:	103fbb1e 	bne	r2,zero,4000ab0 <__alt_mem_onchip_memory2_0+0xfbffeab0>
 4000bc4:	0011883a 	mov	r8,zero
 4000bc8:	003fdb06 	br	4000b38 <__alt_mem_onchip_memory2_0+0xfbffeb38>
 4000bcc:	94c0012e 	bgeu	r18,r19,4000bd4 <__sfvwrite_r+0x31c>
 4000bd0:	9027883a 	mov	r19,r18
 4000bd4:	980d883a 	mov	r6,r19
 4000bd8:	e00b883a 	mov	r5,fp
 4000bdc:	40019340 	call	4001934 <memmove>
 4000be0:	80800217 	ldw	r2,8(r16)
 4000be4:	80c00017 	ldw	r3,0(r16)
 4000be8:	14c5c83a 	sub	r2,r2,r19
 4000bec:	1cc7883a 	add	r3,r3,r19
 4000bf0:	80800215 	stw	r2,8(r16)
 4000bf4:	80c00015 	stw	r3,0(r16)
 4000bf8:	10004326 	beq	r2,zero,4000d08 <__sfvwrite_r+0x450>
 4000bfc:	9805883a 	mov	r2,r19
 4000c00:	003f8606 	br	4000a1c <__alt_mem_onchip_memory2_0+0xfbffea1c>
 4000c04:	b00d883a 	mov	r6,r22
 4000c08:	e00b883a 	mov	r5,fp
 4000c0c:	da000115 	stw	r8,4(sp)
 4000c10:	40019340 	call	4001934 <memmove>
 4000c14:	80800217 	ldw	r2,8(r16)
 4000c18:	80c00017 	ldw	r3,0(r16)
 4000c1c:	da000117 	ldw	r8,4(sp)
 4000c20:	1585c83a 	sub	r2,r2,r22
 4000c24:	1dad883a 	add	r22,r3,r22
 4000c28:	80800215 	stw	r2,8(r16)
 4000c2c:	85800015 	stw	r22,0(r16)
 4000c30:	003fbf06 	br	4000b30 <__alt_mem_onchip_memory2_0+0xfbffeb30>
 4000c34:	81000017 	ldw	r4,0(r16)
 4000c38:	9027883a 	mov	r19,r18
 4000c3c:	902f883a 	mov	r23,r18
 4000c40:	003f6c06 	br	40009f4 <__alt_mem_onchip_memory2_0+0xfbffe9f4>
 4000c44:	900d883a 	mov	r6,r18
 4000c48:	01400284 	movi	r5,10
 4000c4c:	e009883a 	mov	r4,fp
 4000c50:	40017080 	call	4001708 <memchr>
 4000c54:	10003e26 	beq	r2,zero,4000d50 <__sfvwrite_r+0x498>
 4000c58:	10800044 	addi	r2,r2,1
 4000c5c:	1727c83a 	sub	r19,r2,fp
 4000c60:	02000044 	movi	r8,1
 4000c64:	003f9d06 	br	4000adc <__alt_mem_onchip_memory2_0+0xfbffeadc>
 4000c68:	80800517 	ldw	r2,20(r16)
 4000c6c:	81400417 	ldw	r5,16(r16)
 4000c70:	81c00017 	ldw	r7,0(r16)
 4000c74:	10a7883a 	add	r19,r2,r2
 4000c78:	9885883a 	add	r2,r19,r2
 4000c7c:	1026d7fa 	srli	r19,r2,31
 4000c80:	396dc83a 	sub	r22,r7,r5
 4000c84:	b1000044 	addi	r4,r22,1
 4000c88:	9885883a 	add	r2,r19,r2
 4000c8c:	1027d07a 	srai	r19,r2,1
 4000c90:	2485883a 	add	r2,r4,r18
 4000c94:	980d883a 	mov	r6,r19
 4000c98:	9880022e 	bgeu	r19,r2,4000ca4 <__sfvwrite_r+0x3ec>
 4000c9c:	1027883a 	mov	r19,r2
 4000ca0:	100d883a 	mov	r6,r2
 4000ca4:	18c1000c 	andi	r3,r3,1024
 4000ca8:	18001c26 	beq	r3,zero,4000d1c <__sfvwrite_r+0x464>
 4000cac:	300b883a 	mov	r5,r6
 4000cb0:	a809883a 	mov	r4,r21
 4000cb4:	4000efc0 	call	4000efc <_malloc_r>
 4000cb8:	102f883a 	mov	r23,r2
 4000cbc:	10002926 	beq	r2,zero,4000d64 <__sfvwrite_r+0x4ac>
 4000cc0:	81400417 	ldw	r5,16(r16)
 4000cc4:	b00d883a 	mov	r6,r22
 4000cc8:	1009883a 	mov	r4,r2
 4000ccc:	40017ec0 	call	40017ec <memcpy>
 4000cd0:	8080030b 	ldhu	r2,12(r16)
 4000cd4:	00fedfc4 	movi	r3,-1153
 4000cd8:	10c4703a 	and	r2,r2,r3
 4000cdc:	10802014 	ori	r2,r2,128
 4000ce0:	8080030d 	sth	r2,12(r16)
 4000ce4:	bd89883a 	add	r4,r23,r22
 4000ce8:	9d8fc83a 	sub	r7,r19,r22
 4000cec:	85c00415 	stw	r23,16(r16)
 4000cf0:	84c00515 	stw	r19,20(r16)
 4000cf4:	81000015 	stw	r4,0(r16)
 4000cf8:	9027883a 	mov	r19,r18
 4000cfc:	81c00215 	stw	r7,8(r16)
 4000d00:	902f883a 	mov	r23,r18
 4000d04:	003f3b06 	br	40009f4 <__alt_mem_onchip_memory2_0+0xfbffe9f4>
 4000d08:	800b883a 	mov	r5,r16
 4000d0c:	a809883a 	mov	r4,r21
 4000d10:	40027d40 	call	40027d4 <_fflush_r>
 4000d14:	103fb926 	beq	r2,zero,4000bfc <__alt_mem_onchip_memory2_0+0xfbffebfc>
 4000d18:	003f6506 	br	4000ab0 <__alt_mem_onchip_memory2_0+0xfbffeab0>
 4000d1c:	a809883a 	mov	r4,r21
 4000d20:	4001bb80 	call	4001bb8 <_realloc_r>
 4000d24:	102f883a 	mov	r23,r2
 4000d28:	103fee1e 	bne	r2,zero,4000ce4 <__alt_mem_onchip_memory2_0+0xfbffece4>
 4000d2c:	81400417 	ldw	r5,16(r16)
 4000d30:	a809883a 	mov	r4,r21
 4000d34:	40029840 	call	4002984 <_free_r>
 4000d38:	8080030b 	ldhu	r2,12(r16)
 4000d3c:	00ffdfc4 	movi	r3,-129
 4000d40:	1884703a 	and	r2,r3,r2
 4000d44:	00c00304 	movi	r3,12
 4000d48:	a8c00015 	stw	r3,0(r21)
 4000d4c:	003f5906 	br	4000ab4 <__alt_mem_onchip_memory2_0+0xfbffeab4>
 4000d50:	94c00044 	addi	r19,r18,1
 4000d54:	02000044 	movi	r8,1
 4000d58:	003f6006 	br	4000adc <__alt_mem_onchip_memory2_0+0xfbffeadc>
 4000d5c:	00bfffc4 	movi	r2,-1
 4000d60:	003f0306 	br	4000970 <__alt_mem_onchip_memory2_0+0xfbffe970>
 4000d64:	00800304 	movi	r2,12
 4000d68:	a8800015 	stw	r2,0(r21)
 4000d6c:	8080030b 	ldhu	r2,12(r16)
 4000d70:	003f5006 	br	4000ab4 <__alt_mem_onchip_memory2_0+0xfbffeab4>

04000d74 <_fwalk>:
 4000d74:	defff704 	addi	sp,sp,-36
 4000d78:	dd000415 	stw	r20,16(sp)
 4000d7c:	dfc00815 	stw	ra,32(sp)
 4000d80:	ddc00715 	stw	r23,28(sp)
 4000d84:	dd800615 	stw	r22,24(sp)
 4000d88:	dd400515 	stw	r21,20(sp)
 4000d8c:	dcc00315 	stw	r19,12(sp)
 4000d90:	dc800215 	stw	r18,8(sp)
 4000d94:	dc400115 	stw	r17,4(sp)
 4000d98:	dc000015 	stw	r16,0(sp)
 4000d9c:	2500b804 	addi	r20,r4,736
 4000da0:	a0002326 	beq	r20,zero,4000e30 <_fwalk+0xbc>
 4000da4:	282b883a 	mov	r21,r5
 4000da8:	002f883a 	mov	r23,zero
 4000dac:	05800044 	movi	r22,1
 4000db0:	04ffffc4 	movi	r19,-1
 4000db4:	a4400117 	ldw	r17,4(r20)
 4000db8:	a4800217 	ldw	r18,8(r20)
 4000dbc:	8c7fffc4 	addi	r17,r17,-1
 4000dc0:	88000d16 	blt	r17,zero,4000df8 <_fwalk+0x84>
 4000dc4:	94000304 	addi	r16,r18,12
 4000dc8:	94800384 	addi	r18,r18,14
 4000dcc:	8080000b 	ldhu	r2,0(r16)
 4000dd0:	8c7fffc4 	addi	r17,r17,-1
 4000dd4:	813ffd04 	addi	r4,r16,-12
 4000dd8:	b080042e 	bgeu	r22,r2,4000dec <_fwalk+0x78>
 4000ddc:	9080000f 	ldh	r2,0(r18)
 4000de0:	14c00226 	beq	r2,r19,4000dec <_fwalk+0x78>
 4000de4:	a83ee83a 	callr	r21
 4000de8:	b8aeb03a 	or	r23,r23,r2
 4000dec:	84001a04 	addi	r16,r16,104
 4000df0:	94801a04 	addi	r18,r18,104
 4000df4:	8cfff51e 	bne	r17,r19,4000dcc <__alt_mem_onchip_memory2_0+0xfbffedcc>
 4000df8:	a5000017 	ldw	r20,0(r20)
 4000dfc:	a03fed1e 	bne	r20,zero,4000db4 <__alt_mem_onchip_memory2_0+0xfbffedb4>
 4000e00:	b805883a 	mov	r2,r23
 4000e04:	dfc00817 	ldw	ra,32(sp)
 4000e08:	ddc00717 	ldw	r23,28(sp)
 4000e0c:	dd800617 	ldw	r22,24(sp)
 4000e10:	dd400517 	ldw	r21,20(sp)
 4000e14:	dd000417 	ldw	r20,16(sp)
 4000e18:	dcc00317 	ldw	r19,12(sp)
 4000e1c:	dc800217 	ldw	r18,8(sp)
 4000e20:	dc400117 	ldw	r17,4(sp)
 4000e24:	dc000017 	ldw	r16,0(sp)
 4000e28:	dec00904 	addi	sp,sp,36
 4000e2c:	f800283a 	ret
 4000e30:	002f883a 	mov	r23,zero
 4000e34:	003ff206 	br	4000e00 <__alt_mem_onchip_memory2_0+0xfbffee00>

04000e38 <_fwalk_reent>:
 4000e38:	defff704 	addi	sp,sp,-36
 4000e3c:	dd000415 	stw	r20,16(sp)
 4000e40:	dfc00815 	stw	ra,32(sp)
 4000e44:	ddc00715 	stw	r23,28(sp)
 4000e48:	dd800615 	stw	r22,24(sp)
 4000e4c:	dd400515 	stw	r21,20(sp)
 4000e50:	dcc00315 	stw	r19,12(sp)
 4000e54:	dc800215 	stw	r18,8(sp)
 4000e58:	dc400115 	stw	r17,4(sp)
 4000e5c:	dc000015 	stw	r16,0(sp)
 4000e60:	2500b804 	addi	r20,r4,736
 4000e64:	a0002326 	beq	r20,zero,4000ef4 <_fwalk_reent+0xbc>
 4000e68:	282b883a 	mov	r21,r5
 4000e6c:	2027883a 	mov	r19,r4
 4000e70:	002f883a 	mov	r23,zero
 4000e74:	05800044 	movi	r22,1
 4000e78:	04bfffc4 	movi	r18,-1
 4000e7c:	a4400117 	ldw	r17,4(r20)
 4000e80:	a4000217 	ldw	r16,8(r20)
 4000e84:	8c7fffc4 	addi	r17,r17,-1
 4000e88:	88000c16 	blt	r17,zero,4000ebc <_fwalk_reent+0x84>
 4000e8c:	84000304 	addi	r16,r16,12
 4000e90:	8080000b 	ldhu	r2,0(r16)
 4000e94:	8c7fffc4 	addi	r17,r17,-1
 4000e98:	817ffd04 	addi	r5,r16,-12
 4000e9c:	b080052e 	bgeu	r22,r2,4000eb4 <_fwalk_reent+0x7c>
 4000ea0:	8080008f 	ldh	r2,2(r16)
 4000ea4:	9809883a 	mov	r4,r19
 4000ea8:	14800226 	beq	r2,r18,4000eb4 <_fwalk_reent+0x7c>
 4000eac:	a83ee83a 	callr	r21
 4000eb0:	b8aeb03a 	or	r23,r23,r2
 4000eb4:	84001a04 	addi	r16,r16,104
 4000eb8:	8cbff51e 	bne	r17,r18,4000e90 <__alt_mem_onchip_memory2_0+0xfbffee90>
 4000ebc:	a5000017 	ldw	r20,0(r20)
 4000ec0:	a03fee1e 	bne	r20,zero,4000e7c <__alt_mem_onchip_memory2_0+0xfbffee7c>
 4000ec4:	b805883a 	mov	r2,r23
 4000ec8:	dfc00817 	ldw	ra,32(sp)
 4000ecc:	ddc00717 	ldw	r23,28(sp)
 4000ed0:	dd800617 	ldw	r22,24(sp)
 4000ed4:	dd400517 	ldw	r21,20(sp)
 4000ed8:	dd000417 	ldw	r20,16(sp)
 4000edc:	dcc00317 	ldw	r19,12(sp)
 4000ee0:	dc800217 	ldw	r18,8(sp)
 4000ee4:	dc400117 	ldw	r17,4(sp)
 4000ee8:	dc000017 	ldw	r16,0(sp)
 4000eec:	dec00904 	addi	sp,sp,36
 4000ef0:	f800283a 	ret
 4000ef4:	002f883a 	mov	r23,zero
 4000ef8:	003ff206 	br	4000ec4 <__alt_mem_onchip_memory2_0+0xfbffeec4>

04000efc <_malloc_r>:
 4000efc:	defff504 	addi	sp,sp,-44
 4000f00:	dc800315 	stw	r18,12(sp)
 4000f04:	dfc00a15 	stw	ra,40(sp)
 4000f08:	df000915 	stw	fp,36(sp)
 4000f0c:	ddc00815 	stw	r23,32(sp)
 4000f10:	dd800715 	stw	r22,28(sp)
 4000f14:	dd400615 	stw	r21,24(sp)
 4000f18:	dd000515 	stw	r20,20(sp)
 4000f1c:	dcc00415 	stw	r19,16(sp)
 4000f20:	dc400215 	stw	r17,8(sp)
 4000f24:	dc000115 	stw	r16,4(sp)
 4000f28:	288002c4 	addi	r2,r5,11
 4000f2c:	00c00584 	movi	r3,22
 4000f30:	2025883a 	mov	r18,r4
 4000f34:	18807f2e 	bgeu	r3,r2,4001134 <_malloc_r+0x238>
 4000f38:	047ffe04 	movi	r17,-8
 4000f3c:	1462703a 	and	r17,r2,r17
 4000f40:	8800a316 	blt	r17,zero,40011d0 <_malloc_r+0x2d4>
 4000f44:	8940a236 	bltu	r17,r5,40011d0 <_malloc_r+0x2d4>
 4000f48:	4003bd40 	call	4003bd4 <__malloc_lock>
 4000f4c:	00807dc4 	movi	r2,503
 4000f50:	1441e92e 	bgeu	r2,r17,40016f8 <_malloc_r+0x7fc>
 4000f54:	8804d27a 	srli	r2,r17,9
 4000f58:	1000a126 	beq	r2,zero,40011e0 <_malloc_r+0x2e4>
 4000f5c:	00c00104 	movi	r3,4
 4000f60:	18811e36 	bltu	r3,r2,40013dc <_malloc_r+0x4e0>
 4000f64:	8804d1ba 	srli	r2,r17,6
 4000f68:	12000e44 	addi	r8,r2,57
 4000f6c:	11c00e04 	addi	r7,r2,56
 4000f70:	4209883a 	add	r4,r8,r8
 4000f74:	04c10074 	movhi	r19,1025
 4000f78:	2109883a 	add	r4,r4,r4
 4000f7c:	9cf7f904 	addi	r19,r19,-8220
 4000f80:	2109883a 	add	r4,r4,r4
 4000f84:	9909883a 	add	r4,r19,r4
 4000f88:	24000117 	ldw	r16,4(r4)
 4000f8c:	213ffe04 	addi	r4,r4,-8
 4000f90:	24009726 	beq	r4,r16,40011f0 <_malloc_r+0x2f4>
 4000f94:	80800117 	ldw	r2,4(r16)
 4000f98:	01bfff04 	movi	r6,-4
 4000f9c:	014003c4 	movi	r5,15
 4000fa0:	1184703a 	and	r2,r2,r6
 4000fa4:	1447c83a 	sub	r3,r2,r17
 4000fa8:	28c00716 	blt	r5,r3,4000fc8 <_malloc_r+0xcc>
 4000fac:	1800920e 	bge	r3,zero,40011f8 <_malloc_r+0x2fc>
 4000fb0:	84000317 	ldw	r16,12(r16)
 4000fb4:	24008e26 	beq	r4,r16,40011f0 <_malloc_r+0x2f4>
 4000fb8:	80800117 	ldw	r2,4(r16)
 4000fbc:	1184703a 	and	r2,r2,r6
 4000fc0:	1447c83a 	sub	r3,r2,r17
 4000fc4:	28fff90e 	bge	r5,r3,4000fac <__alt_mem_onchip_memory2_0+0xfbffefac>
 4000fc8:	3809883a 	mov	r4,r7
 4000fcc:	01810074 	movhi	r6,1025
 4000fd0:	9c000417 	ldw	r16,16(r19)
 4000fd4:	31b7f904 	addi	r6,r6,-8220
 4000fd8:	32000204 	addi	r8,r6,8
 4000fdc:	82013426 	beq	r16,r8,40014b0 <_malloc_r+0x5b4>
 4000fe0:	80c00117 	ldw	r3,4(r16)
 4000fe4:	00bfff04 	movi	r2,-4
 4000fe8:	188e703a 	and	r7,r3,r2
 4000fec:	3c45c83a 	sub	r2,r7,r17
 4000ff0:	00c003c4 	movi	r3,15
 4000ff4:	18811f16 	blt	r3,r2,4001474 <_malloc_r+0x578>
 4000ff8:	32000515 	stw	r8,20(r6)
 4000ffc:	32000415 	stw	r8,16(r6)
 4001000:	10007f0e 	bge	r2,zero,4001200 <_malloc_r+0x304>
 4001004:	00807fc4 	movi	r2,511
 4001008:	11c0fd36 	bltu	r2,r7,4001400 <_malloc_r+0x504>
 400100c:	3806d0fa 	srli	r3,r7,3
 4001010:	01c00044 	movi	r7,1
 4001014:	30800117 	ldw	r2,4(r6)
 4001018:	19400044 	addi	r5,r3,1
 400101c:	294b883a 	add	r5,r5,r5
 4001020:	1807d0ba 	srai	r3,r3,2
 4001024:	294b883a 	add	r5,r5,r5
 4001028:	294b883a 	add	r5,r5,r5
 400102c:	298b883a 	add	r5,r5,r6
 4001030:	38c6983a 	sll	r3,r7,r3
 4001034:	29c00017 	ldw	r7,0(r5)
 4001038:	2a7ffe04 	addi	r9,r5,-8
 400103c:	1886b03a 	or	r3,r3,r2
 4001040:	82400315 	stw	r9,12(r16)
 4001044:	81c00215 	stw	r7,8(r16)
 4001048:	30c00115 	stw	r3,4(r6)
 400104c:	2c000015 	stw	r16,0(r5)
 4001050:	3c000315 	stw	r16,12(r7)
 4001054:	2005d0ba 	srai	r2,r4,2
 4001058:	01400044 	movi	r5,1
 400105c:	288a983a 	sll	r5,r5,r2
 4001060:	19406f36 	bltu	r3,r5,4001220 <_malloc_r+0x324>
 4001064:	28c4703a 	and	r2,r5,r3
 4001068:	10000a1e 	bne	r2,zero,4001094 <_malloc_r+0x198>
 400106c:	00bfff04 	movi	r2,-4
 4001070:	294b883a 	add	r5,r5,r5
 4001074:	2088703a 	and	r4,r4,r2
 4001078:	28c4703a 	and	r2,r5,r3
 400107c:	21000104 	addi	r4,r4,4
 4001080:	1000041e 	bne	r2,zero,4001094 <_malloc_r+0x198>
 4001084:	294b883a 	add	r5,r5,r5
 4001088:	28c4703a 	and	r2,r5,r3
 400108c:	21000104 	addi	r4,r4,4
 4001090:	103ffc26 	beq	r2,zero,4001084 <__alt_mem_onchip_memory2_0+0xfbfff084>
 4001094:	02bfff04 	movi	r10,-4
 4001098:	024003c4 	movi	r9,15
 400109c:	21800044 	addi	r6,r4,1
 40010a0:	318d883a 	add	r6,r6,r6
 40010a4:	318d883a 	add	r6,r6,r6
 40010a8:	318d883a 	add	r6,r6,r6
 40010ac:	998d883a 	add	r6,r19,r6
 40010b0:	333ffe04 	addi	r12,r6,-8
 40010b4:	2017883a 	mov	r11,r4
 40010b8:	31800104 	addi	r6,r6,4
 40010bc:	34000017 	ldw	r16,0(r6)
 40010c0:	31fffd04 	addi	r7,r6,-12
 40010c4:	81c0041e 	bne	r16,r7,40010d8 <_malloc_r+0x1dc>
 40010c8:	0000fb06 	br	40014b8 <_malloc_r+0x5bc>
 40010cc:	1801030e 	bge	r3,zero,40014dc <_malloc_r+0x5e0>
 40010d0:	84000317 	ldw	r16,12(r16)
 40010d4:	81c0f826 	beq	r16,r7,40014b8 <_malloc_r+0x5bc>
 40010d8:	80800117 	ldw	r2,4(r16)
 40010dc:	1284703a 	and	r2,r2,r10
 40010e0:	1447c83a 	sub	r3,r2,r17
 40010e4:	48fff90e 	bge	r9,r3,40010cc <__alt_mem_onchip_memory2_0+0xfbfff0cc>
 40010e8:	80800317 	ldw	r2,12(r16)
 40010ec:	81000217 	ldw	r4,8(r16)
 40010f0:	89400054 	ori	r5,r17,1
 40010f4:	81400115 	stw	r5,4(r16)
 40010f8:	20800315 	stw	r2,12(r4)
 40010fc:	11000215 	stw	r4,8(r2)
 4001100:	8463883a 	add	r17,r16,r17
 4001104:	9c400515 	stw	r17,20(r19)
 4001108:	9c400415 	stw	r17,16(r19)
 400110c:	18800054 	ori	r2,r3,1
 4001110:	88800115 	stw	r2,4(r17)
 4001114:	8a000315 	stw	r8,12(r17)
 4001118:	8a000215 	stw	r8,8(r17)
 400111c:	88e3883a 	add	r17,r17,r3
 4001120:	88c00015 	stw	r3,0(r17)
 4001124:	9009883a 	mov	r4,r18
 4001128:	4003cf40 	call	4003cf4 <__malloc_unlock>
 400112c:	80800204 	addi	r2,r16,8
 4001130:	00001b06 	br	40011a0 <_malloc_r+0x2a4>
 4001134:	04400404 	movi	r17,16
 4001138:	89402536 	bltu	r17,r5,40011d0 <_malloc_r+0x2d4>
 400113c:	4003bd40 	call	4003bd4 <__malloc_lock>
 4001140:	00800184 	movi	r2,6
 4001144:	01000084 	movi	r4,2
 4001148:	04c10074 	movhi	r19,1025
 400114c:	1085883a 	add	r2,r2,r2
 4001150:	9cf7f904 	addi	r19,r19,-8220
 4001154:	1085883a 	add	r2,r2,r2
 4001158:	9885883a 	add	r2,r19,r2
 400115c:	14000117 	ldw	r16,4(r2)
 4001160:	10fffe04 	addi	r3,r2,-8
 4001164:	80c0d926 	beq	r16,r3,40014cc <_malloc_r+0x5d0>
 4001168:	80c00117 	ldw	r3,4(r16)
 400116c:	81000317 	ldw	r4,12(r16)
 4001170:	00bfff04 	movi	r2,-4
 4001174:	1884703a 	and	r2,r3,r2
 4001178:	81400217 	ldw	r5,8(r16)
 400117c:	8085883a 	add	r2,r16,r2
 4001180:	10c00117 	ldw	r3,4(r2)
 4001184:	29000315 	stw	r4,12(r5)
 4001188:	21400215 	stw	r5,8(r4)
 400118c:	18c00054 	ori	r3,r3,1
 4001190:	10c00115 	stw	r3,4(r2)
 4001194:	9009883a 	mov	r4,r18
 4001198:	4003cf40 	call	4003cf4 <__malloc_unlock>
 400119c:	80800204 	addi	r2,r16,8
 40011a0:	dfc00a17 	ldw	ra,40(sp)
 40011a4:	df000917 	ldw	fp,36(sp)
 40011a8:	ddc00817 	ldw	r23,32(sp)
 40011ac:	dd800717 	ldw	r22,28(sp)
 40011b0:	dd400617 	ldw	r21,24(sp)
 40011b4:	dd000517 	ldw	r20,20(sp)
 40011b8:	dcc00417 	ldw	r19,16(sp)
 40011bc:	dc800317 	ldw	r18,12(sp)
 40011c0:	dc400217 	ldw	r17,8(sp)
 40011c4:	dc000117 	ldw	r16,4(sp)
 40011c8:	dec00b04 	addi	sp,sp,44
 40011cc:	f800283a 	ret
 40011d0:	00800304 	movi	r2,12
 40011d4:	90800015 	stw	r2,0(r18)
 40011d8:	0005883a 	mov	r2,zero
 40011dc:	003ff006 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 40011e0:	01002004 	movi	r4,128
 40011e4:	02001004 	movi	r8,64
 40011e8:	01c00fc4 	movi	r7,63
 40011ec:	003f6106 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 40011f0:	4009883a 	mov	r4,r8
 40011f4:	003f7506 	br	4000fcc <__alt_mem_onchip_memory2_0+0xfbffefcc>
 40011f8:	81000317 	ldw	r4,12(r16)
 40011fc:	003fde06 	br	4001178 <__alt_mem_onchip_memory2_0+0xfbfff178>
 4001200:	81c5883a 	add	r2,r16,r7
 4001204:	11400117 	ldw	r5,4(r2)
 4001208:	9009883a 	mov	r4,r18
 400120c:	29400054 	ori	r5,r5,1
 4001210:	11400115 	stw	r5,4(r2)
 4001214:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4001218:	80800204 	addi	r2,r16,8
 400121c:	003fe006 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 4001220:	9c000217 	ldw	r16,8(r19)
 4001224:	00bfff04 	movi	r2,-4
 4001228:	85800117 	ldw	r22,4(r16)
 400122c:	b0ac703a 	and	r22,r22,r2
 4001230:	b4400336 	bltu	r22,r17,4001240 <_malloc_r+0x344>
 4001234:	b445c83a 	sub	r2,r22,r17
 4001238:	00c003c4 	movi	r3,15
 400123c:	18805d16 	blt	r3,r2,40013b4 <_malloc_r+0x4b8>
 4001240:	05c10074 	movhi	r23,1025
 4001244:	00810074 	movhi	r2,1025
 4001248:	10846c04 	addi	r2,r2,4528
 400124c:	bdfd8204 	addi	r23,r23,-2552
 4001250:	15400017 	ldw	r21,0(r2)
 4001254:	b8c00017 	ldw	r3,0(r23)
 4001258:	00bfffc4 	movi	r2,-1
 400125c:	858d883a 	add	r6,r16,r22
 4001260:	8d6b883a 	add	r21,r17,r21
 4001264:	1880ea26 	beq	r3,r2,4001610 <_malloc_r+0x714>
 4001268:	ad4403c4 	addi	r21,r21,4111
 400126c:	00bc0004 	movi	r2,-4096
 4001270:	a8aa703a 	and	r21,r21,r2
 4001274:	a80b883a 	mov	r5,r21
 4001278:	9009883a 	mov	r4,r18
 400127c:	d9800015 	stw	r6,0(sp)
 4001280:	400211c0 	call	400211c <_sbrk_r>
 4001284:	1029883a 	mov	r20,r2
 4001288:	00bfffc4 	movi	r2,-1
 400128c:	d9800017 	ldw	r6,0(sp)
 4001290:	a080e826 	beq	r20,r2,4001634 <_malloc_r+0x738>
 4001294:	a180a636 	bltu	r20,r6,4001530 <_malloc_r+0x634>
 4001298:	07010074 	movhi	fp,1025
 400129c:	e7048e04 	addi	fp,fp,4664
 40012a0:	e0800017 	ldw	r2,0(fp)
 40012a4:	a887883a 	add	r3,r21,r2
 40012a8:	e0c00015 	stw	r3,0(fp)
 40012ac:	3500e626 	beq	r6,r20,4001648 <_malloc_r+0x74c>
 40012b0:	b9000017 	ldw	r4,0(r23)
 40012b4:	00bfffc4 	movi	r2,-1
 40012b8:	2080ee26 	beq	r4,r2,4001674 <_malloc_r+0x778>
 40012bc:	a185c83a 	sub	r2,r20,r6
 40012c0:	10c5883a 	add	r2,r2,r3
 40012c4:	e0800015 	stw	r2,0(fp)
 40012c8:	a0c001cc 	andi	r3,r20,7
 40012cc:	1800bc26 	beq	r3,zero,40015c0 <_malloc_r+0x6c4>
 40012d0:	a0e9c83a 	sub	r20,r20,r3
 40012d4:	00840204 	movi	r2,4104
 40012d8:	a5000204 	addi	r20,r20,8
 40012dc:	10c7c83a 	sub	r3,r2,r3
 40012e0:	a545883a 	add	r2,r20,r21
 40012e4:	1083ffcc 	andi	r2,r2,4095
 40012e8:	18abc83a 	sub	r21,r3,r2
 40012ec:	a80b883a 	mov	r5,r21
 40012f0:	9009883a 	mov	r4,r18
 40012f4:	400211c0 	call	400211c <_sbrk_r>
 40012f8:	00ffffc4 	movi	r3,-1
 40012fc:	10c0e126 	beq	r2,r3,4001684 <_malloc_r+0x788>
 4001300:	1505c83a 	sub	r2,r2,r20
 4001304:	1545883a 	add	r2,r2,r21
 4001308:	10800054 	ori	r2,r2,1
 400130c:	e0c00017 	ldw	r3,0(fp)
 4001310:	9d000215 	stw	r20,8(r19)
 4001314:	a0800115 	stw	r2,4(r20)
 4001318:	a8c7883a 	add	r3,r21,r3
 400131c:	e0c00015 	stw	r3,0(fp)
 4001320:	84c00e26 	beq	r16,r19,400135c <_malloc_r+0x460>
 4001324:	018003c4 	movi	r6,15
 4001328:	3580a72e 	bgeu	r6,r22,40015c8 <_malloc_r+0x6cc>
 400132c:	81400117 	ldw	r5,4(r16)
 4001330:	013ffe04 	movi	r4,-8
 4001334:	b0bffd04 	addi	r2,r22,-12
 4001338:	1104703a 	and	r2,r2,r4
 400133c:	2900004c 	andi	r4,r5,1
 4001340:	2088b03a 	or	r4,r4,r2
 4001344:	81000115 	stw	r4,4(r16)
 4001348:	01400144 	movi	r5,5
 400134c:	8089883a 	add	r4,r16,r2
 4001350:	21400115 	stw	r5,4(r4)
 4001354:	21400215 	stw	r5,8(r4)
 4001358:	3080cd36 	bltu	r6,r2,4001690 <_malloc_r+0x794>
 400135c:	00810074 	movhi	r2,1025
 4001360:	10846b04 	addi	r2,r2,4524
 4001364:	11000017 	ldw	r4,0(r2)
 4001368:	20c0012e 	bgeu	r4,r3,4001370 <_malloc_r+0x474>
 400136c:	10c00015 	stw	r3,0(r2)
 4001370:	00810074 	movhi	r2,1025
 4001374:	10846a04 	addi	r2,r2,4520
 4001378:	11000017 	ldw	r4,0(r2)
 400137c:	9c000217 	ldw	r16,8(r19)
 4001380:	20c0012e 	bgeu	r4,r3,4001388 <_malloc_r+0x48c>
 4001384:	10c00015 	stw	r3,0(r2)
 4001388:	80c00117 	ldw	r3,4(r16)
 400138c:	00bfff04 	movi	r2,-4
 4001390:	1886703a 	and	r3,r3,r2
 4001394:	1c45c83a 	sub	r2,r3,r17
 4001398:	1c400236 	bltu	r3,r17,40013a4 <_malloc_r+0x4a8>
 400139c:	00c003c4 	movi	r3,15
 40013a0:	18800416 	blt	r3,r2,40013b4 <_malloc_r+0x4b8>
 40013a4:	9009883a 	mov	r4,r18
 40013a8:	4003cf40 	call	4003cf4 <__malloc_unlock>
 40013ac:	0005883a 	mov	r2,zero
 40013b0:	003f7b06 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 40013b4:	88c00054 	ori	r3,r17,1
 40013b8:	80c00115 	stw	r3,4(r16)
 40013bc:	8463883a 	add	r17,r16,r17
 40013c0:	10800054 	ori	r2,r2,1
 40013c4:	9c400215 	stw	r17,8(r19)
 40013c8:	88800115 	stw	r2,4(r17)
 40013cc:	9009883a 	mov	r4,r18
 40013d0:	4003cf40 	call	4003cf4 <__malloc_unlock>
 40013d4:	80800204 	addi	r2,r16,8
 40013d8:	003f7106 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 40013dc:	00c00504 	movi	r3,20
 40013e0:	18804a2e 	bgeu	r3,r2,400150c <_malloc_r+0x610>
 40013e4:	00c01504 	movi	r3,84
 40013e8:	18806e36 	bltu	r3,r2,40015a4 <_malloc_r+0x6a8>
 40013ec:	8804d33a 	srli	r2,r17,12
 40013f0:	12001bc4 	addi	r8,r2,111
 40013f4:	11c01b84 	addi	r7,r2,110
 40013f8:	4209883a 	add	r4,r8,r8
 40013fc:	003edd06 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 4001400:	3804d27a 	srli	r2,r7,9
 4001404:	00c00104 	movi	r3,4
 4001408:	1880442e 	bgeu	r3,r2,400151c <_malloc_r+0x620>
 400140c:	00c00504 	movi	r3,20
 4001410:	18808136 	bltu	r3,r2,4001618 <_malloc_r+0x71c>
 4001414:	11401704 	addi	r5,r2,92
 4001418:	10c016c4 	addi	r3,r2,91
 400141c:	294b883a 	add	r5,r5,r5
 4001420:	294b883a 	add	r5,r5,r5
 4001424:	294b883a 	add	r5,r5,r5
 4001428:	994b883a 	add	r5,r19,r5
 400142c:	28800017 	ldw	r2,0(r5)
 4001430:	01810074 	movhi	r6,1025
 4001434:	297ffe04 	addi	r5,r5,-8
 4001438:	31b7f904 	addi	r6,r6,-8220
 400143c:	28806526 	beq	r5,r2,40015d4 <_malloc_r+0x6d8>
 4001440:	01bfff04 	movi	r6,-4
 4001444:	10c00117 	ldw	r3,4(r2)
 4001448:	1986703a 	and	r3,r3,r6
 400144c:	38c0022e 	bgeu	r7,r3,4001458 <_malloc_r+0x55c>
 4001450:	10800217 	ldw	r2,8(r2)
 4001454:	28bffb1e 	bne	r5,r2,4001444 <__alt_mem_onchip_memory2_0+0xfbfff444>
 4001458:	11400317 	ldw	r5,12(r2)
 400145c:	98c00117 	ldw	r3,4(r19)
 4001460:	81400315 	stw	r5,12(r16)
 4001464:	80800215 	stw	r2,8(r16)
 4001468:	2c000215 	stw	r16,8(r5)
 400146c:	14000315 	stw	r16,12(r2)
 4001470:	003ef806 	br	4001054 <__alt_mem_onchip_memory2_0+0xfbfff054>
 4001474:	88c00054 	ori	r3,r17,1
 4001478:	80c00115 	stw	r3,4(r16)
 400147c:	8463883a 	add	r17,r16,r17
 4001480:	34400515 	stw	r17,20(r6)
 4001484:	34400415 	stw	r17,16(r6)
 4001488:	10c00054 	ori	r3,r2,1
 400148c:	8a000315 	stw	r8,12(r17)
 4001490:	8a000215 	stw	r8,8(r17)
 4001494:	88c00115 	stw	r3,4(r17)
 4001498:	88a3883a 	add	r17,r17,r2
 400149c:	88800015 	stw	r2,0(r17)
 40014a0:	9009883a 	mov	r4,r18
 40014a4:	4003cf40 	call	4003cf4 <__malloc_unlock>
 40014a8:	80800204 	addi	r2,r16,8
 40014ac:	003f3c06 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 40014b0:	30c00117 	ldw	r3,4(r6)
 40014b4:	003ee706 	br	4001054 <__alt_mem_onchip_memory2_0+0xfbfff054>
 40014b8:	5ac00044 	addi	r11,r11,1
 40014bc:	588000cc 	andi	r2,r11,3
 40014c0:	31800204 	addi	r6,r6,8
 40014c4:	103efd1e 	bne	r2,zero,40010bc <__alt_mem_onchip_memory2_0+0xfbfff0bc>
 40014c8:	00002406 	br	400155c <_malloc_r+0x660>
 40014cc:	14000317 	ldw	r16,12(r2)
 40014d0:	143f251e 	bne	r2,r16,4001168 <__alt_mem_onchip_memory2_0+0xfbfff168>
 40014d4:	21000084 	addi	r4,r4,2
 40014d8:	003ebc06 	br	4000fcc <__alt_mem_onchip_memory2_0+0xfbffefcc>
 40014dc:	8085883a 	add	r2,r16,r2
 40014e0:	10c00117 	ldw	r3,4(r2)
 40014e4:	81000317 	ldw	r4,12(r16)
 40014e8:	81400217 	ldw	r5,8(r16)
 40014ec:	18c00054 	ori	r3,r3,1
 40014f0:	10c00115 	stw	r3,4(r2)
 40014f4:	29000315 	stw	r4,12(r5)
 40014f8:	21400215 	stw	r5,8(r4)
 40014fc:	9009883a 	mov	r4,r18
 4001500:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4001504:	80800204 	addi	r2,r16,8
 4001508:	003f2506 	br	40011a0 <__alt_mem_onchip_memory2_0+0xfbfff1a0>
 400150c:	12001704 	addi	r8,r2,92
 4001510:	11c016c4 	addi	r7,r2,91
 4001514:	4209883a 	add	r4,r8,r8
 4001518:	003e9606 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 400151c:	3804d1ba 	srli	r2,r7,6
 4001520:	11400e44 	addi	r5,r2,57
 4001524:	10c00e04 	addi	r3,r2,56
 4001528:	294b883a 	add	r5,r5,r5
 400152c:	003fbc06 	br	4001420 <__alt_mem_onchip_memory2_0+0xfbfff420>
 4001530:	84ff5926 	beq	r16,r19,4001298 <__alt_mem_onchip_memory2_0+0xfbfff298>
 4001534:	00810074 	movhi	r2,1025
 4001538:	10b7f904 	addi	r2,r2,-8220
 400153c:	14000217 	ldw	r16,8(r2)
 4001540:	00bfff04 	movi	r2,-4
 4001544:	80c00117 	ldw	r3,4(r16)
 4001548:	1886703a 	and	r3,r3,r2
 400154c:	003f9106 	br	4001394 <__alt_mem_onchip_memory2_0+0xfbfff394>
 4001550:	60800217 	ldw	r2,8(r12)
 4001554:	213fffc4 	addi	r4,r4,-1
 4001558:	1300651e 	bne	r2,r12,40016f0 <_malloc_r+0x7f4>
 400155c:	208000cc 	andi	r2,r4,3
 4001560:	633ffe04 	addi	r12,r12,-8
 4001564:	103ffa1e 	bne	r2,zero,4001550 <__alt_mem_onchip_memory2_0+0xfbfff550>
 4001568:	98800117 	ldw	r2,4(r19)
 400156c:	0146303a 	nor	r3,zero,r5
 4001570:	1884703a 	and	r2,r3,r2
 4001574:	98800115 	stw	r2,4(r19)
 4001578:	294b883a 	add	r5,r5,r5
 400157c:	117f2836 	bltu	r2,r5,4001220 <__alt_mem_onchip_memory2_0+0xfbfff220>
 4001580:	283f2726 	beq	r5,zero,4001220 <__alt_mem_onchip_memory2_0+0xfbfff220>
 4001584:	2886703a 	and	r3,r5,r2
 4001588:	5809883a 	mov	r4,r11
 400158c:	183ec31e 	bne	r3,zero,400109c <__alt_mem_onchip_memory2_0+0xfbfff09c>
 4001590:	294b883a 	add	r5,r5,r5
 4001594:	2886703a 	and	r3,r5,r2
 4001598:	21000104 	addi	r4,r4,4
 400159c:	183ffc26 	beq	r3,zero,4001590 <__alt_mem_onchip_memory2_0+0xfbfff590>
 40015a0:	003ebe06 	br	400109c <__alt_mem_onchip_memory2_0+0xfbfff09c>
 40015a4:	00c05504 	movi	r3,340
 40015a8:	18801236 	bltu	r3,r2,40015f4 <_malloc_r+0x6f8>
 40015ac:	8804d3fa 	srli	r2,r17,15
 40015b0:	12001e04 	addi	r8,r2,120
 40015b4:	11c01dc4 	addi	r7,r2,119
 40015b8:	4209883a 	add	r4,r8,r8
 40015bc:	003e6d06 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 40015c0:	00c40004 	movi	r3,4096
 40015c4:	003f4606 	br	40012e0 <__alt_mem_onchip_memory2_0+0xfbfff2e0>
 40015c8:	00800044 	movi	r2,1
 40015cc:	a0800115 	stw	r2,4(r20)
 40015d0:	003f7406 	br	40013a4 <__alt_mem_onchip_memory2_0+0xfbfff3a4>
 40015d4:	1805d0ba 	srai	r2,r3,2
 40015d8:	01c00044 	movi	r7,1
 40015dc:	30c00117 	ldw	r3,4(r6)
 40015e0:	388e983a 	sll	r7,r7,r2
 40015e4:	2805883a 	mov	r2,r5
 40015e8:	38c6b03a 	or	r3,r7,r3
 40015ec:	30c00115 	stw	r3,4(r6)
 40015f0:	003f9b06 	br	4001460 <__alt_mem_onchip_memory2_0+0xfbfff460>
 40015f4:	00c15504 	movi	r3,1364
 40015f8:	18801a36 	bltu	r3,r2,4001664 <_malloc_r+0x768>
 40015fc:	8804d4ba 	srli	r2,r17,18
 4001600:	12001f44 	addi	r8,r2,125
 4001604:	11c01f04 	addi	r7,r2,124
 4001608:	4209883a 	add	r4,r8,r8
 400160c:	003e5906 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 4001610:	ad400404 	addi	r21,r21,16
 4001614:	003f1706 	br	4001274 <__alt_mem_onchip_memory2_0+0xfbfff274>
 4001618:	00c01504 	movi	r3,84
 400161c:	18802336 	bltu	r3,r2,40016ac <_malloc_r+0x7b0>
 4001620:	3804d33a 	srli	r2,r7,12
 4001624:	11401bc4 	addi	r5,r2,111
 4001628:	10c01b84 	addi	r3,r2,110
 400162c:	294b883a 	add	r5,r5,r5
 4001630:	003f7b06 	br	4001420 <__alt_mem_onchip_memory2_0+0xfbfff420>
 4001634:	9c000217 	ldw	r16,8(r19)
 4001638:	00bfff04 	movi	r2,-4
 400163c:	80c00117 	ldw	r3,4(r16)
 4001640:	1886703a 	and	r3,r3,r2
 4001644:	003f5306 	br	4001394 <__alt_mem_onchip_memory2_0+0xfbfff394>
 4001648:	3083ffcc 	andi	r2,r6,4095
 400164c:	103f181e 	bne	r2,zero,40012b0 <__alt_mem_onchip_memory2_0+0xfbfff2b0>
 4001650:	99000217 	ldw	r4,8(r19)
 4001654:	b545883a 	add	r2,r22,r21
 4001658:	10800054 	ori	r2,r2,1
 400165c:	20800115 	stw	r2,4(r4)
 4001660:	003f3e06 	br	400135c <__alt_mem_onchip_memory2_0+0xfbfff35c>
 4001664:	01003f84 	movi	r4,254
 4001668:	02001fc4 	movi	r8,127
 400166c:	01c01f84 	movi	r7,126
 4001670:	003e4006 	br	4000f74 <__alt_mem_onchip_memory2_0+0xfbffef74>
 4001674:	00810074 	movhi	r2,1025
 4001678:	10bd8204 	addi	r2,r2,-2552
 400167c:	15000015 	stw	r20,0(r2)
 4001680:	003f1106 	br	40012c8 <__alt_mem_onchip_memory2_0+0xfbfff2c8>
 4001684:	00800044 	movi	r2,1
 4001688:	002b883a 	mov	r21,zero
 400168c:	003f1f06 	br	400130c <__alt_mem_onchip_memory2_0+0xfbfff30c>
 4001690:	81400204 	addi	r5,r16,8
 4001694:	9009883a 	mov	r4,r18
 4001698:	40029840 	call	4002984 <_free_r>
 400169c:	00810074 	movhi	r2,1025
 40016a0:	10848e04 	addi	r2,r2,4664
 40016a4:	10c00017 	ldw	r3,0(r2)
 40016a8:	003f2c06 	br	400135c <__alt_mem_onchip_memory2_0+0xfbfff35c>
 40016ac:	00c05504 	movi	r3,340
 40016b0:	18800536 	bltu	r3,r2,40016c8 <_malloc_r+0x7cc>
 40016b4:	3804d3fa 	srli	r2,r7,15
 40016b8:	11401e04 	addi	r5,r2,120
 40016bc:	10c01dc4 	addi	r3,r2,119
 40016c0:	294b883a 	add	r5,r5,r5
 40016c4:	003f5606 	br	4001420 <__alt_mem_onchip_memory2_0+0xfbfff420>
 40016c8:	00c15504 	movi	r3,1364
 40016cc:	18800536 	bltu	r3,r2,40016e4 <_malloc_r+0x7e8>
 40016d0:	3804d4ba 	srli	r2,r7,18
 40016d4:	11401f44 	addi	r5,r2,125
 40016d8:	10c01f04 	addi	r3,r2,124
 40016dc:	294b883a 	add	r5,r5,r5
 40016e0:	003f4f06 	br	4001420 <__alt_mem_onchip_memory2_0+0xfbfff420>
 40016e4:	01403f84 	movi	r5,254
 40016e8:	00c01f84 	movi	r3,126
 40016ec:	003f4c06 	br	4001420 <__alt_mem_onchip_memory2_0+0xfbfff420>
 40016f0:	98800117 	ldw	r2,4(r19)
 40016f4:	003fa006 	br	4001578 <__alt_mem_onchip_memory2_0+0xfbfff578>
 40016f8:	8808d0fa 	srli	r4,r17,3
 40016fc:	20800044 	addi	r2,r4,1
 4001700:	1085883a 	add	r2,r2,r2
 4001704:	003e9006 	br	4001148 <__alt_mem_onchip_memory2_0+0xfbfff148>

04001708 <memchr>:
 4001708:	208000cc 	andi	r2,r4,3
 400170c:	280f883a 	mov	r7,r5
 4001710:	10003426 	beq	r2,zero,40017e4 <memchr+0xdc>
 4001714:	30bfffc4 	addi	r2,r6,-1
 4001718:	30001a26 	beq	r6,zero,4001784 <memchr+0x7c>
 400171c:	20c00003 	ldbu	r3,0(r4)
 4001720:	29803fcc 	andi	r6,r5,255
 4001724:	30c0051e 	bne	r6,r3,400173c <memchr+0x34>
 4001728:	00001806 	br	400178c <memchr+0x84>
 400172c:	10001526 	beq	r2,zero,4001784 <memchr+0x7c>
 4001730:	20c00003 	ldbu	r3,0(r4)
 4001734:	10bfffc4 	addi	r2,r2,-1
 4001738:	30c01426 	beq	r6,r3,400178c <memchr+0x84>
 400173c:	21000044 	addi	r4,r4,1
 4001740:	20c000cc 	andi	r3,r4,3
 4001744:	183ff91e 	bne	r3,zero,400172c <__alt_mem_onchip_memory2_0+0xfbfff72c>
 4001748:	020000c4 	movi	r8,3
 400174c:	40801136 	bltu	r8,r2,4001794 <memchr+0x8c>
 4001750:	10000c26 	beq	r2,zero,4001784 <memchr+0x7c>
 4001754:	20c00003 	ldbu	r3,0(r4)
 4001758:	29403fcc 	andi	r5,r5,255
 400175c:	28c00b26 	beq	r5,r3,400178c <memchr+0x84>
 4001760:	20c00044 	addi	r3,r4,1
 4001764:	39803fcc 	andi	r6,r7,255
 4001768:	2089883a 	add	r4,r4,r2
 400176c:	00000306 	br	400177c <memchr+0x74>
 4001770:	18c00044 	addi	r3,r3,1
 4001774:	197fffc3 	ldbu	r5,-1(r3)
 4001778:	31400526 	beq	r6,r5,4001790 <memchr+0x88>
 400177c:	1805883a 	mov	r2,r3
 4001780:	20fffb1e 	bne	r4,r3,4001770 <__alt_mem_onchip_memory2_0+0xfbfff770>
 4001784:	0005883a 	mov	r2,zero
 4001788:	f800283a 	ret
 400178c:	2005883a 	mov	r2,r4
 4001790:	f800283a 	ret
 4001794:	28c03fcc 	andi	r3,r5,255
 4001798:	1812923a 	slli	r9,r3,8
 400179c:	02ffbff4 	movhi	r11,65279
 40017a0:	02a02074 	movhi	r10,32897
 40017a4:	48d2b03a 	or	r9,r9,r3
 40017a8:	4806943a 	slli	r3,r9,16
 40017ac:	5affbfc4 	addi	r11,r11,-257
 40017b0:	52a02004 	addi	r10,r10,-32640
 40017b4:	48d2b03a 	or	r9,r9,r3
 40017b8:	20c00017 	ldw	r3,0(r4)
 40017bc:	48c6f03a 	xor	r3,r9,r3
 40017c0:	1acd883a 	add	r6,r3,r11
 40017c4:	00c6303a 	nor	r3,zero,r3
 40017c8:	30c6703a 	and	r3,r6,r3
 40017cc:	1a86703a 	and	r3,r3,r10
 40017d0:	183fe01e 	bne	r3,zero,4001754 <__alt_mem_onchip_memory2_0+0xfbfff754>
 40017d4:	10bfff04 	addi	r2,r2,-4
 40017d8:	21000104 	addi	r4,r4,4
 40017dc:	40bff636 	bltu	r8,r2,40017b8 <__alt_mem_onchip_memory2_0+0xfbfff7b8>
 40017e0:	003fdb06 	br	4001750 <__alt_mem_onchip_memory2_0+0xfbfff750>
 40017e4:	3005883a 	mov	r2,r6
 40017e8:	003fd706 	br	4001748 <__alt_mem_onchip_memory2_0+0xfbfff748>

040017ec <memcpy>:
 40017ec:	defffd04 	addi	sp,sp,-12
 40017f0:	dfc00215 	stw	ra,8(sp)
 40017f4:	dc400115 	stw	r17,4(sp)
 40017f8:	dc000015 	stw	r16,0(sp)
 40017fc:	00c003c4 	movi	r3,15
 4001800:	2005883a 	mov	r2,r4
 4001804:	1980452e 	bgeu	r3,r6,400191c <memcpy+0x130>
 4001808:	2906b03a 	or	r3,r5,r4
 400180c:	18c000cc 	andi	r3,r3,3
 4001810:	1800441e 	bne	r3,zero,4001924 <memcpy+0x138>
 4001814:	347ffc04 	addi	r17,r6,-16
 4001818:	8822d13a 	srli	r17,r17,4
 400181c:	28c00104 	addi	r3,r5,4
 4001820:	23400104 	addi	r13,r4,4
 4001824:	8820913a 	slli	r16,r17,4
 4001828:	2b000204 	addi	r12,r5,8
 400182c:	22c00204 	addi	r11,r4,8
 4001830:	84000504 	addi	r16,r16,20
 4001834:	2a800304 	addi	r10,r5,12
 4001838:	22400304 	addi	r9,r4,12
 400183c:	2c21883a 	add	r16,r5,r16
 4001840:	2811883a 	mov	r8,r5
 4001844:	200f883a 	mov	r7,r4
 4001848:	41000017 	ldw	r4,0(r8)
 400184c:	1fc00017 	ldw	ra,0(r3)
 4001850:	63c00017 	ldw	r15,0(r12)
 4001854:	39000015 	stw	r4,0(r7)
 4001858:	53800017 	ldw	r14,0(r10)
 400185c:	6fc00015 	stw	ra,0(r13)
 4001860:	5bc00015 	stw	r15,0(r11)
 4001864:	4b800015 	stw	r14,0(r9)
 4001868:	18c00404 	addi	r3,r3,16
 400186c:	39c00404 	addi	r7,r7,16
 4001870:	42000404 	addi	r8,r8,16
 4001874:	6b400404 	addi	r13,r13,16
 4001878:	63000404 	addi	r12,r12,16
 400187c:	5ac00404 	addi	r11,r11,16
 4001880:	52800404 	addi	r10,r10,16
 4001884:	4a400404 	addi	r9,r9,16
 4001888:	1c3fef1e 	bne	r3,r16,4001848 <__alt_mem_onchip_memory2_0+0xfbfff848>
 400188c:	89c00044 	addi	r7,r17,1
 4001890:	380e913a 	slli	r7,r7,4
 4001894:	310003cc 	andi	r4,r6,15
 4001898:	02c000c4 	movi	r11,3
 400189c:	11c7883a 	add	r3,r2,r7
 40018a0:	29cb883a 	add	r5,r5,r7
 40018a4:	5900212e 	bgeu	r11,r4,400192c <memcpy+0x140>
 40018a8:	1813883a 	mov	r9,r3
 40018ac:	2811883a 	mov	r8,r5
 40018b0:	200f883a 	mov	r7,r4
 40018b4:	42800017 	ldw	r10,0(r8)
 40018b8:	4a400104 	addi	r9,r9,4
 40018bc:	39ffff04 	addi	r7,r7,-4
 40018c0:	4abfff15 	stw	r10,-4(r9)
 40018c4:	42000104 	addi	r8,r8,4
 40018c8:	59fffa36 	bltu	r11,r7,40018b4 <__alt_mem_onchip_memory2_0+0xfbfff8b4>
 40018cc:	213fff04 	addi	r4,r4,-4
 40018d0:	2008d0ba 	srli	r4,r4,2
 40018d4:	318000cc 	andi	r6,r6,3
 40018d8:	21000044 	addi	r4,r4,1
 40018dc:	2109883a 	add	r4,r4,r4
 40018e0:	2109883a 	add	r4,r4,r4
 40018e4:	1907883a 	add	r3,r3,r4
 40018e8:	290b883a 	add	r5,r5,r4
 40018ec:	30000626 	beq	r6,zero,4001908 <memcpy+0x11c>
 40018f0:	198d883a 	add	r6,r3,r6
 40018f4:	29c00003 	ldbu	r7,0(r5)
 40018f8:	18c00044 	addi	r3,r3,1
 40018fc:	29400044 	addi	r5,r5,1
 4001900:	19ffffc5 	stb	r7,-1(r3)
 4001904:	19bffb1e 	bne	r3,r6,40018f4 <__alt_mem_onchip_memory2_0+0xfbfff8f4>
 4001908:	dfc00217 	ldw	ra,8(sp)
 400190c:	dc400117 	ldw	r17,4(sp)
 4001910:	dc000017 	ldw	r16,0(sp)
 4001914:	dec00304 	addi	sp,sp,12
 4001918:	f800283a 	ret
 400191c:	2007883a 	mov	r3,r4
 4001920:	003ff206 	br	40018ec <__alt_mem_onchip_memory2_0+0xfbfff8ec>
 4001924:	2007883a 	mov	r3,r4
 4001928:	003ff106 	br	40018f0 <__alt_mem_onchip_memory2_0+0xfbfff8f0>
 400192c:	200d883a 	mov	r6,r4
 4001930:	003fee06 	br	40018ec <__alt_mem_onchip_memory2_0+0xfbfff8ec>

04001934 <memmove>:
 4001934:	2005883a 	mov	r2,r4
 4001938:	29000b2e 	bgeu	r5,r4,4001968 <memmove+0x34>
 400193c:	298f883a 	add	r7,r5,r6
 4001940:	21c0092e 	bgeu	r4,r7,4001968 <memmove+0x34>
 4001944:	2187883a 	add	r3,r4,r6
 4001948:	198bc83a 	sub	r5,r3,r6
 400194c:	30004826 	beq	r6,zero,4001a70 <memmove+0x13c>
 4001950:	39ffffc4 	addi	r7,r7,-1
 4001954:	39000003 	ldbu	r4,0(r7)
 4001958:	18ffffc4 	addi	r3,r3,-1
 400195c:	19000005 	stb	r4,0(r3)
 4001960:	28fffb1e 	bne	r5,r3,4001950 <__alt_mem_onchip_memory2_0+0xfbfff950>
 4001964:	f800283a 	ret
 4001968:	00c003c4 	movi	r3,15
 400196c:	1980412e 	bgeu	r3,r6,4001a74 <memmove+0x140>
 4001970:	2886b03a 	or	r3,r5,r2
 4001974:	18c000cc 	andi	r3,r3,3
 4001978:	1800401e 	bne	r3,zero,4001a7c <memmove+0x148>
 400197c:	33fffc04 	addi	r15,r6,-16
 4001980:	781ed13a 	srli	r15,r15,4
 4001984:	28c00104 	addi	r3,r5,4
 4001988:	13400104 	addi	r13,r2,4
 400198c:	781c913a 	slli	r14,r15,4
 4001990:	2b000204 	addi	r12,r5,8
 4001994:	12c00204 	addi	r11,r2,8
 4001998:	73800504 	addi	r14,r14,20
 400199c:	2a800304 	addi	r10,r5,12
 40019a0:	12400304 	addi	r9,r2,12
 40019a4:	2b9d883a 	add	r14,r5,r14
 40019a8:	2811883a 	mov	r8,r5
 40019ac:	100f883a 	mov	r7,r2
 40019b0:	41000017 	ldw	r4,0(r8)
 40019b4:	39c00404 	addi	r7,r7,16
 40019b8:	18c00404 	addi	r3,r3,16
 40019bc:	393ffc15 	stw	r4,-16(r7)
 40019c0:	193ffc17 	ldw	r4,-16(r3)
 40019c4:	6b400404 	addi	r13,r13,16
 40019c8:	5ac00404 	addi	r11,r11,16
 40019cc:	693ffc15 	stw	r4,-16(r13)
 40019d0:	61000017 	ldw	r4,0(r12)
 40019d4:	4a400404 	addi	r9,r9,16
 40019d8:	42000404 	addi	r8,r8,16
 40019dc:	593ffc15 	stw	r4,-16(r11)
 40019e0:	51000017 	ldw	r4,0(r10)
 40019e4:	63000404 	addi	r12,r12,16
 40019e8:	52800404 	addi	r10,r10,16
 40019ec:	493ffc15 	stw	r4,-16(r9)
 40019f0:	1bbfef1e 	bne	r3,r14,40019b0 <__alt_mem_onchip_memory2_0+0xfbfff9b0>
 40019f4:	79000044 	addi	r4,r15,1
 40019f8:	2008913a 	slli	r4,r4,4
 40019fc:	328003cc 	andi	r10,r6,15
 4001a00:	02c000c4 	movi	r11,3
 4001a04:	1107883a 	add	r3,r2,r4
 4001a08:	290b883a 	add	r5,r5,r4
 4001a0c:	5a801e2e 	bgeu	r11,r10,4001a88 <memmove+0x154>
 4001a10:	1813883a 	mov	r9,r3
 4001a14:	2811883a 	mov	r8,r5
 4001a18:	500f883a 	mov	r7,r10
 4001a1c:	41000017 	ldw	r4,0(r8)
 4001a20:	4a400104 	addi	r9,r9,4
 4001a24:	39ffff04 	addi	r7,r7,-4
 4001a28:	493fff15 	stw	r4,-4(r9)
 4001a2c:	42000104 	addi	r8,r8,4
 4001a30:	59fffa36 	bltu	r11,r7,4001a1c <__alt_mem_onchip_memory2_0+0xfbfffa1c>
 4001a34:	513fff04 	addi	r4,r10,-4
 4001a38:	2008d0ba 	srli	r4,r4,2
 4001a3c:	318000cc 	andi	r6,r6,3
 4001a40:	21000044 	addi	r4,r4,1
 4001a44:	2109883a 	add	r4,r4,r4
 4001a48:	2109883a 	add	r4,r4,r4
 4001a4c:	1907883a 	add	r3,r3,r4
 4001a50:	290b883a 	add	r5,r5,r4
 4001a54:	30000b26 	beq	r6,zero,4001a84 <memmove+0x150>
 4001a58:	198d883a 	add	r6,r3,r6
 4001a5c:	29c00003 	ldbu	r7,0(r5)
 4001a60:	18c00044 	addi	r3,r3,1
 4001a64:	29400044 	addi	r5,r5,1
 4001a68:	19ffffc5 	stb	r7,-1(r3)
 4001a6c:	19bffb1e 	bne	r3,r6,4001a5c <__alt_mem_onchip_memory2_0+0xfbfffa5c>
 4001a70:	f800283a 	ret
 4001a74:	1007883a 	mov	r3,r2
 4001a78:	003ff606 	br	4001a54 <__alt_mem_onchip_memory2_0+0xfbfffa54>
 4001a7c:	1007883a 	mov	r3,r2
 4001a80:	003ff506 	br	4001a58 <__alt_mem_onchip_memory2_0+0xfbfffa58>
 4001a84:	f800283a 	ret
 4001a88:	500d883a 	mov	r6,r10
 4001a8c:	003ff106 	br	4001a54 <__alt_mem_onchip_memory2_0+0xfbfffa54>

04001a90 <memset>:
 4001a90:	20c000cc 	andi	r3,r4,3
 4001a94:	2005883a 	mov	r2,r4
 4001a98:	18004426 	beq	r3,zero,4001bac <memset+0x11c>
 4001a9c:	31ffffc4 	addi	r7,r6,-1
 4001aa0:	30004026 	beq	r6,zero,4001ba4 <memset+0x114>
 4001aa4:	2813883a 	mov	r9,r5
 4001aa8:	200d883a 	mov	r6,r4
 4001aac:	2007883a 	mov	r3,r4
 4001ab0:	00000406 	br	4001ac4 <memset+0x34>
 4001ab4:	3a3fffc4 	addi	r8,r7,-1
 4001ab8:	31800044 	addi	r6,r6,1
 4001abc:	38003926 	beq	r7,zero,4001ba4 <memset+0x114>
 4001ac0:	400f883a 	mov	r7,r8
 4001ac4:	18c00044 	addi	r3,r3,1
 4001ac8:	32400005 	stb	r9,0(r6)
 4001acc:	1a0000cc 	andi	r8,r3,3
 4001ad0:	403ff81e 	bne	r8,zero,4001ab4 <__alt_mem_onchip_memory2_0+0xfbfffab4>
 4001ad4:	010000c4 	movi	r4,3
 4001ad8:	21c02d2e 	bgeu	r4,r7,4001b90 <memset+0x100>
 4001adc:	29003fcc 	andi	r4,r5,255
 4001ae0:	200c923a 	slli	r6,r4,8
 4001ae4:	3108b03a 	or	r4,r6,r4
 4001ae8:	200c943a 	slli	r6,r4,16
 4001aec:	218cb03a 	or	r6,r4,r6
 4001af0:	010003c4 	movi	r4,15
 4001af4:	21c0182e 	bgeu	r4,r7,4001b58 <memset+0xc8>
 4001af8:	3b3ffc04 	addi	r12,r7,-16
 4001afc:	6018d13a 	srli	r12,r12,4
 4001b00:	1a000104 	addi	r8,r3,4
 4001b04:	1ac00204 	addi	r11,r3,8
 4001b08:	6008913a 	slli	r4,r12,4
 4001b0c:	1a800304 	addi	r10,r3,12
 4001b10:	1813883a 	mov	r9,r3
 4001b14:	21000504 	addi	r4,r4,20
 4001b18:	1909883a 	add	r4,r3,r4
 4001b1c:	49800015 	stw	r6,0(r9)
 4001b20:	41800015 	stw	r6,0(r8)
 4001b24:	59800015 	stw	r6,0(r11)
 4001b28:	51800015 	stw	r6,0(r10)
 4001b2c:	42000404 	addi	r8,r8,16
 4001b30:	4a400404 	addi	r9,r9,16
 4001b34:	5ac00404 	addi	r11,r11,16
 4001b38:	52800404 	addi	r10,r10,16
 4001b3c:	413ff71e 	bne	r8,r4,4001b1c <__alt_mem_onchip_memory2_0+0xfbfffb1c>
 4001b40:	63000044 	addi	r12,r12,1
 4001b44:	6018913a 	slli	r12,r12,4
 4001b48:	39c003cc 	andi	r7,r7,15
 4001b4c:	010000c4 	movi	r4,3
 4001b50:	1b07883a 	add	r3,r3,r12
 4001b54:	21c00e2e 	bgeu	r4,r7,4001b90 <memset+0x100>
 4001b58:	1813883a 	mov	r9,r3
 4001b5c:	3811883a 	mov	r8,r7
 4001b60:	010000c4 	movi	r4,3
 4001b64:	49800015 	stw	r6,0(r9)
 4001b68:	423fff04 	addi	r8,r8,-4
 4001b6c:	4a400104 	addi	r9,r9,4
 4001b70:	223ffc36 	bltu	r4,r8,4001b64 <__alt_mem_onchip_memory2_0+0xfbfffb64>
 4001b74:	393fff04 	addi	r4,r7,-4
 4001b78:	2008d0ba 	srli	r4,r4,2
 4001b7c:	39c000cc 	andi	r7,r7,3
 4001b80:	21000044 	addi	r4,r4,1
 4001b84:	2109883a 	add	r4,r4,r4
 4001b88:	2109883a 	add	r4,r4,r4
 4001b8c:	1907883a 	add	r3,r3,r4
 4001b90:	38000526 	beq	r7,zero,4001ba8 <memset+0x118>
 4001b94:	19cf883a 	add	r7,r3,r7
 4001b98:	19400005 	stb	r5,0(r3)
 4001b9c:	18c00044 	addi	r3,r3,1
 4001ba0:	38fffd1e 	bne	r7,r3,4001b98 <__alt_mem_onchip_memory2_0+0xfbfffb98>
 4001ba4:	f800283a 	ret
 4001ba8:	f800283a 	ret
 4001bac:	2007883a 	mov	r3,r4
 4001bb0:	300f883a 	mov	r7,r6
 4001bb4:	003fc706 	br	4001ad4 <__alt_mem_onchip_memory2_0+0xfbfffad4>

04001bb8 <_realloc_r>:
 4001bb8:	defff604 	addi	sp,sp,-40
 4001bbc:	dc800215 	stw	r18,8(sp)
 4001bc0:	dfc00915 	stw	ra,36(sp)
 4001bc4:	df000815 	stw	fp,32(sp)
 4001bc8:	ddc00715 	stw	r23,28(sp)
 4001bcc:	dd800615 	stw	r22,24(sp)
 4001bd0:	dd400515 	stw	r21,20(sp)
 4001bd4:	dd000415 	stw	r20,16(sp)
 4001bd8:	dcc00315 	stw	r19,12(sp)
 4001bdc:	dc400115 	stw	r17,4(sp)
 4001be0:	dc000015 	stw	r16,0(sp)
 4001be4:	3025883a 	mov	r18,r6
 4001be8:	2800b726 	beq	r5,zero,4001ec8 <_realloc_r+0x310>
 4001bec:	282b883a 	mov	r21,r5
 4001bf0:	2029883a 	mov	r20,r4
 4001bf4:	4003bd40 	call	4003bd4 <__malloc_lock>
 4001bf8:	a8bfff17 	ldw	r2,-4(r21)
 4001bfc:	043fff04 	movi	r16,-4
 4001c00:	90c002c4 	addi	r3,r18,11
 4001c04:	01000584 	movi	r4,22
 4001c08:	acfffe04 	addi	r19,r21,-8
 4001c0c:	1420703a 	and	r16,r2,r16
 4001c10:	20c0332e 	bgeu	r4,r3,4001ce0 <_realloc_r+0x128>
 4001c14:	047ffe04 	movi	r17,-8
 4001c18:	1c62703a 	and	r17,r3,r17
 4001c1c:	8807883a 	mov	r3,r17
 4001c20:	88005816 	blt	r17,zero,4001d84 <_realloc_r+0x1cc>
 4001c24:	8c805736 	bltu	r17,r18,4001d84 <_realloc_r+0x1cc>
 4001c28:	80c0300e 	bge	r16,r3,4001cec <_realloc_r+0x134>
 4001c2c:	07010074 	movhi	fp,1025
 4001c30:	e737f904 	addi	fp,fp,-8220
 4001c34:	e1c00217 	ldw	r7,8(fp)
 4001c38:	9c09883a 	add	r4,r19,r16
 4001c3c:	22000117 	ldw	r8,4(r4)
 4001c40:	21c06326 	beq	r4,r7,4001dd0 <_realloc_r+0x218>
 4001c44:	017fff84 	movi	r5,-2
 4001c48:	414a703a 	and	r5,r8,r5
 4001c4c:	214b883a 	add	r5,r4,r5
 4001c50:	29800117 	ldw	r6,4(r5)
 4001c54:	3180004c 	andi	r6,r6,1
 4001c58:	30003f26 	beq	r6,zero,4001d58 <_realloc_r+0x1a0>
 4001c5c:	1080004c 	andi	r2,r2,1
 4001c60:	10008326 	beq	r2,zero,4001e70 <_realloc_r+0x2b8>
 4001c64:	900b883a 	mov	r5,r18
 4001c68:	a009883a 	mov	r4,r20
 4001c6c:	4000efc0 	call	4000efc <_malloc_r>
 4001c70:	1025883a 	mov	r18,r2
 4001c74:	10011e26 	beq	r2,zero,40020f0 <_realloc_r+0x538>
 4001c78:	a93fff17 	ldw	r4,-4(r21)
 4001c7c:	10fffe04 	addi	r3,r2,-8
 4001c80:	00bfff84 	movi	r2,-2
 4001c84:	2084703a 	and	r2,r4,r2
 4001c88:	9885883a 	add	r2,r19,r2
 4001c8c:	1880ee26 	beq	r3,r2,4002048 <_realloc_r+0x490>
 4001c90:	81bfff04 	addi	r6,r16,-4
 4001c94:	00800904 	movi	r2,36
 4001c98:	1180b836 	bltu	r2,r6,4001f7c <_realloc_r+0x3c4>
 4001c9c:	00c004c4 	movi	r3,19
 4001ca0:	19809636 	bltu	r3,r6,4001efc <_realloc_r+0x344>
 4001ca4:	9005883a 	mov	r2,r18
 4001ca8:	a807883a 	mov	r3,r21
 4001cac:	19000017 	ldw	r4,0(r3)
 4001cb0:	11000015 	stw	r4,0(r2)
 4001cb4:	19000117 	ldw	r4,4(r3)
 4001cb8:	11000115 	stw	r4,4(r2)
 4001cbc:	18c00217 	ldw	r3,8(r3)
 4001cc0:	10c00215 	stw	r3,8(r2)
 4001cc4:	a80b883a 	mov	r5,r21
 4001cc8:	a009883a 	mov	r4,r20
 4001ccc:	40029840 	call	4002984 <_free_r>
 4001cd0:	a009883a 	mov	r4,r20
 4001cd4:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4001cd8:	9005883a 	mov	r2,r18
 4001cdc:	00001206 	br	4001d28 <_realloc_r+0x170>
 4001ce0:	00c00404 	movi	r3,16
 4001ce4:	1823883a 	mov	r17,r3
 4001ce8:	003fce06 	br	4001c24 <__alt_mem_onchip_memory2_0+0xfbfffc24>
 4001cec:	a825883a 	mov	r18,r21
 4001cf0:	8445c83a 	sub	r2,r16,r17
 4001cf4:	00c003c4 	movi	r3,15
 4001cf8:	18802636 	bltu	r3,r2,4001d94 <_realloc_r+0x1dc>
 4001cfc:	99800117 	ldw	r6,4(r19)
 4001d00:	9c07883a 	add	r3,r19,r16
 4001d04:	3180004c 	andi	r6,r6,1
 4001d08:	3420b03a 	or	r16,r6,r16
 4001d0c:	9c000115 	stw	r16,4(r19)
 4001d10:	18800117 	ldw	r2,4(r3)
 4001d14:	10800054 	ori	r2,r2,1
 4001d18:	18800115 	stw	r2,4(r3)
 4001d1c:	a009883a 	mov	r4,r20
 4001d20:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4001d24:	9005883a 	mov	r2,r18
 4001d28:	dfc00917 	ldw	ra,36(sp)
 4001d2c:	df000817 	ldw	fp,32(sp)
 4001d30:	ddc00717 	ldw	r23,28(sp)
 4001d34:	dd800617 	ldw	r22,24(sp)
 4001d38:	dd400517 	ldw	r21,20(sp)
 4001d3c:	dd000417 	ldw	r20,16(sp)
 4001d40:	dcc00317 	ldw	r19,12(sp)
 4001d44:	dc800217 	ldw	r18,8(sp)
 4001d48:	dc400117 	ldw	r17,4(sp)
 4001d4c:	dc000017 	ldw	r16,0(sp)
 4001d50:	dec00a04 	addi	sp,sp,40
 4001d54:	f800283a 	ret
 4001d58:	017fff04 	movi	r5,-4
 4001d5c:	414a703a 	and	r5,r8,r5
 4001d60:	814d883a 	add	r6,r16,r5
 4001d64:	30c01f16 	blt	r6,r3,4001de4 <_realloc_r+0x22c>
 4001d68:	20800317 	ldw	r2,12(r4)
 4001d6c:	20c00217 	ldw	r3,8(r4)
 4001d70:	a825883a 	mov	r18,r21
 4001d74:	3021883a 	mov	r16,r6
 4001d78:	18800315 	stw	r2,12(r3)
 4001d7c:	10c00215 	stw	r3,8(r2)
 4001d80:	003fdb06 	br	4001cf0 <__alt_mem_onchip_memory2_0+0xfbfffcf0>
 4001d84:	00800304 	movi	r2,12
 4001d88:	a0800015 	stw	r2,0(r20)
 4001d8c:	0005883a 	mov	r2,zero
 4001d90:	003fe506 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4001d94:	98c00117 	ldw	r3,4(r19)
 4001d98:	9c4b883a 	add	r5,r19,r17
 4001d9c:	11000054 	ori	r4,r2,1
 4001da0:	18c0004c 	andi	r3,r3,1
 4001da4:	1c62b03a 	or	r17,r3,r17
 4001da8:	9c400115 	stw	r17,4(r19)
 4001dac:	29000115 	stw	r4,4(r5)
 4001db0:	2885883a 	add	r2,r5,r2
 4001db4:	10c00117 	ldw	r3,4(r2)
 4001db8:	29400204 	addi	r5,r5,8
 4001dbc:	a009883a 	mov	r4,r20
 4001dc0:	18c00054 	ori	r3,r3,1
 4001dc4:	10c00115 	stw	r3,4(r2)
 4001dc8:	40029840 	call	4002984 <_free_r>
 4001dcc:	003fd306 	br	4001d1c <__alt_mem_onchip_memory2_0+0xfbfffd1c>
 4001dd0:	017fff04 	movi	r5,-4
 4001dd4:	414a703a 	and	r5,r8,r5
 4001dd8:	89800404 	addi	r6,r17,16
 4001ddc:	8151883a 	add	r8,r16,r5
 4001de0:	4180590e 	bge	r8,r6,4001f48 <_realloc_r+0x390>
 4001de4:	1080004c 	andi	r2,r2,1
 4001de8:	103f9e1e 	bne	r2,zero,4001c64 <__alt_mem_onchip_memory2_0+0xfbfffc64>
 4001dec:	adbffe17 	ldw	r22,-8(r21)
 4001df0:	00bfff04 	movi	r2,-4
 4001df4:	9dadc83a 	sub	r22,r19,r22
 4001df8:	b1800117 	ldw	r6,4(r22)
 4001dfc:	3084703a 	and	r2,r6,r2
 4001e00:	20002026 	beq	r4,zero,4001e84 <_realloc_r+0x2cc>
 4001e04:	80af883a 	add	r23,r16,r2
 4001e08:	b96f883a 	add	r23,r23,r5
 4001e0c:	21c05f26 	beq	r4,r7,4001f8c <_realloc_r+0x3d4>
 4001e10:	b8c01c16 	blt	r23,r3,4001e84 <_realloc_r+0x2cc>
 4001e14:	20800317 	ldw	r2,12(r4)
 4001e18:	20c00217 	ldw	r3,8(r4)
 4001e1c:	81bfff04 	addi	r6,r16,-4
 4001e20:	01000904 	movi	r4,36
 4001e24:	18800315 	stw	r2,12(r3)
 4001e28:	10c00215 	stw	r3,8(r2)
 4001e2c:	b0c00217 	ldw	r3,8(r22)
 4001e30:	b0800317 	ldw	r2,12(r22)
 4001e34:	b4800204 	addi	r18,r22,8
 4001e38:	18800315 	stw	r2,12(r3)
 4001e3c:	10c00215 	stw	r3,8(r2)
 4001e40:	21801b36 	bltu	r4,r6,4001eb0 <_realloc_r+0x2f8>
 4001e44:	008004c4 	movi	r2,19
 4001e48:	1180352e 	bgeu	r2,r6,4001f20 <_realloc_r+0x368>
 4001e4c:	a8800017 	ldw	r2,0(r21)
 4001e50:	b0800215 	stw	r2,8(r22)
 4001e54:	a8800117 	ldw	r2,4(r21)
 4001e58:	b0800315 	stw	r2,12(r22)
 4001e5c:	008006c4 	movi	r2,27
 4001e60:	11807f36 	bltu	r2,r6,4002060 <_realloc_r+0x4a8>
 4001e64:	b0800404 	addi	r2,r22,16
 4001e68:	ad400204 	addi	r21,r21,8
 4001e6c:	00002d06 	br	4001f24 <_realloc_r+0x36c>
 4001e70:	adbffe17 	ldw	r22,-8(r21)
 4001e74:	00bfff04 	movi	r2,-4
 4001e78:	9dadc83a 	sub	r22,r19,r22
 4001e7c:	b1000117 	ldw	r4,4(r22)
 4001e80:	2084703a 	and	r2,r4,r2
 4001e84:	b03f7726 	beq	r22,zero,4001c64 <__alt_mem_onchip_memory2_0+0xfbfffc64>
 4001e88:	80af883a 	add	r23,r16,r2
 4001e8c:	b8ff7516 	blt	r23,r3,4001c64 <__alt_mem_onchip_memory2_0+0xfbfffc64>
 4001e90:	b0800317 	ldw	r2,12(r22)
 4001e94:	b0c00217 	ldw	r3,8(r22)
 4001e98:	81bfff04 	addi	r6,r16,-4
 4001e9c:	01000904 	movi	r4,36
 4001ea0:	18800315 	stw	r2,12(r3)
 4001ea4:	10c00215 	stw	r3,8(r2)
 4001ea8:	b4800204 	addi	r18,r22,8
 4001eac:	21bfe52e 	bgeu	r4,r6,4001e44 <__alt_mem_onchip_memory2_0+0xfbfffe44>
 4001eb0:	a80b883a 	mov	r5,r21
 4001eb4:	9009883a 	mov	r4,r18
 4001eb8:	40019340 	call	4001934 <memmove>
 4001ebc:	b821883a 	mov	r16,r23
 4001ec0:	b027883a 	mov	r19,r22
 4001ec4:	003f8a06 	br	4001cf0 <__alt_mem_onchip_memory2_0+0xfbfffcf0>
 4001ec8:	300b883a 	mov	r5,r6
 4001ecc:	dfc00917 	ldw	ra,36(sp)
 4001ed0:	df000817 	ldw	fp,32(sp)
 4001ed4:	ddc00717 	ldw	r23,28(sp)
 4001ed8:	dd800617 	ldw	r22,24(sp)
 4001edc:	dd400517 	ldw	r21,20(sp)
 4001ee0:	dd000417 	ldw	r20,16(sp)
 4001ee4:	dcc00317 	ldw	r19,12(sp)
 4001ee8:	dc800217 	ldw	r18,8(sp)
 4001eec:	dc400117 	ldw	r17,4(sp)
 4001ef0:	dc000017 	ldw	r16,0(sp)
 4001ef4:	dec00a04 	addi	sp,sp,40
 4001ef8:	4000efc1 	jmpi	4000efc <_malloc_r>
 4001efc:	a8c00017 	ldw	r3,0(r21)
 4001f00:	90c00015 	stw	r3,0(r18)
 4001f04:	a8c00117 	ldw	r3,4(r21)
 4001f08:	90c00115 	stw	r3,4(r18)
 4001f0c:	00c006c4 	movi	r3,27
 4001f10:	19804536 	bltu	r3,r6,4002028 <_realloc_r+0x470>
 4001f14:	90800204 	addi	r2,r18,8
 4001f18:	a8c00204 	addi	r3,r21,8
 4001f1c:	003f6306 	br	4001cac <__alt_mem_onchip_memory2_0+0xfbfffcac>
 4001f20:	9005883a 	mov	r2,r18
 4001f24:	a8c00017 	ldw	r3,0(r21)
 4001f28:	b821883a 	mov	r16,r23
 4001f2c:	b027883a 	mov	r19,r22
 4001f30:	10c00015 	stw	r3,0(r2)
 4001f34:	a8c00117 	ldw	r3,4(r21)
 4001f38:	10c00115 	stw	r3,4(r2)
 4001f3c:	a8c00217 	ldw	r3,8(r21)
 4001f40:	10c00215 	stw	r3,8(r2)
 4001f44:	003f6a06 	br	4001cf0 <__alt_mem_onchip_memory2_0+0xfbfffcf0>
 4001f48:	9c67883a 	add	r19,r19,r17
 4001f4c:	4445c83a 	sub	r2,r8,r17
 4001f50:	e4c00215 	stw	r19,8(fp)
 4001f54:	10800054 	ori	r2,r2,1
 4001f58:	98800115 	stw	r2,4(r19)
 4001f5c:	a8bfff17 	ldw	r2,-4(r21)
 4001f60:	a009883a 	mov	r4,r20
 4001f64:	1080004c 	andi	r2,r2,1
 4001f68:	1462b03a 	or	r17,r2,r17
 4001f6c:	ac7fff15 	stw	r17,-4(r21)
 4001f70:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4001f74:	a805883a 	mov	r2,r21
 4001f78:	003f6b06 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4001f7c:	a80b883a 	mov	r5,r21
 4001f80:	9009883a 	mov	r4,r18
 4001f84:	40019340 	call	4001934 <memmove>
 4001f88:	003f4e06 	br	4001cc4 <__alt_mem_onchip_memory2_0+0xfbfffcc4>
 4001f8c:	89000404 	addi	r4,r17,16
 4001f90:	b93fbc16 	blt	r23,r4,4001e84 <__alt_mem_onchip_memory2_0+0xfbfffe84>
 4001f94:	b0800317 	ldw	r2,12(r22)
 4001f98:	b0c00217 	ldw	r3,8(r22)
 4001f9c:	81bfff04 	addi	r6,r16,-4
 4001fa0:	01000904 	movi	r4,36
 4001fa4:	18800315 	stw	r2,12(r3)
 4001fa8:	10c00215 	stw	r3,8(r2)
 4001fac:	b4800204 	addi	r18,r22,8
 4001fb0:	21804336 	bltu	r4,r6,40020c0 <_realloc_r+0x508>
 4001fb4:	008004c4 	movi	r2,19
 4001fb8:	11803f2e 	bgeu	r2,r6,40020b8 <_realloc_r+0x500>
 4001fbc:	a8800017 	ldw	r2,0(r21)
 4001fc0:	b0800215 	stw	r2,8(r22)
 4001fc4:	a8800117 	ldw	r2,4(r21)
 4001fc8:	b0800315 	stw	r2,12(r22)
 4001fcc:	008006c4 	movi	r2,27
 4001fd0:	11803f36 	bltu	r2,r6,40020d0 <_realloc_r+0x518>
 4001fd4:	b0800404 	addi	r2,r22,16
 4001fd8:	ad400204 	addi	r21,r21,8
 4001fdc:	a8c00017 	ldw	r3,0(r21)
 4001fe0:	10c00015 	stw	r3,0(r2)
 4001fe4:	a8c00117 	ldw	r3,4(r21)
 4001fe8:	10c00115 	stw	r3,4(r2)
 4001fec:	a8c00217 	ldw	r3,8(r21)
 4001ff0:	10c00215 	stw	r3,8(r2)
 4001ff4:	b447883a 	add	r3,r22,r17
 4001ff8:	bc45c83a 	sub	r2,r23,r17
 4001ffc:	e0c00215 	stw	r3,8(fp)
 4002000:	10800054 	ori	r2,r2,1
 4002004:	18800115 	stw	r2,4(r3)
 4002008:	b0800117 	ldw	r2,4(r22)
 400200c:	a009883a 	mov	r4,r20
 4002010:	1080004c 	andi	r2,r2,1
 4002014:	1462b03a 	or	r17,r2,r17
 4002018:	b4400115 	stw	r17,4(r22)
 400201c:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4002020:	9005883a 	mov	r2,r18
 4002024:	003f4006 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4002028:	a8c00217 	ldw	r3,8(r21)
 400202c:	90c00215 	stw	r3,8(r18)
 4002030:	a8c00317 	ldw	r3,12(r21)
 4002034:	90c00315 	stw	r3,12(r18)
 4002038:	30801126 	beq	r6,r2,4002080 <_realloc_r+0x4c8>
 400203c:	90800404 	addi	r2,r18,16
 4002040:	a8c00404 	addi	r3,r21,16
 4002044:	003f1906 	br	4001cac <__alt_mem_onchip_memory2_0+0xfbfffcac>
 4002048:	90ffff17 	ldw	r3,-4(r18)
 400204c:	00bfff04 	movi	r2,-4
 4002050:	a825883a 	mov	r18,r21
 4002054:	1884703a 	and	r2,r3,r2
 4002058:	80a1883a 	add	r16,r16,r2
 400205c:	003f2406 	br	4001cf0 <__alt_mem_onchip_memory2_0+0xfbfffcf0>
 4002060:	a8800217 	ldw	r2,8(r21)
 4002064:	b0800415 	stw	r2,16(r22)
 4002068:	a8800317 	ldw	r2,12(r21)
 400206c:	b0800515 	stw	r2,20(r22)
 4002070:	31000a26 	beq	r6,r4,400209c <_realloc_r+0x4e4>
 4002074:	b0800604 	addi	r2,r22,24
 4002078:	ad400404 	addi	r21,r21,16
 400207c:	003fa906 	br	4001f24 <__alt_mem_onchip_memory2_0+0xfbffff24>
 4002080:	a9000417 	ldw	r4,16(r21)
 4002084:	90800604 	addi	r2,r18,24
 4002088:	a8c00604 	addi	r3,r21,24
 400208c:	91000415 	stw	r4,16(r18)
 4002090:	a9000517 	ldw	r4,20(r21)
 4002094:	91000515 	stw	r4,20(r18)
 4002098:	003f0406 	br	4001cac <__alt_mem_onchip_memory2_0+0xfbfffcac>
 400209c:	a8c00417 	ldw	r3,16(r21)
 40020a0:	ad400604 	addi	r21,r21,24
 40020a4:	b0800804 	addi	r2,r22,32
 40020a8:	b0c00615 	stw	r3,24(r22)
 40020ac:	a8ffff17 	ldw	r3,-4(r21)
 40020b0:	b0c00715 	stw	r3,28(r22)
 40020b4:	003f9b06 	br	4001f24 <__alt_mem_onchip_memory2_0+0xfbffff24>
 40020b8:	9005883a 	mov	r2,r18
 40020bc:	003fc706 	br	4001fdc <__alt_mem_onchip_memory2_0+0xfbffffdc>
 40020c0:	a80b883a 	mov	r5,r21
 40020c4:	9009883a 	mov	r4,r18
 40020c8:	40019340 	call	4001934 <memmove>
 40020cc:	003fc906 	br	4001ff4 <__alt_mem_onchip_memory2_0+0xfbfffff4>
 40020d0:	a8800217 	ldw	r2,8(r21)
 40020d4:	b0800415 	stw	r2,16(r22)
 40020d8:	a8800317 	ldw	r2,12(r21)
 40020dc:	b0800515 	stw	r2,20(r22)
 40020e0:	31000726 	beq	r6,r4,4002100 <_realloc_r+0x548>
 40020e4:	b0800604 	addi	r2,r22,24
 40020e8:	ad400404 	addi	r21,r21,16
 40020ec:	003fbb06 	br	4001fdc <__alt_mem_onchip_memory2_0+0xfbffffdc>
 40020f0:	a009883a 	mov	r4,r20
 40020f4:	4003cf40 	call	4003cf4 <__malloc_unlock>
 40020f8:	0005883a 	mov	r2,zero
 40020fc:	003f0a06 	br	4001d28 <__alt_mem_onchip_memory2_0+0xfbfffd28>
 4002100:	a8c00417 	ldw	r3,16(r21)
 4002104:	ad400604 	addi	r21,r21,24
 4002108:	b0800804 	addi	r2,r22,32
 400210c:	b0c00615 	stw	r3,24(r22)
 4002110:	a8ffff17 	ldw	r3,-4(r21)
 4002114:	b0c00715 	stw	r3,28(r22)
 4002118:	003fb006 	br	4001fdc <__alt_mem_onchip_memory2_0+0xfbffffdc>

0400211c <_sbrk_r>:
 400211c:	defffd04 	addi	sp,sp,-12
 4002120:	dc000015 	stw	r16,0(sp)
 4002124:	04010074 	movhi	r16,1025
 4002128:	dc400115 	stw	r17,4(sp)
 400212c:	84046d04 	addi	r16,r16,4532
 4002130:	2023883a 	mov	r17,r4
 4002134:	2809883a 	mov	r4,r5
 4002138:	dfc00215 	stw	ra,8(sp)
 400213c:	80000015 	stw	zero,0(r16)
 4002140:	40038cc0 	call	40038cc <sbrk>
 4002144:	00ffffc4 	movi	r3,-1
 4002148:	10c00526 	beq	r2,r3,4002160 <_sbrk_r+0x44>
 400214c:	dfc00217 	ldw	ra,8(sp)
 4002150:	dc400117 	ldw	r17,4(sp)
 4002154:	dc000017 	ldw	r16,0(sp)
 4002158:	dec00304 	addi	sp,sp,12
 400215c:	f800283a 	ret
 4002160:	80c00017 	ldw	r3,0(r16)
 4002164:	183ff926 	beq	r3,zero,400214c <__alt_mem_onchip_memory2_0+0xfc00014c>
 4002168:	88c00015 	stw	r3,0(r17)
 400216c:	003ff706 	br	400214c <__alt_mem_onchip_memory2_0+0xfc00014c>

04002170 <__sread>:
 4002170:	defffe04 	addi	sp,sp,-8
 4002174:	dc000015 	stw	r16,0(sp)
 4002178:	2821883a 	mov	r16,r5
 400217c:	2940038f 	ldh	r5,14(r5)
 4002180:	dfc00115 	stw	ra,4(sp)
 4002184:	4002eb00 	call	4002eb0 <_read_r>
 4002188:	10000716 	blt	r2,zero,40021a8 <__sread+0x38>
 400218c:	80c01417 	ldw	r3,80(r16)
 4002190:	1887883a 	add	r3,r3,r2
 4002194:	80c01415 	stw	r3,80(r16)
 4002198:	dfc00117 	ldw	ra,4(sp)
 400219c:	dc000017 	ldw	r16,0(sp)
 40021a0:	dec00204 	addi	sp,sp,8
 40021a4:	f800283a 	ret
 40021a8:	80c0030b 	ldhu	r3,12(r16)
 40021ac:	18fbffcc 	andi	r3,r3,61439
 40021b0:	80c0030d 	sth	r3,12(r16)
 40021b4:	dfc00117 	ldw	ra,4(sp)
 40021b8:	dc000017 	ldw	r16,0(sp)
 40021bc:	dec00204 	addi	sp,sp,8
 40021c0:	f800283a 	ret

040021c4 <__seofread>:
 40021c4:	0005883a 	mov	r2,zero
 40021c8:	f800283a 	ret

040021cc <__swrite>:
 40021cc:	2880030b 	ldhu	r2,12(r5)
 40021d0:	defffb04 	addi	sp,sp,-20
 40021d4:	dcc00315 	stw	r19,12(sp)
 40021d8:	dc800215 	stw	r18,8(sp)
 40021dc:	dc400115 	stw	r17,4(sp)
 40021e0:	dc000015 	stw	r16,0(sp)
 40021e4:	dfc00415 	stw	ra,16(sp)
 40021e8:	10c0400c 	andi	r3,r2,256
 40021ec:	2821883a 	mov	r16,r5
 40021f0:	2023883a 	mov	r17,r4
 40021f4:	3025883a 	mov	r18,r6
 40021f8:	3827883a 	mov	r19,r7
 40021fc:	18000526 	beq	r3,zero,4002214 <__swrite+0x48>
 4002200:	2940038f 	ldh	r5,14(r5)
 4002204:	01c00084 	movi	r7,2
 4002208:	000d883a 	mov	r6,zero
 400220c:	4002c940 	call	4002c94 <_lseek_r>
 4002210:	8080030b 	ldhu	r2,12(r16)
 4002214:	8140038f 	ldh	r5,14(r16)
 4002218:	10bbffcc 	andi	r2,r2,61439
 400221c:	980f883a 	mov	r7,r19
 4002220:	900d883a 	mov	r6,r18
 4002224:	8809883a 	mov	r4,r17
 4002228:	8080030d 	sth	r2,12(r16)
 400222c:	dfc00417 	ldw	ra,16(sp)
 4002230:	dcc00317 	ldw	r19,12(sp)
 4002234:	dc800217 	ldw	r18,8(sp)
 4002238:	dc400117 	ldw	r17,4(sp)
 400223c:	dc000017 	ldw	r16,0(sp)
 4002240:	dec00504 	addi	sp,sp,20
 4002244:	40022ac1 	jmpi	40022ac <_write_r>

04002248 <__sseek>:
 4002248:	defffe04 	addi	sp,sp,-8
 400224c:	dc000015 	stw	r16,0(sp)
 4002250:	2821883a 	mov	r16,r5
 4002254:	2940038f 	ldh	r5,14(r5)
 4002258:	dfc00115 	stw	ra,4(sp)
 400225c:	4002c940 	call	4002c94 <_lseek_r>
 4002260:	00ffffc4 	movi	r3,-1
 4002264:	10c00826 	beq	r2,r3,4002288 <__sseek+0x40>
 4002268:	80c0030b 	ldhu	r3,12(r16)
 400226c:	80801415 	stw	r2,80(r16)
 4002270:	18c40014 	ori	r3,r3,4096
 4002274:	80c0030d 	sth	r3,12(r16)
 4002278:	dfc00117 	ldw	ra,4(sp)
 400227c:	dc000017 	ldw	r16,0(sp)
 4002280:	dec00204 	addi	sp,sp,8
 4002284:	f800283a 	ret
 4002288:	80c0030b 	ldhu	r3,12(r16)
 400228c:	18fbffcc 	andi	r3,r3,61439
 4002290:	80c0030d 	sth	r3,12(r16)
 4002294:	dfc00117 	ldw	ra,4(sp)
 4002298:	dc000017 	ldw	r16,0(sp)
 400229c:	dec00204 	addi	sp,sp,8
 40022a0:	f800283a 	ret

040022a4 <__sclose>:
 40022a4:	2940038f 	ldh	r5,14(r5)
 40022a8:	40024601 	jmpi	4002460 <_close_r>

040022ac <_write_r>:
 40022ac:	defffd04 	addi	sp,sp,-12
 40022b0:	2805883a 	mov	r2,r5
 40022b4:	dc000015 	stw	r16,0(sp)
 40022b8:	04010074 	movhi	r16,1025
 40022bc:	dc400115 	stw	r17,4(sp)
 40022c0:	300b883a 	mov	r5,r6
 40022c4:	84046d04 	addi	r16,r16,4532
 40022c8:	2023883a 	mov	r17,r4
 40022cc:	380d883a 	mov	r6,r7
 40022d0:	1009883a 	mov	r4,r2
 40022d4:	dfc00215 	stw	ra,8(sp)
 40022d8:	80000015 	stw	zero,0(r16)
 40022dc:	40039b80 	call	40039b8 <write>
 40022e0:	00ffffc4 	movi	r3,-1
 40022e4:	10c00526 	beq	r2,r3,40022fc <_write_r+0x50>
 40022e8:	dfc00217 	ldw	ra,8(sp)
 40022ec:	dc400117 	ldw	r17,4(sp)
 40022f0:	dc000017 	ldw	r16,0(sp)
 40022f4:	dec00304 	addi	sp,sp,12
 40022f8:	f800283a 	ret
 40022fc:	80c00017 	ldw	r3,0(r16)
 4002300:	183ff926 	beq	r3,zero,40022e8 <__alt_mem_onchip_memory2_0+0xfc0002e8>
 4002304:	88c00015 	stw	r3,0(r17)
 4002308:	003ff706 	br	40022e8 <__alt_mem_onchip_memory2_0+0xfc0002e8>

0400230c <__swsetup_r>:
 400230c:	00810074 	movhi	r2,1025
 4002310:	defffd04 	addi	sp,sp,-12
 4002314:	10bd8104 	addi	r2,r2,-2556
 4002318:	dc400115 	stw	r17,4(sp)
 400231c:	2023883a 	mov	r17,r4
 4002320:	11000017 	ldw	r4,0(r2)
 4002324:	dc000015 	stw	r16,0(sp)
 4002328:	dfc00215 	stw	ra,8(sp)
 400232c:	2821883a 	mov	r16,r5
 4002330:	20000226 	beq	r4,zero,400233c <__swsetup_r+0x30>
 4002334:	20800e17 	ldw	r2,56(r4)
 4002338:	10003126 	beq	r2,zero,4002400 <__swsetup_r+0xf4>
 400233c:	8080030b 	ldhu	r2,12(r16)
 4002340:	10c0020c 	andi	r3,r2,8
 4002344:	1009883a 	mov	r4,r2
 4002348:	18000f26 	beq	r3,zero,4002388 <__swsetup_r+0x7c>
 400234c:	80c00417 	ldw	r3,16(r16)
 4002350:	18001526 	beq	r3,zero,40023a8 <__swsetup_r+0x9c>
 4002354:	1100004c 	andi	r4,r2,1
 4002358:	20001c1e 	bne	r4,zero,40023cc <__swsetup_r+0xc0>
 400235c:	1080008c 	andi	r2,r2,2
 4002360:	1000291e 	bne	r2,zero,4002408 <__swsetup_r+0xfc>
 4002364:	80800517 	ldw	r2,20(r16)
 4002368:	80800215 	stw	r2,8(r16)
 400236c:	18001c26 	beq	r3,zero,40023e0 <__swsetup_r+0xd4>
 4002370:	0005883a 	mov	r2,zero
 4002374:	dfc00217 	ldw	ra,8(sp)
 4002378:	dc400117 	ldw	r17,4(sp)
 400237c:	dc000017 	ldw	r16,0(sp)
 4002380:	dec00304 	addi	sp,sp,12
 4002384:	f800283a 	ret
 4002388:	2080040c 	andi	r2,r4,16
 400238c:	10002e26 	beq	r2,zero,4002448 <__swsetup_r+0x13c>
 4002390:	2080010c 	andi	r2,r4,4
 4002394:	10001e1e 	bne	r2,zero,4002410 <__swsetup_r+0x104>
 4002398:	80c00417 	ldw	r3,16(r16)
 400239c:	20800214 	ori	r2,r4,8
 40023a0:	8080030d 	sth	r2,12(r16)
 40023a4:	183feb1e 	bne	r3,zero,4002354 <__alt_mem_onchip_memory2_0+0xfc000354>
 40023a8:	1100a00c 	andi	r4,r2,640
 40023ac:	01408004 	movi	r5,512
 40023b0:	217fe826 	beq	r4,r5,4002354 <__alt_mem_onchip_memory2_0+0xfc000354>
 40023b4:	800b883a 	mov	r5,r16
 40023b8:	8809883a 	mov	r4,r17
 40023bc:	4002cf40 	call	4002cf4 <__smakebuf_r>
 40023c0:	8080030b 	ldhu	r2,12(r16)
 40023c4:	80c00417 	ldw	r3,16(r16)
 40023c8:	003fe206 	br	4002354 <__alt_mem_onchip_memory2_0+0xfc000354>
 40023cc:	80800517 	ldw	r2,20(r16)
 40023d0:	80000215 	stw	zero,8(r16)
 40023d4:	0085c83a 	sub	r2,zero,r2
 40023d8:	80800615 	stw	r2,24(r16)
 40023dc:	183fe41e 	bne	r3,zero,4002370 <__alt_mem_onchip_memory2_0+0xfc000370>
 40023e0:	80c0030b 	ldhu	r3,12(r16)
 40023e4:	0005883a 	mov	r2,zero
 40023e8:	1900200c 	andi	r4,r3,128
 40023ec:	203fe126 	beq	r4,zero,4002374 <__alt_mem_onchip_memory2_0+0xfc000374>
 40023f0:	18c01014 	ori	r3,r3,64
 40023f4:	80c0030d 	sth	r3,12(r16)
 40023f8:	00bfffc4 	movi	r2,-1
 40023fc:	003fdd06 	br	4002374 <__alt_mem_onchip_memory2_0+0xfc000374>
 4002400:	40008680 	call	4000868 <__sinit>
 4002404:	003fcd06 	br	400233c <__alt_mem_onchip_memory2_0+0xfc00033c>
 4002408:	0005883a 	mov	r2,zero
 400240c:	003fd606 	br	4002368 <__alt_mem_onchip_memory2_0+0xfc000368>
 4002410:	81400c17 	ldw	r5,48(r16)
 4002414:	28000626 	beq	r5,zero,4002430 <__swsetup_r+0x124>
 4002418:	80801004 	addi	r2,r16,64
 400241c:	28800326 	beq	r5,r2,400242c <__swsetup_r+0x120>
 4002420:	8809883a 	mov	r4,r17
 4002424:	40029840 	call	4002984 <_free_r>
 4002428:	8100030b 	ldhu	r4,12(r16)
 400242c:	80000c15 	stw	zero,48(r16)
 4002430:	80c00417 	ldw	r3,16(r16)
 4002434:	00bff6c4 	movi	r2,-37
 4002438:	1108703a 	and	r4,r2,r4
 400243c:	80000115 	stw	zero,4(r16)
 4002440:	80c00015 	stw	r3,0(r16)
 4002444:	003fd506 	br	400239c <__alt_mem_onchip_memory2_0+0xfc00039c>
 4002448:	00800244 	movi	r2,9
 400244c:	88800015 	stw	r2,0(r17)
 4002450:	20801014 	ori	r2,r4,64
 4002454:	8080030d 	sth	r2,12(r16)
 4002458:	00bfffc4 	movi	r2,-1
 400245c:	003fc506 	br	4002374 <__alt_mem_onchip_memory2_0+0xfc000374>

04002460 <_close_r>:
 4002460:	defffd04 	addi	sp,sp,-12
 4002464:	dc000015 	stw	r16,0(sp)
 4002468:	04010074 	movhi	r16,1025
 400246c:	dc400115 	stw	r17,4(sp)
 4002470:	84046d04 	addi	r16,r16,4532
 4002474:	2023883a 	mov	r17,r4
 4002478:	2809883a 	mov	r4,r5
 400247c:	dfc00215 	stw	ra,8(sp)
 4002480:	80000015 	stw	zero,0(r16)
 4002484:	40031b00 	call	40031b0 <close>
 4002488:	00ffffc4 	movi	r3,-1
 400248c:	10c00526 	beq	r2,r3,40024a4 <_close_r+0x44>
 4002490:	dfc00217 	ldw	ra,8(sp)
 4002494:	dc400117 	ldw	r17,4(sp)
 4002498:	dc000017 	ldw	r16,0(sp)
 400249c:	dec00304 	addi	sp,sp,12
 40024a0:	f800283a 	ret
 40024a4:	80c00017 	ldw	r3,0(r16)
 40024a8:	183ff926 	beq	r3,zero,4002490 <__alt_mem_onchip_memory2_0+0xfc000490>
 40024ac:	88c00015 	stw	r3,0(r17)
 40024b0:	003ff706 	br	4002490 <__alt_mem_onchip_memory2_0+0xfc000490>

040024b4 <_fclose_r>:
 40024b4:	28003926 	beq	r5,zero,400259c <_fclose_r+0xe8>
 40024b8:	defffc04 	addi	sp,sp,-16
 40024bc:	dc400115 	stw	r17,4(sp)
 40024c0:	dc000015 	stw	r16,0(sp)
 40024c4:	dfc00315 	stw	ra,12(sp)
 40024c8:	dc800215 	stw	r18,8(sp)
 40024cc:	2023883a 	mov	r17,r4
 40024d0:	2821883a 	mov	r16,r5
 40024d4:	20000226 	beq	r4,zero,40024e0 <_fclose_r+0x2c>
 40024d8:	20800e17 	ldw	r2,56(r4)
 40024dc:	10002726 	beq	r2,zero,400257c <_fclose_r+0xc8>
 40024e0:	8080030f 	ldh	r2,12(r16)
 40024e4:	1000071e 	bne	r2,zero,4002504 <_fclose_r+0x50>
 40024e8:	0005883a 	mov	r2,zero
 40024ec:	dfc00317 	ldw	ra,12(sp)
 40024f0:	dc800217 	ldw	r18,8(sp)
 40024f4:	dc400117 	ldw	r17,4(sp)
 40024f8:	dc000017 	ldw	r16,0(sp)
 40024fc:	dec00404 	addi	sp,sp,16
 4002500:	f800283a 	ret
 4002504:	800b883a 	mov	r5,r16
 4002508:	8809883a 	mov	r4,r17
 400250c:	40025b80 	call	40025b8 <__sflush_r>
 4002510:	1025883a 	mov	r18,r2
 4002514:	80800b17 	ldw	r2,44(r16)
 4002518:	10000426 	beq	r2,zero,400252c <_fclose_r+0x78>
 400251c:	81400717 	ldw	r5,28(r16)
 4002520:	8809883a 	mov	r4,r17
 4002524:	103ee83a 	callr	r2
 4002528:	10001616 	blt	r2,zero,4002584 <_fclose_r+0xd0>
 400252c:	8080030b 	ldhu	r2,12(r16)
 4002530:	1080200c 	andi	r2,r2,128
 4002534:	1000151e 	bne	r2,zero,400258c <_fclose_r+0xd8>
 4002538:	81400c17 	ldw	r5,48(r16)
 400253c:	28000526 	beq	r5,zero,4002554 <_fclose_r+0xa0>
 4002540:	80801004 	addi	r2,r16,64
 4002544:	28800226 	beq	r5,r2,4002550 <_fclose_r+0x9c>
 4002548:	8809883a 	mov	r4,r17
 400254c:	40029840 	call	4002984 <_free_r>
 4002550:	80000c15 	stw	zero,48(r16)
 4002554:	81401117 	ldw	r5,68(r16)
 4002558:	28000326 	beq	r5,zero,4002568 <_fclose_r+0xb4>
 400255c:	8809883a 	mov	r4,r17
 4002560:	40029840 	call	4002984 <_free_r>
 4002564:	80001115 	stw	zero,68(r16)
 4002568:	40008780 	call	4000878 <__sfp_lock_acquire>
 400256c:	8000030d 	sth	zero,12(r16)
 4002570:	400087c0 	call	400087c <__sfp_lock_release>
 4002574:	9005883a 	mov	r2,r18
 4002578:	003fdc06 	br	40024ec <__alt_mem_onchip_memory2_0+0xfc0004ec>
 400257c:	40008680 	call	4000868 <__sinit>
 4002580:	003fd706 	br	40024e0 <__alt_mem_onchip_memory2_0+0xfc0004e0>
 4002584:	04bfffc4 	movi	r18,-1
 4002588:	003fe806 	br	400252c <__alt_mem_onchip_memory2_0+0xfc00052c>
 400258c:	81400417 	ldw	r5,16(r16)
 4002590:	8809883a 	mov	r4,r17
 4002594:	40029840 	call	4002984 <_free_r>
 4002598:	003fe706 	br	4002538 <__alt_mem_onchip_memory2_0+0xfc000538>
 400259c:	0005883a 	mov	r2,zero
 40025a0:	f800283a 	ret

040025a4 <fclose>:
 40025a4:	00810074 	movhi	r2,1025
 40025a8:	10bd8104 	addi	r2,r2,-2556
 40025ac:	200b883a 	mov	r5,r4
 40025b0:	11000017 	ldw	r4,0(r2)
 40025b4:	40024b41 	jmpi	40024b4 <_fclose_r>

040025b8 <__sflush_r>:
 40025b8:	2880030b 	ldhu	r2,12(r5)
 40025bc:	defffb04 	addi	sp,sp,-20
 40025c0:	dcc00315 	stw	r19,12(sp)
 40025c4:	dc400115 	stw	r17,4(sp)
 40025c8:	dfc00415 	stw	ra,16(sp)
 40025cc:	dc800215 	stw	r18,8(sp)
 40025d0:	dc000015 	stw	r16,0(sp)
 40025d4:	10c0020c 	andi	r3,r2,8
 40025d8:	2823883a 	mov	r17,r5
 40025dc:	2027883a 	mov	r19,r4
 40025e0:	1800311e 	bne	r3,zero,40026a8 <__sflush_r+0xf0>
 40025e4:	28c00117 	ldw	r3,4(r5)
 40025e8:	10820014 	ori	r2,r2,2048
 40025ec:	2880030d 	sth	r2,12(r5)
 40025f0:	00c04b0e 	bge	zero,r3,4002720 <__sflush_r+0x168>
 40025f4:	8a000a17 	ldw	r8,40(r17)
 40025f8:	40002326 	beq	r8,zero,4002688 <__sflush_r+0xd0>
 40025fc:	9c000017 	ldw	r16,0(r19)
 4002600:	10c4000c 	andi	r3,r2,4096
 4002604:	98000015 	stw	zero,0(r19)
 4002608:	18004826 	beq	r3,zero,400272c <__sflush_r+0x174>
 400260c:	89801417 	ldw	r6,80(r17)
 4002610:	10c0010c 	andi	r3,r2,4
 4002614:	18000626 	beq	r3,zero,4002630 <__sflush_r+0x78>
 4002618:	88c00117 	ldw	r3,4(r17)
 400261c:	88800c17 	ldw	r2,48(r17)
 4002620:	30cdc83a 	sub	r6,r6,r3
 4002624:	10000226 	beq	r2,zero,4002630 <__sflush_r+0x78>
 4002628:	88800f17 	ldw	r2,60(r17)
 400262c:	308dc83a 	sub	r6,r6,r2
 4002630:	89400717 	ldw	r5,28(r17)
 4002634:	000f883a 	mov	r7,zero
 4002638:	9809883a 	mov	r4,r19
 400263c:	403ee83a 	callr	r8
 4002640:	00ffffc4 	movi	r3,-1
 4002644:	10c04426 	beq	r2,r3,4002758 <__sflush_r+0x1a0>
 4002648:	88c0030b 	ldhu	r3,12(r17)
 400264c:	89000417 	ldw	r4,16(r17)
 4002650:	88000115 	stw	zero,4(r17)
 4002654:	197dffcc 	andi	r5,r3,63487
 4002658:	8940030d 	sth	r5,12(r17)
 400265c:	89000015 	stw	r4,0(r17)
 4002660:	18c4000c 	andi	r3,r3,4096
 4002664:	18002c1e 	bne	r3,zero,4002718 <__sflush_r+0x160>
 4002668:	89400c17 	ldw	r5,48(r17)
 400266c:	9c000015 	stw	r16,0(r19)
 4002670:	28000526 	beq	r5,zero,4002688 <__sflush_r+0xd0>
 4002674:	88801004 	addi	r2,r17,64
 4002678:	28800226 	beq	r5,r2,4002684 <__sflush_r+0xcc>
 400267c:	9809883a 	mov	r4,r19
 4002680:	40029840 	call	4002984 <_free_r>
 4002684:	88000c15 	stw	zero,48(r17)
 4002688:	0005883a 	mov	r2,zero
 400268c:	dfc00417 	ldw	ra,16(sp)
 4002690:	dcc00317 	ldw	r19,12(sp)
 4002694:	dc800217 	ldw	r18,8(sp)
 4002698:	dc400117 	ldw	r17,4(sp)
 400269c:	dc000017 	ldw	r16,0(sp)
 40026a0:	dec00504 	addi	sp,sp,20
 40026a4:	f800283a 	ret
 40026a8:	2c800417 	ldw	r18,16(r5)
 40026ac:	903ff626 	beq	r18,zero,4002688 <__alt_mem_onchip_memory2_0+0xfc000688>
 40026b0:	2c000017 	ldw	r16,0(r5)
 40026b4:	108000cc 	andi	r2,r2,3
 40026b8:	2c800015 	stw	r18,0(r5)
 40026bc:	84a1c83a 	sub	r16,r16,r18
 40026c0:	1000131e 	bne	r2,zero,4002710 <__sflush_r+0x158>
 40026c4:	28800517 	ldw	r2,20(r5)
 40026c8:	88800215 	stw	r2,8(r17)
 40026cc:	04000316 	blt	zero,r16,40026dc <__sflush_r+0x124>
 40026d0:	003fed06 	br	4002688 <__alt_mem_onchip_memory2_0+0xfc000688>
 40026d4:	90a5883a 	add	r18,r18,r2
 40026d8:	043feb0e 	bge	zero,r16,4002688 <__alt_mem_onchip_memory2_0+0xfc000688>
 40026dc:	88800917 	ldw	r2,36(r17)
 40026e0:	89400717 	ldw	r5,28(r17)
 40026e4:	800f883a 	mov	r7,r16
 40026e8:	900d883a 	mov	r6,r18
 40026ec:	9809883a 	mov	r4,r19
 40026f0:	103ee83a 	callr	r2
 40026f4:	80a1c83a 	sub	r16,r16,r2
 40026f8:	00bff616 	blt	zero,r2,40026d4 <__alt_mem_onchip_memory2_0+0xfc0006d4>
 40026fc:	88c0030b 	ldhu	r3,12(r17)
 4002700:	00bfffc4 	movi	r2,-1
 4002704:	18c01014 	ori	r3,r3,64
 4002708:	88c0030d 	sth	r3,12(r17)
 400270c:	003fdf06 	br	400268c <__alt_mem_onchip_memory2_0+0xfc00068c>
 4002710:	0005883a 	mov	r2,zero
 4002714:	003fec06 	br	40026c8 <__alt_mem_onchip_memory2_0+0xfc0006c8>
 4002718:	88801415 	stw	r2,80(r17)
 400271c:	003fd206 	br	4002668 <__alt_mem_onchip_memory2_0+0xfc000668>
 4002720:	28c00f17 	ldw	r3,60(r5)
 4002724:	00ffb316 	blt	zero,r3,40025f4 <__alt_mem_onchip_memory2_0+0xfc0005f4>
 4002728:	003fd706 	br	4002688 <__alt_mem_onchip_memory2_0+0xfc000688>
 400272c:	89400717 	ldw	r5,28(r17)
 4002730:	000d883a 	mov	r6,zero
 4002734:	01c00044 	movi	r7,1
 4002738:	9809883a 	mov	r4,r19
 400273c:	403ee83a 	callr	r8
 4002740:	100d883a 	mov	r6,r2
 4002744:	00bfffc4 	movi	r2,-1
 4002748:	30801426 	beq	r6,r2,400279c <__sflush_r+0x1e4>
 400274c:	8880030b 	ldhu	r2,12(r17)
 4002750:	8a000a17 	ldw	r8,40(r17)
 4002754:	003fae06 	br	4002610 <__alt_mem_onchip_memory2_0+0xfc000610>
 4002758:	98c00017 	ldw	r3,0(r19)
 400275c:	183fba26 	beq	r3,zero,4002648 <__alt_mem_onchip_memory2_0+0xfc000648>
 4002760:	01000744 	movi	r4,29
 4002764:	19000626 	beq	r3,r4,4002780 <__sflush_r+0x1c8>
 4002768:	01000584 	movi	r4,22
 400276c:	19000426 	beq	r3,r4,4002780 <__sflush_r+0x1c8>
 4002770:	88c0030b 	ldhu	r3,12(r17)
 4002774:	18c01014 	ori	r3,r3,64
 4002778:	88c0030d 	sth	r3,12(r17)
 400277c:	003fc306 	br	400268c <__alt_mem_onchip_memory2_0+0xfc00068c>
 4002780:	8880030b 	ldhu	r2,12(r17)
 4002784:	88c00417 	ldw	r3,16(r17)
 4002788:	88000115 	stw	zero,4(r17)
 400278c:	10bdffcc 	andi	r2,r2,63487
 4002790:	8880030d 	sth	r2,12(r17)
 4002794:	88c00015 	stw	r3,0(r17)
 4002798:	003fb306 	br	4002668 <__alt_mem_onchip_memory2_0+0xfc000668>
 400279c:	98800017 	ldw	r2,0(r19)
 40027a0:	103fea26 	beq	r2,zero,400274c <__alt_mem_onchip_memory2_0+0xfc00074c>
 40027a4:	00c00744 	movi	r3,29
 40027a8:	10c00226 	beq	r2,r3,40027b4 <__sflush_r+0x1fc>
 40027ac:	00c00584 	movi	r3,22
 40027b0:	10c0031e 	bne	r2,r3,40027c0 <__sflush_r+0x208>
 40027b4:	9c000015 	stw	r16,0(r19)
 40027b8:	0005883a 	mov	r2,zero
 40027bc:	003fb306 	br	400268c <__alt_mem_onchip_memory2_0+0xfc00068c>
 40027c0:	88c0030b 	ldhu	r3,12(r17)
 40027c4:	3005883a 	mov	r2,r6
 40027c8:	18c01014 	ori	r3,r3,64
 40027cc:	88c0030d 	sth	r3,12(r17)
 40027d0:	003fae06 	br	400268c <__alt_mem_onchip_memory2_0+0xfc00068c>

040027d4 <_fflush_r>:
 40027d4:	defffd04 	addi	sp,sp,-12
 40027d8:	dc000115 	stw	r16,4(sp)
 40027dc:	dfc00215 	stw	ra,8(sp)
 40027e0:	2021883a 	mov	r16,r4
 40027e4:	20000226 	beq	r4,zero,40027f0 <_fflush_r+0x1c>
 40027e8:	20800e17 	ldw	r2,56(r4)
 40027ec:	10000c26 	beq	r2,zero,4002820 <_fflush_r+0x4c>
 40027f0:	2880030f 	ldh	r2,12(r5)
 40027f4:	1000051e 	bne	r2,zero,400280c <_fflush_r+0x38>
 40027f8:	0005883a 	mov	r2,zero
 40027fc:	dfc00217 	ldw	ra,8(sp)
 4002800:	dc000117 	ldw	r16,4(sp)
 4002804:	dec00304 	addi	sp,sp,12
 4002808:	f800283a 	ret
 400280c:	8009883a 	mov	r4,r16
 4002810:	dfc00217 	ldw	ra,8(sp)
 4002814:	dc000117 	ldw	r16,4(sp)
 4002818:	dec00304 	addi	sp,sp,12
 400281c:	40025b81 	jmpi	40025b8 <__sflush_r>
 4002820:	d9400015 	stw	r5,0(sp)
 4002824:	40008680 	call	4000868 <__sinit>
 4002828:	d9400017 	ldw	r5,0(sp)
 400282c:	003ff006 	br	40027f0 <__alt_mem_onchip_memory2_0+0xfc0007f0>

04002830 <fflush>:
 4002830:	20000526 	beq	r4,zero,4002848 <fflush+0x18>
 4002834:	00810074 	movhi	r2,1025
 4002838:	10bd8104 	addi	r2,r2,-2556
 400283c:	200b883a 	mov	r5,r4
 4002840:	11000017 	ldw	r4,0(r2)
 4002844:	40027d41 	jmpi	40027d4 <_fflush_r>
 4002848:	00810074 	movhi	r2,1025
 400284c:	10bd8004 	addi	r2,r2,-2560
 4002850:	11000017 	ldw	r4,0(r2)
 4002854:	01410034 	movhi	r5,1024
 4002858:	2949f504 	addi	r5,r5,10196
 400285c:	4000e381 	jmpi	4000e38 <_fwalk_reent>

04002860 <_malloc_trim_r>:
 4002860:	defffb04 	addi	sp,sp,-20
 4002864:	dcc00315 	stw	r19,12(sp)
 4002868:	04c10074 	movhi	r19,1025
 400286c:	dc800215 	stw	r18,8(sp)
 4002870:	dc400115 	stw	r17,4(sp)
 4002874:	dc000015 	stw	r16,0(sp)
 4002878:	dfc00415 	stw	ra,16(sp)
 400287c:	2821883a 	mov	r16,r5
 4002880:	9cf7f904 	addi	r19,r19,-8220
 4002884:	2025883a 	mov	r18,r4
 4002888:	4003bd40 	call	4003bd4 <__malloc_lock>
 400288c:	98800217 	ldw	r2,8(r19)
 4002890:	14400117 	ldw	r17,4(r2)
 4002894:	00bfff04 	movi	r2,-4
 4002898:	88a2703a 	and	r17,r17,r2
 400289c:	8c21c83a 	sub	r16,r17,r16
 40028a0:	8403fbc4 	addi	r16,r16,4079
 40028a4:	8020d33a 	srli	r16,r16,12
 40028a8:	0083ffc4 	movi	r2,4095
 40028ac:	843fffc4 	addi	r16,r16,-1
 40028b0:	8020933a 	slli	r16,r16,12
 40028b4:	1400060e 	bge	r2,r16,40028d0 <_malloc_trim_r+0x70>
 40028b8:	000b883a 	mov	r5,zero
 40028bc:	9009883a 	mov	r4,r18
 40028c0:	400211c0 	call	400211c <_sbrk_r>
 40028c4:	98c00217 	ldw	r3,8(r19)
 40028c8:	1c47883a 	add	r3,r3,r17
 40028cc:	10c00a26 	beq	r2,r3,40028f8 <_malloc_trim_r+0x98>
 40028d0:	9009883a 	mov	r4,r18
 40028d4:	4003cf40 	call	4003cf4 <__malloc_unlock>
 40028d8:	0005883a 	mov	r2,zero
 40028dc:	dfc00417 	ldw	ra,16(sp)
 40028e0:	dcc00317 	ldw	r19,12(sp)
 40028e4:	dc800217 	ldw	r18,8(sp)
 40028e8:	dc400117 	ldw	r17,4(sp)
 40028ec:	dc000017 	ldw	r16,0(sp)
 40028f0:	dec00504 	addi	sp,sp,20
 40028f4:	f800283a 	ret
 40028f8:	040bc83a 	sub	r5,zero,r16
 40028fc:	9009883a 	mov	r4,r18
 4002900:	400211c0 	call	400211c <_sbrk_r>
 4002904:	00ffffc4 	movi	r3,-1
 4002908:	10c00d26 	beq	r2,r3,4002940 <_malloc_trim_r+0xe0>
 400290c:	00c10074 	movhi	r3,1025
 4002910:	18c48e04 	addi	r3,r3,4664
 4002914:	18800017 	ldw	r2,0(r3)
 4002918:	99000217 	ldw	r4,8(r19)
 400291c:	8c23c83a 	sub	r17,r17,r16
 4002920:	8c400054 	ori	r17,r17,1
 4002924:	1421c83a 	sub	r16,r2,r16
 4002928:	24400115 	stw	r17,4(r4)
 400292c:	9009883a 	mov	r4,r18
 4002930:	1c000015 	stw	r16,0(r3)
 4002934:	4003cf40 	call	4003cf4 <__malloc_unlock>
 4002938:	00800044 	movi	r2,1
 400293c:	003fe706 	br	40028dc <__alt_mem_onchip_memory2_0+0xfc0008dc>
 4002940:	000b883a 	mov	r5,zero
 4002944:	9009883a 	mov	r4,r18
 4002948:	400211c0 	call	400211c <_sbrk_r>
 400294c:	99000217 	ldw	r4,8(r19)
 4002950:	014003c4 	movi	r5,15
 4002954:	1107c83a 	sub	r3,r2,r4
 4002958:	28ffdd0e 	bge	r5,r3,40028d0 <__alt_mem_onchip_memory2_0+0xfc0008d0>
 400295c:	01410074 	movhi	r5,1025
 4002960:	297d8204 	addi	r5,r5,-2552
 4002964:	29400017 	ldw	r5,0(r5)
 4002968:	18c00054 	ori	r3,r3,1
 400296c:	20c00115 	stw	r3,4(r4)
 4002970:	00c10074 	movhi	r3,1025
 4002974:	1145c83a 	sub	r2,r2,r5
 4002978:	18c48e04 	addi	r3,r3,4664
 400297c:	18800015 	stw	r2,0(r3)
 4002980:	003fd306 	br	40028d0 <__alt_mem_onchip_memory2_0+0xfc0008d0>

04002984 <_free_r>:
 4002984:	28004126 	beq	r5,zero,4002a8c <_free_r+0x108>
 4002988:	defffd04 	addi	sp,sp,-12
 400298c:	dc400115 	stw	r17,4(sp)
 4002990:	dc000015 	stw	r16,0(sp)
 4002994:	2023883a 	mov	r17,r4
 4002998:	2821883a 	mov	r16,r5
 400299c:	dfc00215 	stw	ra,8(sp)
 40029a0:	4003bd40 	call	4003bd4 <__malloc_lock>
 40029a4:	81ffff17 	ldw	r7,-4(r16)
 40029a8:	00bfff84 	movi	r2,-2
 40029ac:	01010074 	movhi	r4,1025
 40029b0:	81bffe04 	addi	r6,r16,-8
 40029b4:	3884703a 	and	r2,r7,r2
 40029b8:	2137f904 	addi	r4,r4,-8220
 40029bc:	308b883a 	add	r5,r6,r2
 40029c0:	2a400117 	ldw	r9,4(r5)
 40029c4:	22000217 	ldw	r8,8(r4)
 40029c8:	00ffff04 	movi	r3,-4
 40029cc:	48c6703a 	and	r3,r9,r3
 40029d0:	2a005726 	beq	r5,r8,4002b30 <_free_r+0x1ac>
 40029d4:	28c00115 	stw	r3,4(r5)
 40029d8:	39c0004c 	andi	r7,r7,1
 40029dc:	3800091e 	bne	r7,zero,4002a04 <_free_r+0x80>
 40029e0:	823ffe17 	ldw	r8,-8(r16)
 40029e4:	22400204 	addi	r9,r4,8
 40029e8:	320dc83a 	sub	r6,r6,r8
 40029ec:	31c00217 	ldw	r7,8(r6)
 40029f0:	1205883a 	add	r2,r2,r8
 40029f4:	3a406526 	beq	r7,r9,4002b8c <_free_r+0x208>
 40029f8:	32000317 	ldw	r8,12(r6)
 40029fc:	3a000315 	stw	r8,12(r7)
 4002a00:	41c00215 	stw	r7,8(r8)
 4002a04:	28cf883a 	add	r7,r5,r3
 4002a08:	39c00117 	ldw	r7,4(r7)
 4002a0c:	39c0004c 	andi	r7,r7,1
 4002a10:	38003a26 	beq	r7,zero,4002afc <_free_r+0x178>
 4002a14:	10c00054 	ori	r3,r2,1
 4002a18:	30c00115 	stw	r3,4(r6)
 4002a1c:	3087883a 	add	r3,r6,r2
 4002a20:	18800015 	stw	r2,0(r3)
 4002a24:	00c07fc4 	movi	r3,511
 4002a28:	18801936 	bltu	r3,r2,4002a90 <_free_r+0x10c>
 4002a2c:	1004d0fa 	srli	r2,r2,3
 4002a30:	01c00044 	movi	r7,1
 4002a34:	21400117 	ldw	r5,4(r4)
 4002a38:	10c00044 	addi	r3,r2,1
 4002a3c:	18c7883a 	add	r3,r3,r3
 4002a40:	1005d0ba 	srai	r2,r2,2
 4002a44:	18c7883a 	add	r3,r3,r3
 4002a48:	18c7883a 	add	r3,r3,r3
 4002a4c:	1907883a 	add	r3,r3,r4
 4002a50:	3884983a 	sll	r2,r7,r2
 4002a54:	19c00017 	ldw	r7,0(r3)
 4002a58:	1a3ffe04 	addi	r8,r3,-8
 4002a5c:	1144b03a 	or	r2,r2,r5
 4002a60:	32000315 	stw	r8,12(r6)
 4002a64:	31c00215 	stw	r7,8(r6)
 4002a68:	20800115 	stw	r2,4(r4)
 4002a6c:	19800015 	stw	r6,0(r3)
 4002a70:	39800315 	stw	r6,12(r7)
 4002a74:	8809883a 	mov	r4,r17
 4002a78:	dfc00217 	ldw	ra,8(sp)
 4002a7c:	dc400117 	ldw	r17,4(sp)
 4002a80:	dc000017 	ldw	r16,0(sp)
 4002a84:	dec00304 	addi	sp,sp,12
 4002a88:	4003cf41 	jmpi	4003cf4 <__malloc_unlock>
 4002a8c:	f800283a 	ret
 4002a90:	100ad27a 	srli	r5,r2,9
 4002a94:	00c00104 	movi	r3,4
 4002a98:	19404a36 	bltu	r3,r5,4002bc4 <_free_r+0x240>
 4002a9c:	100ad1ba 	srli	r5,r2,6
 4002aa0:	28c00e44 	addi	r3,r5,57
 4002aa4:	18c7883a 	add	r3,r3,r3
 4002aa8:	29400e04 	addi	r5,r5,56
 4002aac:	18c7883a 	add	r3,r3,r3
 4002ab0:	18c7883a 	add	r3,r3,r3
 4002ab4:	1909883a 	add	r4,r3,r4
 4002ab8:	20c00017 	ldw	r3,0(r4)
 4002abc:	01c10074 	movhi	r7,1025
 4002ac0:	213ffe04 	addi	r4,r4,-8
 4002ac4:	39f7f904 	addi	r7,r7,-8220
 4002ac8:	20c04426 	beq	r4,r3,4002bdc <_free_r+0x258>
 4002acc:	01ffff04 	movi	r7,-4
 4002ad0:	19400117 	ldw	r5,4(r3)
 4002ad4:	29ca703a 	and	r5,r5,r7
 4002ad8:	1140022e 	bgeu	r2,r5,4002ae4 <_free_r+0x160>
 4002adc:	18c00217 	ldw	r3,8(r3)
 4002ae0:	20fffb1e 	bne	r4,r3,4002ad0 <__alt_mem_onchip_memory2_0+0xfc000ad0>
 4002ae4:	19000317 	ldw	r4,12(r3)
 4002ae8:	31000315 	stw	r4,12(r6)
 4002aec:	30c00215 	stw	r3,8(r6)
 4002af0:	21800215 	stw	r6,8(r4)
 4002af4:	19800315 	stw	r6,12(r3)
 4002af8:	003fde06 	br	4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>
 4002afc:	29c00217 	ldw	r7,8(r5)
 4002b00:	10c5883a 	add	r2,r2,r3
 4002b04:	00c10074 	movhi	r3,1025
 4002b08:	18f7fb04 	addi	r3,r3,-8212
 4002b0c:	38c03b26 	beq	r7,r3,4002bfc <_free_r+0x278>
 4002b10:	2a000317 	ldw	r8,12(r5)
 4002b14:	11400054 	ori	r5,r2,1
 4002b18:	3087883a 	add	r3,r6,r2
 4002b1c:	3a000315 	stw	r8,12(r7)
 4002b20:	41c00215 	stw	r7,8(r8)
 4002b24:	31400115 	stw	r5,4(r6)
 4002b28:	18800015 	stw	r2,0(r3)
 4002b2c:	003fbd06 	br	4002a24 <__alt_mem_onchip_memory2_0+0xfc000a24>
 4002b30:	39c0004c 	andi	r7,r7,1
 4002b34:	10c5883a 	add	r2,r2,r3
 4002b38:	3800071e 	bne	r7,zero,4002b58 <_free_r+0x1d4>
 4002b3c:	81fffe17 	ldw	r7,-8(r16)
 4002b40:	31cdc83a 	sub	r6,r6,r7
 4002b44:	30c00317 	ldw	r3,12(r6)
 4002b48:	31400217 	ldw	r5,8(r6)
 4002b4c:	11c5883a 	add	r2,r2,r7
 4002b50:	28c00315 	stw	r3,12(r5)
 4002b54:	19400215 	stw	r5,8(r3)
 4002b58:	10c00054 	ori	r3,r2,1
 4002b5c:	30c00115 	stw	r3,4(r6)
 4002b60:	00c10074 	movhi	r3,1025
 4002b64:	18fd8304 	addi	r3,r3,-2548
 4002b68:	18c00017 	ldw	r3,0(r3)
 4002b6c:	21800215 	stw	r6,8(r4)
 4002b70:	10ffc036 	bltu	r2,r3,4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>
 4002b74:	00810074 	movhi	r2,1025
 4002b78:	10846c04 	addi	r2,r2,4528
 4002b7c:	11400017 	ldw	r5,0(r2)
 4002b80:	8809883a 	mov	r4,r17
 4002b84:	40028600 	call	4002860 <_malloc_trim_r>
 4002b88:	003fba06 	br	4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>
 4002b8c:	28c9883a 	add	r4,r5,r3
 4002b90:	21000117 	ldw	r4,4(r4)
 4002b94:	2100004c 	andi	r4,r4,1
 4002b98:	2000391e 	bne	r4,zero,4002c80 <_free_r+0x2fc>
 4002b9c:	29c00217 	ldw	r7,8(r5)
 4002ba0:	29000317 	ldw	r4,12(r5)
 4002ba4:	1885883a 	add	r2,r3,r2
 4002ba8:	10c00054 	ori	r3,r2,1
 4002bac:	39000315 	stw	r4,12(r7)
 4002bb0:	21c00215 	stw	r7,8(r4)
 4002bb4:	30c00115 	stw	r3,4(r6)
 4002bb8:	308d883a 	add	r6,r6,r2
 4002bbc:	30800015 	stw	r2,0(r6)
 4002bc0:	003fac06 	br	4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>
 4002bc4:	00c00504 	movi	r3,20
 4002bc8:	19401536 	bltu	r3,r5,4002c20 <_free_r+0x29c>
 4002bcc:	28c01704 	addi	r3,r5,92
 4002bd0:	18c7883a 	add	r3,r3,r3
 4002bd4:	294016c4 	addi	r5,r5,91
 4002bd8:	003fb406 	br	4002aac <__alt_mem_onchip_memory2_0+0xfc000aac>
 4002bdc:	280bd0ba 	srai	r5,r5,2
 4002be0:	00c00044 	movi	r3,1
 4002be4:	38800117 	ldw	r2,4(r7)
 4002be8:	194a983a 	sll	r5,r3,r5
 4002bec:	2007883a 	mov	r3,r4
 4002bf0:	2884b03a 	or	r2,r5,r2
 4002bf4:	38800115 	stw	r2,4(r7)
 4002bf8:	003fbb06 	br	4002ae8 <__alt_mem_onchip_memory2_0+0xfc000ae8>
 4002bfc:	21800515 	stw	r6,20(r4)
 4002c00:	21800415 	stw	r6,16(r4)
 4002c04:	10c00054 	ori	r3,r2,1
 4002c08:	31c00315 	stw	r7,12(r6)
 4002c0c:	31c00215 	stw	r7,8(r6)
 4002c10:	30c00115 	stw	r3,4(r6)
 4002c14:	308d883a 	add	r6,r6,r2
 4002c18:	30800015 	stw	r2,0(r6)
 4002c1c:	003f9506 	br	4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>
 4002c20:	00c01504 	movi	r3,84
 4002c24:	19400536 	bltu	r3,r5,4002c3c <_free_r+0x2b8>
 4002c28:	100ad33a 	srli	r5,r2,12
 4002c2c:	28c01bc4 	addi	r3,r5,111
 4002c30:	18c7883a 	add	r3,r3,r3
 4002c34:	29401b84 	addi	r5,r5,110
 4002c38:	003f9c06 	br	4002aac <__alt_mem_onchip_memory2_0+0xfc000aac>
 4002c3c:	00c05504 	movi	r3,340
 4002c40:	19400536 	bltu	r3,r5,4002c58 <_free_r+0x2d4>
 4002c44:	100ad3fa 	srli	r5,r2,15
 4002c48:	28c01e04 	addi	r3,r5,120
 4002c4c:	18c7883a 	add	r3,r3,r3
 4002c50:	29401dc4 	addi	r5,r5,119
 4002c54:	003f9506 	br	4002aac <__alt_mem_onchip_memory2_0+0xfc000aac>
 4002c58:	00c15504 	movi	r3,1364
 4002c5c:	19400536 	bltu	r3,r5,4002c74 <_free_r+0x2f0>
 4002c60:	100ad4ba 	srli	r5,r2,18
 4002c64:	28c01f44 	addi	r3,r5,125
 4002c68:	18c7883a 	add	r3,r3,r3
 4002c6c:	29401f04 	addi	r5,r5,124
 4002c70:	003f8e06 	br	4002aac <__alt_mem_onchip_memory2_0+0xfc000aac>
 4002c74:	00c03f84 	movi	r3,254
 4002c78:	01401f84 	movi	r5,126
 4002c7c:	003f8b06 	br	4002aac <__alt_mem_onchip_memory2_0+0xfc000aac>
 4002c80:	10c00054 	ori	r3,r2,1
 4002c84:	30c00115 	stw	r3,4(r6)
 4002c88:	308d883a 	add	r6,r6,r2
 4002c8c:	30800015 	stw	r2,0(r6)
 4002c90:	003f7806 	br	4002a74 <__alt_mem_onchip_memory2_0+0xfc000a74>

04002c94 <_lseek_r>:
 4002c94:	defffd04 	addi	sp,sp,-12
 4002c98:	2805883a 	mov	r2,r5
 4002c9c:	dc000015 	stw	r16,0(sp)
 4002ca0:	04010074 	movhi	r16,1025
 4002ca4:	dc400115 	stw	r17,4(sp)
 4002ca8:	300b883a 	mov	r5,r6
 4002cac:	84046d04 	addi	r16,r16,4532
 4002cb0:	2023883a 	mov	r17,r4
 4002cb4:	380d883a 	mov	r6,r7
 4002cb8:	1009883a 	mov	r4,r2
 4002cbc:	dfc00215 	stw	ra,8(sp)
 4002cc0:	80000015 	stw	zero,0(r16)
 4002cc4:	40035a00 	call	40035a0 <lseek>
 4002cc8:	00ffffc4 	movi	r3,-1
 4002ccc:	10c00526 	beq	r2,r3,4002ce4 <_lseek_r+0x50>
 4002cd0:	dfc00217 	ldw	ra,8(sp)
 4002cd4:	dc400117 	ldw	r17,4(sp)
 4002cd8:	dc000017 	ldw	r16,0(sp)
 4002cdc:	dec00304 	addi	sp,sp,12
 4002ce0:	f800283a 	ret
 4002ce4:	80c00017 	ldw	r3,0(r16)
 4002ce8:	183ff926 	beq	r3,zero,4002cd0 <__alt_mem_onchip_memory2_0+0xfc000cd0>
 4002cec:	88c00015 	stw	r3,0(r17)
 4002cf0:	003ff706 	br	4002cd0 <__alt_mem_onchip_memory2_0+0xfc000cd0>

04002cf4 <__smakebuf_r>:
 4002cf4:	2880030b 	ldhu	r2,12(r5)
 4002cf8:	10c0008c 	andi	r3,r2,2
 4002cfc:	1800411e 	bne	r3,zero,4002e04 <__smakebuf_r+0x110>
 4002d00:	deffec04 	addi	sp,sp,-80
 4002d04:	dc000f15 	stw	r16,60(sp)
 4002d08:	2821883a 	mov	r16,r5
 4002d0c:	2940038f 	ldh	r5,14(r5)
 4002d10:	dc401015 	stw	r17,64(sp)
 4002d14:	dfc01315 	stw	ra,76(sp)
 4002d18:	dcc01215 	stw	r19,72(sp)
 4002d1c:	dc801115 	stw	r18,68(sp)
 4002d20:	2023883a 	mov	r17,r4
 4002d24:	28001c16 	blt	r5,zero,4002d98 <__smakebuf_r+0xa4>
 4002d28:	d80d883a 	mov	r6,sp
 4002d2c:	4002f100 	call	4002f10 <_fstat_r>
 4002d30:	10001816 	blt	r2,zero,4002d94 <__smakebuf_r+0xa0>
 4002d34:	d8800117 	ldw	r2,4(sp)
 4002d38:	00e00014 	movui	r3,32768
 4002d3c:	10bc000c 	andi	r2,r2,61440
 4002d40:	14c80020 	cmpeqi	r19,r2,8192
 4002d44:	10c03726 	beq	r2,r3,4002e24 <__smakebuf_r+0x130>
 4002d48:	80c0030b 	ldhu	r3,12(r16)
 4002d4c:	18c20014 	ori	r3,r3,2048
 4002d50:	80c0030d 	sth	r3,12(r16)
 4002d54:	00c80004 	movi	r3,8192
 4002d58:	10c0521e 	bne	r2,r3,4002ea4 <__smakebuf_r+0x1b0>
 4002d5c:	8140038f 	ldh	r5,14(r16)
 4002d60:	8809883a 	mov	r4,r17
 4002d64:	4002f6c0 	call	4002f6c <_isatty_r>
 4002d68:	10004c26 	beq	r2,zero,4002e9c <__smakebuf_r+0x1a8>
 4002d6c:	8080030b 	ldhu	r2,12(r16)
 4002d70:	80c010c4 	addi	r3,r16,67
 4002d74:	80c00015 	stw	r3,0(r16)
 4002d78:	10800054 	ori	r2,r2,1
 4002d7c:	8080030d 	sth	r2,12(r16)
 4002d80:	00800044 	movi	r2,1
 4002d84:	80c00415 	stw	r3,16(r16)
 4002d88:	80800515 	stw	r2,20(r16)
 4002d8c:	04810004 	movi	r18,1024
 4002d90:	00000706 	br	4002db0 <__smakebuf_r+0xbc>
 4002d94:	8080030b 	ldhu	r2,12(r16)
 4002d98:	10c0200c 	andi	r3,r2,128
 4002d9c:	18001f1e 	bne	r3,zero,4002e1c <__smakebuf_r+0x128>
 4002da0:	04810004 	movi	r18,1024
 4002da4:	10820014 	ori	r2,r2,2048
 4002da8:	8080030d 	sth	r2,12(r16)
 4002dac:	0027883a 	mov	r19,zero
 4002db0:	900b883a 	mov	r5,r18
 4002db4:	8809883a 	mov	r4,r17
 4002db8:	4000efc0 	call	4000efc <_malloc_r>
 4002dbc:	10002c26 	beq	r2,zero,4002e70 <__smakebuf_r+0x17c>
 4002dc0:	80c0030b 	ldhu	r3,12(r16)
 4002dc4:	01010034 	movhi	r4,1024
 4002dc8:	21014804 	addi	r4,r4,1312
 4002dcc:	89000f15 	stw	r4,60(r17)
 4002dd0:	18c02014 	ori	r3,r3,128
 4002dd4:	80c0030d 	sth	r3,12(r16)
 4002dd8:	80800015 	stw	r2,0(r16)
 4002ddc:	80800415 	stw	r2,16(r16)
 4002de0:	84800515 	stw	r18,20(r16)
 4002de4:	98001a1e 	bne	r19,zero,4002e50 <__smakebuf_r+0x15c>
 4002de8:	dfc01317 	ldw	ra,76(sp)
 4002dec:	dcc01217 	ldw	r19,72(sp)
 4002df0:	dc801117 	ldw	r18,68(sp)
 4002df4:	dc401017 	ldw	r17,64(sp)
 4002df8:	dc000f17 	ldw	r16,60(sp)
 4002dfc:	dec01404 	addi	sp,sp,80
 4002e00:	f800283a 	ret
 4002e04:	288010c4 	addi	r2,r5,67
 4002e08:	28800015 	stw	r2,0(r5)
 4002e0c:	28800415 	stw	r2,16(r5)
 4002e10:	00800044 	movi	r2,1
 4002e14:	28800515 	stw	r2,20(r5)
 4002e18:	f800283a 	ret
 4002e1c:	04801004 	movi	r18,64
 4002e20:	003fe006 	br	4002da4 <__alt_mem_onchip_memory2_0+0xfc000da4>
 4002e24:	81000a17 	ldw	r4,40(r16)
 4002e28:	00c10034 	movhi	r3,1024
 4002e2c:	18c89204 	addi	r3,r3,8776
 4002e30:	20ffc51e 	bne	r4,r3,4002d48 <__alt_mem_onchip_memory2_0+0xfc000d48>
 4002e34:	8080030b 	ldhu	r2,12(r16)
 4002e38:	04810004 	movi	r18,1024
 4002e3c:	84801315 	stw	r18,76(r16)
 4002e40:	1484b03a 	or	r2,r2,r18
 4002e44:	8080030d 	sth	r2,12(r16)
 4002e48:	0027883a 	mov	r19,zero
 4002e4c:	003fd806 	br	4002db0 <__alt_mem_onchip_memory2_0+0xfc000db0>
 4002e50:	8140038f 	ldh	r5,14(r16)
 4002e54:	8809883a 	mov	r4,r17
 4002e58:	4002f6c0 	call	4002f6c <_isatty_r>
 4002e5c:	103fe226 	beq	r2,zero,4002de8 <__alt_mem_onchip_memory2_0+0xfc000de8>
 4002e60:	8080030b 	ldhu	r2,12(r16)
 4002e64:	10800054 	ori	r2,r2,1
 4002e68:	8080030d 	sth	r2,12(r16)
 4002e6c:	003fde06 	br	4002de8 <__alt_mem_onchip_memory2_0+0xfc000de8>
 4002e70:	8080030b 	ldhu	r2,12(r16)
 4002e74:	10c0800c 	andi	r3,r2,512
 4002e78:	183fdb1e 	bne	r3,zero,4002de8 <__alt_mem_onchip_memory2_0+0xfc000de8>
 4002e7c:	10800094 	ori	r2,r2,2
 4002e80:	80c010c4 	addi	r3,r16,67
 4002e84:	8080030d 	sth	r2,12(r16)
 4002e88:	00800044 	movi	r2,1
 4002e8c:	80c00015 	stw	r3,0(r16)
 4002e90:	80c00415 	stw	r3,16(r16)
 4002e94:	80800515 	stw	r2,20(r16)
 4002e98:	003fd306 	br	4002de8 <__alt_mem_onchip_memory2_0+0xfc000de8>
 4002e9c:	04810004 	movi	r18,1024
 4002ea0:	003fc306 	br	4002db0 <__alt_mem_onchip_memory2_0+0xfc000db0>
 4002ea4:	0027883a 	mov	r19,zero
 4002ea8:	04810004 	movi	r18,1024
 4002eac:	003fc006 	br	4002db0 <__alt_mem_onchip_memory2_0+0xfc000db0>

04002eb0 <_read_r>:
 4002eb0:	defffd04 	addi	sp,sp,-12
 4002eb4:	2805883a 	mov	r2,r5
 4002eb8:	dc000015 	stw	r16,0(sp)
 4002ebc:	04010074 	movhi	r16,1025
 4002ec0:	dc400115 	stw	r17,4(sp)
 4002ec4:	300b883a 	mov	r5,r6
 4002ec8:	84046d04 	addi	r16,r16,4532
 4002ecc:	2023883a 	mov	r17,r4
 4002ed0:	380d883a 	mov	r6,r7
 4002ed4:	1009883a 	mov	r4,r2
 4002ed8:	dfc00215 	stw	ra,8(sp)
 4002edc:	80000015 	stw	zero,0(r16)
 4002ee0:	400376c0 	call	400376c <read>
 4002ee4:	00ffffc4 	movi	r3,-1
 4002ee8:	10c00526 	beq	r2,r3,4002f00 <_read_r+0x50>
 4002eec:	dfc00217 	ldw	ra,8(sp)
 4002ef0:	dc400117 	ldw	r17,4(sp)
 4002ef4:	dc000017 	ldw	r16,0(sp)
 4002ef8:	dec00304 	addi	sp,sp,12
 4002efc:	f800283a 	ret
 4002f00:	80c00017 	ldw	r3,0(r16)
 4002f04:	183ff926 	beq	r3,zero,4002eec <__alt_mem_onchip_memory2_0+0xfc000eec>
 4002f08:	88c00015 	stw	r3,0(r17)
 4002f0c:	003ff706 	br	4002eec <__alt_mem_onchip_memory2_0+0xfc000eec>

04002f10 <_fstat_r>:
 4002f10:	defffd04 	addi	sp,sp,-12
 4002f14:	2805883a 	mov	r2,r5
 4002f18:	dc000015 	stw	r16,0(sp)
 4002f1c:	04010074 	movhi	r16,1025
 4002f20:	dc400115 	stw	r17,4(sp)
 4002f24:	84046d04 	addi	r16,r16,4532
 4002f28:	2023883a 	mov	r17,r4
 4002f2c:	300b883a 	mov	r5,r6
 4002f30:	1009883a 	mov	r4,r2
 4002f34:	dfc00215 	stw	ra,8(sp)
 4002f38:	80000015 	stw	zero,0(r16)
 4002f3c:	40032e80 	call	40032e8 <fstat>
 4002f40:	00ffffc4 	movi	r3,-1
 4002f44:	10c00526 	beq	r2,r3,4002f5c <_fstat_r+0x4c>
 4002f48:	dfc00217 	ldw	ra,8(sp)
 4002f4c:	dc400117 	ldw	r17,4(sp)
 4002f50:	dc000017 	ldw	r16,0(sp)
 4002f54:	dec00304 	addi	sp,sp,12
 4002f58:	f800283a 	ret
 4002f5c:	80c00017 	ldw	r3,0(r16)
 4002f60:	183ff926 	beq	r3,zero,4002f48 <__alt_mem_onchip_memory2_0+0xfc000f48>
 4002f64:	88c00015 	stw	r3,0(r17)
 4002f68:	003ff706 	br	4002f48 <__alt_mem_onchip_memory2_0+0xfc000f48>

04002f6c <_isatty_r>:
 4002f6c:	defffd04 	addi	sp,sp,-12
 4002f70:	dc000015 	stw	r16,0(sp)
 4002f74:	04010074 	movhi	r16,1025
 4002f78:	dc400115 	stw	r17,4(sp)
 4002f7c:	84046d04 	addi	r16,r16,4532
 4002f80:	2023883a 	mov	r17,r4
 4002f84:	2809883a 	mov	r4,r5
 4002f88:	dfc00215 	stw	ra,8(sp)
 4002f8c:	80000015 	stw	zero,0(r16)
 4002f90:	40033d40 	call	40033d4 <isatty>
 4002f94:	00ffffc4 	movi	r3,-1
 4002f98:	10c00526 	beq	r2,r3,4002fb0 <_isatty_r+0x44>
 4002f9c:	dfc00217 	ldw	ra,8(sp)
 4002fa0:	dc400117 	ldw	r17,4(sp)
 4002fa4:	dc000017 	ldw	r16,0(sp)
 4002fa8:	dec00304 	addi	sp,sp,12
 4002fac:	f800283a 	ret
 4002fb0:	80c00017 	ldw	r3,0(r16)
 4002fb4:	183ff926 	beq	r3,zero,4002f9c <__alt_mem_onchip_memory2_0+0xfc000f9c>
 4002fb8:	88c00015 	stw	r3,0(r17)
 4002fbc:	003ff706 	br	4002f9c <__alt_mem_onchip_memory2_0+0xfc000f9c>

04002fc0 <__divsi3>:
 4002fc0:	20001b16 	blt	r4,zero,4003030 <__divsi3+0x70>
 4002fc4:	000f883a 	mov	r7,zero
 4002fc8:	28001616 	blt	r5,zero,4003024 <__divsi3+0x64>
 4002fcc:	200d883a 	mov	r6,r4
 4002fd0:	29001a2e 	bgeu	r5,r4,400303c <__divsi3+0x7c>
 4002fd4:	00800804 	movi	r2,32
 4002fd8:	00c00044 	movi	r3,1
 4002fdc:	00000106 	br	4002fe4 <__divsi3+0x24>
 4002fe0:	10000d26 	beq	r2,zero,4003018 <__divsi3+0x58>
 4002fe4:	294b883a 	add	r5,r5,r5
 4002fe8:	10bfffc4 	addi	r2,r2,-1
 4002fec:	18c7883a 	add	r3,r3,r3
 4002ff0:	293ffb36 	bltu	r5,r4,4002fe0 <__alt_mem_onchip_memory2_0+0xfc000fe0>
 4002ff4:	0005883a 	mov	r2,zero
 4002ff8:	18000726 	beq	r3,zero,4003018 <__divsi3+0x58>
 4002ffc:	0005883a 	mov	r2,zero
 4003000:	31400236 	bltu	r6,r5,400300c <__divsi3+0x4c>
 4003004:	314dc83a 	sub	r6,r6,r5
 4003008:	10c4b03a 	or	r2,r2,r3
 400300c:	1806d07a 	srli	r3,r3,1
 4003010:	280ad07a 	srli	r5,r5,1
 4003014:	183ffa1e 	bne	r3,zero,4003000 <__alt_mem_onchip_memory2_0+0xfc001000>
 4003018:	38000126 	beq	r7,zero,4003020 <__divsi3+0x60>
 400301c:	0085c83a 	sub	r2,zero,r2
 4003020:	f800283a 	ret
 4003024:	014bc83a 	sub	r5,zero,r5
 4003028:	39c0005c 	xori	r7,r7,1
 400302c:	003fe706 	br	4002fcc <__alt_mem_onchip_memory2_0+0xfc000fcc>
 4003030:	0109c83a 	sub	r4,zero,r4
 4003034:	01c00044 	movi	r7,1
 4003038:	003fe306 	br	4002fc8 <__alt_mem_onchip_memory2_0+0xfc000fc8>
 400303c:	00c00044 	movi	r3,1
 4003040:	003fee06 	br	4002ffc <__alt_mem_onchip_memory2_0+0xfc000ffc>

04003044 <__modsi3>:
 4003044:	20001716 	blt	r4,zero,40030a4 <__modsi3+0x60>
 4003048:	000f883a 	mov	r7,zero
 400304c:	2005883a 	mov	r2,r4
 4003050:	28001216 	blt	r5,zero,400309c <__modsi3+0x58>
 4003054:	2900162e 	bgeu	r5,r4,40030b0 <__modsi3+0x6c>
 4003058:	01800804 	movi	r6,32
 400305c:	00c00044 	movi	r3,1
 4003060:	00000106 	br	4003068 <__modsi3+0x24>
 4003064:	30000a26 	beq	r6,zero,4003090 <__modsi3+0x4c>
 4003068:	294b883a 	add	r5,r5,r5
 400306c:	31bfffc4 	addi	r6,r6,-1
 4003070:	18c7883a 	add	r3,r3,r3
 4003074:	293ffb36 	bltu	r5,r4,4003064 <__alt_mem_onchip_memory2_0+0xfc001064>
 4003078:	18000526 	beq	r3,zero,4003090 <__modsi3+0x4c>
 400307c:	1806d07a 	srli	r3,r3,1
 4003080:	11400136 	bltu	r2,r5,4003088 <__modsi3+0x44>
 4003084:	1145c83a 	sub	r2,r2,r5
 4003088:	280ad07a 	srli	r5,r5,1
 400308c:	183ffb1e 	bne	r3,zero,400307c <__alt_mem_onchip_memory2_0+0xfc00107c>
 4003090:	38000126 	beq	r7,zero,4003098 <__modsi3+0x54>
 4003094:	0085c83a 	sub	r2,zero,r2
 4003098:	f800283a 	ret
 400309c:	014bc83a 	sub	r5,zero,r5
 40030a0:	003fec06 	br	4003054 <__alt_mem_onchip_memory2_0+0xfc001054>
 40030a4:	0109c83a 	sub	r4,zero,r4
 40030a8:	01c00044 	movi	r7,1
 40030ac:	003fe706 	br	400304c <__alt_mem_onchip_memory2_0+0xfc00104c>
 40030b0:	00c00044 	movi	r3,1
 40030b4:	003ff106 	br	400307c <__alt_mem_onchip_memory2_0+0xfc00107c>

040030b8 <__udivsi3>:
 40030b8:	200d883a 	mov	r6,r4
 40030bc:	2900152e 	bgeu	r5,r4,4003114 <__udivsi3+0x5c>
 40030c0:	28001416 	blt	r5,zero,4003114 <__udivsi3+0x5c>
 40030c4:	00800804 	movi	r2,32
 40030c8:	00c00044 	movi	r3,1
 40030cc:	00000206 	br	40030d8 <__udivsi3+0x20>
 40030d0:	10000e26 	beq	r2,zero,400310c <__udivsi3+0x54>
 40030d4:	28000516 	blt	r5,zero,40030ec <__udivsi3+0x34>
 40030d8:	294b883a 	add	r5,r5,r5
 40030dc:	10bfffc4 	addi	r2,r2,-1
 40030e0:	18c7883a 	add	r3,r3,r3
 40030e4:	293ffa36 	bltu	r5,r4,40030d0 <__alt_mem_onchip_memory2_0+0xfc0010d0>
 40030e8:	18000826 	beq	r3,zero,400310c <__udivsi3+0x54>
 40030ec:	0005883a 	mov	r2,zero
 40030f0:	31400236 	bltu	r6,r5,40030fc <__udivsi3+0x44>
 40030f4:	314dc83a 	sub	r6,r6,r5
 40030f8:	10c4b03a 	or	r2,r2,r3
 40030fc:	1806d07a 	srli	r3,r3,1
 4003100:	280ad07a 	srli	r5,r5,1
 4003104:	183ffa1e 	bne	r3,zero,40030f0 <__alt_mem_onchip_memory2_0+0xfc0010f0>
 4003108:	f800283a 	ret
 400310c:	0005883a 	mov	r2,zero
 4003110:	f800283a 	ret
 4003114:	00c00044 	movi	r3,1
 4003118:	003ff406 	br	40030ec <__alt_mem_onchip_memory2_0+0xfc0010ec>

0400311c <__umodsi3>:
 400311c:	2005883a 	mov	r2,r4
 4003120:	2900122e 	bgeu	r5,r4,400316c <__umodsi3+0x50>
 4003124:	28001116 	blt	r5,zero,400316c <__umodsi3+0x50>
 4003128:	01800804 	movi	r6,32
 400312c:	00c00044 	movi	r3,1
 4003130:	00000206 	br	400313c <__umodsi3+0x20>
 4003134:	30000c26 	beq	r6,zero,4003168 <__umodsi3+0x4c>
 4003138:	28000516 	blt	r5,zero,4003150 <__umodsi3+0x34>
 400313c:	294b883a 	add	r5,r5,r5
 4003140:	31bfffc4 	addi	r6,r6,-1
 4003144:	18c7883a 	add	r3,r3,r3
 4003148:	293ffa36 	bltu	r5,r4,4003134 <__alt_mem_onchip_memory2_0+0xfc001134>
 400314c:	18000626 	beq	r3,zero,4003168 <__umodsi3+0x4c>
 4003150:	1806d07a 	srli	r3,r3,1
 4003154:	11400136 	bltu	r2,r5,400315c <__umodsi3+0x40>
 4003158:	1145c83a 	sub	r2,r2,r5
 400315c:	280ad07a 	srli	r5,r5,1
 4003160:	183ffb1e 	bne	r3,zero,4003150 <__alt_mem_onchip_memory2_0+0xfc001150>
 4003164:	f800283a 	ret
 4003168:	f800283a 	ret
 400316c:	00c00044 	movi	r3,1
 4003170:	003ff706 	br	4003150 <__alt_mem_onchip_memory2_0+0xfc001150>

04003174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003174:	defffe04 	addi	sp,sp,-8
 4003178:	dfc00115 	stw	ra,4(sp)
 400317c:	df000015 	stw	fp,0(sp)
 4003180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003184:	d0a00917 	ldw	r2,-32732(gp)
 4003188:	10000326 	beq	r2,zero,4003198 <alt_get_errno+0x24>
 400318c:	d0a00917 	ldw	r2,-32732(gp)
 4003190:	103ee83a 	callr	r2
 4003194:	00000106 	br	400319c <alt_get_errno+0x28>
 4003198:	d0a6ed04 	addi	r2,gp,-25676
}
 400319c:	e037883a 	mov	sp,fp
 40031a0:	dfc00117 	ldw	ra,4(sp)
 40031a4:	df000017 	ldw	fp,0(sp)
 40031a8:	dec00204 	addi	sp,sp,8
 40031ac:	f800283a 	ret

040031b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40031b0:	defffb04 	addi	sp,sp,-20
 40031b4:	dfc00415 	stw	ra,16(sp)
 40031b8:	df000315 	stw	fp,12(sp)
 40031bc:	df000304 	addi	fp,sp,12
 40031c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40031c4:	e0bfff17 	ldw	r2,-4(fp)
 40031c8:	10000616 	blt	r2,zero,40031e4 <close+0x34>
 40031cc:	e0bfff17 	ldw	r2,-4(fp)
 40031d0:	10c00324 	muli	r3,r2,12
 40031d4:	00810074 	movhi	r2,1025
 40031d8:	10b90504 	addi	r2,r2,-7148
 40031dc:	1885883a 	add	r2,r3,r2
 40031e0:	00000106 	br	40031e8 <close+0x38>
 40031e4:	0005883a 	mov	r2,zero
 40031e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40031ec:	e0bffd17 	ldw	r2,-12(fp)
 40031f0:	10001926 	beq	r2,zero,4003258 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40031f4:	e0bffd17 	ldw	r2,-12(fp)
 40031f8:	10800017 	ldw	r2,0(r2)
 40031fc:	10800417 	ldw	r2,16(r2)
 4003200:	10000626 	beq	r2,zero,400321c <close+0x6c>
 4003204:	e0bffd17 	ldw	r2,-12(fp)
 4003208:	10800017 	ldw	r2,0(r2)
 400320c:	10800417 	ldw	r2,16(r2)
 4003210:	e13ffd17 	ldw	r4,-12(fp)
 4003214:	103ee83a 	callr	r2
 4003218:	00000106 	br	4003220 <close+0x70>
 400321c:	0005883a 	mov	r2,zero
 4003220:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4003224:	e13fff17 	ldw	r4,-4(fp)
 4003228:	40038680 	call	4003868 <alt_release_fd>
    if (rval < 0)
 400322c:	e0bffe17 	ldw	r2,-8(fp)
 4003230:	1000070e 	bge	r2,zero,4003250 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4003234:	40031740 	call	4003174 <alt_get_errno>
 4003238:	1007883a 	mov	r3,r2
 400323c:	e0bffe17 	ldw	r2,-8(fp)
 4003240:	0085c83a 	sub	r2,zero,r2
 4003244:	18800015 	stw	r2,0(r3)
      return -1;
 4003248:	00bfffc4 	movi	r2,-1
 400324c:	00000706 	br	400326c <close+0xbc>
    }
    return 0;
 4003250:	0005883a 	mov	r2,zero
 4003254:	00000506 	br	400326c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003258:	40031740 	call	4003174 <alt_get_errno>
 400325c:	1007883a 	mov	r3,r2
 4003260:	00801444 	movi	r2,81
 4003264:	18800015 	stw	r2,0(r3)
    return -1;
 4003268:	00bfffc4 	movi	r2,-1
  }
}
 400326c:	e037883a 	mov	sp,fp
 4003270:	dfc00117 	ldw	ra,4(sp)
 4003274:	df000017 	ldw	fp,0(sp)
 4003278:	dec00204 	addi	sp,sp,8
 400327c:	f800283a 	ret

04003280 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4003280:	defffc04 	addi	sp,sp,-16
 4003284:	df000315 	stw	fp,12(sp)
 4003288:	df000304 	addi	fp,sp,12
 400328c:	e13ffd15 	stw	r4,-12(fp)
 4003290:	e17ffe15 	stw	r5,-8(fp)
 4003294:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003298:	e0bfff17 	ldw	r2,-4(fp)
}
 400329c:	e037883a 	mov	sp,fp
 40032a0:	df000017 	ldw	fp,0(sp)
 40032a4:	dec00104 	addi	sp,sp,4
 40032a8:	f800283a 	ret

040032ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40032ac:	defffe04 	addi	sp,sp,-8
 40032b0:	dfc00115 	stw	ra,4(sp)
 40032b4:	df000015 	stw	fp,0(sp)
 40032b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40032bc:	d0a00917 	ldw	r2,-32732(gp)
 40032c0:	10000326 	beq	r2,zero,40032d0 <alt_get_errno+0x24>
 40032c4:	d0a00917 	ldw	r2,-32732(gp)
 40032c8:	103ee83a 	callr	r2
 40032cc:	00000106 	br	40032d4 <alt_get_errno+0x28>
 40032d0:	d0a6ed04 	addi	r2,gp,-25676
}
 40032d4:	e037883a 	mov	sp,fp
 40032d8:	dfc00117 	ldw	ra,4(sp)
 40032dc:	df000017 	ldw	fp,0(sp)
 40032e0:	dec00204 	addi	sp,sp,8
 40032e4:	f800283a 	ret

040032e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40032e8:	defffb04 	addi	sp,sp,-20
 40032ec:	dfc00415 	stw	ra,16(sp)
 40032f0:	df000315 	stw	fp,12(sp)
 40032f4:	df000304 	addi	fp,sp,12
 40032f8:	e13ffe15 	stw	r4,-8(fp)
 40032fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003300:	e0bffe17 	ldw	r2,-8(fp)
 4003304:	10000616 	blt	r2,zero,4003320 <fstat+0x38>
 4003308:	e0bffe17 	ldw	r2,-8(fp)
 400330c:	10c00324 	muli	r3,r2,12
 4003310:	00810074 	movhi	r2,1025
 4003314:	10b90504 	addi	r2,r2,-7148
 4003318:	1885883a 	add	r2,r3,r2
 400331c:	00000106 	br	4003324 <fstat+0x3c>
 4003320:	0005883a 	mov	r2,zero
 4003324:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4003328:	e0bffd17 	ldw	r2,-12(fp)
 400332c:	10001026 	beq	r2,zero,4003370 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4003330:	e0bffd17 	ldw	r2,-12(fp)
 4003334:	10800017 	ldw	r2,0(r2)
 4003338:	10800817 	ldw	r2,32(r2)
 400333c:	10000726 	beq	r2,zero,400335c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4003340:	e0bffd17 	ldw	r2,-12(fp)
 4003344:	10800017 	ldw	r2,0(r2)
 4003348:	10800817 	ldw	r2,32(r2)
 400334c:	e17fff17 	ldw	r5,-4(fp)
 4003350:	e13ffd17 	ldw	r4,-12(fp)
 4003354:	103ee83a 	callr	r2
 4003358:	00000a06 	br	4003384 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400335c:	e0bfff17 	ldw	r2,-4(fp)
 4003360:	00c80004 	movi	r3,8192
 4003364:	10c00115 	stw	r3,4(r2)
      return 0;
 4003368:	0005883a 	mov	r2,zero
 400336c:	00000506 	br	4003384 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003370:	40032ac0 	call	40032ac <alt_get_errno>
 4003374:	1007883a 	mov	r3,r2
 4003378:	00801444 	movi	r2,81
 400337c:	18800015 	stw	r2,0(r3)
    return -1;
 4003380:	00bfffc4 	movi	r2,-1
  }
}
 4003384:	e037883a 	mov	sp,fp
 4003388:	dfc00117 	ldw	ra,4(sp)
 400338c:	df000017 	ldw	fp,0(sp)
 4003390:	dec00204 	addi	sp,sp,8
 4003394:	f800283a 	ret

04003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003398:	defffe04 	addi	sp,sp,-8
 400339c:	dfc00115 	stw	ra,4(sp)
 40033a0:	df000015 	stw	fp,0(sp)
 40033a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40033a8:	d0a00917 	ldw	r2,-32732(gp)
 40033ac:	10000326 	beq	r2,zero,40033bc <alt_get_errno+0x24>
 40033b0:	d0a00917 	ldw	r2,-32732(gp)
 40033b4:	103ee83a 	callr	r2
 40033b8:	00000106 	br	40033c0 <alt_get_errno+0x28>
 40033bc:	d0a6ed04 	addi	r2,gp,-25676
}
 40033c0:	e037883a 	mov	sp,fp
 40033c4:	dfc00117 	ldw	ra,4(sp)
 40033c8:	df000017 	ldw	fp,0(sp)
 40033cc:	dec00204 	addi	sp,sp,8
 40033d0:	f800283a 	ret

040033d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40033d4:	deffed04 	addi	sp,sp,-76
 40033d8:	dfc01215 	stw	ra,72(sp)
 40033dc:	df001115 	stw	fp,68(sp)
 40033e0:	df001104 	addi	fp,sp,68
 40033e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40033e8:	e0bfff17 	ldw	r2,-4(fp)
 40033ec:	10000616 	blt	r2,zero,4003408 <isatty+0x34>
 40033f0:	e0bfff17 	ldw	r2,-4(fp)
 40033f4:	10c00324 	muli	r3,r2,12
 40033f8:	00810074 	movhi	r2,1025
 40033fc:	10b90504 	addi	r2,r2,-7148
 4003400:	1885883a 	add	r2,r3,r2
 4003404:	00000106 	br	400340c <isatty+0x38>
 4003408:	0005883a 	mov	r2,zero
 400340c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4003410:	e0bfef17 	ldw	r2,-68(fp)
 4003414:	10000e26 	beq	r2,zero,4003450 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4003418:	e0bfef17 	ldw	r2,-68(fp)
 400341c:	10800017 	ldw	r2,0(r2)
 4003420:	10800817 	ldw	r2,32(r2)
 4003424:	1000021e 	bne	r2,zero,4003430 <isatty+0x5c>
    {
      return 1;
 4003428:	00800044 	movi	r2,1
 400342c:	00000d06 	br	4003464 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4003430:	e0bff004 	addi	r2,fp,-64
 4003434:	100b883a 	mov	r5,r2
 4003438:	e13fff17 	ldw	r4,-4(fp)
 400343c:	40032e80 	call	40032e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003440:	e0bff117 	ldw	r2,-60(fp)
 4003444:	10880020 	cmpeqi	r2,r2,8192
 4003448:	10803fcc 	andi	r2,r2,255
 400344c:	00000506 	br	4003464 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003450:	40033980 	call	4003398 <alt_get_errno>
 4003454:	1007883a 	mov	r3,r2
 4003458:	00801444 	movi	r2,81
 400345c:	18800015 	stw	r2,0(r3)
    return 0;
 4003460:	0005883a 	mov	r2,zero
  }
}
 4003464:	e037883a 	mov	sp,fp
 4003468:	dfc00117 	ldw	ra,4(sp)
 400346c:	df000017 	ldw	fp,0(sp)
 4003470:	dec00204 	addi	sp,sp,8
 4003474:	f800283a 	ret

04003478 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003478:	defffc04 	addi	sp,sp,-16
 400347c:	df000315 	stw	fp,12(sp)
 4003480:	df000304 	addi	fp,sp,12
 4003484:	e13ffd15 	stw	r4,-12(fp)
 4003488:	e17ffe15 	stw	r5,-8(fp)
 400348c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4003490:	e0fffe17 	ldw	r3,-8(fp)
 4003494:	e0bffd17 	ldw	r2,-12(fp)
 4003498:	18800c26 	beq	r3,r2,40034cc <alt_load_section+0x54>
  {
    while( to != end )
 400349c:	00000806 	br	40034c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40034a0:	e0bffe17 	ldw	r2,-8(fp)
 40034a4:	10c00104 	addi	r3,r2,4
 40034a8:	e0fffe15 	stw	r3,-8(fp)
 40034ac:	e0fffd17 	ldw	r3,-12(fp)
 40034b0:	19000104 	addi	r4,r3,4
 40034b4:	e13ffd15 	stw	r4,-12(fp)
 40034b8:	18c00017 	ldw	r3,0(r3)
 40034bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40034c0:	e0fffe17 	ldw	r3,-8(fp)
 40034c4:	e0bfff17 	ldw	r2,-4(fp)
 40034c8:	18bff51e 	bne	r3,r2,40034a0 <__alt_mem_onchip_memory2_0+0xfc0014a0>
    {
      *to++ = *from++;
    }
  }
}
 40034cc:	0001883a 	nop
 40034d0:	e037883a 	mov	sp,fp
 40034d4:	df000017 	ldw	fp,0(sp)
 40034d8:	dec00104 	addi	sp,sp,4
 40034dc:	f800283a 	ret

040034e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40034e0:	defffe04 	addi	sp,sp,-8
 40034e4:	dfc00115 	stw	ra,4(sp)
 40034e8:	df000015 	stw	fp,0(sp)
 40034ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40034f0:	01810074 	movhi	r6,1025
 40034f4:	31bdad04 	addi	r6,r6,-2380
 40034f8:	01410074 	movhi	r5,1025
 40034fc:	2976f004 	addi	r5,r5,-9280
 4003500:	01010074 	movhi	r4,1025
 4003504:	213dad04 	addi	r4,r4,-2380
 4003508:	40034780 	call	4003478 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400350c:	01810034 	movhi	r6,1024
 4003510:	31809104 	addi	r6,r6,580
 4003514:	01410034 	movhi	r5,1024
 4003518:	29400804 	addi	r5,r5,32
 400351c:	01010034 	movhi	r4,1024
 4003520:	21000804 	addi	r4,r4,32
 4003524:	40034780 	call	4003478 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4003528:	01810074 	movhi	r6,1025
 400352c:	31b6f004 	addi	r6,r6,-9280
 4003530:	01410074 	movhi	r5,1025
 4003534:	29769004 	addi	r5,r5,-9664
 4003538:	01010074 	movhi	r4,1025
 400353c:	21369004 	addi	r4,r4,-9664
 4003540:	40034780 	call	4003478 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4003544:	400c59c0 	call	400c59c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003548:	400c7840 	call	400c784 <alt_icache_flush_all>
}
 400354c:	0001883a 	nop
 4003550:	e037883a 	mov	sp,fp
 4003554:	dfc00117 	ldw	ra,4(sp)
 4003558:	df000017 	ldw	fp,0(sp)
 400355c:	dec00204 	addi	sp,sp,8
 4003560:	f800283a 	ret

04003564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003564:	defffe04 	addi	sp,sp,-8
 4003568:	dfc00115 	stw	ra,4(sp)
 400356c:	df000015 	stw	fp,0(sp)
 4003570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003574:	d0a00917 	ldw	r2,-32732(gp)
 4003578:	10000326 	beq	r2,zero,4003588 <alt_get_errno+0x24>
 400357c:	d0a00917 	ldw	r2,-32732(gp)
 4003580:	103ee83a 	callr	r2
 4003584:	00000106 	br	400358c <alt_get_errno+0x28>
 4003588:	d0a6ed04 	addi	r2,gp,-25676
}
 400358c:	e037883a 	mov	sp,fp
 4003590:	dfc00117 	ldw	ra,4(sp)
 4003594:	df000017 	ldw	fp,0(sp)
 4003598:	dec00204 	addi	sp,sp,8
 400359c:	f800283a 	ret

040035a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40035a0:	defff904 	addi	sp,sp,-28
 40035a4:	dfc00615 	stw	ra,24(sp)
 40035a8:	df000515 	stw	fp,20(sp)
 40035ac:	df000504 	addi	fp,sp,20
 40035b0:	e13ffd15 	stw	r4,-12(fp)
 40035b4:	e17ffe15 	stw	r5,-8(fp)
 40035b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40035bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40035c0:	e0bffd17 	ldw	r2,-12(fp)
 40035c4:	10000616 	blt	r2,zero,40035e0 <lseek+0x40>
 40035c8:	e0bffd17 	ldw	r2,-12(fp)
 40035cc:	10c00324 	muli	r3,r2,12
 40035d0:	00810074 	movhi	r2,1025
 40035d4:	10b90504 	addi	r2,r2,-7148
 40035d8:	1885883a 	add	r2,r3,r2
 40035dc:	00000106 	br	40035e4 <lseek+0x44>
 40035e0:	0005883a 	mov	r2,zero
 40035e4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40035e8:	e0bffc17 	ldw	r2,-16(fp)
 40035ec:	10001026 	beq	r2,zero,4003630 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40035f0:	e0bffc17 	ldw	r2,-16(fp)
 40035f4:	10800017 	ldw	r2,0(r2)
 40035f8:	10800717 	ldw	r2,28(r2)
 40035fc:	10000926 	beq	r2,zero,4003624 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003600:	e0bffc17 	ldw	r2,-16(fp)
 4003604:	10800017 	ldw	r2,0(r2)
 4003608:	10800717 	ldw	r2,28(r2)
 400360c:	e1bfff17 	ldw	r6,-4(fp)
 4003610:	e17ffe17 	ldw	r5,-8(fp)
 4003614:	e13ffc17 	ldw	r4,-16(fp)
 4003618:	103ee83a 	callr	r2
 400361c:	e0bffb15 	stw	r2,-20(fp)
 4003620:	00000506 	br	4003638 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4003624:	00bfde84 	movi	r2,-134
 4003628:	e0bffb15 	stw	r2,-20(fp)
 400362c:	00000206 	br	4003638 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003630:	00bfebc4 	movi	r2,-81
 4003634:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4003638:	e0bffb17 	ldw	r2,-20(fp)
 400363c:	1000070e 	bge	r2,zero,400365c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4003640:	40035640 	call	4003564 <alt_get_errno>
 4003644:	1007883a 	mov	r3,r2
 4003648:	e0bffb17 	ldw	r2,-20(fp)
 400364c:	0085c83a 	sub	r2,zero,r2
 4003650:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003654:	00bfffc4 	movi	r2,-1
 4003658:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400365c:	e0bffb17 	ldw	r2,-20(fp)
}
 4003660:	e037883a 	mov	sp,fp
 4003664:	dfc00117 	ldw	ra,4(sp)
 4003668:	df000017 	ldw	fp,0(sp)
 400366c:	dec00204 	addi	sp,sp,8
 4003670:	f800283a 	ret

04003674 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003674:	defff904 	addi	sp,sp,-28
 4003678:	dfc00615 	stw	ra,24(sp)
 400367c:	df000515 	stw	fp,20(sp)
 4003680:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003684:	0009883a 	mov	r4,zero
 4003688:	400b5b80 	call	400b5b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400368c:	40046300 	call	4004630 <OSInit>
 4003690:	01000044 	movi	r4,1
 4003694:	4008f800 	call	4008f80 <OSSemCreate>
 4003698:	d0a6f315 	stw	r2,-25652(gp)
 400369c:	01000044 	movi	r4,1
 40036a0:	4008f800 	call	4008f80 <OSSemCreate>
 40036a4:	d0a6f515 	stw	r2,-25644(gp)
 40036a8:	d0a6ee04 	addi	r2,gp,-25672
 40036ac:	e0bffc15 	stw	r2,-16(fp)
 40036b0:	00800044 	movi	r2,1
 40036b4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 40036b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40036bc:	1009883a 	mov	r4,r2
 40036c0:	4008f800 	call	4008f80 <OSSemCreate>
 40036c4:	1007883a 	mov	r3,r2
 40036c8:	e0bffc17 	ldw	r2,-16(fp)
 40036cc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40036d0:	400b5f00 	call	400b5f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40036d4:	01810074 	movhi	r6,1025
 40036d8:	31b69f04 	addi	r6,r6,-9604
 40036dc:	01410074 	movhi	r5,1025
 40036e0:	29769f04 	addi	r5,r5,-9604
 40036e4:	01010074 	movhi	r4,1025
 40036e8:	21369f04 	addi	r4,r4,-9604
 40036ec:	400cb1c0 	call	400cb1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40036f0:	400c6c40 	call	400c6c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40036f4:	01010074 	movhi	r4,1025
 40036f8:	2131c904 	addi	r4,r4,-14556
 40036fc:	400d6ac0 	call	400d6ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4003700:	d0a6ef17 	ldw	r2,-25668(gp)
 4003704:	d0e6f017 	ldw	r3,-25664(gp)
 4003708:	d126f117 	ldw	r4,-25660(gp)
 400370c:	200d883a 	mov	r6,r4
 4003710:	180b883a 	mov	r5,r3
 4003714:	1009883a 	mov	r4,r2
 4003718:	40003000 	call	4000300 <main>
 400371c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 4003720:	01000044 	movi	r4,1
 4003724:	40031b00 	call	40031b0 <close>
  exit (result);
 4003728:	e13ffb17 	ldw	r4,-20(fp)
 400372c:	400d6c00 	call	400d6c0 <exit>

04003730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003730:	defffe04 	addi	sp,sp,-8
 4003734:	dfc00115 	stw	ra,4(sp)
 4003738:	df000015 	stw	fp,0(sp)
 400373c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003740:	d0a00917 	ldw	r2,-32732(gp)
 4003744:	10000326 	beq	r2,zero,4003754 <alt_get_errno+0x24>
 4003748:	d0a00917 	ldw	r2,-32732(gp)
 400374c:	103ee83a 	callr	r2
 4003750:	00000106 	br	4003758 <alt_get_errno+0x28>
 4003754:	d0a6ed04 	addi	r2,gp,-25676
}
 4003758:	e037883a 	mov	sp,fp
 400375c:	dfc00117 	ldw	ra,4(sp)
 4003760:	df000017 	ldw	fp,0(sp)
 4003764:	dec00204 	addi	sp,sp,8
 4003768:	f800283a 	ret

0400376c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400376c:	defff904 	addi	sp,sp,-28
 4003770:	dfc00615 	stw	ra,24(sp)
 4003774:	df000515 	stw	fp,20(sp)
 4003778:	df000504 	addi	fp,sp,20
 400377c:	e13ffd15 	stw	r4,-12(fp)
 4003780:	e17ffe15 	stw	r5,-8(fp)
 4003784:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003788:	e0bffd17 	ldw	r2,-12(fp)
 400378c:	10000616 	blt	r2,zero,40037a8 <read+0x3c>
 4003790:	e0bffd17 	ldw	r2,-12(fp)
 4003794:	10c00324 	muli	r3,r2,12
 4003798:	00810074 	movhi	r2,1025
 400379c:	10b90504 	addi	r2,r2,-7148
 40037a0:	1885883a 	add	r2,r3,r2
 40037a4:	00000106 	br	40037ac <read+0x40>
 40037a8:	0005883a 	mov	r2,zero
 40037ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40037b0:	e0bffb17 	ldw	r2,-20(fp)
 40037b4:	10002226 	beq	r2,zero,4003840 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40037b8:	e0bffb17 	ldw	r2,-20(fp)
 40037bc:	10800217 	ldw	r2,8(r2)
 40037c0:	108000cc 	andi	r2,r2,3
 40037c4:	10800060 	cmpeqi	r2,r2,1
 40037c8:	1000181e 	bne	r2,zero,400382c <read+0xc0>
        (fd->dev->read))
 40037cc:	e0bffb17 	ldw	r2,-20(fp)
 40037d0:	10800017 	ldw	r2,0(r2)
 40037d4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40037d8:	10001426 	beq	r2,zero,400382c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40037dc:	e0bffb17 	ldw	r2,-20(fp)
 40037e0:	10800017 	ldw	r2,0(r2)
 40037e4:	10800517 	ldw	r2,20(r2)
 40037e8:	e0ffff17 	ldw	r3,-4(fp)
 40037ec:	180d883a 	mov	r6,r3
 40037f0:	e17ffe17 	ldw	r5,-8(fp)
 40037f4:	e13ffb17 	ldw	r4,-20(fp)
 40037f8:	103ee83a 	callr	r2
 40037fc:	e0bffc15 	stw	r2,-16(fp)
 4003800:	e0bffc17 	ldw	r2,-16(fp)
 4003804:	1000070e 	bge	r2,zero,4003824 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4003808:	40037300 	call	4003730 <alt_get_errno>
 400380c:	1007883a 	mov	r3,r2
 4003810:	e0bffc17 	ldw	r2,-16(fp)
 4003814:	0085c83a 	sub	r2,zero,r2
 4003818:	18800015 	stw	r2,0(r3)
          return -1;
 400381c:	00bfffc4 	movi	r2,-1
 4003820:	00000c06 	br	4003854 <read+0xe8>
        }
        return rval;
 4003824:	e0bffc17 	ldw	r2,-16(fp)
 4003828:	00000a06 	br	4003854 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400382c:	40037300 	call	4003730 <alt_get_errno>
 4003830:	1007883a 	mov	r3,r2
 4003834:	00800344 	movi	r2,13
 4003838:	18800015 	stw	r2,0(r3)
 400383c:	00000406 	br	4003850 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003840:	40037300 	call	4003730 <alt_get_errno>
 4003844:	1007883a 	mov	r3,r2
 4003848:	00801444 	movi	r2,81
 400384c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003850:	00bfffc4 	movi	r2,-1
}
 4003854:	e037883a 	mov	sp,fp
 4003858:	dfc00117 	ldw	ra,4(sp)
 400385c:	df000017 	ldw	fp,0(sp)
 4003860:	dec00204 	addi	sp,sp,8
 4003864:	f800283a 	ret

04003868 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003868:	defffe04 	addi	sp,sp,-8
 400386c:	df000115 	stw	fp,4(sp)
 4003870:	df000104 	addi	fp,sp,4
 4003874:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003878:	e0bfff17 	ldw	r2,-4(fp)
 400387c:	108000d0 	cmplti	r2,r2,3
 4003880:	10000d1e 	bne	r2,zero,40038b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003884:	00810074 	movhi	r2,1025
 4003888:	10b90504 	addi	r2,r2,-7148
 400388c:	e0ffff17 	ldw	r3,-4(fp)
 4003890:	18c00324 	muli	r3,r3,12
 4003894:	10c5883a 	add	r2,r2,r3
 4003898:	10800204 	addi	r2,r2,8
 400389c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40038a0:	00810074 	movhi	r2,1025
 40038a4:	10b90504 	addi	r2,r2,-7148
 40038a8:	e0ffff17 	ldw	r3,-4(fp)
 40038ac:	18c00324 	muli	r3,r3,12
 40038b0:	10c5883a 	add	r2,r2,r3
 40038b4:	10000015 	stw	zero,0(r2)
  }
}
 40038b8:	0001883a 	nop
 40038bc:	e037883a 	mov	sp,fp
 40038c0:	df000017 	ldw	fp,0(sp)
 40038c4:	dec00104 	addi	sp,sp,4
 40038c8:	f800283a 	ret

040038cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40038cc:	defff904 	addi	sp,sp,-28
 40038d0:	df000615 	stw	fp,24(sp)
 40038d4:	df000604 	addi	fp,sp,24
 40038d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40038dc:	0005303a 	rdctl	r2,status
 40038e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40038e4:	e0fffe17 	ldw	r3,-8(fp)
 40038e8:	00bfff84 	movi	r2,-2
 40038ec:	1884703a 	and	r2,r3,r2
 40038f0:	1001703a 	wrctl	status,r2
  
  return context;
 40038f4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40038f8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40038fc:	d0a00a17 	ldw	r2,-32728(gp)
 4003900:	10c000c4 	addi	r3,r2,3
 4003904:	00bfff04 	movi	r2,-4
 4003908:	1884703a 	and	r2,r3,r2
 400390c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4003910:	d0e00a17 	ldw	r3,-32728(gp)
 4003914:	e0bfff17 	ldw	r2,-4(fp)
 4003918:	1887883a 	add	r3,r3,r2
 400391c:	00820034 	movhi	r2,2048
 4003920:	10800004 	addi	r2,r2,0
 4003924:	10c0062e 	bgeu	r2,r3,4003940 <sbrk+0x74>
 4003928:	e0bffb17 	ldw	r2,-20(fp)
 400392c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003930:	e0bffa17 	ldw	r2,-24(fp)
 4003934:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003938:	00bfffc4 	movi	r2,-1
 400393c:	00000b06 	br	400396c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4003940:	d0a00a17 	ldw	r2,-32728(gp)
 4003944:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4003948:	d0e00a17 	ldw	r3,-32728(gp)
 400394c:	e0bfff17 	ldw	r2,-4(fp)
 4003950:	1885883a 	add	r2,r3,r2
 4003954:	d0a00a15 	stw	r2,-32728(gp)
 4003958:	e0bffb17 	ldw	r2,-20(fp)
 400395c:	e0bffc15 	stw	r2,-16(fp)
 4003960:	e0bffc17 	ldw	r2,-16(fp)
 4003964:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003968:	e0bffd17 	ldw	r2,-12(fp)
} 
 400396c:	e037883a 	mov	sp,fp
 4003970:	df000017 	ldw	fp,0(sp)
 4003974:	dec00104 	addi	sp,sp,4
 4003978:	f800283a 	ret

0400397c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400397c:	defffe04 	addi	sp,sp,-8
 4003980:	dfc00115 	stw	ra,4(sp)
 4003984:	df000015 	stw	fp,0(sp)
 4003988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400398c:	d0a00917 	ldw	r2,-32732(gp)
 4003990:	10000326 	beq	r2,zero,40039a0 <alt_get_errno+0x24>
 4003994:	d0a00917 	ldw	r2,-32732(gp)
 4003998:	103ee83a 	callr	r2
 400399c:	00000106 	br	40039a4 <alt_get_errno+0x28>
 40039a0:	d0a6ed04 	addi	r2,gp,-25676
}
 40039a4:	e037883a 	mov	sp,fp
 40039a8:	dfc00117 	ldw	ra,4(sp)
 40039ac:	df000017 	ldw	fp,0(sp)
 40039b0:	dec00204 	addi	sp,sp,8
 40039b4:	f800283a 	ret

040039b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40039b8:	defff904 	addi	sp,sp,-28
 40039bc:	dfc00615 	stw	ra,24(sp)
 40039c0:	df000515 	stw	fp,20(sp)
 40039c4:	df000504 	addi	fp,sp,20
 40039c8:	e13ffd15 	stw	r4,-12(fp)
 40039cc:	e17ffe15 	stw	r5,-8(fp)
 40039d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40039d4:	e0bffd17 	ldw	r2,-12(fp)
 40039d8:	10000616 	blt	r2,zero,40039f4 <write+0x3c>
 40039dc:	e0bffd17 	ldw	r2,-12(fp)
 40039e0:	10c00324 	muli	r3,r2,12
 40039e4:	00810074 	movhi	r2,1025
 40039e8:	10b90504 	addi	r2,r2,-7148
 40039ec:	1885883a 	add	r2,r3,r2
 40039f0:	00000106 	br	40039f8 <write+0x40>
 40039f4:	0005883a 	mov	r2,zero
 40039f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40039fc:	e0bffb17 	ldw	r2,-20(fp)
 4003a00:	10002126 	beq	r2,zero,4003a88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4003a04:	e0bffb17 	ldw	r2,-20(fp)
 4003a08:	10800217 	ldw	r2,8(r2)
 4003a0c:	108000cc 	andi	r2,r2,3
 4003a10:	10001826 	beq	r2,zero,4003a74 <write+0xbc>
 4003a14:	e0bffb17 	ldw	r2,-20(fp)
 4003a18:	10800017 	ldw	r2,0(r2)
 4003a1c:	10800617 	ldw	r2,24(r2)
 4003a20:	10001426 	beq	r2,zero,4003a74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003a24:	e0bffb17 	ldw	r2,-20(fp)
 4003a28:	10800017 	ldw	r2,0(r2)
 4003a2c:	10800617 	ldw	r2,24(r2)
 4003a30:	e0ffff17 	ldw	r3,-4(fp)
 4003a34:	180d883a 	mov	r6,r3
 4003a38:	e17ffe17 	ldw	r5,-8(fp)
 4003a3c:	e13ffb17 	ldw	r4,-20(fp)
 4003a40:	103ee83a 	callr	r2
 4003a44:	e0bffc15 	stw	r2,-16(fp)
 4003a48:	e0bffc17 	ldw	r2,-16(fp)
 4003a4c:	1000070e 	bge	r2,zero,4003a6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4003a50:	400397c0 	call	400397c <alt_get_errno>
 4003a54:	1007883a 	mov	r3,r2
 4003a58:	e0bffc17 	ldw	r2,-16(fp)
 4003a5c:	0085c83a 	sub	r2,zero,r2
 4003a60:	18800015 	stw	r2,0(r3)
        return -1;
 4003a64:	00bfffc4 	movi	r2,-1
 4003a68:	00000c06 	br	4003a9c <write+0xe4>
      }
      return rval;
 4003a6c:	e0bffc17 	ldw	r2,-16(fp)
 4003a70:	00000a06 	br	4003a9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003a74:	400397c0 	call	400397c <alt_get_errno>
 4003a78:	1007883a 	mov	r3,r2
 4003a7c:	00800344 	movi	r2,13
 4003a80:	18800015 	stw	r2,0(r3)
 4003a84:	00000406 	br	4003a98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003a88:	400397c0 	call	400397c <alt_get_errno>
 4003a8c:	1007883a 	mov	r3,r2
 4003a90:	00801444 	movi	r2,81
 4003a94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003a98:	00bfffc4 	movi	r2,-1
}
 4003a9c:	e037883a 	mov	sp,fp
 4003aa0:	dfc00117 	ldw	ra,4(sp)
 4003aa4:	df000017 	ldw	fp,0(sp)
 4003aa8:	dec00204 	addi	sp,sp,8
 4003aac:	f800283a 	ret

04003ab0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 4003ab0:	deffdf04 	addi	sp,sp,-132
 4003ab4:	dfc02015 	stw	ra,128(sp)
 4003ab8:	df001f15 	stw	fp,124(sp)
 4003abc:	df001f04 	addi	fp,sp,124
 4003ac0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4003ac4:	e0bfe204 	addi	r2,fp,-120
 4003ac8:	100b883a 	mov	r5,r2
 4003acc:	01003fc4 	movi	r4,255
 4003ad0:	400af080 	call	400af08 <OSTaskQuery>
 4003ad4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4003ad8:	e0bffe83 	ldbu	r2,-6(fp)
 4003adc:	10803fcc 	andi	r2,r2,255
 4003ae0:	10001e1e 	bne	r2,zero,4003b5c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 4003ae4:	e0bfee83 	ldbu	r2,-70(fp)
 4003ae8:	10803fcc 	andi	r2,r2,255
 4003aec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4003af0:	d0a6f317 	ldw	r2,-25652(gp)
 4003af4:	e0fffd04 	addi	r3,fp,-12
 4003af8:	180b883a 	mov	r5,r3
 4003afc:	1009883a 	mov	r4,r2
 4003b00:	40097200 	call	4009720 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4003b04:	e0bffe43 	ldbu	r2,-7(fp)
 4003b08:	10803fcc 	andi	r2,r2,255
 4003b0c:	10000726 	beq	r2,zero,4003b2c <__env_lock+0x7c>
 4003b10:	d0a00b17 	ldw	r2,-32724(gp)
 4003b14:	e0ffe117 	ldw	r3,-124(fp)
 4003b18:	1880041e 	bne	r3,r2,4003b2c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 4003b1c:	d0a6f217 	ldw	r2,-25656(gp)
 4003b20:	10800044 	addi	r2,r2,1
 4003b24:	d0a6f215 	stw	r2,-25656(gp)
 4003b28:	00000a06 	br	4003b54 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4003b2c:	d0a6f317 	ldw	r2,-25652(gp)
 4003b30:	e0fffe84 	addi	r3,fp,-6
 4003b34:	180d883a 	mov	r6,r3
 4003b38:	000b883a 	mov	r5,zero
 4003b3c:	1009883a 	mov	r4,r2
 4003b40:	40092980 	call	4009298 <OSSemPend>
    locks  = 1;
 4003b44:	00800044 	movi	r2,1
 4003b48:	d0a6f215 	stw	r2,-25656(gp)
    lockid = id;
 4003b4c:	e0bfe117 	ldw	r2,-124(fp)
 4003b50:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4003b54:	0001883a 	nop
 4003b58:	00000106 	br	4003b60 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4003b5c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4003b60:	e037883a 	mov	sp,fp
 4003b64:	dfc00117 	ldw	ra,4(sp)
 4003b68:	df000017 	ldw	fp,0(sp)
 4003b6c:	dec00204 	addi	sp,sp,8
 4003b70:	f800283a 	ret

04003b74 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 4003b74:	defffd04 	addi	sp,sp,-12
 4003b78:	dfc00215 	stw	ra,8(sp)
 4003b7c:	df000115 	stw	fp,4(sp)
 4003b80:	df000104 	addi	fp,sp,4
 4003b84:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 4003b88:	d0a6f217 	ldw	r2,-25656(gp)
 4003b8c:	10000b26 	beq	r2,zero,4003bbc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 4003b90:	d0a6f217 	ldw	r2,-25656(gp)
 4003b94:	10bfffc4 	addi	r2,r2,-1
 4003b98:	d0a6f215 	stw	r2,-25656(gp)
 4003b9c:	d0a6f217 	ldw	r2,-25656(gp)
 4003ba0:	1000071e 	bne	r2,zero,4003bc0 <__env_unlock+0x4c>
  {
    lockid = -1;
 4003ba4:	00bfffc4 	movi	r2,-1
 4003ba8:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
 4003bac:	d0a6f317 	ldw	r2,-25652(gp)
 4003bb0:	1009883a 	mov	r4,r2
 4003bb4:	40096100 	call	4009610 <OSSemPost>
 4003bb8:	00000106 	br	4003bc0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 4003bbc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4003bc0:	e037883a 	mov	sp,fp
 4003bc4:	dfc00117 	ldw	ra,4(sp)
 4003bc8:	df000017 	ldw	fp,0(sp)
 4003bcc:	dec00204 	addi	sp,sp,8
 4003bd0:	f800283a 	ret

04003bd4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4003bd4:	deffdb04 	addi	sp,sp,-148
 4003bd8:	dfc02415 	stw	ra,144(sp)
 4003bdc:	df002315 	stw	fp,140(sp)
 4003be0:	df002304 	addi	fp,sp,140
 4003be4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003be8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4003bec:	d0a6f643 	ldbu	r2,-25639(gp)
 4003bf0:	10803fcc 	andi	r2,r2,255
 4003bf4:	10800060 	cmpeqi	r2,r2,1
 4003bf8:	10003626 	beq	r2,zero,4003cd4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4003bfc:	e0bfe204 	addi	r2,fp,-120
 4003c00:	100b883a 	mov	r5,r2
 4003c04:	01003fc4 	movi	r4,255
 4003c08:	400af080 	call	400af08 <OSTaskQuery>
 4003c0c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4003c10:	e0bffe83 	ldbu	r2,-6(fp)
 4003c14:	10803fcc 	andi	r2,r2,255
 4003c18:	1000301e 	bne	r2,zero,4003cdc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 4003c1c:	e0bfee83 	ldbu	r2,-70(fp)
 4003c20:	10803fcc 	andi	r2,r2,255
 4003c24:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4003c28:	d0a6f517 	ldw	r2,-25644(gp)
 4003c2c:	e0fffd04 	addi	r3,fp,-12
 4003c30:	180b883a 	mov	r5,r3
 4003c34:	1009883a 	mov	r4,r2
 4003c38:	40097200 	call	4009720 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003c3c:	0005303a 	rdctl	r2,status
 4003c40:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003c44:	e0ffe117 	ldw	r3,-124(fp)
 4003c48:	00bfff84 	movi	r2,-2
 4003c4c:	1884703a 	and	r2,r3,r2
 4003c50:	1001703a 	wrctl	status,r2
  
  return context;
 4003c54:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 4003c58:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4003c5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4003c60:	10bfffcc 	andi	r2,r2,65535
 4003c64:	10000b1e 	bne	r2,zero,4003c94 <__malloc_lock+0xc0>
 4003c68:	d0a00c17 	ldw	r2,-32720(gp)
 4003c6c:	e0ffde17 	ldw	r3,-136(fp)
 4003c70:	1880081e 	bne	r3,r2,4003c94 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 4003c74:	d0a6f417 	ldw	r2,-25648(gp)
 4003c78:	10800044 	addi	r2,r2,1
 4003c7c:	d0a6f415 	stw	r2,-25648(gp)
 4003c80:	e0bfdd17 	ldw	r2,-140(fp)
 4003c84:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003c88:	e0bfdf17 	ldw	r2,-132(fp)
 4003c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 4003c90:	00000e06 	br	4003ccc <__malloc_lock+0xf8>
 4003c94:	e0bfdd17 	ldw	r2,-140(fp)
 4003c98:	e0bfe015 	stw	r2,-128(fp)
 4003c9c:	e0bfe017 	ldw	r2,-128(fp)
 4003ca0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4003ca4:	d0a6f517 	ldw	r2,-25644(gp)
 4003ca8:	e0fffe84 	addi	r3,fp,-6
 4003cac:	180d883a 	mov	r6,r3
 4003cb0:	000b883a 	mov	r5,zero
 4003cb4:	1009883a 	mov	r4,r2
 4003cb8:	40092980 	call	4009298 <OSSemPend>
    locks  = 1;
 4003cbc:	00800044 	movi	r2,1
 4003cc0:	d0a6f415 	stw	r2,-25648(gp)
    lockid = id;
 4003cc4:	e0bfde17 	ldw	r2,-136(fp)
 4003cc8:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4003ccc:	0001883a 	nop
 4003cd0:	00000306 	br	4003ce0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 4003cd4:	0001883a 	nop
 4003cd8:	00000106 	br	4003ce0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4003cdc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4003ce0:	e037883a 	mov	sp,fp
 4003ce4:	dfc00117 	ldw	ra,4(sp)
 4003ce8:	df000017 	ldw	fp,0(sp)
 4003cec:	dec00204 	addi	sp,sp,8
 4003cf0:	f800283a 	ret

04003cf4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003cf4:	defff804 	addi	sp,sp,-32
 4003cf8:	dfc00715 	stw	ra,28(sp)
 4003cfc:	df000615 	stw	fp,24(sp)
 4003d00:	df000604 	addi	fp,sp,24
 4003d04:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003d08:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4003d0c:	d0a6f643 	ldbu	r2,-25639(gp)
 4003d10:	10803fcc 	andi	r2,r2,255
 4003d14:	10800060 	cmpeqi	r2,r2,1
 4003d18:	10002326 	beq	r2,zero,4003da8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003d1c:	0005303a 	rdctl	r2,status
 4003d20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003d24:	e0fffe17 	ldw	r3,-8(fp)
 4003d28:	00bfff84 	movi	r2,-2
 4003d2c:	1884703a 	and	r2,r3,r2
 4003d30:	1001703a 	wrctl	status,r2
  
  return context;
 4003d34:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 4003d38:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 4003d3c:	d0a6f417 	ldw	r2,-25648(gp)
 4003d40:	1000051e 	bne	r2,zero,4003d58 <__malloc_unlock+0x64>
 4003d44:	e0bffa17 	ldw	r2,-24(fp)
 4003d48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003d4c:	e0bffb17 	ldw	r2,-20(fp)
 4003d50:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4003d54:	00001506 	br	4003dac <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4003d58:	d0a6f417 	ldw	r2,-25648(gp)
 4003d5c:	10bfffc4 	addi	r2,r2,-1
 4003d60:	d0a6f415 	stw	r2,-25648(gp)
 4003d64:	d0a6f417 	ldw	r2,-25648(gp)
 4003d68:	10000a1e 	bne	r2,zero,4003d94 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 4003d6c:	00bfffc4 	movi	r2,-1
 4003d70:	d0a00c15 	stw	r2,-32720(gp)
 4003d74:	e0bffa17 	ldw	r2,-24(fp)
 4003d78:	e0bffc15 	stw	r2,-16(fp)
 4003d7c:	e0bffc17 	ldw	r2,-16(fp)
 4003d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4003d84:	d0a6f517 	ldw	r2,-25644(gp)
 4003d88:	1009883a 	mov	r4,r2
 4003d8c:	40096100 	call	4009610 <OSSemPost>
 4003d90:	00000606 	br	4003dac <__malloc_unlock+0xb8>
 4003d94:	e0bffa17 	ldw	r2,-24(fp)
 4003d98:	e0bffd15 	stw	r2,-12(fp)
 4003d9c:	e0bffd17 	ldw	r2,-12(fp)
 4003da0:	1001703a 	wrctl	status,r2
 4003da4:	00000106 	br	4003dac <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 4003da8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4003dac:	e037883a 	mov	sp,fp
 4003db0:	dfc00117 	ldw	ra,4(sp)
 4003db4:	df000017 	ldw	fp,0(sp)
 4003db8:	dec00204 	addi	sp,sp,8
 4003dbc:	f800283a 	ret

04003dc0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4003dc0:	defff704 	addi	sp,sp,-36
 4003dc4:	dfc00815 	stw	ra,32(sp)
 4003dc8:	df000715 	stw	fp,28(sp)
 4003dcc:	df000704 	addi	fp,sp,28
 4003dd0:	e13ffd15 	stw	r4,-12(fp)
 4003dd4:	e17ffe15 	stw	r5,-8(fp)
 4003dd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003ddc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4003de0:	e0bfff17 	ldw	r2,-4(fp)
 4003de4:	1000021e 	bne	r2,zero,4003df0 <OSEventNameGet+0x30>
        return (0);
 4003de8:	0005883a 	mov	r2,zero
 4003dec:	00003706 	br	4003ecc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4003df0:	e0bffd17 	ldw	r2,-12(fp)
 4003df4:	1000051e 	bne	r2,zero,4003e0c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4003df8:	e0bfff17 	ldw	r2,-4(fp)
 4003dfc:	00c00104 	movi	r3,4
 4003e00:	10c00005 	stb	r3,0(r2)
        return (0);
 4003e04:	0005883a 	mov	r2,zero
 4003e08:	00003006 	br	4003ecc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4003e0c:	e0bffe17 	ldw	r2,-8(fp)
 4003e10:	1000051e 	bne	r2,zero,4003e28 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4003e14:	e0bfff17 	ldw	r2,-4(fp)
 4003e18:	00c00304 	movi	r3,12
 4003e1c:	10c00005 	stb	r3,0(r2)
        return (0);
 4003e20:	0005883a 	mov	r2,zero
 4003e24:	00002906 	br	4003ecc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4003e28:	d0a70403 	ldbu	r2,-25584(gp)
 4003e2c:	10803fcc 	andi	r2,r2,255
 4003e30:	10000526 	beq	r2,zero,4003e48 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 4003e34:	e0bfff17 	ldw	r2,-4(fp)
 4003e38:	00c00444 	movi	r3,17
 4003e3c:	10c00005 	stb	r3,0(r2)
        return (0);
 4003e40:	0005883a 	mov	r2,zero
 4003e44:	00002106 	br	4003ecc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 4003e48:	e0bffd17 	ldw	r2,-12(fp)
 4003e4c:	10800003 	ldbu	r2,0(r2)
 4003e50:	10803fcc 	andi	r2,r2,255
 4003e54:	10bfffc4 	addi	r2,r2,-1
 4003e58:	10800128 	cmpgeui	r2,r2,4
 4003e5c:	10000526 	beq	r2,zero,4003e74 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4003e60:	e0bfff17 	ldw	r2,-4(fp)
 4003e64:	00c00044 	movi	r3,1
 4003e68:	10c00005 	stb	r3,0(r2)
             return (0);
 4003e6c:	0005883a 	mov	r2,zero
 4003e70:	00001606 	br	4003ecc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4003e74:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003e78:	0005303a 	rdctl	r2,status
 4003e7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003e80:	e0fffb17 	ldw	r3,-20(fp)
 4003e84:	00bfff84 	movi	r2,-2
 4003e88:	1884703a 	and	r2,r3,r2
 4003e8c:	1001703a 	wrctl	status,r2
  
  return context;
 4003e90:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4003e94:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 4003e98:	e0bffd17 	ldw	r2,-12(fp)
 4003e9c:	10800384 	addi	r2,r2,14
 4003ea0:	100b883a 	mov	r5,r2
 4003ea4:	e13ffe17 	ldw	r4,-8(fp)
 4003ea8:	40058440 	call	4005844 <OS_StrCopy>
 4003eac:	e0bffa05 	stb	r2,-24(fp)
 4003eb0:	e0bff917 	ldw	r2,-28(fp)
 4003eb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003eb8:	e0bffc17 	ldw	r2,-16(fp)
 4003ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4003ec0:	e0bfff17 	ldw	r2,-4(fp)
 4003ec4:	10000005 	stb	zero,0(r2)
    return (len);
 4003ec8:	e0bffa03 	ldbu	r2,-24(fp)
}
 4003ecc:	e037883a 	mov	sp,fp
 4003ed0:	dfc00117 	ldw	ra,4(sp)
 4003ed4:	df000017 	ldw	fp,0(sp)
 4003ed8:	dec00204 	addi	sp,sp,8
 4003edc:	f800283a 	ret

04003ee0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4003ee0:	defff604 	addi	sp,sp,-40
 4003ee4:	dfc00915 	stw	ra,36(sp)
 4003ee8:	df000815 	stw	fp,32(sp)
 4003eec:	df000804 	addi	fp,sp,32
 4003ef0:	e13ffd15 	stw	r4,-12(fp)
 4003ef4:	e17ffe15 	stw	r5,-8(fp)
 4003ef8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4003efc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4003f00:	e0bfff17 	ldw	r2,-4(fp)
 4003f04:	10004026 	beq	r2,zero,4004008 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4003f08:	e0bffd17 	ldw	r2,-12(fp)
 4003f0c:	1000041e 	bne	r2,zero,4003f20 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 4003f10:	e0bfff17 	ldw	r2,-4(fp)
 4003f14:	00c00104 	movi	r3,4
 4003f18:	10c00005 	stb	r3,0(r2)
        return;
 4003f1c:	00003b06 	br	400400c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4003f20:	e0bffe17 	ldw	r2,-8(fp)
 4003f24:	1000041e 	bne	r2,zero,4003f38 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4003f28:	e0bfff17 	ldw	r2,-4(fp)
 4003f2c:	00c00304 	movi	r3,12
 4003f30:	10c00005 	stb	r3,0(r2)
        return;
 4003f34:	00003506 	br	400400c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4003f38:	d0a70403 	ldbu	r2,-25584(gp)
 4003f3c:	10803fcc 	andi	r2,r2,255
 4003f40:	10000426 	beq	r2,zero,4003f54 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4003f44:	e0bfff17 	ldw	r2,-4(fp)
 4003f48:	00c00484 	movi	r3,18
 4003f4c:	10c00005 	stb	r3,0(r2)
        return;
 4003f50:	00002e06 	br	400400c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 4003f54:	e0bffd17 	ldw	r2,-12(fp)
 4003f58:	10800003 	ldbu	r2,0(r2)
 4003f5c:	10803fcc 	andi	r2,r2,255
 4003f60:	10bfffc4 	addi	r2,r2,-1
 4003f64:	10800128 	cmpgeui	r2,r2,4
 4003f68:	10000426 	beq	r2,zero,4003f7c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4003f6c:	e0bfff17 	ldw	r2,-4(fp)
 4003f70:	00c00044 	movi	r3,1
 4003f74:	10c00005 	stb	r3,0(r2)
             return;
 4003f78:	00002406 	br	400400c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4003f7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003f80:	0005303a 	rdctl	r2,status
 4003f84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003f88:	e0fffc17 	ldw	r3,-16(fp)
 4003f8c:	00bfff84 	movi	r2,-2
 4003f90:	1884703a 	and	r2,r3,r2
 4003f94:	1001703a 	wrctl	status,r2
  
  return context;
 4003f98:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 4003f9c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4003fa0:	e13ffe17 	ldw	r4,-8(fp)
 4003fa4:	40058b80 	call	40058b8 <OS_StrLen>
 4003fa8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 4003fac:	e0bffa03 	ldbu	r2,-24(fp)
 4003fb0:	10800830 	cmpltui	r2,r2,32
 4003fb4:	1000081e 	bne	r2,zero,4003fd8 <OSEventNameSet+0xf8>
 4003fb8:	e0bff817 	ldw	r2,-32(fp)
 4003fbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003fc0:	e0bff917 	ldw	r2,-28(fp)
 4003fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 4003fc8:	e0bfff17 	ldw	r2,-4(fp)
 4003fcc:	00c002c4 	movi	r3,11
 4003fd0:	10c00005 	stb	r3,0(r2)
        return;
 4003fd4:	00000d06 	br	400400c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 4003fd8:	e0bffd17 	ldw	r2,-12(fp)
 4003fdc:	10800384 	addi	r2,r2,14
 4003fe0:	e17ffe17 	ldw	r5,-8(fp)
 4003fe4:	1009883a 	mov	r4,r2
 4003fe8:	40058440 	call	4005844 <OS_StrCopy>
 4003fec:	e0bff817 	ldw	r2,-32(fp)
 4003ff0:	e0bffb15 	stw	r2,-20(fp)
 4003ff4:	e0bffb17 	ldw	r2,-20(fp)
 4003ff8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4003ffc:	e0bfff17 	ldw	r2,-4(fp)
 4004000:	10000005 	stb	zero,0(r2)
 4004004:	00000106 	br	400400c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4004008:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400400c:	e037883a 	mov	sp,fp
 4004010:	dfc00117 	ldw	ra,4(sp)
 4004014:	df000017 	ldw	fp,0(sp)
 4004018:	dec00204 	addi	sp,sp,8
 400401c:	f800283a 	ret

04004020 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 4004020:	deffed04 	addi	sp,sp,-76
 4004024:	dfc01215 	stw	ra,72(sp)
 4004028:	df001115 	stw	fp,68(sp)
 400402c:	df001104 	addi	fp,sp,68
 4004030:	e13ffc15 	stw	r4,-16(fp)
 4004034:	e17ffd15 	stw	r5,-12(fp)
 4004038:	e1bffe15 	stw	r6,-8(fp)
 400403c:	3805883a 	mov	r2,r7
 4004040:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4004044:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 4004048:	e0800217 	ldw	r2,8(fp)
 400404c:	1000021e 	bne	r2,zero,4004058 <OSEventPendMulti+0x38>
        return (0);
 4004050:	0005883a 	mov	r2,zero
 4004054:	00017106 	br	400461c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 4004058:	e0bffc17 	ldw	r2,-16(fp)
 400405c:	1000051e 	bne	r2,zero,4004074 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 4004060:	e0800217 	ldw	r2,8(fp)
 4004064:	00c00104 	movi	r3,4
 4004068:	10c00005 	stb	r3,0(r2)
        return (0);
 400406c:	0005883a 	mov	r2,zero
 4004070:	00016a06 	br	400461c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 4004074:	e0bffd17 	ldw	r2,-12(fp)
 4004078:	1000051e 	bne	r2,zero,4004090 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 400407c:	e0800217 	ldw	r2,8(fp)
 4004080:	00c00104 	movi	r3,4
 4004084:	10c00005 	stb	r3,0(r2)
        return (0);
 4004088:	0005883a 	mov	r2,zero
 400408c:	00016306 	br	400461c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4004090:	e0bffe17 	ldw	r2,-8(fp)
 4004094:	1000051e 	bne	r2,zero,40040ac <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 4004098:	e0800217 	ldw	r2,8(fp)
 400409c:	00c00104 	movi	r3,4
 40040a0:	10c00005 	stb	r3,0(r2)
        return (0);
 40040a4:	0005883a 	mov	r2,zero
 40040a8:	00015c06 	br	400461c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 40040ac:	e0bffd17 	ldw	r2,-12(fp)
 40040b0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 40040b4:	e0bffc17 	ldw	r2,-16(fp)
 40040b8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 40040bc:	e0bfef17 	ldw	r2,-68(fp)
 40040c0:	10800017 	ldw	r2,0(r2)
 40040c4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 40040c8:	00001906 	br	4004130 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 40040cc:	e0bff017 	ldw	r2,-64(fp)
 40040d0:	10800003 	ldbu	r2,0(r2)
 40040d4:	10803fcc 	andi	r2,r2,255
 40040d8:	10c000a0 	cmpeqi	r3,r2,2
 40040dc:	1800091e 	bne	r3,zero,4004104 <OSEventPendMulti+0xe4>
 40040e0:	10c000e0 	cmpeqi	r3,r2,3
 40040e4:	1800091e 	bne	r3,zero,400410c <OSEventPendMulti+0xec>
 40040e8:	10800060 	cmpeqi	r2,r2,1
 40040ec:	1000091e 	bne	r2,zero,4004114 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 40040f0:	e0800217 	ldw	r2,8(fp)
 40040f4:	00c00044 	movi	r3,1
 40040f8:	10c00005 	stb	r3,0(r2)
                 return (0);
 40040fc:	0005883a 	mov	r2,zero
 4004100:	00014606 	br	400461c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 4004104:	0001883a 	nop
 4004108:	00000306 	br	4004118 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 400410c:	0001883a 	nop
 4004110:	00000106 	br	4004118 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 4004114:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 4004118:	e0bfef17 	ldw	r2,-68(fp)
 400411c:	10800104 	addi	r2,r2,4
 4004120:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4004124:	e0bfef17 	ldw	r2,-68(fp)
 4004128:	10800017 	ldw	r2,0(r2)
 400412c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4004130:	e0bff017 	ldw	r2,-64(fp)
 4004134:	103fe51e 	bne	r2,zero,40040cc <__alt_mem_onchip_memory2_0+0xfc0020cc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 4004138:	d0a70403 	ldbu	r2,-25584(gp)
 400413c:	10803fcc 	andi	r2,r2,255
 4004140:	10000526 	beq	r2,zero,4004158 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 4004144:	e0800217 	ldw	r2,8(fp)
 4004148:	00c00084 	movi	r3,2
 400414c:	10c00005 	stb	r3,0(r2)
        return (0);
 4004150:	0005883a 	mov	r2,zero
 4004154:	00013106 	br	400461c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 4004158:	d0a6f603 	ldbu	r2,-25640(gp)
 400415c:	10803fcc 	andi	r2,r2,255
 4004160:	10000526 	beq	r2,zero,4004178 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 4004164:	e0800217 	ldw	r2,8(fp)
 4004168:	00c00344 	movi	r3,13
 400416c:	10c00005 	stb	r3,0(r2)
        return (0);
 4004170:	0005883a 	mov	r2,zero
 4004174:	00012906 	br	400461c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004178:	0005303a 	rdctl	r2,status
 400417c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004180:	e0fffb17 	ldw	r3,-20(fp)
 4004184:	00bfff84 	movi	r2,-2
 4004188:	1884703a 	and	r2,r3,r2
 400418c:	1001703a 	wrctl	status,r2
  
  return context;
 4004190:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4004194:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 4004198:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 400419c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 40041a0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 40041a4:	e0bffc17 	ldw	r2,-16(fp)
 40041a8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 40041ac:	e0bfef17 	ldw	r2,-68(fp)
 40041b0:	10800017 	ldw	r2,0(r2)
 40041b4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 40041b8:	00008106 	br	40043c0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 40041bc:	e0bff017 	ldw	r2,-64(fp)
 40041c0:	10800003 	ldbu	r2,0(r2)
 40041c4:	10803fcc 	andi	r2,r2,255
 40041c8:	10c000a0 	cmpeqi	r3,r2,2
 40041cc:	18003c1e 	bne	r3,zero,40042c0 <OSEventPendMulti+0x2a0>
 40041d0:	10c000e0 	cmpeqi	r3,r2,3
 40041d4:	1800031e 	bne	r3,zero,40041e4 <OSEventPendMulti+0x1c4>
 40041d8:	10800060 	cmpeqi	r2,r2,1
 40041dc:	10001e1e 	bne	r2,zero,4004258 <OSEventPendMulti+0x238>
 40041e0:	00006606 	br	400437c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 40041e4:	e0bff017 	ldw	r2,-64(fp)
 40041e8:	1080020b 	ldhu	r2,8(r2)
 40041ec:	10bfffcc 	andi	r2,r2,65535
 40041f0:	10001526 	beq	r2,zero,4004248 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 40041f4:	e0bff017 	ldw	r2,-64(fp)
 40041f8:	1080020b 	ldhu	r2,8(r2)
 40041fc:	10bfffc4 	addi	r2,r2,-1
 4004200:	1007883a 	mov	r3,r2
 4004204:	e0bff017 	ldw	r2,-64(fp)
 4004208:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400420c:	e0bffd17 	ldw	r2,-12(fp)
 4004210:	10c00104 	addi	r3,r2,4
 4004214:	e0fffd15 	stw	r3,-12(fp)
 4004218:	e0fff017 	ldw	r3,-64(fp)
 400421c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 4004220:	00800044 	movi	r2,1
 4004224:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 4004228:	e0bffe17 	ldw	r2,-8(fp)
 400422c:	10c00104 	addi	r3,r2,4
 4004230:	e0fffe15 	stw	r3,-8(fp)
 4004234:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 4004238:	e0bff18b 	ldhu	r2,-58(fp)
 400423c:	10800044 	addi	r2,r2,1
 4004240:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 4004244:	00005806 	br	40043a8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 4004248:	e0bff203 	ldbu	r2,-56(fp)
 400424c:	10800054 	ori	r2,r2,1
 4004250:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4004254:	00005406 	br	40043a8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 4004258:	e0bff017 	ldw	r2,-64(fp)
 400425c:	10800117 	ldw	r2,4(r2)
 4004260:	10001326 	beq	r2,zero,40042b0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 4004264:	e0bffe17 	ldw	r2,-8(fp)
 4004268:	10c00104 	addi	r3,r2,4
 400426c:	e0fffe15 	stw	r3,-8(fp)
 4004270:	e0fff017 	ldw	r3,-64(fp)
 4004274:	18c00117 	ldw	r3,4(r3)
 4004278:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 400427c:	e0bff017 	ldw	r2,-64(fp)
 4004280:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 4004284:	e0bffd17 	ldw	r2,-12(fp)
 4004288:	10c00104 	addi	r3,r2,4
 400428c:	e0fffd15 	stw	r3,-12(fp)
 4004290:	e0fff017 	ldw	r3,-64(fp)
 4004294:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 4004298:	00800044 	movi	r2,1
 400429c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 40042a0:	e0bff18b 	ldhu	r2,-58(fp)
 40042a4:	10800044 	addi	r2,r2,1
 40042a8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 40042ac:	00003e06 	br	40043a8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 40042b0:	e0bff203 	ldbu	r2,-56(fp)
 40042b4:	10800094 	ori	r2,r2,2
 40042b8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 40042bc:	00003a06 	br	40043a8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 40042c0:	e0bff017 	ldw	r2,-64(fp)
 40042c4:	10800117 	ldw	r2,4(r2)
 40042c8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 40042cc:	e0bff517 	ldw	r2,-44(fp)
 40042d0:	1080058b 	ldhu	r2,22(r2)
 40042d4:	10bfffcc 	andi	r2,r2,65535
 40042d8:	10002426 	beq	r2,zero,400436c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 40042dc:	e0bffe17 	ldw	r2,-8(fp)
 40042e0:	10c00104 	addi	r3,r2,4
 40042e4:	e0fffe15 	stw	r3,-8(fp)
 40042e8:	e0fff517 	ldw	r3,-44(fp)
 40042ec:	18c00417 	ldw	r3,16(r3)
 40042f0:	19400104 	addi	r5,r3,4
 40042f4:	e13ff517 	ldw	r4,-44(fp)
 40042f8:	21400415 	stw	r5,16(r4)
 40042fc:	18c00017 	ldw	r3,0(r3)
 4004300:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4004304:	e0bff517 	ldw	r2,-44(fp)
 4004308:	10c00417 	ldw	r3,16(r2)
 400430c:	e0bff517 	ldw	r2,-44(fp)
 4004310:	10800217 	ldw	r2,8(r2)
 4004314:	1880041e 	bne	r3,r2,4004328 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 4004318:	e0bff517 	ldw	r2,-44(fp)
 400431c:	10c00117 	ldw	r3,4(r2)
 4004320:	e0bff517 	ldw	r2,-44(fp)
 4004324:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 4004328:	e0bff517 	ldw	r2,-44(fp)
 400432c:	1080058b 	ldhu	r2,22(r2)
 4004330:	10bfffc4 	addi	r2,r2,-1
 4004334:	1007883a 	mov	r3,r2
 4004338:	e0bff517 	ldw	r2,-44(fp)
 400433c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 4004340:	e0bffd17 	ldw	r2,-12(fp)
 4004344:	10c00104 	addi	r3,r2,4
 4004348:	e0fffd15 	stw	r3,-12(fp)
 400434c:	e0fff017 	ldw	r3,-64(fp)
 4004350:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 4004354:	00800044 	movi	r2,1
 4004358:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 400435c:	e0bff18b 	ldhu	r2,-58(fp)
 4004360:	10800044 	addi	r2,r2,1
 4004364:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 4004368:	00000f06 	br	40043a8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400436c:	e0bff203 	ldbu	r2,-56(fp)
 4004370:	10800114 	ori	r2,r2,4
 4004374:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4004378:	00000b06 	br	40043a8 <OSEventPendMulti+0x388>
 400437c:	e0bff317 	ldw	r2,-52(fp)
 4004380:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004384:	e0bff417 	ldw	r2,-48(fp)
 4004388:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400438c:	e0bffd17 	ldw	r2,-12(fp)
 4004390:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 4004394:	e0800217 	ldw	r2,8(fp)
 4004398:	00c00044 	movi	r3,1
 400439c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 40043a0:	e0bff18b 	ldhu	r2,-58(fp)
 40043a4:	00009d06 	br	400461c <OSEventPendMulti+0x5fc>
        }
        pevents++;
 40043a8:	e0bfef17 	ldw	r2,-68(fp)
 40043ac:	10800104 	addi	r2,r2,4
 40043b0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 40043b4:	e0bfef17 	ldw	r2,-68(fp)
 40043b8:	10800017 	ldw	r2,0(r2)
 40043bc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 40043c0:	e0bff017 	ldw	r2,-64(fp)
 40043c4:	103f7d1e 	bne	r2,zero,40041bc <__alt_mem_onchip_memory2_0+0xfc0021bc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 40043c8:	e0bff103 	ldbu	r2,-60(fp)
 40043cc:	10800058 	cmpnei	r2,r2,1
 40043d0:	10000a1e 	bne	r2,zero,40043fc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 40043d4:	e0bffd17 	ldw	r2,-12(fp)
 40043d8:	10000015 	stw	zero,0(r2)
 40043dc:	e0bff317 	ldw	r2,-52(fp)
 40043e0:	e0bff615 	stw	r2,-40(fp)
 40043e4:	e0bff617 	ldw	r2,-40(fp)
 40043e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 40043ec:	e0800217 	ldw	r2,8(fp)
 40043f0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 40043f4:	e0bff18b 	ldhu	r2,-58(fp)
 40043f8:	00008806 	br	400461c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 40043fc:	d0a70517 	ldw	r2,-25580(gp)
 4004400:	d0e70517 	ldw	r3,-25580(gp)
 4004404:	19000c03 	ldbu	r4,48(r3)
 4004408:	e0fff203 	ldbu	r3,-56(fp)
 400440c:	20c6b03a 	or	r3,r4,r3
 4004410:	1809883a 	mov	r4,r3
 4004414:	00ffe004 	movi	r3,-128
 4004418:	20c6b03a 	or	r3,r4,r3
 400441c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4004420:	d0a70517 	ldw	r2,-25580(gp)
 4004424:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 4004428:	d0a70517 	ldw	r2,-25580(gp)
 400442c:	e0ffff0b 	ldhu	r3,-4(fp)
 4004430:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 4004434:	e13ffc17 	ldw	r4,-16(fp)
 4004438:	4004f5c0 	call	4004f5c <OS_EventTaskWaitMulti>
 400443c:	e0bff317 	ldw	r2,-52(fp)
 4004440:	e0bff915 	stw	r2,-28(fp)
 4004444:	e0bff917 	ldw	r2,-28(fp)
 4004448:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400444c:	40057000 	call	4005700 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004450:	0005303a 	rdctl	r2,status
 4004454:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004458:	e0fff717 	ldw	r3,-36(fp)
 400445c:	00bfff84 	movi	r2,-2
 4004460:	1884703a 	and	r2,r3,r2
 4004464:	1001703a 	wrctl	status,r2
  
  return context;
 4004468:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400446c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 4004470:	d0a70517 	ldw	r2,-25580(gp)
 4004474:	10800c43 	ldbu	r2,49(r2)
 4004478:	10803fcc 	andi	r2,r2,255
 400447c:	10000226 	beq	r2,zero,4004488 <OSEventPendMulti+0x468>
 4004480:	108000a0 	cmpeqi	r2,r2,2
 4004484:	10001826 	beq	r2,zero,40044e8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 4004488:	d0a70517 	ldw	r2,-25580(gp)
 400448c:	10800717 	ldw	r2,28(r2)
 4004490:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 4004494:	e0bff017 	ldw	r2,-64(fp)
 4004498:	10000b26 	beq	r2,zero,40044c8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400449c:	e0bffd17 	ldw	r2,-12(fp)
 40044a0:	10c00104 	addi	r3,r2,4
 40044a4:	e0fffd15 	stw	r3,-12(fp)
 40044a8:	e0fff017 	ldw	r3,-64(fp)
 40044ac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 40044b0:	e0bffd17 	ldw	r2,-12(fp)
 40044b4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 40044b8:	e0bff18b 	ldhu	r2,-58(fp)
 40044bc:	10800044 	addi	r2,r2,1
 40044c0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 40044c4:	00000d06 	br	40044fc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 40044c8:	d0a70517 	ldw	r2,-25580(gp)
 40044cc:	00c00044 	movi	r3,1
 40044d0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 40044d4:	d0a70517 	ldw	r2,-25580(gp)
 40044d8:	e17ffc17 	ldw	r5,-16(fp)
 40044dc:	1009883a 	mov	r4,r2
 40044e0:	40051640 	call	4005164 <OS_EventTaskRemoveMulti>
             }
			 break;
 40044e4:	00000506 	br	40044fc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 40044e8:	d0a70517 	ldw	r2,-25580(gp)
 40044ec:	e17ffc17 	ldw	r5,-16(fp)
 40044f0:	1009883a 	mov	r4,r2
 40044f4:	40051640 	call	4005164 <OS_EventTaskRemoveMulti>
             break;
 40044f8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 40044fc:	d0a70517 	ldw	r2,-25580(gp)
 4004500:	10800c43 	ldbu	r2,49(r2)
 4004504:	10803fcc 	andi	r2,r2,255
 4004508:	10000326 	beq	r2,zero,4004518 <OSEventPendMulti+0x4f8>
 400450c:	108000a0 	cmpeqi	r2,r2,2
 4004510:	1000231e 	bne	r2,zero,40045a0 <OSEventPendMulti+0x580>
 4004514:	00002a06 	br	40045c0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 4004518:	e0bff017 	ldw	r2,-64(fp)
 400451c:	10800003 	ldbu	r2,0(r2)
 4004520:	10803fcc 	andi	r2,r2,255
 4004524:	0080100e 	bge	zero,r2,4004568 <OSEventPendMulti+0x548>
 4004528:	10c000d0 	cmplti	r3,r2,3
 400452c:	1800071e 	bne	r3,zero,400454c <OSEventPendMulti+0x52c>
 4004530:	108000e0 	cmpeqi	r2,r2,3
 4004534:	10000c26 	beq	r2,zero,4004568 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 4004538:	e0bffe17 	ldw	r2,-8(fp)
 400453c:	10c00104 	addi	r3,r2,4
 4004540:	e0fffe15 	stw	r3,-8(fp)
 4004544:	10000015 	stw	zero,0(r2)
                      break;
 4004548:	00001206 	br	4004594 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400454c:	e0bffe17 	ldw	r2,-8(fp)
 4004550:	10c00104 	addi	r3,r2,4
 4004554:	e0fffe15 	stw	r3,-8(fp)
 4004558:	d0e70517 	ldw	r3,-25580(gp)
 400455c:	18c00917 	ldw	r3,36(r3)
 4004560:	10c00015 	stw	r3,0(r2)
                      break;
 4004564:	00000b06 	br	4004594 <OSEventPendMulti+0x574>
 4004568:	e0bff317 	ldw	r2,-52(fp)
 400456c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004570:	e0bff817 	ldw	r2,-32(fp)
 4004574:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 4004578:	e0bffd17 	ldw	r2,-12(fp)
 400457c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 4004580:	e0800217 	ldw	r2,8(fp)
 4004584:	00c00044 	movi	r3,1
 4004588:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 400458c:	e0bff18b 	ldhu	r2,-58(fp)
 4004590:	00002206 	br	400461c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 4004594:	e0800217 	ldw	r2,8(fp)
 4004598:	10000005 	stb	zero,0(r2)
             break;
 400459c:	00001006 	br	40045e0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 40045a0:	e0bffe17 	ldw	r2,-8(fp)
 40045a4:	10c00104 	addi	r3,r2,4
 40045a8:	e0fffe15 	stw	r3,-8(fp)
 40045ac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 40045b0:	e0800217 	ldw	r2,8(fp)
 40045b4:	00c00384 	movi	r3,14
 40045b8:	10c00005 	stb	r3,0(r2)
             break;
 40045bc:	00000806 	br	40045e0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 40045c0:	e0bffe17 	ldw	r2,-8(fp)
 40045c4:	10c00104 	addi	r3,r2,4
 40045c8:	e0fffe15 	stw	r3,-8(fp)
 40045cc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 40045d0:	e0800217 	ldw	r2,8(fp)
 40045d4:	00c00284 	movi	r3,10
 40045d8:	10c00005 	stb	r3,0(r2)
             break;
 40045dc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 40045e0:	d0a70517 	ldw	r2,-25580(gp)
 40045e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 40045e8:	d0a70517 	ldw	r2,-25580(gp)
 40045ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 40045f0:	d0a70517 	ldw	r2,-25580(gp)
 40045f4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40045f8:	d0a70517 	ldw	r2,-25580(gp)
 40045fc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 4004600:	d0a70517 	ldw	r2,-25580(gp)
 4004604:	10000915 	stw	zero,36(r2)
 4004608:	e0bff317 	ldw	r2,-52(fp)
 400460c:	e0bffa15 	stw	r2,-24(fp)
 4004610:	e0bffa17 	ldw	r2,-24(fp)
 4004614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 4004618:	e0bff18b 	ldhu	r2,-58(fp)
}
 400461c:	e037883a 	mov	sp,fp
 4004620:	dfc00117 	ldw	ra,4(sp)
 4004624:	df000017 	ldw	fp,0(sp)
 4004628:	dec00204 	addi	sp,sp,8
 400462c:	f800283a 	ret

04004630 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 4004630:	defffe04 	addi	sp,sp,-8
 4004634:	dfc00115 	stw	ra,4(sp)
 4004638:	df000015 	stw	fp,0(sp)
 400463c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 4004640:	400d2880 	call	400d288 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 4004644:	40053ac0 	call	40053ac <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 4004648:	40053f40 	call	40053f4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 400464c:	40055600 	call	4005560 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 4004650:	40052cc0 	call	40052cc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 4004654:	40074000 	call	4007400 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 4004658:	4007d000 	call	4007d00 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400465c:	4008e280 	call	4008e28 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 4004660:	40054600 	call	4005460 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4004664:	40054e00 	call	40054e0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 4004668:	400d2a80 	call	400d2a8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400466c:	4005dd40 	call	4005dd4 <OSDebugInit>
#endif
}
 4004670:	0001883a 	nop
 4004674:	e037883a 	mov	sp,fp
 4004678:	dfc00117 	ldw	ra,4(sp)
 400467c:	df000017 	ldw	fp,0(sp)
 4004680:	dec00204 	addi	sp,sp,8
 4004684:	f800283a 	ret

04004688 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 4004688:	deffff04 	addi	sp,sp,-4
 400468c:	df000015 	stw	fp,0(sp)
 4004690:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 4004694:	d0a6f643 	ldbu	r2,-25639(gp)
 4004698:	10803fcc 	andi	r2,r2,255
 400469c:	10800058 	cmpnei	r2,r2,1
 40046a0:	1000071e 	bne	r2,zero,40046c0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 40046a4:	d0a70403 	ldbu	r2,-25584(gp)
 40046a8:	10803fcc 	andi	r2,r2,255
 40046ac:	10803fe0 	cmpeqi	r2,r2,255
 40046b0:	1000031e 	bne	r2,zero,40046c0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 40046b4:	d0a70403 	ldbu	r2,-25584(gp)
 40046b8:	10800044 	addi	r2,r2,1
 40046bc:	d0a70405 	stb	r2,-25584(gp)
        }
    }
}
 40046c0:	0001883a 	nop
 40046c4:	e037883a 	mov	sp,fp
 40046c8:	df000017 	ldw	fp,0(sp)
 40046cc:	dec00104 	addi	sp,sp,4
 40046d0:	f800283a 	ret

040046d4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 40046d4:	defffb04 	addi	sp,sp,-20
 40046d8:	dfc00415 	stw	ra,16(sp)
 40046dc:	df000315 	stw	fp,12(sp)
 40046e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40046e4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 40046e8:	d0a6f643 	ldbu	r2,-25639(gp)
 40046ec:	10803fcc 	andi	r2,r2,255
 40046f0:	10800058 	cmpnei	r2,r2,1
 40046f4:	10002f1e 	bne	r2,zero,40047b4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40046f8:	0005303a 	rdctl	r2,status
 40046fc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004700:	e0ffff17 	ldw	r3,-4(fp)
 4004704:	00bfff84 	movi	r2,-2
 4004708:	1884703a 	and	r2,r3,r2
 400470c:	1001703a 	wrctl	status,r2
  
  return context;
 4004710:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4004714:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 4004718:	d0a70403 	ldbu	r2,-25584(gp)
 400471c:	10803fcc 	andi	r2,r2,255
 4004720:	10000326 	beq	r2,zero,4004730 <OSIntExit+0x5c>
            OSIntNesting--;
 4004724:	d0a70403 	ldbu	r2,-25584(gp)
 4004728:	10bfffc4 	addi	r2,r2,-1
 400472c:	d0a70405 	stb	r2,-25584(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 4004730:	d0a70403 	ldbu	r2,-25584(gp)
 4004734:	10803fcc 	andi	r2,r2,255
 4004738:	10001a1e 	bne	r2,zero,40047a4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400473c:	d0a6f603 	ldbu	r2,-25640(gp)
 4004740:	10803fcc 	andi	r2,r2,255
 4004744:	1000171e 	bne	r2,zero,40047a4 <OSIntExit+0xd0>
                OS_SchedNew();
 4004748:	40057d00 	call	40057d0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400474c:	d0e6f803 	ldbu	r3,-25632(gp)
 4004750:	d0a6f843 	ldbu	r2,-25631(gp)
 4004754:	18c03fcc 	andi	r3,r3,255
 4004758:	10803fcc 	andi	r2,r2,255
 400475c:	18801126 	beq	r3,r2,40047a4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 4004760:	d0a6f803 	ldbu	r2,-25632(gp)
 4004764:	10c03fcc 	andi	r3,r2,255
 4004768:	008100b4 	movhi	r2,1026
 400476c:	10a10c04 	addi	r2,r2,-31696
 4004770:	18c7883a 	add	r3,r3,r3
 4004774:	18c7883a 	add	r3,r3,r3
 4004778:	10c5883a 	add	r2,r2,r3
 400477c:	10800017 	ldw	r2,0(r2)
 4004780:	d0a70015 	stw	r2,-25600(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 4004784:	d0a70017 	ldw	r2,-25600(gp)
 4004788:	10c00e17 	ldw	r3,56(r2)
 400478c:	18c00044 	addi	r3,r3,1
 4004790:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 4004794:	d0a6fb17 	ldw	r2,-25620(gp)
 4004798:	10800044 	addi	r2,r2,1
 400479c:	d0a6fb15 	stw	r2,-25620(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 40047a0:	400cfb40 	call	400cfb4 <OSCtxSw>
 40047a4:	e0bffd17 	ldw	r2,-12(fp)
 40047a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40047ac:	e0bffe17 	ldw	r2,-8(fp)
 40047b0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 40047b4:	0001883a 	nop
 40047b8:	e037883a 	mov	sp,fp
 40047bc:	dfc00117 	ldw	ra,4(sp)
 40047c0:	df000017 	ldw	fp,0(sp)
 40047c4:	dec00204 	addi	sp,sp,8
 40047c8:	f800283a 	ret

040047cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 40047cc:	defffc04 	addi	sp,sp,-16
 40047d0:	df000315 	stw	fp,12(sp)
 40047d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40047d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 40047dc:	d0a6f643 	ldbu	r2,-25639(gp)
 40047e0:	10803fcc 	andi	r2,r2,255
 40047e4:	10800058 	cmpnei	r2,r2,1
 40047e8:	1000161e 	bne	r2,zero,4004844 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40047ec:	0005303a 	rdctl	r2,status
 40047f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40047f4:	e0ffff17 	ldw	r3,-4(fp)
 40047f8:	00bfff84 	movi	r2,-2
 40047fc:	1884703a 	and	r2,r3,r2
 4004800:	1001703a 	wrctl	status,r2
  
  return context;
 4004804:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4004808:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400480c:	d0a70403 	ldbu	r2,-25584(gp)
 4004810:	10803fcc 	andi	r2,r2,255
 4004814:	1000071e 	bne	r2,zero,4004834 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 4004818:	d0a6f603 	ldbu	r2,-25640(gp)
 400481c:	10803fcc 	andi	r2,r2,255
 4004820:	10803fe0 	cmpeqi	r2,r2,255
 4004824:	1000031e 	bne	r2,zero,4004834 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 4004828:	d0a6f603 	ldbu	r2,-25640(gp)
 400482c:	10800044 	addi	r2,r2,1
 4004830:	d0a6f605 	stb	r2,-25640(gp)
 4004834:	e0bffd17 	ldw	r2,-12(fp)
 4004838:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400483c:	e0bffe17 	ldw	r2,-8(fp)
 4004840:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4004844:	0001883a 	nop
 4004848:	e037883a 	mov	sp,fp
 400484c:	df000017 	ldw	fp,0(sp)
 4004850:	dec00104 	addi	sp,sp,4
 4004854:	f800283a 	ret

04004858 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 4004858:	defff804 	addi	sp,sp,-32
 400485c:	dfc00715 	stw	ra,28(sp)
 4004860:	df000615 	stw	fp,24(sp)
 4004864:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4004868:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400486c:	d0a6f643 	ldbu	r2,-25639(gp)
 4004870:	10803fcc 	andi	r2,r2,255
 4004874:	10800058 	cmpnei	r2,r2,1
 4004878:	1000281e 	bne	r2,zero,400491c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400487c:	0005303a 	rdctl	r2,status
 4004880:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004884:	e0ffff17 	ldw	r3,-4(fp)
 4004888:	00bfff84 	movi	r2,-2
 400488c:	1884703a 	and	r2,r3,r2
 4004890:	1001703a 	wrctl	status,r2
  
  return context;
 4004894:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4004898:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400489c:	d0a6f603 	ldbu	r2,-25640(gp)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	10001926 	beq	r2,zero,400490c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 40048a8:	d0a6f603 	ldbu	r2,-25640(gp)
 40048ac:	10bfffc4 	addi	r2,r2,-1
 40048b0:	d0a6f605 	stb	r2,-25640(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 40048b4:	d0a6f603 	ldbu	r2,-25640(gp)
 40048b8:	10803fcc 	andi	r2,r2,255
 40048bc:	10000e1e 	bne	r2,zero,40048f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 40048c0:	d0a70403 	ldbu	r2,-25584(gp)
 40048c4:	10803fcc 	andi	r2,r2,255
 40048c8:	1000061e 	bne	r2,zero,40048e4 <OSSchedUnlock+0x8c>
 40048cc:	e0bffa17 	ldw	r2,-24(fp)
 40048d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40048d4:	e0bffb17 	ldw	r2,-20(fp)
 40048d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 40048dc:	40057000 	call	4005700 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 40048e0:	00000e06 	br	400491c <OSSchedUnlock+0xc4>
 40048e4:	e0bffa17 	ldw	r2,-24(fp)
 40048e8:	e0bffc15 	stw	r2,-16(fp)
 40048ec:	e0bffc17 	ldw	r2,-16(fp)
 40048f0:	1001703a 	wrctl	status,r2
 40048f4:	00000906 	br	400491c <OSSchedUnlock+0xc4>
 40048f8:	e0bffa17 	ldw	r2,-24(fp)
 40048fc:	e0bffd15 	stw	r2,-12(fp)
 4004900:	e0bffd17 	ldw	r2,-12(fp)
 4004904:	1001703a 	wrctl	status,r2
 4004908:	00000406 	br	400491c <OSSchedUnlock+0xc4>
 400490c:	e0bffa17 	ldw	r2,-24(fp)
 4004910:	e0bffe15 	stw	r2,-8(fp)
 4004914:	e0bffe17 	ldw	r2,-8(fp)
 4004918:	1001703a 	wrctl	status,r2
 400491c:	0001883a 	nop
 4004920:	e037883a 	mov	sp,fp
 4004924:	dfc00117 	ldw	ra,4(sp)
 4004928:	df000017 	ldw	fp,0(sp)
 400492c:	dec00204 	addi	sp,sp,8
 4004930:	f800283a 	ret

04004934 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 4004934:	defffe04 	addi	sp,sp,-8
 4004938:	dfc00115 	stw	ra,4(sp)
 400493c:	df000015 	stw	fp,0(sp)
 4004940:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 4004944:	d0a6f643 	ldbu	r2,-25639(gp)
 4004948:	10803fcc 	andi	r2,r2,255
 400494c:	10000f1e 	bne	r2,zero,400498c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 4004950:	40057d00 	call	40057d0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 4004954:	d0a6f803 	ldbu	r2,-25632(gp)
 4004958:	d0a6f845 	stb	r2,-25631(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400495c:	d0a6f803 	ldbu	r2,-25632(gp)
 4004960:	10c03fcc 	andi	r3,r2,255
 4004964:	008100b4 	movhi	r2,1026
 4004968:	10a10c04 	addi	r2,r2,-31696
 400496c:	18c7883a 	add	r3,r3,r3
 4004970:	18c7883a 	add	r3,r3,r3
 4004974:	10c5883a 	add	r2,r2,r3
 4004978:	10800017 	ldw	r2,0(r2)
 400497c:	d0a70015 	stw	r2,-25600(gp)
        OSTCBCur      = OSTCBHighRdy;
 4004980:	d0a70017 	ldw	r2,-25600(gp)
 4004984:	d0a70515 	stw	r2,-25580(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 4004988:	400d0400 	call	400d040 <OSStartHighRdy>
    }
}
 400498c:	0001883a 	nop
 4004990:	e037883a 	mov	sp,fp
 4004994:	dfc00117 	ldw	ra,4(sp)
 4004998:	df000017 	ldw	fp,0(sp)
 400499c:	dec00204 	addi	sp,sp,8
 40049a0:	f800283a 	ret

040049a4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 40049a4:	defff904 	addi	sp,sp,-28
 40049a8:	dfc00615 	stw	ra,24(sp)
 40049ac:	df000515 	stw	fp,20(sp)
 40049b0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40049b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 40049b8:	01000084 	movi	r4,2
 40049bc:	400b09c0 	call	400b09c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40049c0:	0005303a 	rdctl	r2,status
 40049c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40049c8:	e0fffc17 	ldw	r3,-16(fp)
 40049cc:	00bfff84 	movi	r2,-2
 40049d0:	1884703a 	and	r2,r3,r2
 40049d4:	1001703a 	wrctl	status,r2
  
  return context;
 40049d8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 40049dc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 40049e0:	d026f715 	stw	zero,-25636(gp)
 40049e4:	e0bffb17 	ldw	r2,-20(fp)
 40049e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40049ec:	e0bffd17 	ldw	r2,-12(fp)
 40049f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 40049f4:	01001904 	movi	r4,100
 40049f8:	400b09c0 	call	400b09c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40049fc:	0005303a 	rdctl	r2,status
 4004a00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a04:	e0fffe17 	ldw	r3,-8(fp)
 4004a08:	00bfff84 	movi	r2,-2
 4004a0c:	1884703a 	and	r2,r3,r2
 4004a10:	1001703a 	wrctl	status,r2
  
  return context;
 4004a14:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4004a18:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4004a1c:	d0a6f717 	ldw	r2,-25636(gp)
 4004a20:	d0a6fc15 	stw	r2,-25616(gp)
    OSStatRdy    = OS_TRUE;
 4004a24:	00800044 	movi	r2,1
 4004a28:	d0a70805 	stb	r2,-25568(gp)
 4004a2c:	e0bffb17 	ldw	r2,-20(fp)
 4004a30:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a34:	e0bfff17 	ldw	r2,-4(fp)
 4004a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4004a3c:	0001883a 	nop
 4004a40:	e037883a 	mov	sp,fp
 4004a44:	dfc00117 	ldw	ra,4(sp)
 4004a48:	df000017 	ldw	fp,0(sp)
 4004a4c:	dec00204 	addi	sp,sp,8
 4004a50:	f800283a 	ret

04004a54 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4004a54:	defff704 	addi	sp,sp,-36
 4004a58:	dfc00815 	stw	ra,32(sp)
 4004a5c:	df000715 	stw	fp,28(sp)
 4004a60:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4004a64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4004a68:	400d2680 	call	400d268 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a6c:	0005303a 	rdctl	r2,status
 4004a70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a74:	e0fffd17 	ldw	r3,-12(fp)
 4004a78:	00bfff84 	movi	r2,-2
 4004a7c:	1884703a 	and	r2,r3,r2
 4004a80:	1001703a 	wrctl	status,r2
  
  return context;
 4004a84:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 4004a88:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 4004a8c:	d0a70617 	ldw	r2,-25576(gp)
 4004a90:	10800044 	addi	r2,r2,1
 4004a94:	d0a70615 	stw	r2,-25576(gp)
 4004a98:	e0bffb17 	ldw	r2,-20(fp)
 4004a9c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004aa0:	e0bfff17 	ldw	r2,-4(fp)
 4004aa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 4004aa8:	d0a6f643 	ldbu	r2,-25639(gp)
 4004aac:	10803fcc 	andi	r2,r2,255
 4004ab0:	10800058 	cmpnei	r2,r2,1
 4004ab4:	10006a1e 	bne	r2,zero,4004c60 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 4004ab8:	d0a6fa03 	ldbu	r2,-25624(gp)
 4004abc:	10803fcc 	andi	r2,r2,255
 4004ac0:	10c00060 	cmpeqi	r3,r2,1
 4004ac4:	1800061e 	bne	r3,zero,4004ae0 <OSTimeTick+0x8c>
 4004ac8:	10c000a0 	cmpeqi	r3,r2,2
 4004acc:	1800061e 	bne	r3,zero,4004ae8 <OSTimeTick+0x94>
 4004ad0:	10000a1e 	bne	r2,zero,4004afc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4004ad4:	00800044 	movi	r2,1
 4004ad8:	e0bffa05 	stb	r2,-24(fp)
                 break;
 4004adc:	00000b06 	br	4004b0c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4004ae0:	e03ffa05 	stb	zero,-24(fp)
                 break;
 4004ae4:	00000906 	br	4004b0c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4004ae8:	00800044 	movi	r2,1
 4004aec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4004af0:	00800044 	movi	r2,1
 4004af4:	d0a6fa05 	stb	r2,-25624(gp)
                 break;
 4004af8:	00000406 	br	4004b0c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4004afc:	00800044 	movi	r2,1
 4004b00:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4004b04:	d026fa05 	stb	zero,-25624(gp)
                 break;
 4004b08:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4004b0c:	e0bffa03 	ldbu	r2,-24(fp)
 4004b10:	10005226 	beq	r2,zero,4004c5c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4004b14:	d0a6f917 	ldw	r2,-25628(gp)
 4004b18:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4004b1c:	00004906 	br	4004c44 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b20:	0005303a 	rdctl	r2,status
 4004b24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b28:	e0fffc17 	ldw	r3,-16(fp)
 4004b2c:	00bfff84 	movi	r2,-2
 4004b30:	1884703a 	and	r2,r3,r2
 4004b34:	1001703a 	wrctl	status,r2
  
  return context;
 4004b38:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 4004b3c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4004b40:	e0bff917 	ldw	r2,-28(fp)
 4004b44:	10800b8b 	ldhu	r2,46(r2)
 4004b48:	10bfffcc 	andi	r2,r2,65535
 4004b4c:	10003626 	beq	r2,zero,4004c28 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4004b50:	e0bff917 	ldw	r2,-28(fp)
 4004b54:	10800b8b 	ldhu	r2,46(r2)
 4004b58:	10bfffc4 	addi	r2,r2,-1
 4004b5c:	1007883a 	mov	r3,r2
 4004b60:	e0bff917 	ldw	r2,-28(fp)
 4004b64:	10c00b8d 	sth	r3,46(r2)
 4004b68:	e0bff917 	ldw	r2,-28(fp)
 4004b6c:	10800b8b 	ldhu	r2,46(r2)
 4004b70:	10bfffcc 	andi	r2,r2,65535
 4004b74:	10002c1e 	bne	r2,zero,4004c28 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4004b78:	e0bff917 	ldw	r2,-28(fp)
 4004b7c:	10800c03 	ldbu	r2,48(r2)
 4004b80:	10803fcc 	andi	r2,r2,255
 4004b84:	10800dcc 	andi	r2,r2,55
 4004b88:	10000b26 	beq	r2,zero,4004bb8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 4004b8c:	e0bff917 	ldw	r2,-28(fp)
 4004b90:	10c00c03 	ldbu	r3,48(r2)
 4004b94:	00bff204 	movi	r2,-56
 4004b98:	1884703a 	and	r2,r3,r2
 4004b9c:	1007883a 	mov	r3,r2
 4004ba0:	e0bff917 	ldw	r2,-28(fp)
 4004ba4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 4004ba8:	e0bff917 	ldw	r2,-28(fp)
 4004bac:	00c00044 	movi	r3,1
 4004bb0:	10c00c45 	stb	r3,49(r2)
 4004bb4:	00000206 	br	4004bc0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4004bb8:	e0bff917 	ldw	r2,-28(fp)
 4004bbc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 4004bc0:	e0bff917 	ldw	r2,-28(fp)
 4004bc4:	10800c03 	ldbu	r2,48(r2)
 4004bc8:	10803fcc 	andi	r2,r2,255
 4004bcc:	1080020c 	andi	r2,r2,8
 4004bd0:	1000151e 	bne	r2,zero,4004c28 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4004bd4:	e0bff917 	ldw	r2,-28(fp)
 4004bd8:	10c00d83 	ldbu	r3,54(r2)
 4004bdc:	d0a70203 	ldbu	r2,-25592(gp)
 4004be0:	1884b03a 	or	r2,r3,r2
 4004be4:	d0a70205 	stb	r2,-25592(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4004be8:	e0bff917 	ldw	r2,-28(fp)
 4004bec:	10800d03 	ldbu	r2,52(r2)
 4004bf0:	10c03fcc 	andi	r3,r2,255
 4004bf4:	e0bff917 	ldw	r2,-28(fp)
 4004bf8:	10800d03 	ldbu	r2,52(r2)
 4004bfc:	11003fcc 	andi	r4,r2,255
 4004c00:	d0a70244 	addi	r2,gp,-25591
 4004c04:	2085883a 	add	r2,r4,r2
 4004c08:	11000003 	ldbu	r4,0(r2)
 4004c0c:	e0bff917 	ldw	r2,-28(fp)
 4004c10:	10800d43 	ldbu	r2,53(r2)
 4004c14:	2084b03a 	or	r2,r4,r2
 4004c18:	1009883a 	mov	r4,r2
 4004c1c:	d0a70244 	addi	r2,gp,-25591
 4004c20:	1885883a 	add	r2,r3,r2
 4004c24:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4004c28:	e0bff917 	ldw	r2,-28(fp)
 4004c2c:	10800517 	ldw	r2,20(r2)
 4004c30:	e0bff915 	stw	r2,-28(fp)
 4004c34:	e0bffb17 	ldw	r2,-20(fp)
 4004c38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004c3c:	e0bffe17 	ldw	r2,-8(fp)
 4004c40:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4004c44:	e0bff917 	ldw	r2,-28(fp)
 4004c48:	10800c83 	ldbu	r2,50(r2)
 4004c4c:	10803fcc 	andi	r2,r2,255
 4004c50:	10800518 	cmpnei	r2,r2,20
 4004c54:	103fb21e 	bne	r2,zero,4004b20 <__alt_mem_onchip_memory2_0+0xfc002b20>
 4004c58:	00000106 	br	4004c60 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 4004c5c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4004c60:	e037883a 	mov	sp,fp
 4004c64:	dfc00117 	ldw	ra,4(sp)
 4004c68:	df000017 	ldw	fp,0(sp)
 4004c6c:	dec00204 	addi	sp,sp,8
 4004c70:	f800283a 	ret

04004c74 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4004c74:	deffff04 	addi	sp,sp,-4
 4004c78:	df000015 	stw	fp,0(sp)
 4004c7c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4004c80:	00804784 	movi	r2,286
}
 4004c84:	e037883a 	mov	sp,fp
 4004c88:	df000017 	ldw	fp,0(sp)
 4004c8c:	dec00104 	addi	sp,sp,4
 4004c90:	f800283a 	ret

04004c94 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4004c94:	deffff04 	addi	sp,sp,-4
 4004c98:	df000015 	stw	fp,0(sp)
 4004c9c:	d839883a 	mov	fp,sp
}
 4004ca0:	0001883a 	nop
 4004ca4:	e037883a 	mov	sp,fp
 4004ca8:	df000017 	ldw	fp,0(sp)
 4004cac:	dec00104 	addi	sp,sp,4
 4004cb0:	f800283a 	ret

04004cb4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4004cb4:	defff804 	addi	sp,sp,-32
 4004cb8:	dfc00715 	stw	ra,28(sp)
 4004cbc:	df000615 	stw	fp,24(sp)
 4004cc0:	df000604 	addi	fp,sp,24
 4004cc4:	e13ffc15 	stw	r4,-16(fp)
 4004cc8:	e17ffd15 	stw	r5,-12(fp)
 4004ccc:	3007883a 	mov	r3,r6
 4004cd0:	3805883a 	mov	r2,r7
 4004cd4:	e0fffe05 	stb	r3,-8(fp)
 4004cd8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4004cdc:	e0bffc17 	ldw	r2,-16(fp)
 4004ce0:	10800283 	ldbu	r2,10(r2)
 4004ce4:	10c03fcc 	andi	r3,r2,255
 4004ce8:	00810074 	movhi	r2,1025
 4004cec:	10b6a304 	addi	r2,r2,-9588
 4004cf0:	10c5883a 	add	r2,r2,r3
 4004cf4:	10800003 	ldbu	r2,0(r2)
 4004cf8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4004cfc:	e0bffa03 	ldbu	r2,-24(fp)
 4004d00:	e0fffc17 	ldw	r3,-16(fp)
 4004d04:	1885883a 	add	r2,r3,r2
 4004d08:	108002c4 	addi	r2,r2,11
 4004d0c:	10800003 	ldbu	r2,0(r2)
 4004d10:	10c03fcc 	andi	r3,r2,255
 4004d14:	00810074 	movhi	r2,1025
 4004d18:	10b6a304 	addi	r2,r2,-9588
 4004d1c:	10c5883a 	add	r2,r2,r3
 4004d20:	10800003 	ldbu	r2,0(r2)
 4004d24:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4004d28:	e0bffa03 	ldbu	r2,-24(fp)
 4004d2c:	100490fa 	slli	r2,r2,3
 4004d30:	1007883a 	mov	r3,r2
 4004d34:	e0bffa43 	ldbu	r2,-23(fp)
 4004d38:	1885883a 	add	r2,r3,r2
 4004d3c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4004d40:	e0fffa83 	ldbu	r3,-22(fp)
 4004d44:	008100b4 	movhi	r2,1026
 4004d48:	10a10c04 	addi	r2,r2,-31696
 4004d4c:	18c7883a 	add	r3,r3,r3
 4004d50:	18c7883a 	add	r3,r3,r3
 4004d54:	10c5883a 	add	r2,r2,r3
 4004d58:	10800017 	ldw	r2,0(r2)
 4004d5c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4004d60:	e0bffb17 	ldw	r2,-20(fp)
 4004d64:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4004d68:	e0bffb17 	ldw	r2,-20(fp)
 4004d6c:	e0fffd17 	ldw	r3,-12(fp)
 4004d70:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4004d74:	e0bffb17 	ldw	r2,-20(fp)
 4004d78:	10800c03 	ldbu	r2,48(r2)
 4004d7c:	1007883a 	mov	r3,r2
 4004d80:	e0bffe03 	ldbu	r2,-8(fp)
 4004d84:	0084303a 	nor	r2,zero,r2
 4004d88:	1884703a 	and	r2,r3,r2
 4004d8c:	1007883a 	mov	r3,r2
 4004d90:	e0bffb17 	ldw	r2,-20(fp)
 4004d94:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 4004d98:	e0bffb17 	ldw	r2,-20(fp)
 4004d9c:	e0ffff03 	ldbu	r3,-4(fp)
 4004da0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4004da4:	e0bffb17 	ldw	r2,-20(fp)
 4004da8:	10800c03 	ldbu	r2,48(r2)
 4004dac:	10803fcc 	andi	r2,r2,255
 4004db0:	1080020c 	andi	r2,r2,8
 4004db4:	1000111e 	bne	r2,zero,4004dfc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 4004db8:	e0bffb17 	ldw	r2,-20(fp)
 4004dbc:	10c00d83 	ldbu	r3,54(r2)
 4004dc0:	d0a70203 	ldbu	r2,-25592(gp)
 4004dc4:	1884b03a 	or	r2,r3,r2
 4004dc8:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 4004dcc:	e0fffa03 	ldbu	r3,-24(fp)
 4004dd0:	e13ffa03 	ldbu	r4,-24(fp)
 4004dd4:	d0a70244 	addi	r2,gp,-25591
 4004dd8:	2085883a 	add	r2,r4,r2
 4004ddc:	11000003 	ldbu	r4,0(r2)
 4004de0:	e0bffb17 	ldw	r2,-20(fp)
 4004de4:	10800d43 	ldbu	r2,53(r2)
 4004de8:	2084b03a 	or	r2,r4,r2
 4004dec:	1009883a 	mov	r4,r2
 4004df0:	d0a70244 	addi	r2,gp,-25591
 4004df4:	1885883a 	add	r2,r3,r2
 4004df8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 4004dfc:	e17ffc17 	ldw	r5,-16(fp)
 4004e00:	e13ffb17 	ldw	r4,-20(fp)
 4004e04:	40050ac0 	call	40050ac <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 4004e08:	e0bffb17 	ldw	r2,-20(fp)
 4004e0c:	10800817 	ldw	r2,32(r2)
 4004e10:	10000826 	beq	r2,zero,4004e34 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4004e14:	e0bffb17 	ldw	r2,-20(fp)
 4004e18:	10800817 	ldw	r2,32(r2)
 4004e1c:	100b883a 	mov	r5,r2
 4004e20:	e13ffb17 	ldw	r4,-20(fp)
 4004e24:	40051640 	call	4005164 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 4004e28:	e0bffb17 	ldw	r2,-20(fp)
 4004e2c:	e0fffc17 	ldw	r3,-16(fp)
 4004e30:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 4004e34:	e0bffa83 	ldbu	r2,-22(fp)
}
 4004e38:	e037883a 	mov	sp,fp
 4004e3c:	dfc00117 	ldw	ra,4(sp)
 4004e40:	df000017 	ldw	fp,0(sp)
 4004e44:	dec00204 	addi	sp,sp,8
 4004e48:	f800283a 	ret

04004e4c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4004e4c:	defffd04 	addi	sp,sp,-12
 4004e50:	df000215 	stw	fp,8(sp)
 4004e54:	df000204 	addi	fp,sp,8
 4004e58:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4004e5c:	d0a70517 	ldw	r2,-25580(gp)
 4004e60:	e0ffff17 	ldw	r3,-4(fp)
 4004e64:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 4004e68:	d0a70517 	ldw	r2,-25580(gp)
 4004e6c:	10800d03 	ldbu	r2,52(r2)
 4004e70:	10803fcc 	andi	r2,r2,255
 4004e74:	d0e70517 	ldw	r3,-25580(gp)
 4004e78:	18c00d03 	ldbu	r3,52(r3)
 4004e7c:	18c03fcc 	andi	r3,r3,255
 4004e80:	e13fff17 	ldw	r4,-4(fp)
 4004e84:	20c7883a 	add	r3,r4,r3
 4004e88:	18c002c4 	addi	r3,r3,11
 4004e8c:	19000003 	ldbu	r4,0(r3)
 4004e90:	d0e70517 	ldw	r3,-25580(gp)
 4004e94:	18c00d43 	ldbu	r3,53(r3)
 4004e98:	20c6b03a 	or	r3,r4,r3
 4004e9c:	1809883a 	mov	r4,r3
 4004ea0:	e0ffff17 	ldw	r3,-4(fp)
 4004ea4:	1885883a 	add	r2,r3,r2
 4004ea8:	108002c4 	addi	r2,r2,11
 4004eac:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4004eb0:	e0bfff17 	ldw	r2,-4(fp)
 4004eb4:	10c00283 	ldbu	r3,10(r2)
 4004eb8:	d0a70517 	ldw	r2,-25580(gp)
 4004ebc:	10800d83 	ldbu	r2,54(r2)
 4004ec0:	1884b03a 	or	r2,r3,r2
 4004ec4:	1007883a 	mov	r3,r2
 4004ec8:	e0bfff17 	ldw	r2,-4(fp)
 4004ecc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4004ed0:	d0a70517 	ldw	r2,-25580(gp)
 4004ed4:	10800d03 	ldbu	r2,52(r2)
 4004ed8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4004edc:	e0fffe03 	ldbu	r3,-8(fp)
 4004ee0:	e13ffe03 	ldbu	r4,-8(fp)
 4004ee4:	d0a70244 	addi	r2,gp,-25591
 4004ee8:	2085883a 	add	r2,r4,r2
 4004eec:	10800003 	ldbu	r2,0(r2)
 4004ef0:	1009883a 	mov	r4,r2
 4004ef4:	d0a70517 	ldw	r2,-25580(gp)
 4004ef8:	10800d43 	ldbu	r2,53(r2)
 4004efc:	0084303a 	nor	r2,zero,r2
 4004f00:	2084703a 	and	r2,r4,r2
 4004f04:	1009883a 	mov	r4,r2
 4004f08:	d0a70244 	addi	r2,gp,-25591
 4004f0c:	1885883a 	add	r2,r3,r2
 4004f10:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4004f14:	e0fffe03 	ldbu	r3,-8(fp)
 4004f18:	d0a70244 	addi	r2,gp,-25591
 4004f1c:	1885883a 	add	r2,r3,r2
 4004f20:	10800003 	ldbu	r2,0(r2)
 4004f24:	10803fcc 	andi	r2,r2,255
 4004f28:	1000071e 	bne	r2,zero,4004f48 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4004f2c:	d0a70517 	ldw	r2,-25580(gp)
 4004f30:	10800d83 	ldbu	r2,54(r2)
 4004f34:	0084303a 	nor	r2,zero,r2
 4004f38:	1007883a 	mov	r3,r2
 4004f3c:	d0a70203 	ldbu	r2,-25592(gp)
 4004f40:	1884703a 	and	r2,r3,r2
 4004f44:	d0a70205 	stb	r2,-25592(gp)
    }
}
 4004f48:	0001883a 	nop
 4004f4c:	e037883a 	mov	sp,fp
 4004f50:	df000017 	ldw	fp,0(sp)
 4004f54:	dec00104 	addi	sp,sp,4
 4004f58:	f800283a 	ret

04004f5c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4004f5c:	defffb04 	addi	sp,sp,-20
 4004f60:	df000415 	stw	fp,16(sp)
 4004f64:	df000404 	addi	fp,sp,16
 4004f68:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4004f6c:	d0a70517 	ldw	r2,-25580(gp)
 4004f70:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4004f74:	d0a70517 	ldw	r2,-25580(gp)
 4004f78:	e0ffff17 	ldw	r3,-4(fp)
 4004f7c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 4004f80:	e0bfff17 	ldw	r2,-4(fp)
 4004f84:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 4004f88:	e0bffc17 	ldw	r2,-16(fp)
 4004f8c:	10800017 	ldw	r2,0(r2)
 4004f90:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4004f94:	00002006 	br	4005018 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 4004f98:	d0a70517 	ldw	r2,-25580(gp)
 4004f9c:	10800d03 	ldbu	r2,52(r2)
 4004fa0:	10803fcc 	andi	r2,r2,255
 4004fa4:	d0e70517 	ldw	r3,-25580(gp)
 4004fa8:	18c00d03 	ldbu	r3,52(r3)
 4004fac:	18c03fcc 	andi	r3,r3,255
 4004fb0:	e13ffd17 	ldw	r4,-12(fp)
 4004fb4:	20c7883a 	add	r3,r4,r3
 4004fb8:	18c002c4 	addi	r3,r3,11
 4004fbc:	19000003 	ldbu	r4,0(r3)
 4004fc0:	d0e70517 	ldw	r3,-25580(gp)
 4004fc4:	18c00d43 	ldbu	r3,53(r3)
 4004fc8:	20c6b03a 	or	r3,r4,r3
 4004fcc:	1809883a 	mov	r4,r3
 4004fd0:	e0fffd17 	ldw	r3,-12(fp)
 4004fd4:	1885883a 	add	r2,r3,r2
 4004fd8:	108002c4 	addi	r2,r2,11
 4004fdc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4004fe0:	e0bffd17 	ldw	r2,-12(fp)
 4004fe4:	10c00283 	ldbu	r3,10(r2)
 4004fe8:	d0a70517 	ldw	r2,-25580(gp)
 4004fec:	10800d83 	ldbu	r2,54(r2)
 4004ff0:	1884b03a 	or	r2,r3,r2
 4004ff4:	1007883a 	mov	r3,r2
 4004ff8:	e0bffd17 	ldw	r2,-12(fp)
 4004ffc:	10c00285 	stb	r3,10(r2)
        pevents++;
 4005000:	e0bffc17 	ldw	r2,-16(fp)
 4005004:	10800104 	addi	r2,r2,4
 4005008:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 400500c:	e0bffc17 	ldw	r2,-16(fp)
 4005010:	10800017 	ldw	r2,0(r2)
 4005014:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4005018:	e0bffd17 	ldw	r2,-12(fp)
 400501c:	103fde1e 	bne	r2,zero,4004f98 <__alt_mem_onchip_memory2_0+0xfc002f98>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4005020:	d0a70517 	ldw	r2,-25580(gp)
 4005024:	10800d03 	ldbu	r2,52(r2)
 4005028:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400502c:	e0fffe03 	ldbu	r3,-8(fp)
 4005030:	e13ffe03 	ldbu	r4,-8(fp)
 4005034:	d0a70244 	addi	r2,gp,-25591
 4005038:	2085883a 	add	r2,r4,r2
 400503c:	10800003 	ldbu	r2,0(r2)
 4005040:	1009883a 	mov	r4,r2
 4005044:	d0a70517 	ldw	r2,-25580(gp)
 4005048:	10800d43 	ldbu	r2,53(r2)
 400504c:	0084303a 	nor	r2,zero,r2
 4005050:	2084703a 	and	r2,r4,r2
 4005054:	1009883a 	mov	r4,r2
 4005058:	d0a70244 	addi	r2,gp,-25591
 400505c:	1885883a 	add	r2,r3,r2
 4005060:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4005064:	e0fffe03 	ldbu	r3,-8(fp)
 4005068:	d0a70244 	addi	r2,gp,-25591
 400506c:	1885883a 	add	r2,r3,r2
 4005070:	10800003 	ldbu	r2,0(r2)
 4005074:	10803fcc 	andi	r2,r2,255
 4005078:	1000071e 	bne	r2,zero,4005098 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400507c:	d0a70517 	ldw	r2,-25580(gp)
 4005080:	10800d83 	ldbu	r2,54(r2)
 4005084:	0084303a 	nor	r2,zero,r2
 4005088:	1007883a 	mov	r3,r2
 400508c:	d0a70203 	ldbu	r2,-25592(gp)
 4005090:	1884703a 	and	r2,r3,r2
 4005094:	d0a70205 	stb	r2,-25592(gp)
    }
}
 4005098:	0001883a 	nop
 400509c:	e037883a 	mov	sp,fp
 40050a0:	df000017 	ldw	fp,0(sp)
 40050a4:	dec00104 	addi	sp,sp,4
 40050a8:	f800283a 	ret

040050ac <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 40050ac:	defffc04 	addi	sp,sp,-16
 40050b0:	df000315 	stw	fp,12(sp)
 40050b4:	df000304 	addi	fp,sp,12
 40050b8:	e13ffe15 	stw	r4,-8(fp)
 40050bc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 40050c0:	e0bffe17 	ldw	r2,-8(fp)
 40050c4:	10800d03 	ldbu	r2,52(r2)
 40050c8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 40050cc:	e0bffd03 	ldbu	r2,-12(fp)
 40050d0:	e0fffd03 	ldbu	r3,-12(fp)
 40050d4:	e13fff17 	ldw	r4,-4(fp)
 40050d8:	20c7883a 	add	r3,r4,r3
 40050dc:	18c002c4 	addi	r3,r3,11
 40050e0:	18c00003 	ldbu	r3,0(r3)
 40050e4:	1809883a 	mov	r4,r3
 40050e8:	e0fffe17 	ldw	r3,-8(fp)
 40050ec:	18c00d43 	ldbu	r3,53(r3)
 40050f0:	00c6303a 	nor	r3,zero,r3
 40050f4:	20c6703a 	and	r3,r4,r3
 40050f8:	1809883a 	mov	r4,r3
 40050fc:	e0ffff17 	ldw	r3,-4(fp)
 4005100:	1885883a 	add	r2,r3,r2
 4005104:	108002c4 	addi	r2,r2,11
 4005108:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400510c:	e0bffd03 	ldbu	r2,-12(fp)
 4005110:	e0ffff17 	ldw	r3,-4(fp)
 4005114:	1885883a 	add	r2,r3,r2
 4005118:	108002c4 	addi	r2,r2,11
 400511c:	10800003 	ldbu	r2,0(r2)
 4005120:	10803fcc 	andi	r2,r2,255
 4005124:	10000a1e 	bne	r2,zero,4005150 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 4005128:	e0bfff17 	ldw	r2,-4(fp)
 400512c:	10800283 	ldbu	r2,10(r2)
 4005130:	1007883a 	mov	r3,r2
 4005134:	e0bffe17 	ldw	r2,-8(fp)
 4005138:	10800d83 	ldbu	r2,54(r2)
 400513c:	0084303a 	nor	r2,zero,r2
 4005140:	1884703a 	and	r2,r3,r2
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bfff17 	ldw	r2,-4(fp)
 400514c:	10c00285 	stb	r3,10(r2)
    }
}
 4005150:	0001883a 	nop
 4005154:	e037883a 	mov	sp,fp
 4005158:	df000017 	ldw	fp,0(sp)
 400515c:	dec00104 	addi	sp,sp,4
 4005160:	f800283a 	ret

04005164 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 4005164:	defffa04 	addi	sp,sp,-24
 4005168:	df000515 	stw	fp,20(sp)
 400516c:	df000504 	addi	fp,sp,20
 4005170:	e13ffe15 	stw	r4,-8(fp)
 4005174:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 4005178:	e0bffe17 	ldw	r2,-8(fp)
 400517c:	10800d03 	ldbu	r2,52(r2)
 4005180:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 4005184:	e0bffe17 	ldw	r2,-8(fp)
 4005188:	10800d83 	ldbu	r2,54(r2)
 400518c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 4005190:	e0bffe17 	ldw	r2,-8(fp)
 4005194:	10800d43 	ldbu	r2,53(r2)
 4005198:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 400519c:	e0bfff17 	ldw	r2,-4(fp)
 40051a0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 40051a4:	e0bffb17 	ldw	r2,-20(fp)
 40051a8:	10800017 	ldw	r2,0(r2)
 40051ac:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 40051b0:	00002506 	br	4005248 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 40051b4:	e0bffd03 	ldbu	r2,-12(fp)
 40051b8:	e0fffd03 	ldbu	r3,-12(fp)
 40051bc:	e13ffc17 	ldw	r4,-16(fp)
 40051c0:	20c7883a 	add	r3,r4,r3
 40051c4:	18c002c4 	addi	r3,r3,11
 40051c8:	18c00003 	ldbu	r3,0(r3)
 40051cc:	1809883a 	mov	r4,r3
 40051d0:	e0fffd83 	ldbu	r3,-10(fp)
 40051d4:	00c6303a 	nor	r3,zero,r3
 40051d8:	20c6703a 	and	r3,r4,r3
 40051dc:	1809883a 	mov	r4,r3
 40051e0:	e0fffc17 	ldw	r3,-16(fp)
 40051e4:	1885883a 	add	r2,r3,r2
 40051e8:	108002c4 	addi	r2,r2,11
 40051ec:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 40051f0:	e0bffd03 	ldbu	r2,-12(fp)
 40051f4:	e0fffc17 	ldw	r3,-16(fp)
 40051f8:	1885883a 	add	r2,r3,r2
 40051fc:	108002c4 	addi	r2,r2,11
 4005200:	10800003 	ldbu	r2,0(r2)
 4005204:	10803fcc 	andi	r2,r2,255
 4005208:	1000091e 	bne	r2,zero,4005230 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 400520c:	e0bffc17 	ldw	r2,-16(fp)
 4005210:	10800283 	ldbu	r2,10(r2)
 4005214:	1007883a 	mov	r3,r2
 4005218:	e0bffd43 	ldbu	r2,-11(fp)
 400521c:	0084303a 	nor	r2,zero,r2
 4005220:	1884703a 	and	r2,r3,r2
 4005224:	1007883a 	mov	r3,r2
 4005228:	e0bffc17 	ldw	r2,-16(fp)
 400522c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 4005230:	e0bffb17 	ldw	r2,-20(fp)
 4005234:	10800104 	addi	r2,r2,4
 4005238:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 400523c:	e0bffb17 	ldw	r2,-20(fp)
 4005240:	10800017 	ldw	r2,0(r2)
 4005244:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4005248:	e0bffc17 	ldw	r2,-16(fp)
 400524c:	103fd91e 	bne	r2,zero,40051b4 <__alt_mem_onchip_memory2_0+0xfc0031b4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 4005250:	0001883a 	nop
 4005254:	e037883a 	mov	sp,fp
 4005258:	df000017 	ldw	fp,0(sp)
 400525c:	dec00104 	addi	sp,sp,4
 4005260:	f800283a 	ret

04005264 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 4005264:	defffc04 	addi	sp,sp,-16
 4005268:	df000315 	stw	fp,12(sp)
 400526c:	df000304 	addi	fp,sp,12
 4005270:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 4005274:	e0bfff17 	ldw	r2,-4(fp)
 4005278:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 400527c:	e0bfff17 	ldw	r2,-4(fp)
 4005280:	108002c4 	addi	r2,r2,11
 4005284:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4005288:	e03ffe05 	stb	zero,-8(fp)
 400528c:	00000706 	br	40052ac <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 4005290:	e0bffd17 	ldw	r2,-12(fp)
 4005294:	10c00044 	addi	r3,r2,1
 4005298:	e0fffd15 	stw	r3,-12(fp)
 400529c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40052a0:	e0bffe03 	ldbu	r2,-8(fp)
 40052a4:	10800044 	addi	r2,r2,1
 40052a8:	e0bffe05 	stb	r2,-8(fp)
 40052ac:	e0bffe03 	ldbu	r2,-8(fp)
 40052b0:	108000f0 	cmpltui	r2,r2,3
 40052b4:	103ff61e 	bne	r2,zero,4005290 <__alt_mem_onchip_memory2_0+0xfc003290>
        *ptbl++ = 0;
    }
}
 40052b8:	0001883a 	nop
 40052bc:	e037883a 	mov	sp,fp
 40052c0:	df000017 	ldw	fp,0(sp)
 40052c4:	dec00104 	addi	sp,sp,4
 40052c8:	f800283a 	ret

040052cc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 40052cc:	defffb04 	addi	sp,sp,-20
 40052d0:	dfc00415 	stw	ra,16(sp)
 40052d4:	df000315 	stw	fp,12(sp)
 40052d8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 40052dc:	0142d004 	movi	r5,2880
 40052e0:	01010074 	movhi	r4,1025
 40052e4:	211cf804 	addi	r4,r4,29664
 40052e8:	40056440 	call	4005644 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 40052ec:	00810074 	movhi	r2,1025
 40052f0:	109cf804 	addi	r2,r2,29664
 40052f4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 40052f8:	00810074 	movhi	r2,1025
 40052fc:	109d0404 	addi	r2,r2,29712
 4005300:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4005304:	e03ffd0d 	sth	zero,-12(fp)
 4005308:	00001306 	br	4005358 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400530c:	e0bffe17 	ldw	r2,-8(fp)
 4005310:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4005314:	e0bffe17 	ldw	r2,-8(fp)
 4005318:	e0ffff17 	ldw	r3,-4(fp)
 400531c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 4005320:	e0bffe17 	ldw	r2,-8(fp)
 4005324:	00c00fc4 	movi	r3,63
 4005328:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400532c:	e0bffe17 	ldw	r2,-8(fp)
 4005330:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 4005334:	e0bffe17 	ldw	r2,-8(fp)
 4005338:	10800c04 	addi	r2,r2,48
 400533c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 4005340:	e0bfff17 	ldw	r2,-4(fp)
 4005344:	10800c04 	addi	r2,r2,48
 4005348:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400534c:	e0bffd0b 	ldhu	r2,-12(fp)
 4005350:	10800044 	addi	r2,r2,1
 4005354:	e0bffd0d 	sth	r2,-12(fp)
 4005358:	e0bffd0b 	ldhu	r2,-12(fp)
 400535c:	10800ef0 	cmpltui	r2,r2,59
 4005360:	103fea1e 	bne	r2,zero,400530c <__alt_mem_onchip_memory2_0+0xfc00330c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 4005364:	e0bffe17 	ldw	r2,-8(fp)
 4005368:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400536c:	e0bffe17 	ldw	r2,-8(fp)
 4005370:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 4005374:	e0bffe17 	ldw	r2,-8(fp)
 4005378:	00c00fc4 	movi	r3,63
 400537c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 4005380:	e0bffe17 	ldw	r2,-8(fp)
 4005384:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 4005388:	00810074 	movhi	r2,1025
 400538c:	109cf804 	addi	r2,r2,29664
 4005390:	d0a70315 	stw	r2,-25588(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 4005394:	0001883a 	nop
 4005398:	e037883a 	mov	sp,fp
 400539c:	dfc00117 	ldw	ra,4(sp)
 40053a0:	df000017 	ldw	fp,0(sp)
 40053a4:	dec00204 	addi	sp,sp,8
 40053a8:	f800283a 	ret

040053ac <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 40053ac:	deffff04 	addi	sp,sp,-4
 40053b0:	df000015 	stw	fp,0(sp)
 40053b4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 40053b8:	d0270615 	stw	zero,-25576(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 40053bc:	d0270405 	stb	zero,-25584(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 40053c0:	d026f605 	stb	zero,-25640(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 40053c4:	d026fe45 	stb	zero,-25607(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 40053c8:	d026f645 	stb	zero,-25639(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 40053cc:	d026fb15 	stw	zero,-25620(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 40053d0:	d026f715 	stw	zero,-25636(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 40053d4:	d0270915 	stw	zero,-25564(gp)
    OSIdleCtrMax  = 0L;
 40053d8:	d026fc15 	stw	zero,-25616(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 40053dc:	d0270805 	stb	zero,-25568(gp)
#endif
}
 40053e0:	0001883a 	nop
 40053e4:	e037883a 	mov	sp,fp
 40053e8:	df000017 	ldw	fp,0(sp)
 40053ec:	dec00104 	addi	sp,sp,4
 40053f0:	f800283a 	ret

040053f4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 40053f4:	defffd04 	addi	sp,sp,-12
 40053f8:	df000215 	stw	fp,8(sp)
 40053fc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 4005400:	d0270205 	stb	zero,-25592(gp)
    prdytbl       = &OSRdyTbl[0];
 4005404:	d0a70244 	addi	r2,gp,-25591
 4005408:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400540c:	e03ffe05 	stb	zero,-8(fp)
 4005410:	00000706 	br	4005430 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 4005414:	e0bfff17 	ldw	r2,-4(fp)
 4005418:	10c00044 	addi	r3,r2,1
 400541c:	e0ffff15 	stw	r3,-4(fp)
 4005420:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4005424:	e0bffe03 	ldbu	r2,-8(fp)
 4005428:	10800044 	addi	r2,r2,1
 400542c:	e0bffe05 	stb	r2,-8(fp)
 4005430:	e0bffe03 	ldbu	r2,-8(fp)
 4005434:	108000f0 	cmpltui	r2,r2,3
 4005438:	103ff61e 	bne	r2,zero,4005414 <__alt_mem_onchip_memory2_0+0xfc003414>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400543c:	d026f845 	stb	zero,-25631(gp)
    OSPrioHighRdy = 0;
 4005440:	d026f805 	stb	zero,-25632(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 4005444:	d0270015 	stw	zero,-25600(gp)
    OSTCBCur      = (OS_TCB *)0;
 4005448:	d0270515 	stw	zero,-25580(gp)
}
 400544c:	0001883a 	nop
 4005450:	e037883a 	mov	sp,fp
 4005454:	df000017 	ldw	fp,0(sp)
 4005458:	dec00104 	addi	sp,sp,4
 400545c:	f800283a 	ret

04005460 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 4005460:	defff804 	addi	sp,sp,-32
 4005464:	dfc00715 	stw	ra,28(sp)
 4005468:	df000615 	stw	fp,24(sp)
 400546c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 4005470:	008000c4 	movi	r2,3
 4005474:	d8800415 	stw	r2,16(sp)
 4005478:	d8000315 	stw	zero,12(sp)
 400547c:	00808004 	movi	r2,512
 4005480:	d8800215 	stw	r2,8(sp)
 4005484:	00810074 	movhi	r2,1025
 4005488:	109af804 	addi	r2,r2,27616
 400548c:	d8800115 	stw	r2,4(sp)
 4005490:	00bfffd4 	movui	r2,65535
 4005494:	d8800015 	stw	r2,0(sp)
 4005498:	01c00504 	movi	r7,20
 400549c:	01810074 	movhi	r6,1025
 40054a0:	319cf704 	addi	r6,r6,29660
 40054a4:	000b883a 	mov	r5,zero
 40054a8:	01010034 	movhi	r4,1024
 40054ac:	21164304 	addi	r4,r4,22796
 40054b0:	4009fcc0 	call	4009fcc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 40054b4:	e1bfff04 	addi	r6,fp,-4
 40054b8:	01410074 	movhi	r5,1025
 40054bc:	2976e304 	addi	r5,r5,-9332
 40054c0:	01000504 	movi	r4,20
 40054c4:	400a7dc0 	call	400a7dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 40054c8:	0001883a 	nop
 40054cc:	e037883a 	mov	sp,fp
 40054d0:	dfc00117 	ldw	ra,4(sp)
 40054d4:	df000017 	ldw	fp,0(sp)
 40054d8:	dec00204 	addi	sp,sp,8
 40054dc:	f800283a 	ret

040054e0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 40054e0:	defff804 	addi	sp,sp,-32
 40054e4:	dfc00715 	stw	ra,28(sp)
 40054e8:	df000615 	stw	fp,24(sp)
 40054ec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 40054f0:	008000c4 	movi	r2,3
 40054f4:	d8800415 	stw	r2,16(sp)
 40054f8:	d8000315 	stw	zero,12(sp)
 40054fc:	00808004 	movi	r2,512
 4005500:	d8800215 	stw	r2,8(sp)
 4005504:	00810074 	movhi	r2,1025
 4005508:	10988004 	addi	r2,r2,25088
 400550c:	d8800115 	stw	r2,4(sp)
 4005510:	00bfff94 	movui	r2,65534
 4005514:	d8800015 	stw	r2,0(sp)
 4005518:	01c004c4 	movi	r7,19
 400551c:	01810074 	movhi	r6,1025
 4005520:	319a7f04 	addi	r6,r6,27132
 4005524:	000b883a 	mov	r5,zero
 4005528:	01010034 	movhi	r4,1024
 400552c:	21165a04 	addi	r4,r4,22888
 4005530:	4009fcc0 	call	4009fcc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 4005534:	e1bfff04 	addi	r6,fp,-4
 4005538:	01410074 	movhi	r5,1025
 400553c:	2976e704 	addi	r5,r5,-9316
 4005540:	010004c4 	movi	r4,19
 4005544:	400a7dc0 	call	400a7dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 4005548:	0001883a 	nop
 400554c:	e037883a 	mov	sp,fp
 4005550:	dfc00117 	ldw	ra,4(sp)
 4005554:	df000017 	ldw	fp,0(sp)
 4005558:	dec00204 	addi	sp,sp,8
 400555c:	f800283a 	ret

04005560 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 4005560:	defffb04 	addi	sp,sp,-20
 4005564:	dfc00415 	stw	ra,16(sp)
 4005568:	df000315 	stw	fp,12(sp)
 400556c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 4005570:	01414404 	movi	r5,1296
 4005574:	01010074 	movhi	r4,1025
 4005578:	211fc804 	addi	r4,r4,32544
 400557c:	40056440 	call	4005644 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 4005580:	01401504 	movi	r5,84
 4005584:	010100b4 	movhi	r4,1026
 4005588:	21210c04 	addi	r4,r4,-31696
 400558c:	40056440 	call	4005644 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 4005590:	00810074 	movhi	r2,1025
 4005594:	109fc804 	addi	r2,r2,32544
 4005598:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 400559c:	00810074 	movhi	r2,1025
 40055a0:	109fe304 	addi	r2,r2,32652
 40055a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 40055a8:	e03ffd05 	stb	zero,-12(fp)
 40055ac:	00001106 	br	40055f4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 40055b0:	e0bffe17 	ldw	r2,-8(fp)
 40055b4:	e0ffff17 	ldw	r3,-4(fp)
 40055b8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 40055bc:	e0bffe17 	ldw	r2,-8(fp)
 40055c0:	00c00fc4 	movi	r3,63
 40055c4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 40055c8:	e0bffe17 	ldw	r2,-8(fp)
 40055cc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 40055d0:	e0bffe17 	ldw	r2,-8(fp)
 40055d4:	10801b04 	addi	r2,r2,108
 40055d8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 40055dc:	e0bfff17 	ldw	r2,-4(fp)
 40055e0:	10801b04 	addi	r2,r2,108
 40055e4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 40055e8:	e0bffd03 	ldbu	r2,-12(fp)
 40055ec:	10800044 	addi	r2,r2,1
 40055f0:	e0bffd05 	stb	r2,-12(fp)
 40055f4:	e0bffd03 	ldbu	r2,-12(fp)
 40055f8:	108002f0 	cmpltui	r2,r2,11
 40055fc:	103fec1e 	bne	r2,zero,40055b0 <__alt_mem_onchip_memory2_0+0xfc0035b0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 4005600:	e0bffe17 	ldw	r2,-8(fp)
 4005604:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 4005608:	e0bffe17 	ldw	r2,-8(fp)
 400560c:	00c00fc4 	movi	r3,63
 4005610:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4005614:	e0bffe17 	ldw	r2,-8(fp)
 4005618:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400561c:	d026f915 	stw	zero,-25628(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 4005620:	00810074 	movhi	r2,1025
 4005624:	109fc804 	addi	r2,r2,32544
 4005628:	d0a6fd15 	stw	r2,-25612(gp)
}
 400562c:	0001883a 	nop
 4005630:	e037883a 	mov	sp,fp
 4005634:	dfc00117 	ldw	ra,4(sp)
 4005638:	df000017 	ldw	fp,0(sp)
 400563c:	dec00204 	addi	sp,sp,8
 4005640:	f800283a 	ret

04005644 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 4005644:	defffd04 	addi	sp,sp,-12
 4005648:	df000215 	stw	fp,8(sp)
 400564c:	df000204 	addi	fp,sp,8
 4005650:	e13ffe15 	stw	r4,-8(fp)
 4005654:	2805883a 	mov	r2,r5
 4005658:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 400565c:	00000706 	br	400567c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 4005660:	e0bffe17 	ldw	r2,-8(fp)
 4005664:	10c00044 	addi	r3,r2,1
 4005668:	e0fffe15 	stw	r3,-8(fp)
 400566c:	10000005 	stb	zero,0(r2)
        size--;
 4005670:	e0bfff0b 	ldhu	r2,-4(fp)
 4005674:	10bfffc4 	addi	r2,r2,-1
 4005678:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400567c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005680:	103ff71e 	bne	r2,zero,4005660 <__alt_mem_onchip_memory2_0+0xfc003660>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 4005684:	0001883a 	nop
 4005688:	e037883a 	mov	sp,fp
 400568c:	df000017 	ldw	fp,0(sp)
 4005690:	dec00104 	addi	sp,sp,4
 4005694:	f800283a 	ret

04005698 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 4005698:	defffc04 	addi	sp,sp,-16
 400569c:	df000315 	stw	fp,12(sp)
 40056a0:	df000304 	addi	fp,sp,12
 40056a4:	e13ffd15 	stw	r4,-12(fp)
 40056a8:	e17ffe15 	stw	r5,-8(fp)
 40056ac:	3005883a 	mov	r2,r6
 40056b0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 40056b4:	00000b06 	br	40056e4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 40056b8:	e0bffd17 	ldw	r2,-12(fp)
 40056bc:	10c00044 	addi	r3,r2,1
 40056c0:	e0fffd15 	stw	r3,-12(fp)
 40056c4:	e0fffe17 	ldw	r3,-8(fp)
 40056c8:	19000044 	addi	r4,r3,1
 40056cc:	e13ffe15 	stw	r4,-8(fp)
 40056d0:	18c00003 	ldbu	r3,0(r3)
 40056d4:	10c00005 	stb	r3,0(r2)
        size--;
 40056d8:	e0bfff0b 	ldhu	r2,-4(fp)
 40056dc:	10bfffc4 	addi	r2,r2,-1
 40056e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 40056e4:	e0bfff0b 	ldhu	r2,-4(fp)
 40056e8:	103ff31e 	bne	r2,zero,40056b8 <__alt_mem_onchip_memory2_0+0xfc0036b8>
        *pdest++ = *psrc++;
        size--;
    }
}
 40056ec:	0001883a 	nop
 40056f0:	e037883a 	mov	sp,fp
 40056f4:	df000017 	ldw	fp,0(sp)
 40056f8:	dec00104 	addi	sp,sp,4
 40056fc:	f800283a 	ret

04005700 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 4005700:	defffb04 	addi	sp,sp,-20
 4005704:	dfc00415 	stw	ra,16(sp)
 4005708:	df000315 	stw	fp,12(sp)
 400570c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4005710:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005714:	0005303a 	rdctl	r2,status
 4005718:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400571c:	e0ffff17 	ldw	r3,-4(fp)
 4005720:	00bfff84 	movi	r2,-2
 4005724:	1884703a 	and	r2,r3,r2
 4005728:	1001703a 	wrctl	status,r2
  
  return context;
 400572c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 4005730:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 4005734:	d0a70403 	ldbu	r2,-25584(gp)
 4005738:	10803fcc 	andi	r2,r2,255
 400573c:	10001a1e 	bne	r2,zero,40057a8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 4005740:	d0a6f603 	ldbu	r2,-25640(gp)
 4005744:	10803fcc 	andi	r2,r2,255
 4005748:	1000171e 	bne	r2,zero,40057a8 <OS_Sched+0xa8>
            OS_SchedNew();
 400574c:	40057d00 	call	40057d0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 4005750:	d0e6f803 	ldbu	r3,-25632(gp)
 4005754:	d0a6f843 	ldbu	r2,-25631(gp)
 4005758:	18c03fcc 	andi	r3,r3,255
 400575c:	10803fcc 	andi	r2,r2,255
 4005760:	18801126 	beq	r3,r2,40057a8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4005764:	d0a6f803 	ldbu	r2,-25632(gp)
 4005768:	10c03fcc 	andi	r3,r2,255
 400576c:	008100b4 	movhi	r2,1026
 4005770:	10a10c04 	addi	r2,r2,-31696
 4005774:	18c7883a 	add	r3,r3,r3
 4005778:	18c7883a 	add	r3,r3,r3
 400577c:	10c5883a 	add	r2,r2,r3
 4005780:	10800017 	ldw	r2,0(r2)
 4005784:	d0a70015 	stw	r2,-25600(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 4005788:	d0a70017 	ldw	r2,-25600(gp)
 400578c:	10c00e17 	ldw	r3,56(r2)
 4005790:	18c00044 	addi	r3,r3,1
 4005794:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 4005798:	d0a6fb17 	ldw	r2,-25620(gp)
 400579c:	10800044 	addi	r2,r2,1
 40057a0:	d0a6fb15 	stw	r2,-25620(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 40057a4:	400cfb40 	call	400cfb4 <OSCtxSw>
 40057a8:	e0bffd17 	ldw	r2,-12(fp)
 40057ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40057b0:	e0bffe17 	ldw	r2,-8(fp)
 40057b4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 40057b8:	0001883a 	nop
 40057bc:	e037883a 	mov	sp,fp
 40057c0:	dfc00117 	ldw	ra,4(sp)
 40057c4:	df000017 	ldw	fp,0(sp)
 40057c8:	dec00204 	addi	sp,sp,8
 40057cc:	f800283a 	ret

040057d0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 40057d0:	defffe04 	addi	sp,sp,-8
 40057d4:	df000115 	stw	fp,4(sp)
 40057d8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 40057dc:	d0a70203 	ldbu	r2,-25592(gp)
 40057e0:	10c03fcc 	andi	r3,r2,255
 40057e4:	00810074 	movhi	r2,1025
 40057e8:	10b6a304 	addi	r2,r2,-9588
 40057ec:	10c5883a 	add	r2,r2,r3
 40057f0:	10800003 	ldbu	r2,0(r2)
 40057f4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 40057f8:	e0bfff03 	ldbu	r2,-4(fp)
 40057fc:	100490fa 	slli	r2,r2,3
 4005800:	1009883a 	mov	r4,r2
 4005804:	e0ffff03 	ldbu	r3,-4(fp)
 4005808:	d0a70244 	addi	r2,gp,-25591
 400580c:	1885883a 	add	r2,r3,r2
 4005810:	10800003 	ldbu	r2,0(r2)
 4005814:	10c03fcc 	andi	r3,r2,255
 4005818:	00810074 	movhi	r2,1025
 400581c:	10b6a304 	addi	r2,r2,-9588
 4005820:	10c5883a 	add	r2,r2,r3
 4005824:	10800003 	ldbu	r2,0(r2)
 4005828:	2085883a 	add	r2,r4,r2
 400582c:	d0a6f805 	stb	r2,-25632(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 4005830:	0001883a 	nop
 4005834:	e037883a 	mov	sp,fp
 4005838:	df000017 	ldw	fp,0(sp)
 400583c:	dec00104 	addi	sp,sp,4
 4005840:	f800283a 	ret

04005844 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4005844:	defffc04 	addi	sp,sp,-16
 4005848:	df000315 	stw	fp,12(sp)
 400584c:	df000304 	addi	fp,sp,12
 4005850:	e13ffe15 	stw	r4,-8(fp)
 4005854:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 4005858:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400585c:	00000b06 	br	400588c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 4005860:	e0bffe17 	ldw	r2,-8(fp)
 4005864:	10c00044 	addi	r3,r2,1
 4005868:	e0fffe15 	stw	r3,-8(fp)
 400586c:	e0ffff17 	ldw	r3,-4(fp)
 4005870:	19000044 	addi	r4,r3,1
 4005874:	e13fff15 	stw	r4,-4(fp)
 4005878:	18c00003 	ldbu	r3,0(r3)
 400587c:	10c00005 	stb	r3,0(r2)
        len++;
 4005880:	e0bffd03 	ldbu	r2,-12(fp)
 4005884:	10800044 	addi	r2,r2,1
 4005888:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400588c:	e0bfff17 	ldw	r2,-4(fp)
 4005890:	10800003 	ldbu	r2,0(r2)
 4005894:	10803fcc 	andi	r2,r2,255
 4005898:	103ff11e 	bne	r2,zero,4005860 <__alt_mem_onchip_memory2_0+0xfc003860>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400589c:	e0bffe17 	ldw	r2,-8(fp)
 40058a0:	10000005 	stb	zero,0(r2)
    return (len);
 40058a4:	e0bffd03 	ldbu	r2,-12(fp)
}
 40058a8:	e037883a 	mov	sp,fp
 40058ac:	df000017 	ldw	fp,0(sp)
 40058b0:	dec00104 	addi	sp,sp,4
 40058b4:	f800283a 	ret

040058b8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 40058b8:	defffd04 	addi	sp,sp,-12
 40058bc:	df000215 	stw	fp,8(sp)
 40058c0:	df000204 	addi	fp,sp,8
 40058c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 40058c8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 40058cc:	00000606 	br	40058e8 <OS_StrLen+0x30>
        psrc++;
 40058d0:	e0bfff17 	ldw	r2,-4(fp)
 40058d4:	10800044 	addi	r2,r2,1
 40058d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
 40058dc:	e0bffe03 	ldbu	r2,-8(fp)
 40058e0:	10800044 	addi	r2,r2,1
 40058e4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 40058e8:	e0bfff17 	ldw	r2,-4(fp)
 40058ec:	10800003 	ldbu	r2,0(r2)
 40058f0:	10803fcc 	andi	r2,r2,255
 40058f4:	103ff61e 	bne	r2,zero,40058d0 <__alt_mem_onchip_memory2_0+0xfc0038d0>
        psrc++;
        len++;
    }
    return (len);
 40058f8:	e0bffe03 	ldbu	r2,-8(fp)
}
 40058fc:	e037883a 	mov	sp,fp
 4005900:	df000017 	ldw	fp,0(sp)
 4005904:	dec00104 	addi	sp,sp,4
 4005908:	f800283a 	ret

0400590c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400590c:	defffa04 	addi	sp,sp,-24
 4005910:	dfc00515 	stw	ra,20(sp)
 4005914:	df000415 	stw	fp,16(sp)
 4005918:	df000404 	addi	fp,sp,16
 400591c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4005920:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005924:	0005303a 	rdctl	r2,status
 4005928:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400592c:	e0fffd17 	ldw	r3,-12(fp)
 4005930:	00bfff84 	movi	r2,-2
 4005934:	1884703a 	and	r2,r3,r2
 4005938:	1001703a 	wrctl	status,r2
  
  return context;
 400593c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 4005940:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 4005944:	d0a6f717 	ldw	r2,-25636(gp)
 4005948:	10800044 	addi	r2,r2,1
 400594c:	d0a6f715 	stw	r2,-25636(gp)
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005958:	e0bffe17 	ldw	r2,-8(fp)
 400595c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 4005960:	400d2c80 	call	400d2c8 <OSTaskIdleHook>
    }
 4005964:	003fef06 	br	4005924 <__alt_mem_onchip_memory2_0+0xfc003924>

04005968 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 4005968:	defffa04 	addi	sp,sp,-24
 400596c:	dfc00515 	stw	ra,20(sp)
 4005970:	df000415 	stw	fp,16(sp)
 4005974:	df000404 	addi	fp,sp,16
 4005978:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400597c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4005980:	00000206 	br	400598c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 4005984:	01003204 	movi	r4,200
 4005988:	400b09c0 	call	400b09c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400598c:	d0a70803 	ldbu	r2,-25568(gp)
 4005990:	10803fcc 	andi	r2,r2,255
 4005994:	103ffb26 	beq	r2,zero,4005984 <__alt_mem_onchip_memory2_0+0xfc003984>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 4005998:	d0a6fc17 	ldw	r2,-25616(gp)
 400599c:	01401904 	movi	r5,100
 40059a0:	1009883a 	mov	r4,r2
 40059a4:	40030b80 	call	40030b8 <__udivsi3>
 40059a8:	d0a6fc15 	stw	r2,-25616(gp)
    if (OSIdleCtrMax == 0L) {
 40059ac:	d0a6fc17 	ldw	r2,-25616(gp)
 40059b0:	1000031e 	bne	r2,zero,40059c0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 40059b4:	d026fe05 	stb	zero,-25608(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 40059b8:	01003fc4 	movi	r4,255
 40059bc:	400ad240 	call	400ad24 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40059c0:	0005303a 	rdctl	r2,status
 40059c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40059c8:	e0fffd17 	ldw	r3,-12(fp)
 40059cc:	00bfff84 	movi	r2,-2
 40059d0:	1884703a 	and	r2,r3,r2
 40059d4:	1001703a 	wrctl	status,r2
  
  return context;
 40059d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 40059dc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 40059e0:	d0a6f717 	ldw	r2,-25636(gp)
 40059e4:	d0a70915 	stw	r2,-25564(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 40059e8:	d026f715 	stw	zero,-25636(gp)
 40059ec:	e0bffc17 	ldw	r2,-16(fp)
 40059f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40059f4:	e0bffe17 	ldw	r2,-8(fp)
 40059f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 40059fc:	d0a70917 	ldw	r2,-25564(gp)
 4005a00:	d0e6fc17 	ldw	r3,-25616(gp)
 4005a04:	180b883a 	mov	r5,r3
 4005a08:	1009883a 	mov	r4,r2
 4005a0c:	40030b80 	call	40030b8 <__udivsi3>
 4005a10:	1007883a 	mov	r3,r2
 4005a14:	00801904 	movi	r2,100
 4005a18:	10c5c83a 	sub	r2,r2,r3
 4005a1c:	d0a6fe05 	stb	r2,-25608(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4005a20:	400d2480 	call	400d248 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4005a24:	4005a340 	call	4005a34 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4005a28:	01001904 	movi	r4,100
 4005a2c:	400b09c0 	call	400b09c <OSTimeDly>
    }
 4005a30:	003fe306 	br	40059c0 <__alt_mem_onchip_memory2_0+0xfc0039c0>

04005a34 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4005a34:	defffa04 	addi	sp,sp,-24
 4005a38:	dfc00515 	stw	ra,20(sp)
 4005a3c:	df000415 	stw	fp,16(sp)
 4005a40:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4005a44:	e03ffc05 	stb	zero,-16(fp)
 4005a48:	00002406 	br	4005adc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4005a4c:	e0bffc03 	ldbu	r2,-16(fp)
 4005a50:	e0fffe04 	addi	r3,fp,-8
 4005a54:	180b883a 	mov	r5,r3
 4005a58:	1009883a 	mov	r4,r2
 4005a5c:	400ab640 	call	400ab64 <OSTaskStkChk>
 4005a60:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4005a64:	e0bffc43 	ldbu	r2,-15(fp)
 4005a68:	1000191e 	bne	r2,zero,4005ad0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4005a6c:	e0fffc03 	ldbu	r3,-16(fp)
 4005a70:	008100b4 	movhi	r2,1026
 4005a74:	10a10c04 	addi	r2,r2,-31696
 4005a78:	18c7883a 	add	r3,r3,r3
 4005a7c:	18c7883a 	add	r3,r3,r3
 4005a80:	10c5883a 	add	r2,r2,r3
 4005a84:	10800017 	ldw	r2,0(r2)
 4005a88:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 4005a8c:	e0bffd17 	ldw	r2,-12(fp)
 4005a90:	10000f26 	beq	r2,zero,4005ad0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 4005a94:	e0bffd17 	ldw	r2,-12(fp)
 4005a98:	10800060 	cmpeqi	r2,r2,1
 4005a9c:	10000c1e 	bne	r2,zero,4005ad0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4005aa0:	e0bffd17 	ldw	r2,-12(fp)
 4005aa4:	10c00217 	ldw	r3,8(r2)
 4005aa8:	e0bffd17 	ldw	r2,-12(fp)
 4005aac:	10800317 	ldw	r2,12(r2)
 4005ab0:	1085883a 	add	r2,r2,r2
 4005ab4:	1085883a 	add	r2,r2,r2
 4005ab8:	1887883a 	add	r3,r3,r2
 4005abc:	e0bffd17 	ldw	r2,-12(fp)
 4005ac0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 4005ac4:	e0ffff17 	ldw	r3,-4(fp)
 4005ac8:	e0bffd17 	ldw	r2,-12(fp)
 4005acc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4005ad0:	e0bffc03 	ldbu	r2,-16(fp)
 4005ad4:	10800044 	addi	r2,r2,1
 4005ad8:	e0bffc05 	stb	r2,-16(fp)
 4005adc:	e0bffc03 	ldbu	r2,-16(fp)
 4005ae0:	10800570 	cmpltui	r2,r2,21
 4005ae4:	103fd91e 	bne	r2,zero,4005a4c <__alt_mem_onchip_memory2_0+0xfc003a4c>
#endif
                }
            }
        }
    }
}
 4005ae8:	0001883a 	nop
 4005aec:	e037883a 	mov	sp,fp
 4005af0:	dfc00117 	ldw	ra,4(sp)
 4005af4:	df000017 	ldw	fp,0(sp)
 4005af8:	dec00204 	addi	sp,sp,8
 4005afc:	f800283a 	ret

04005b00 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4005b00:	defff204 	addi	sp,sp,-56
 4005b04:	dfc00d15 	stw	ra,52(sp)
 4005b08:	df000c15 	stw	fp,48(sp)
 4005b0c:	df000c04 	addi	fp,sp,48
 4005b10:	e17ffc15 	stw	r5,-16(fp)
 4005b14:	e1bffd15 	stw	r6,-12(fp)
 4005b18:	3807883a 	mov	r3,r7
 4005b1c:	e0800417 	ldw	r2,16(fp)
 4005b20:	e13ffb05 	stb	r4,-20(fp)
 4005b24:	e0fffe0d 	sth	r3,-8(fp)
 4005b28:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4005b2c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005b30:	0005303a 	rdctl	r2,status
 4005b34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005b38:	e0fffa17 	ldw	r3,-24(fp)
 4005b3c:	00bfff84 	movi	r2,-2
 4005b40:	1884703a 	and	r2,r3,r2
 4005b44:	1001703a 	wrctl	status,r2
  
  return context;
 4005b48:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 4005b4c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4005b50:	d0a6fd17 	ldw	r2,-25612(gp)
 4005b54:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 4005b58:	e0bff617 	ldw	r2,-40(fp)
 4005b5c:	10009326 	beq	r2,zero,4005dac <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4005b60:	e0bff617 	ldw	r2,-40(fp)
 4005b64:	10800517 	ldw	r2,20(r2)
 4005b68:	d0a6fd15 	stw	r2,-25612(gp)
 4005b6c:	e0bff417 	ldw	r2,-48(fp)
 4005b70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005b74:	e0bff817 	ldw	r2,-32(fp)
 4005b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 4005b7c:	e0bff617 	ldw	r2,-40(fp)
 4005b80:	e0fffc17 	ldw	r3,-16(fp)
 4005b84:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 4005b88:	e0bff617 	ldw	r2,-40(fp)
 4005b8c:	e0fffb03 	ldbu	r3,-20(fp)
 4005b90:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 4005b94:	e0bff617 	ldw	r2,-40(fp)
 4005b98:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 4005b9c:	e0bff617 	ldw	r2,-40(fp)
 4005ba0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 4005ba4:	e0bff617 	ldw	r2,-40(fp)
 4005ba8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4005bac:	e0bff617 	ldw	r2,-40(fp)
 4005bb0:	e0c00317 	ldw	r3,12(fp)
 4005bb4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4005bb8:	e0bff617 	ldw	r2,-40(fp)
 4005bbc:	e0c00217 	ldw	r3,8(fp)
 4005bc0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 4005bc4:	e0bff617 	ldw	r2,-40(fp)
 4005bc8:	e0fffd17 	ldw	r3,-12(fp)
 4005bcc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4005bd0:	e0bff617 	ldw	r2,-40(fp)
 4005bd4:	e0ffff0b 	ldhu	r3,-4(fp)
 4005bd8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4005bdc:	e0bff617 	ldw	r2,-40(fp)
 4005be0:	e0fffe0b 	ldhu	r3,-8(fp)
 4005be4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4005be8:	e0bff617 	ldw	r2,-40(fp)
 4005bec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4005bf0:	e0bffb03 	ldbu	r2,-20(fp)
 4005bf4:	1004d0fa 	srli	r2,r2,3
 4005bf8:	1007883a 	mov	r3,r2
 4005bfc:	e0bff617 	ldw	r2,-40(fp)
 4005c00:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4005c04:	e0bffb03 	ldbu	r2,-20(fp)
 4005c08:	108001cc 	andi	r2,r2,7
 4005c0c:	1007883a 	mov	r3,r2
 4005c10:	e0bff617 	ldw	r2,-40(fp)
 4005c14:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4005c18:	e0bff617 	ldw	r2,-40(fp)
 4005c1c:	10800d03 	ldbu	r2,52(r2)
 4005c20:	10803fcc 	andi	r2,r2,255
 4005c24:	00c00044 	movi	r3,1
 4005c28:	1884983a 	sll	r2,r3,r2
 4005c2c:	1007883a 	mov	r3,r2
 4005c30:	e0bff617 	ldw	r2,-40(fp)
 4005c34:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4005c38:	e0bff617 	ldw	r2,-40(fp)
 4005c3c:	10800cc3 	ldbu	r2,51(r2)
 4005c40:	10803fcc 	andi	r2,r2,255
 4005c44:	00c00044 	movi	r3,1
 4005c48:	1884983a 	sll	r2,r3,r2
 4005c4c:	1007883a 	mov	r3,r2
 4005c50:	e0bff617 	ldw	r2,-40(fp)
 4005c54:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4005c58:	e0bff617 	ldw	r2,-40(fp)
 4005c5c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4005c60:	e0bff617 	ldw	r2,-40(fp)
 4005c64:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4005c68:	e0bff617 	ldw	r2,-40(fp)
 4005c6c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4005c70:	e0bff617 	ldw	r2,-40(fp)
 4005c74:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4005c78:	e0bff617 	ldw	r2,-40(fp)
 4005c7c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4005c80:	e0bff617 	ldw	r2,-40(fp)
 4005c84:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4005c88:	e0bff617 	ldw	r2,-40(fp)
 4005c8c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4005c90:	e0bff617 	ldw	r2,-40(fp)
 4005c94:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4005c98:	e0bff617 	ldw	r2,-40(fp)
 4005c9c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4005ca0:	e0bff617 	ldw	r2,-40(fp)
 4005ca4:	00c00fc4 	movi	r3,63
 4005ca8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4005cac:	e0bff617 	ldw	r2,-40(fp)
 4005cb0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4005cb4:	e13ff617 	ldw	r4,-40(fp)
 4005cb8:	400d2e80 	call	400d2e8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4005cbc:	e13ff617 	ldw	r4,-40(fp)
 4005cc0:	400d1e00 	call	400d1e0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005cc4:	0005303a 	rdctl	r2,status
 4005cc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005ccc:	e0fff517 	ldw	r3,-44(fp)
 4005cd0:	00bfff84 	movi	r2,-2
 4005cd4:	1884703a 	and	r2,r3,r2
 4005cd8:	1001703a 	wrctl	status,r2
  
  return context;
 4005cdc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4005ce0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4005ce4:	e0fffb03 	ldbu	r3,-20(fp)
 4005ce8:	008100b4 	movhi	r2,1026
 4005cec:	10a10c04 	addi	r2,r2,-31696
 4005cf0:	18c7883a 	add	r3,r3,r3
 4005cf4:	18c7883a 	add	r3,r3,r3
 4005cf8:	10c5883a 	add	r2,r2,r3
 4005cfc:	e0fff617 	ldw	r3,-40(fp)
 4005d00:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4005d04:	d0e6f917 	ldw	r3,-25628(gp)
 4005d08:	e0bff617 	ldw	r2,-40(fp)
 4005d0c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4005d10:	e0bff617 	ldw	r2,-40(fp)
 4005d14:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4005d18:	d0a6f917 	ldw	r2,-25628(gp)
 4005d1c:	10000326 	beq	r2,zero,4005d2c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 4005d20:	d0a6f917 	ldw	r2,-25628(gp)
 4005d24:	e0fff617 	ldw	r3,-40(fp)
 4005d28:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4005d2c:	e0bff617 	ldw	r2,-40(fp)
 4005d30:	d0a6f915 	stw	r2,-25628(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4005d34:	e0bff617 	ldw	r2,-40(fp)
 4005d38:	10c00d83 	ldbu	r3,54(r2)
 4005d3c:	d0a70203 	ldbu	r2,-25592(gp)
 4005d40:	1884b03a 	or	r2,r3,r2
 4005d44:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4005d48:	e0bff617 	ldw	r2,-40(fp)
 4005d4c:	10800d03 	ldbu	r2,52(r2)
 4005d50:	10c03fcc 	andi	r3,r2,255
 4005d54:	e0bff617 	ldw	r2,-40(fp)
 4005d58:	10800d03 	ldbu	r2,52(r2)
 4005d5c:	11003fcc 	andi	r4,r2,255
 4005d60:	d0a70244 	addi	r2,gp,-25591
 4005d64:	2085883a 	add	r2,r4,r2
 4005d68:	11000003 	ldbu	r4,0(r2)
 4005d6c:	e0bff617 	ldw	r2,-40(fp)
 4005d70:	10800d43 	ldbu	r2,53(r2)
 4005d74:	2084b03a 	or	r2,r4,r2
 4005d78:	1009883a 	mov	r4,r2
 4005d7c:	d0a70244 	addi	r2,gp,-25591
 4005d80:	1885883a 	add	r2,r3,r2
 4005d84:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 4005d88:	d0a6fe43 	ldbu	r2,-25607(gp)
 4005d8c:	10800044 	addi	r2,r2,1
 4005d90:	d0a6fe45 	stb	r2,-25607(gp)
 4005d94:	e0bff417 	ldw	r2,-48(fp)
 4005d98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005d9c:	e0bff717 	ldw	r2,-36(fp)
 4005da0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4005da4:	0005883a 	mov	r2,zero
 4005da8:	00000506 	br	4005dc0 <OS_TCBInit+0x2c0>
 4005dac:	e0bff417 	ldw	r2,-48(fp)
 4005db0:	e0bff915 	stw	r2,-28(fp)
 4005db4:	e0bff917 	ldw	r2,-28(fp)
 4005db8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4005dbc:	00801084 	movi	r2,66
}
 4005dc0:	e037883a 	mov	sp,fp
 4005dc4:	dfc00117 	ldw	ra,4(sp)
 4005dc8:	df000017 	ldw	fp,0(sp)
 4005dcc:	dec00204 	addi	sp,sp,8
 4005dd0:	f800283a 	ret

04005dd4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 4005dd4:	defffe04 	addi	sp,sp,-8
 4005dd8:	df000115 	stw	fp,4(sp)
 4005ddc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 4005de0:	d0a00d04 	addi	r2,gp,-32716
 4005de4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4005de8:	d0a00e04 	addi	r2,gp,-32712
 4005dec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 4005df0:	d0a00f84 	addi	r2,gp,-32706
 4005df4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4005df8:	d0a01004 	addi	r2,gp,-32704
 4005dfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 4005e00:	d0a00f04 	addi	r2,gp,-32708
 4005e04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4005e08:	d0a01084 	addi	r2,gp,-32702
 4005e0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 4005e10:	d0a01104 	addi	r2,gp,-32700
 4005e14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4005e18:	d0a01184 	addi	r2,gp,-32698
 4005e1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 4005e20:	d0a01204 	addi	r2,gp,-32696
 4005e24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4005e28:	d0a01284 	addi	r2,gp,-32694
 4005e2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4005e30:	d0a01304 	addi	r2,gp,-32692
 4005e34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4005e38:	d0a01384 	addi	r2,gp,-32690
 4005e3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4005e40:	d0a01404 	addi	r2,gp,-32688
 4005e44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 4005e48:	d0a01484 	addi	r2,gp,-32686
 4005e4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 4005e50:	d0a01504 	addi	r2,gp,-32684
 4005e54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 4005e58:	d0a01584 	addi	r2,gp,-32682
 4005e5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 4005e60:	d0a01604 	addi	r2,gp,-32680
 4005e64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 4005e68:	d0a01684 	addi	r2,gp,-32678
 4005e6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 4005e70:	d0a01704 	addi	r2,gp,-32676
 4005e74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 4005e78:	d0a01784 	addi	r2,gp,-32674
 4005e7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 4005e80:	d0a01804 	addi	r2,gp,-32672
 4005e84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 4005e88:	d0a01884 	addi	r2,gp,-32670
 4005e8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 4005e90:	d0a01904 	addi	r2,gp,-32668
 4005e94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 4005e98:	d0a01984 	addi	r2,gp,-32666
 4005e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 4005ea0:	d0a01a04 	addi	r2,gp,-32664
 4005ea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 4005ea8:	d0a01a84 	addi	r2,gp,-32662
 4005eac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4005eb0:	d0a01b04 	addi	r2,gp,-32660
 4005eb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 4005eb8:	d0a01b84 	addi	r2,gp,-32658
 4005ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4005ec0:	d0a01c04 	addi	r2,gp,-32656
 4005ec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 4005ec8:	d0a01c84 	addi	r2,gp,-32654
 4005ecc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 4005ed0:	d0a01d04 	addi	r2,gp,-32652
 4005ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 4005ed8:	d0a01d84 	addi	r2,gp,-32650
 4005edc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 4005ee0:	d0a01e04 	addi	r2,gp,-32648
 4005ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 4005ee8:	d0a01e84 	addi	r2,gp,-32646
 4005eec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 4005ef0:	d0a01f04 	addi	r2,gp,-32644
 4005ef4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 4005ef8:	d0a01f84 	addi	r2,gp,-32642
 4005efc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 4005f00:	d0a02004 	addi	r2,gp,-32640
 4005f04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 4005f08:	d0a02084 	addi	r2,gp,-32638
 4005f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 4005f10:	d0a02104 	addi	r2,gp,-32636
 4005f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 4005f18:	d0a02184 	addi	r2,gp,-32634
 4005f1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 4005f20:	d0a02204 	addi	r2,gp,-32632
 4005f24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 4005f28:	d0a02284 	addi	r2,gp,-32630
 4005f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 4005f30:	d0a02304 	addi	r2,gp,-32628
 4005f34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 4005f38:	d0a02384 	addi	r2,gp,-32626
 4005f3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 4005f40:	d0a02404 	addi	r2,gp,-32624
 4005f44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 4005f48:	d0a02904 	addi	r2,gp,-32604
 4005f4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 4005f50:	0001883a 	nop
 4005f54:	e037883a 	mov	sp,fp
 4005f58:	df000017 	ldw	fp,0(sp)
 4005f5c:	dec00104 	addi	sp,sp,4
 4005f60:	f800283a 	ret

04005f64 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 4005f64:	defff204 	addi	sp,sp,-56
 4005f68:	df000d15 	stw	fp,52(sp)
 4005f6c:	df000d04 	addi	fp,sp,52
 4005f70:	e13ffc15 	stw	r4,-16(fp)
 4005f74:	2807883a 	mov	r3,r5
 4005f78:	3005883a 	mov	r2,r6
 4005f7c:	e1ffff15 	stw	r7,-4(fp)
 4005f80:	e0fffd0d 	sth	r3,-12(fp)
 4005f84:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4005f88:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4005f8c:	e0bfff17 	ldw	r2,-4(fp)
 4005f90:	1000021e 	bne	r2,zero,4005f9c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 4005f94:	0005883a 	mov	r2,zero
 4005f98:	0000b006 	br	400625c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4005f9c:	e0bffc17 	ldw	r2,-16(fp)
 4005fa0:	1000051e 	bne	r2,zero,4005fb8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4005fa4:	e0bfff17 	ldw	r2,-4(fp)
 4005fa8:	00c01b84 	movi	r3,110
 4005fac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4005fb0:	0005883a 	mov	r2,zero
 4005fb4:	0000a906 	br	400625c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4005fb8:	e0bffc17 	ldw	r2,-16(fp)
 4005fbc:	10800003 	ldbu	r2,0(r2)
 4005fc0:	10803fcc 	andi	r2,r2,255
 4005fc4:	10800160 	cmpeqi	r2,r2,5
 4005fc8:	1000051e 	bne	r2,zero,4005fe0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4005fcc:	e0bfff17 	ldw	r2,-4(fp)
 4005fd0:	00c00044 	movi	r3,1
 4005fd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4005fd8:	0005883a 	mov	r2,zero
 4005fdc:	00009f06 	br	400625c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4005fe0:	e0fffe03 	ldbu	r3,-8(fp)
 4005fe4:	00bfe004 	movi	r2,-128
 4005fe8:	1884703a 	and	r2,r3,r2
 4005fec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 4005ff0:	e0bff503 	ldbu	r2,-44(fp)
 4005ff4:	10000626 	beq	r2,zero,4006010 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 4005ff8:	e0bffe03 	ldbu	r2,-8(fp)
 4005ffc:	10801fcc 	andi	r2,r2,127
 4006000:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4006004:	00800044 	movi	r2,1
 4006008:	e0bff385 	stb	r2,-50(fp)
 400600c:	00000106 	br	4006014 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 4006010:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 4006014:	e0bfff17 	ldw	r2,-4(fp)
 4006018:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400601c:	0005303a 	rdctl	r2,status
 4006020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006024:	e0fffb17 	ldw	r3,-20(fp)
 4006028:	00bfff84 	movi	r2,-2
 400602c:	1884703a 	and	r2,r3,r2
 4006030:	1001703a 	wrctl	status,r2
  
  return context;
 4006034:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 4006038:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 400603c:	e0bffe03 	ldbu	r2,-8(fp)
 4006040:	10c00060 	cmpeqi	r3,r2,1
 4006044:	18005f1e 	bne	r3,zero,40061c4 <OSFlagAccept+0x260>
 4006048:	10c00088 	cmpgei	r3,r2,2
 400604c:	1800021e 	bne	r3,zero,4006058 <OSFlagAccept+0xf4>
 4006050:	10003f26 	beq	r2,zero,4006150 <OSFlagAccept+0x1ec>
 4006054:	00007706 	br	4006234 <OSFlagAccept+0x2d0>
 4006058:	10c000a0 	cmpeqi	r3,r2,2
 400605c:	1800031e 	bne	r3,zero,400606c <OSFlagAccept+0x108>
 4006060:	108000e0 	cmpeqi	r2,r2,3
 4006064:	10001e1e 	bne	r2,zero,40060e0 <OSFlagAccept+0x17c>
 4006068:	00007206 	br	4006234 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400606c:	e0bffc17 	ldw	r2,-16(fp)
 4006070:	10c0020b 	ldhu	r3,8(r2)
 4006074:	e0bffd0b 	ldhu	r2,-12(fp)
 4006078:	1884703a 	and	r2,r3,r2
 400607c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006080:	e0fff30b 	ldhu	r3,-52(fp)
 4006084:	e0bffd0b 	ldhu	r2,-12(fp)
 4006088:	18800d1e 	bne	r3,r2,40060c0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400608c:	e0bff383 	ldbu	r2,-50(fp)
 4006090:	10800058 	cmpnei	r2,r2,1
 4006094:	10000d1e 	bne	r2,zero,40060cc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4006098:	e0bffc17 	ldw	r2,-16(fp)
 400609c:	1080020b 	ldhu	r2,8(r2)
 40060a0:	1007883a 	mov	r3,r2
 40060a4:	e0bff30b 	ldhu	r2,-52(fp)
 40060a8:	0084303a 	nor	r2,zero,r2
 40060ac:	1884703a 	and	r2,r3,r2
 40060b0:	1007883a 	mov	r3,r2
 40060b4:	e0bffc17 	ldw	r2,-16(fp)
 40060b8:	10c0020d 	sth	r3,8(r2)
 40060bc:	00000306 	br	40060cc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40060c0:	e0bfff17 	ldw	r2,-4(fp)
 40060c4:	00c01c04 	movi	r3,112
 40060c8:	10c00005 	stb	r3,0(r2)
 40060cc:	e0bff417 	ldw	r2,-48(fp)
 40060d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40060d4:	e0bff617 	ldw	r2,-40(fp)
 40060d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40060dc:	00005e06 	br	4006258 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 40060e0:	e0bffc17 	ldw	r2,-16(fp)
 40060e4:	10c0020b 	ldhu	r3,8(r2)
 40060e8:	e0bffd0b 	ldhu	r2,-12(fp)
 40060ec:	1884703a 	and	r2,r3,r2
 40060f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 40060f4:	e0bff30b 	ldhu	r2,-52(fp)
 40060f8:	10000d26 	beq	r2,zero,4006130 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40060fc:	e0bff383 	ldbu	r2,-50(fp)
 4006100:	10800058 	cmpnei	r2,r2,1
 4006104:	10000d1e 	bne	r2,zero,400613c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4006108:	e0bffc17 	ldw	r2,-16(fp)
 400610c:	1080020b 	ldhu	r2,8(r2)
 4006110:	1007883a 	mov	r3,r2
 4006114:	e0bff30b 	ldhu	r2,-52(fp)
 4006118:	0084303a 	nor	r2,zero,r2
 400611c:	1884703a 	and	r2,r3,r2
 4006120:	1007883a 	mov	r3,r2
 4006124:	e0bffc17 	ldw	r2,-16(fp)
 4006128:	10c0020d 	sth	r3,8(r2)
 400612c:	00000306 	br	400613c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4006130:	e0bfff17 	ldw	r2,-4(fp)
 4006134:	00c01c04 	movi	r3,112
 4006138:	10c00005 	stb	r3,0(r2)
 400613c:	e0bff417 	ldw	r2,-48(fp)
 4006140:	e0bff715 	stw	r2,-36(fp)
 4006144:	e0bff717 	ldw	r2,-36(fp)
 4006148:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400614c:	00004206 	br	4006258 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4006150:	e0bffc17 	ldw	r2,-16(fp)
 4006154:	1080020b 	ldhu	r2,8(r2)
 4006158:	0084303a 	nor	r2,zero,r2
 400615c:	1007883a 	mov	r3,r2
 4006160:	e0bffd0b 	ldhu	r2,-12(fp)
 4006164:	1884703a 	and	r2,r3,r2
 4006168:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400616c:	e0fff30b 	ldhu	r3,-52(fp)
 4006170:	e0bffd0b 	ldhu	r2,-12(fp)
 4006174:	18800b1e 	bne	r3,r2,40061a4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006178:	e0bff383 	ldbu	r2,-50(fp)
 400617c:	10800058 	cmpnei	r2,r2,1
 4006180:	10000b1e 	bne	r2,zero,40061b0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4006184:	e0bffc17 	ldw	r2,-16(fp)
 4006188:	10c0020b 	ldhu	r3,8(r2)
 400618c:	e0bff30b 	ldhu	r2,-52(fp)
 4006190:	1884b03a 	or	r2,r3,r2
 4006194:	1007883a 	mov	r3,r2
 4006198:	e0bffc17 	ldw	r2,-16(fp)
 400619c:	10c0020d 	sth	r3,8(r2)
 40061a0:	00000306 	br	40061b0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40061a4:	e0bfff17 	ldw	r2,-4(fp)
 40061a8:	00c01c04 	movi	r3,112
 40061ac:	10c00005 	stb	r3,0(r2)
 40061b0:	e0bff417 	ldw	r2,-48(fp)
 40061b4:	e0bff815 	stw	r2,-32(fp)
 40061b8:	e0bff817 	ldw	r2,-32(fp)
 40061bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40061c0:	00002506 	br	4006258 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 40061c4:	e0bffc17 	ldw	r2,-16(fp)
 40061c8:	1080020b 	ldhu	r2,8(r2)
 40061cc:	0084303a 	nor	r2,zero,r2
 40061d0:	1007883a 	mov	r3,r2
 40061d4:	e0bffd0b 	ldhu	r2,-12(fp)
 40061d8:	1884703a 	and	r2,r3,r2
 40061dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 40061e0:	e0bff30b 	ldhu	r2,-52(fp)
 40061e4:	10000b26 	beq	r2,zero,4006214 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40061e8:	e0bff383 	ldbu	r2,-50(fp)
 40061ec:	10800058 	cmpnei	r2,r2,1
 40061f0:	10000b1e 	bne	r2,zero,4006220 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 40061f4:	e0bffc17 	ldw	r2,-16(fp)
 40061f8:	10c0020b 	ldhu	r3,8(r2)
 40061fc:	e0bff30b 	ldhu	r2,-52(fp)
 4006200:	1884b03a 	or	r2,r3,r2
 4006204:	1007883a 	mov	r3,r2
 4006208:	e0bffc17 	ldw	r2,-16(fp)
 400620c:	10c0020d 	sth	r3,8(r2)
 4006210:	00000306 	br	4006220 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4006214:	e0bfff17 	ldw	r2,-4(fp)
 4006218:	00c01c04 	movi	r3,112
 400621c:	10c00005 	stb	r3,0(r2)
 4006220:	e0bff417 	ldw	r2,-48(fp)
 4006224:	e0bff915 	stw	r2,-28(fp)
 4006228:	e0bff917 	ldw	r2,-28(fp)
 400622c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4006230:	00000906 	br	4006258 <OSFlagAccept+0x2f4>
 4006234:	e0bff417 	ldw	r2,-48(fp)
 4006238:	e0bffa15 	stw	r2,-24(fp)
 400623c:	e0bffa17 	ldw	r2,-24(fp)
 4006240:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4006244:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 4006248:	e0bfff17 	ldw	r2,-4(fp)
 400624c:	00c01bc4 	movi	r3,111
 4006250:	10c00005 	stb	r3,0(r2)
             break;
 4006254:	0001883a 	nop
    }
    return (flags_rdy);
 4006258:	e0bff30b 	ldhu	r2,-52(fp)
}
 400625c:	e037883a 	mov	sp,fp
 4006260:	df000017 	ldw	fp,0(sp)
 4006264:	dec00104 	addi	sp,sp,4
 4006268:	f800283a 	ret

0400626c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 400626c:	defff804 	addi	sp,sp,-32
 4006270:	df000715 	stw	fp,28(sp)
 4006274:	df000704 	addi	fp,sp,28
 4006278:	2005883a 	mov	r2,r4
 400627c:	e17fff15 	stw	r5,-4(fp)
 4006280:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 4006284:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 4006288:	e0bfff17 	ldw	r2,-4(fp)
 400628c:	1000021e 	bne	r2,zero,4006298 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 4006290:	0005883a 	mov	r2,zero
 4006294:	00003306 	br	4006364 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 4006298:	d0a70403 	ldbu	r2,-25584(gp)
 400629c:	10803fcc 	andi	r2,r2,255
 40062a0:	10000526 	beq	r2,zero,40062b8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 40062a4:	e0bfff17 	ldw	r2,-4(fp)
 40062a8:	00c00404 	movi	r3,16
 40062ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 40062b0:	0005883a 	mov	r2,zero
 40062b4:	00002b06 	br	4006364 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40062b8:	0005303a 	rdctl	r2,status
 40062bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40062c0:	e0fffd17 	ldw	r3,-12(fp)
 40062c4:	00bfff84 	movi	r2,-2
 40062c8:	1884703a 	and	r2,r3,r2
 40062cc:	1001703a 	wrctl	status,r2
  
  return context;
 40062d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40062d4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 40062d8:	d0a70717 	ldw	r2,-25572(gp)
 40062dc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 40062e0:	e0bffb17 	ldw	r2,-20(fp)
 40062e4:	10001726 	beq	r2,zero,4006344 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 40062e8:	d0a70717 	ldw	r2,-25572(gp)
 40062ec:	10800117 	ldw	r2,4(r2)
 40062f0:	d0a70715 	stw	r2,-25572(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 40062f4:	e0bffb17 	ldw	r2,-20(fp)
 40062f8:	00c00144 	movi	r3,5
 40062fc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 4006300:	e0bffb17 	ldw	r2,-20(fp)
 4006304:	e0fffe0b 	ldhu	r3,-8(fp)
 4006308:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 400630c:	e0bffb17 	ldw	r2,-20(fp)
 4006310:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 4006314:	e0bffb17 	ldw	r2,-20(fp)
 4006318:	00c00fc4 	movi	r3,63
 400631c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4006320:	e0bffb17 	ldw	r2,-20(fp)
 4006324:	100002c5 	stb	zero,11(r2)
 4006328:	e0bff917 	ldw	r2,-28(fp)
 400632c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006330:	e0bffa17 	ldw	r2,-24(fp)
 4006334:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 4006338:	e0bfff17 	ldw	r2,-4(fp)
 400633c:	10000005 	stb	zero,0(r2)
 4006340:	00000706 	br	4006360 <OSFlagCreate+0xf4>
 4006344:	e0bff917 	ldw	r2,-28(fp)
 4006348:	e0bffc15 	stw	r2,-16(fp)
 400634c:	e0bffc17 	ldw	r2,-16(fp)
 4006350:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 4006354:	e0bfff17 	ldw	r2,-4(fp)
 4006358:	00c01c84 	movi	r3,114
 400635c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 4006360:	e0bffb17 	ldw	r2,-20(fp)
}
 4006364:	e037883a 	mov	sp,fp
 4006368:	df000017 	ldw	fp,0(sp)
 400636c:	dec00104 	addi	sp,sp,4
 4006370:	f800283a 	ret

04006374 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 4006374:	defff204 	addi	sp,sp,-56
 4006378:	dfc00d15 	stw	ra,52(sp)
 400637c:	df000c15 	stw	fp,48(sp)
 4006380:	df000c04 	addi	fp,sp,48
 4006384:	e13ffd15 	stw	r4,-12(fp)
 4006388:	2805883a 	mov	r2,r5
 400638c:	e1bfff15 	stw	r6,-4(fp)
 4006390:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4006394:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4006398:	e0bfff17 	ldw	r2,-4(fp)
 400639c:	1000021e 	bne	r2,zero,40063a8 <OSFlagDel+0x34>
        return (pgrp);
 40063a0:	e0bffd17 	ldw	r2,-12(fp)
 40063a4:	00008006 	br	40065a8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 40063a8:	e0bffd17 	ldw	r2,-12(fp)
 40063ac:	1000051e 	bne	r2,zero,40063c4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40063b0:	e0bfff17 	ldw	r2,-4(fp)
 40063b4:	00c01b84 	movi	r3,110
 40063b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 40063bc:	e0bffd17 	ldw	r2,-12(fp)
 40063c0:	00007906 	br	40065a8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40063c4:	d0a70403 	ldbu	r2,-25584(gp)
 40063c8:	10803fcc 	andi	r2,r2,255
 40063cc:	10000526 	beq	r2,zero,40063e4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 40063d0:	e0bfff17 	ldw	r2,-4(fp)
 40063d4:	00c003c4 	movi	r3,15
 40063d8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 40063dc:	e0bffd17 	ldw	r2,-12(fp)
 40063e0:	00007106 	br	40065a8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 40063e4:	e0bffd17 	ldw	r2,-12(fp)
 40063e8:	10800003 	ldbu	r2,0(r2)
 40063ec:	10803fcc 	andi	r2,r2,255
 40063f0:	10800160 	cmpeqi	r2,r2,5
 40063f4:	1000051e 	bne	r2,zero,400640c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 40063f8:	e0bfff17 	ldw	r2,-4(fp)
 40063fc:	00c00044 	movi	r3,1
 4006400:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4006404:	e0bffd17 	ldw	r2,-12(fp)
 4006408:	00006706 	br	40065a8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400640c:	0005303a 	rdctl	r2,status
 4006410:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006414:	e0fffc17 	ldw	r3,-16(fp)
 4006418:	00bfff84 	movi	r2,-2
 400641c:	1884703a 	and	r2,r3,r2
 4006420:	1001703a 	wrctl	status,r2
  
  return context;
 4006424:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4006428:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 400642c:	e0bffd17 	ldw	r2,-12(fp)
 4006430:	10800117 	ldw	r2,4(r2)
 4006434:	10000326 	beq	r2,zero,4006444 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4006438:	00800044 	movi	r2,1
 400643c:	e0bff405 	stb	r2,-48(fp)
 4006440:	00000106 	br	4006448 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4006444:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4006448:	e0bffe03 	ldbu	r2,-8(fp)
 400644c:	10000326 	beq	r2,zero,400645c <OSFlagDel+0xe8>
 4006450:	10800060 	cmpeqi	r2,r2,1
 4006454:	1000231e 	bne	r2,zero,40064e4 <OSFlagDel+0x170>
 4006458:	00004806 	br	400657c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 400645c:	e0bff403 	ldbu	r2,-48(fp)
 4006460:	1000161e 	bne	r2,zero,40064bc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 4006464:	e0bffd17 	ldw	r2,-12(fp)
 4006468:	00c00fc4 	movi	r3,63
 400646c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4006470:	e0bffd17 	ldw	r2,-12(fp)
 4006474:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4006478:	e0bffd17 	ldw	r2,-12(fp)
 400647c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 4006480:	d0e70717 	ldw	r3,-25572(gp)
 4006484:	e0bffd17 	ldw	r2,-12(fp)
 4006488:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400648c:	e0bffd17 	ldw	r2,-12(fp)
 4006490:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 4006494:	e0bffd17 	ldw	r2,-12(fp)
 4006498:	d0a70715 	stw	r2,-25572(gp)
 400649c:	e0bff717 	ldw	r2,-36(fp)
 40064a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40064a4:	e0bff817 	ldw	r2,-32(fp)
 40064a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 40064ac:	e0bfff17 	ldw	r2,-4(fp)
 40064b0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 40064b4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 40064b8:	00003a06 	br	40065a4 <OSFlagDel+0x230>
 40064bc:	e0bff717 	ldw	r2,-36(fp)
 40064c0:	e0bff915 	stw	r2,-28(fp)
 40064c4:	e0bff917 	ldw	r2,-28(fp)
 40064c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 40064cc:	e0bfff17 	ldw	r2,-4(fp)
 40064d0:	00c01244 	movi	r3,73
 40064d4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 40064d8:	e0bffd17 	ldw	r2,-12(fp)
 40064dc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 40064e0:	00003006 	br	40065a4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40064e4:	e0bffd17 	ldw	r2,-12(fp)
 40064e8:	10800117 	ldw	r2,4(r2)
 40064ec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 40064f0:	00000606 	br	400650c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 40064f4:	000b883a 	mov	r5,zero
 40064f8:	e13ff517 	ldw	r4,-44(fp)
 40064fc:	40074e00 	call	40074e0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4006500:	e0bff517 	ldw	r2,-44(fp)
 4006504:	10800017 	ldw	r2,0(r2)
 4006508:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400650c:	e0bff517 	ldw	r2,-44(fp)
 4006510:	103ff81e 	bne	r2,zero,40064f4 <__alt_mem_onchip_memory2_0+0xfc0044f4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4006514:	e0bffd17 	ldw	r2,-12(fp)
 4006518:	00c00fc4 	movi	r3,63
 400651c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4006520:	e0bffd17 	ldw	r2,-12(fp)
 4006524:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4006528:	e0bffd17 	ldw	r2,-12(fp)
 400652c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4006530:	d0e70717 	ldw	r3,-25572(gp)
 4006534:	e0bffd17 	ldw	r2,-12(fp)
 4006538:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400653c:	e0bffd17 	ldw	r2,-12(fp)
 4006540:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 4006544:	e0bffd17 	ldw	r2,-12(fp)
 4006548:	d0a70715 	stw	r2,-25572(gp)
 400654c:	e0bff717 	ldw	r2,-36(fp)
 4006550:	e0bffa15 	stw	r2,-24(fp)
 4006554:	e0bffa17 	ldw	r2,-24(fp)
 4006558:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400655c:	e0bff403 	ldbu	r2,-48(fp)
 4006560:	10800058 	cmpnei	r2,r2,1
 4006564:	1000011e 	bne	r2,zero,400656c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4006568:	40057000 	call	4005700 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 400656c:	e0bfff17 	ldw	r2,-4(fp)
 4006570:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 4006574:	e03ff615 	stw	zero,-40(fp)
             break;
 4006578:	00000a06 	br	40065a4 <OSFlagDel+0x230>
 400657c:	e0bff717 	ldw	r2,-36(fp)
 4006580:	e0bffb15 	stw	r2,-20(fp)
 4006584:	e0bffb17 	ldw	r2,-20(fp)
 4006588:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 400658c:	e0bfff17 	ldw	r2,-4(fp)
 4006590:	00c001c4 	movi	r3,7
 4006594:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 4006598:	e0bffd17 	ldw	r2,-12(fp)
 400659c:	e0bff615 	stw	r2,-40(fp)
             break;
 40065a0:	0001883a 	nop
    }
    return (pgrp_return);
 40065a4:	e0bff617 	ldw	r2,-40(fp)
}
 40065a8:	e037883a 	mov	sp,fp
 40065ac:	dfc00117 	ldw	ra,4(sp)
 40065b0:	df000017 	ldw	fp,0(sp)
 40065b4:	dec00204 	addi	sp,sp,8
 40065b8:	f800283a 	ret

040065bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 40065bc:	defff604 	addi	sp,sp,-40
 40065c0:	dfc00915 	stw	ra,36(sp)
 40065c4:	df000815 	stw	fp,32(sp)
 40065c8:	df000804 	addi	fp,sp,32
 40065cc:	e13ffd15 	stw	r4,-12(fp)
 40065d0:	e17ffe15 	stw	r5,-8(fp)
 40065d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40065d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40065dc:	e0bfff17 	ldw	r2,-4(fp)
 40065e0:	1000021e 	bne	r2,zero,40065ec <OSFlagNameGet+0x30>
        return (0);
 40065e4:	0005883a 	mov	r2,zero
 40065e8:	00003906 	br	40066d0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 40065ec:	e0bffd17 	ldw	r2,-12(fp)
 40065f0:	1000051e 	bne	r2,zero,4006608 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40065f4:	e0bfff17 	ldw	r2,-4(fp)
 40065f8:	00c01b84 	movi	r3,110
 40065fc:	10c00005 	stb	r3,0(r2)
        return (0);
 4006600:	0005883a 	mov	r2,zero
 4006604:	00003206 	br	40066d0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4006608:	e0bffe17 	ldw	r2,-8(fp)
 400660c:	1000051e 	bne	r2,zero,4006624 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4006610:	e0bfff17 	ldw	r2,-4(fp)
 4006614:	00c00304 	movi	r3,12
 4006618:	10c00005 	stb	r3,0(r2)
        return (0);
 400661c:	0005883a 	mov	r2,zero
 4006620:	00002b06 	br	40066d0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4006624:	d0a70403 	ldbu	r2,-25584(gp)
 4006628:	10803fcc 	andi	r2,r2,255
 400662c:	10000526 	beq	r2,zero,4006644 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4006630:	e0bfff17 	ldw	r2,-4(fp)
 4006634:	00c00444 	movi	r3,17
 4006638:	10c00005 	stb	r3,0(r2)
        return (0);
 400663c:	0005883a 	mov	r2,zero
 4006640:	00002306 	br	40066d0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006644:	0005303a 	rdctl	r2,status
 4006648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400664c:	e0fffc17 	ldw	r3,-16(fp)
 4006650:	00bfff84 	movi	r2,-2
 4006654:	1884703a 	and	r2,r3,r2
 4006658:	1001703a 	wrctl	status,r2
  
  return context;
 400665c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4006660:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4006664:	e0bffd17 	ldw	r2,-12(fp)
 4006668:	10800003 	ldbu	r2,0(r2)
 400666c:	10803fcc 	andi	r2,r2,255
 4006670:	10800160 	cmpeqi	r2,r2,5
 4006674:	1000091e 	bne	r2,zero,400669c <OSFlagNameGet+0xe0>
 4006678:	e0bff817 	ldw	r2,-32(fp)
 400667c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006680:	e0bff917 	ldw	r2,-28(fp)
 4006684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4006688:	e0bfff17 	ldw	r2,-4(fp)
 400668c:	00c00044 	movi	r3,1
 4006690:	10c00005 	stb	r3,0(r2)
        return (0);
 4006694:	0005883a 	mov	r2,zero
 4006698:	00000d06 	br	40066d0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 400669c:	e0bffd17 	ldw	r2,-12(fp)
 40066a0:	10800284 	addi	r2,r2,10
 40066a4:	100b883a 	mov	r5,r2
 40066a8:	e13ffe17 	ldw	r4,-8(fp)
 40066ac:	40058440 	call	4005844 <OS_StrCopy>
 40066b0:	e0bffb05 	stb	r2,-20(fp)
 40066b4:	e0bff817 	ldw	r2,-32(fp)
 40066b8:	e0bffa15 	stw	r2,-24(fp)
 40066bc:	e0bffa17 	ldw	r2,-24(fp)
 40066c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40066c4:	e0bfff17 	ldw	r2,-4(fp)
 40066c8:	10000005 	stb	zero,0(r2)
    return (len);
 40066cc:	e0bffb03 	ldbu	r2,-20(fp)
}
 40066d0:	e037883a 	mov	sp,fp
 40066d4:	dfc00117 	ldw	ra,4(sp)
 40066d8:	df000017 	ldw	fp,0(sp)
 40066dc:	dec00204 	addi	sp,sp,8
 40066e0:	f800283a 	ret

040066e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 40066e4:	defff504 	addi	sp,sp,-44
 40066e8:	dfc00a15 	stw	ra,40(sp)
 40066ec:	df000915 	stw	fp,36(sp)
 40066f0:	df000904 	addi	fp,sp,36
 40066f4:	e13ffd15 	stw	r4,-12(fp)
 40066f8:	e17ffe15 	stw	r5,-8(fp)
 40066fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4006700:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4006704:	e0bfff17 	ldw	r2,-4(fp)
 4006708:	10004326 	beq	r2,zero,4006818 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400670c:	e0bffd17 	ldw	r2,-12(fp)
 4006710:	1000041e 	bne	r2,zero,4006724 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006714:	e0bfff17 	ldw	r2,-4(fp)
 4006718:	00c01b84 	movi	r3,110
 400671c:	10c00005 	stb	r3,0(r2)
        return;
 4006720:	00003e06 	br	400681c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4006724:	e0bffe17 	ldw	r2,-8(fp)
 4006728:	1000041e 	bne	r2,zero,400673c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 400672c:	e0bfff17 	ldw	r2,-4(fp)
 4006730:	00c00304 	movi	r3,12
 4006734:	10c00005 	stb	r3,0(r2)
        return;
 4006738:	00003806 	br	400681c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400673c:	d0a70403 	ldbu	r2,-25584(gp)
 4006740:	10803fcc 	andi	r2,r2,255
 4006744:	10000426 	beq	r2,zero,4006758 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4006748:	e0bfff17 	ldw	r2,-4(fp)
 400674c:	00c00484 	movi	r3,18
 4006750:	10c00005 	stb	r3,0(r2)
        return;
 4006754:	00003106 	br	400681c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006758:	0005303a 	rdctl	r2,status
 400675c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006760:	e0fffc17 	ldw	r3,-16(fp)
 4006764:	00bfff84 	movi	r2,-2
 4006768:	1884703a 	and	r2,r3,r2
 400676c:	1001703a 	wrctl	status,r2
  
  return context;
 4006770:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4006774:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4006778:	e0bffd17 	ldw	r2,-12(fp)
 400677c:	10800003 	ldbu	r2,0(r2)
 4006780:	10803fcc 	andi	r2,r2,255
 4006784:	10800160 	cmpeqi	r2,r2,5
 4006788:	1000081e 	bne	r2,zero,40067ac <OSFlagNameSet+0xc8>
 400678c:	e0bff717 	ldw	r2,-36(fp)
 4006790:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006794:	e0bff817 	ldw	r2,-32(fp)
 4006798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400679c:	e0bfff17 	ldw	r2,-4(fp)
 40067a0:	00c00044 	movi	r3,1
 40067a4:	10c00005 	stb	r3,0(r2)
        return;
 40067a8:	00001c06 	br	400681c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 40067ac:	e13ffe17 	ldw	r4,-8(fp)
 40067b0:	40058b80 	call	40058b8 <OS_StrLen>
 40067b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 40067b8:	e0bffa03 	ldbu	r2,-24(fp)
 40067bc:	10800830 	cmpltui	r2,r2,32
 40067c0:	1000081e 	bne	r2,zero,40067e4 <OSFlagNameSet+0x100>
 40067c4:	e0bff717 	ldw	r2,-36(fp)
 40067c8:	e0bff915 	stw	r2,-28(fp)
 40067cc:	e0bff917 	ldw	r2,-28(fp)
 40067d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 40067d4:	e0bfff17 	ldw	r2,-4(fp)
 40067d8:	00c01cc4 	movi	r3,115
 40067dc:	10c00005 	stb	r3,0(r2)
        return;
 40067e0:	00000e06 	br	400681c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 40067e4:	e0bffd17 	ldw	r2,-12(fp)
 40067e8:	10800284 	addi	r2,r2,10
 40067ec:	e17ffe17 	ldw	r5,-8(fp)
 40067f0:	1009883a 	mov	r4,r2
 40067f4:	40058440 	call	4005844 <OS_StrCopy>
 40067f8:	e0bff717 	ldw	r2,-36(fp)
 40067fc:	e0bffb15 	stw	r2,-20(fp)
 4006800:	e0bffb17 	ldw	r2,-20(fp)
 4006804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4006808:	e0bfff17 	ldw	r2,-4(fp)
 400680c:	10000005 	stb	zero,0(r2)
    return;
 4006810:	0001883a 	nop
 4006814:	00000106 	br	400681c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4006818:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 400681c:	e037883a 	mov	sp,fp
 4006820:	dfc00117 	ldw	ra,4(sp)
 4006824:	df000017 	ldw	fp,0(sp)
 4006828:	dec00204 	addi	sp,sp,8
 400682c:	f800283a 	ret

04006830 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 4006830:	deffe104 	addi	sp,sp,-124
 4006834:	dfc01e15 	stw	ra,120(sp)
 4006838:	df001d15 	stw	fp,116(sp)
 400683c:	df001d04 	addi	fp,sp,116
 4006840:	e13ffc15 	stw	r4,-16(fp)
 4006844:	2809883a 	mov	r4,r5
 4006848:	3007883a 	mov	r3,r6
 400684c:	3805883a 	mov	r2,r7
 4006850:	e13ffd0d 	sth	r4,-12(fp)
 4006854:	e0fffe05 	stb	r3,-8(fp)
 4006858:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400685c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4006860:	e0800217 	ldw	r2,8(fp)
 4006864:	1000021e 	bne	r2,zero,4006870 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 4006868:	0005883a 	mov	r2,zero
 400686c:	00015906 	br	4006dd4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4006870:	e0bffc17 	ldw	r2,-16(fp)
 4006874:	1000051e 	bne	r2,zero,400688c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006878:	e0800217 	ldw	r2,8(fp)
 400687c:	00c01b84 	movi	r3,110
 4006880:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4006884:	0005883a 	mov	r2,zero
 4006888:	00015206 	br	4006dd4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400688c:	d0a70403 	ldbu	r2,-25584(gp)
 4006890:	10803fcc 	andi	r2,r2,255
 4006894:	10000526 	beq	r2,zero,40068ac <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4006898:	e0800217 	ldw	r2,8(fp)
 400689c:	00c00084 	movi	r3,2
 40068a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40068a4:	0005883a 	mov	r2,zero
 40068a8:	00014a06 	br	4006dd4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 40068ac:	d0a6f603 	ldbu	r2,-25640(gp)
 40068b0:	10803fcc 	andi	r2,r2,255
 40068b4:	10000526 	beq	r2,zero,40068cc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 40068b8:	e0800217 	ldw	r2,8(fp)
 40068bc:	00c00344 	movi	r3,13
 40068c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40068c4:	0005883a 	mov	r2,zero
 40068c8:	00014206 	br	4006dd4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 40068cc:	e0bffc17 	ldw	r2,-16(fp)
 40068d0:	10800003 	ldbu	r2,0(r2)
 40068d4:	10803fcc 	andi	r2,r2,255
 40068d8:	10800160 	cmpeqi	r2,r2,5
 40068dc:	1000051e 	bne	r2,zero,40068f4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 40068e0:	e0800217 	ldw	r2,8(fp)
 40068e4:	00c00044 	movi	r3,1
 40068e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40068ec:	0005883a 	mov	r2,zero
 40068f0:	00013806 	br	4006dd4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 40068f4:	e0fffe03 	ldbu	r3,-8(fp)
 40068f8:	00bfe004 	movi	r2,-128
 40068fc:	1884703a 	and	r2,r3,r2
 4006900:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4006904:	e0bfe603 	ldbu	r2,-104(fp)
 4006908:	10000626 	beq	r2,zero,4006924 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 400690c:	e0bffe03 	ldbu	r2,-8(fp)
 4006910:	10801fcc 	andi	r2,r2,127
 4006914:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4006918:	00800044 	movi	r2,1
 400691c:	e0bfe405 	stb	r2,-112(fp)
 4006920:	00000106 	br	4006928 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4006924:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006928:	0005303a 	rdctl	r2,status
 400692c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006930:	e0fff617 	ldw	r3,-40(fp)
 4006934:	00bfff84 	movi	r2,-2
 4006938:	1884703a 	and	r2,r3,r2
 400693c:	1001703a 	wrctl	status,r2
  
  return context;
 4006940:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4006944:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 4006948:	e0bffe03 	ldbu	r2,-8(fp)
 400694c:	10c00060 	cmpeqi	r3,r2,1
 4006950:	1800921e 	bne	r3,zero,4006b9c <OSFlagPend+0x36c>
 4006954:	10c00088 	cmpgei	r3,r2,2
 4006958:	1800021e 	bne	r3,zero,4006964 <OSFlagPend+0x134>
 400695c:	10006126 	beq	r2,zero,4006ae4 <OSFlagPend+0x2b4>
 4006960:	0000bb06 	br	4006c50 <OSFlagPend+0x420>
 4006964:	10c000a0 	cmpeqi	r3,r2,2
 4006968:	1800031e 	bne	r3,zero,4006978 <OSFlagPend+0x148>
 400696c:	108000e0 	cmpeqi	r2,r2,3
 4006970:	10002f1e 	bne	r2,zero,4006a30 <OSFlagPend+0x200>
 4006974:	0000b606 	br	4006c50 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 4006978:	e0bffc17 	ldw	r2,-16(fp)
 400697c:	10c0020b 	ldhu	r3,8(r2)
 4006980:	e0bffd0b 	ldhu	r2,-12(fp)
 4006984:	1884703a 	and	r2,r3,r2
 4006988:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400698c:	e0ffe80b 	ldhu	r3,-96(fp)
 4006990:	e0bffd0b 	ldhu	r2,-12(fp)
 4006994:	1880171e 	bne	r3,r2,40069f4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006998:	e0bfe403 	ldbu	r2,-112(fp)
 400699c:	10800058 	cmpnei	r2,r2,1
 40069a0:	1000091e 	bne	r2,zero,40069c8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 40069a4:	e0bffc17 	ldw	r2,-16(fp)
 40069a8:	1080020b 	ldhu	r2,8(r2)
 40069ac:	1007883a 	mov	r3,r2
 40069b0:	e0bfe80b 	ldhu	r2,-96(fp)
 40069b4:	0084303a 	nor	r2,zero,r2
 40069b8:	1884703a 	and	r2,r3,r2
 40069bc:	1007883a 	mov	r3,r2
 40069c0:	e0bffc17 	ldw	r2,-16(fp)
 40069c4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 40069c8:	d0a70517 	ldw	r2,-25580(gp)
 40069cc:	e0ffe80b 	ldhu	r3,-96(fp)
 40069d0:	10c00b0d 	sth	r3,44(r2)
 40069d4:	e0bfe517 	ldw	r2,-108(fp)
 40069d8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40069dc:	e0bfe717 	ldw	r2,-100(fp)
 40069e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 40069e4:	e0800217 	ldw	r2,8(fp)
 40069e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 40069ec:	e0bfe80b 	ldhu	r2,-96(fp)
 40069f0:	0000f806 	br	4006dd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 40069f4:	e13ffd0b 	ldhu	r4,-12(fp)
 40069f8:	e17ffe03 	ldbu	r5,-8(fp)
 40069fc:	e0bfff0b 	ldhu	r2,-4(fp)
 4006a00:	e0fff704 	addi	r3,fp,-36
 4006a04:	d8800015 	stw	r2,0(sp)
 4006a08:	280f883a 	mov	r7,r5
 4006a0c:	200d883a 	mov	r6,r4
 4006a10:	180b883a 	mov	r5,r3
 4006a14:	e13ffc17 	ldw	r4,-16(fp)
 4006a18:	40072a00 	call	40072a0 <OS_FlagBlock>
 4006a1c:	e0bfe517 	ldw	r2,-108(fp)
 4006a20:	e0bfe915 	stw	r2,-92(fp)
 4006a24:	e0bfe917 	ldw	r2,-92(fp)
 4006a28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006a2c:	00009206 	br	4006c78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4006a30:	e0bffc17 	ldw	r2,-16(fp)
 4006a34:	10c0020b 	ldhu	r3,8(r2)
 4006a38:	e0bffd0b 	ldhu	r2,-12(fp)
 4006a3c:	1884703a 	and	r2,r3,r2
 4006a40:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4006a44:	e0bfe80b 	ldhu	r2,-96(fp)
 4006a48:	10001726 	beq	r2,zero,4006aa8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006a4c:	e0bfe403 	ldbu	r2,-112(fp)
 4006a50:	10800058 	cmpnei	r2,r2,1
 4006a54:	1000091e 	bne	r2,zero,4006a7c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4006a58:	e0bffc17 	ldw	r2,-16(fp)
 4006a5c:	1080020b 	ldhu	r2,8(r2)
 4006a60:	1007883a 	mov	r3,r2
 4006a64:	e0bfe80b 	ldhu	r2,-96(fp)
 4006a68:	0084303a 	nor	r2,zero,r2
 4006a6c:	1884703a 	and	r2,r3,r2
 4006a70:	1007883a 	mov	r3,r2
 4006a74:	e0bffc17 	ldw	r2,-16(fp)
 4006a78:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006a7c:	d0a70517 	ldw	r2,-25580(gp)
 4006a80:	e0ffe80b 	ldhu	r3,-96(fp)
 4006a84:	10c00b0d 	sth	r3,44(r2)
 4006a88:	e0bfe517 	ldw	r2,-108(fp)
 4006a8c:	e0bfea15 	stw	r2,-88(fp)
 4006a90:	e0bfea17 	ldw	r2,-88(fp)
 4006a94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006a98:	e0800217 	ldw	r2,8(fp)
 4006a9c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006aa0:	e0bfe80b 	ldhu	r2,-96(fp)
 4006aa4:	0000cb06 	br	4006dd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006aa8:	e13ffd0b 	ldhu	r4,-12(fp)
 4006aac:	e17ffe03 	ldbu	r5,-8(fp)
 4006ab0:	e0bfff0b 	ldhu	r2,-4(fp)
 4006ab4:	e0fff704 	addi	r3,fp,-36
 4006ab8:	d8800015 	stw	r2,0(sp)
 4006abc:	280f883a 	mov	r7,r5
 4006ac0:	200d883a 	mov	r6,r4
 4006ac4:	180b883a 	mov	r5,r3
 4006ac8:	e13ffc17 	ldw	r4,-16(fp)
 4006acc:	40072a00 	call	40072a0 <OS_FlagBlock>
 4006ad0:	e0bfe517 	ldw	r2,-108(fp)
 4006ad4:	e0bfeb15 	stw	r2,-84(fp)
 4006ad8:	e0bfeb17 	ldw	r2,-84(fp)
 4006adc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006ae0:	00006506 	br	4006c78 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4006ae4:	e0bffc17 	ldw	r2,-16(fp)
 4006ae8:	1080020b 	ldhu	r2,8(r2)
 4006aec:	0084303a 	nor	r2,zero,r2
 4006af0:	1007883a 	mov	r3,r2
 4006af4:	e0bffd0b 	ldhu	r2,-12(fp)
 4006af8:	1884703a 	and	r2,r3,r2
 4006afc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4006b00:	e0ffe80b 	ldhu	r3,-96(fp)
 4006b04:	e0bffd0b 	ldhu	r2,-12(fp)
 4006b08:	1880151e 	bne	r3,r2,4006b60 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006b0c:	e0bfe403 	ldbu	r2,-112(fp)
 4006b10:	10800058 	cmpnei	r2,r2,1
 4006b14:	1000071e 	bne	r2,zero,4006b34 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4006b18:	e0bffc17 	ldw	r2,-16(fp)
 4006b1c:	10c0020b 	ldhu	r3,8(r2)
 4006b20:	e0bfe80b 	ldhu	r2,-96(fp)
 4006b24:	1884b03a 	or	r2,r3,r2
 4006b28:	1007883a 	mov	r3,r2
 4006b2c:	e0bffc17 	ldw	r2,-16(fp)
 4006b30:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006b34:	d0a70517 	ldw	r2,-25580(gp)
 4006b38:	e0ffe80b 	ldhu	r3,-96(fp)
 4006b3c:	10c00b0d 	sth	r3,44(r2)
 4006b40:	e0bfe517 	ldw	r2,-108(fp)
 4006b44:	e0bfec15 	stw	r2,-80(fp)
 4006b48:	e0bfec17 	ldw	r2,-80(fp)
 4006b4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006b50:	e0800217 	ldw	r2,8(fp)
 4006b54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006b58:	e0bfe80b 	ldhu	r2,-96(fp)
 4006b5c:	00009d06 	br	4006dd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006b60:	e13ffd0b 	ldhu	r4,-12(fp)
 4006b64:	e17ffe03 	ldbu	r5,-8(fp)
 4006b68:	e0bfff0b 	ldhu	r2,-4(fp)
 4006b6c:	e0fff704 	addi	r3,fp,-36
 4006b70:	d8800015 	stw	r2,0(sp)
 4006b74:	280f883a 	mov	r7,r5
 4006b78:	200d883a 	mov	r6,r4
 4006b7c:	180b883a 	mov	r5,r3
 4006b80:	e13ffc17 	ldw	r4,-16(fp)
 4006b84:	40072a00 	call	40072a0 <OS_FlagBlock>
 4006b88:	e0bfe517 	ldw	r2,-108(fp)
 4006b8c:	e0bfed15 	stw	r2,-76(fp)
 4006b90:	e0bfed17 	ldw	r2,-76(fp)
 4006b94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006b98:	00003706 	br	4006c78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4006b9c:	e0bffc17 	ldw	r2,-16(fp)
 4006ba0:	1080020b 	ldhu	r2,8(r2)
 4006ba4:	0084303a 	nor	r2,zero,r2
 4006ba8:	1007883a 	mov	r3,r2
 4006bac:	e0bffd0b 	ldhu	r2,-12(fp)
 4006bb0:	1884703a 	and	r2,r3,r2
 4006bb4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4006bb8:	e0bfe80b 	ldhu	r2,-96(fp)
 4006bbc:	10001526 	beq	r2,zero,4006c14 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4006bc0:	e0bfe403 	ldbu	r2,-112(fp)
 4006bc4:	10800058 	cmpnei	r2,r2,1
 4006bc8:	1000071e 	bne	r2,zero,4006be8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4006bcc:	e0bffc17 	ldw	r2,-16(fp)
 4006bd0:	10c0020b 	ldhu	r3,8(r2)
 4006bd4:	e0bfe80b 	ldhu	r2,-96(fp)
 4006bd8:	1884b03a 	or	r2,r3,r2
 4006bdc:	1007883a 	mov	r3,r2
 4006be0:	e0bffc17 	ldw	r2,-16(fp)
 4006be4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4006be8:	d0a70517 	ldw	r2,-25580(gp)
 4006bec:	e0ffe80b 	ldhu	r3,-96(fp)
 4006bf0:	10c00b0d 	sth	r3,44(r2)
 4006bf4:	e0bfe517 	ldw	r2,-108(fp)
 4006bf8:	e0bfee15 	stw	r2,-72(fp)
 4006bfc:	e0bfee17 	ldw	r2,-72(fp)
 4006c00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4006c04:	e0800217 	ldw	r2,8(fp)
 4006c08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4006c0c:	e0bfe80b 	ldhu	r2,-96(fp)
 4006c10:	00007006 	br	4006dd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4006c14:	e13ffd0b 	ldhu	r4,-12(fp)
 4006c18:	e17ffe03 	ldbu	r5,-8(fp)
 4006c1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006c20:	e0fff704 	addi	r3,fp,-36
 4006c24:	d8800015 	stw	r2,0(sp)
 4006c28:	280f883a 	mov	r7,r5
 4006c2c:	200d883a 	mov	r6,r4
 4006c30:	180b883a 	mov	r5,r3
 4006c34:	e13ffc17 	ldw	r4,-16(fp)
 4006c38:	40072a00 	call	40072a0 <OS_FlagBlock>
 4006c3c:	e0bfe517 	ldw	r2,-108(fp)
 4006c40:	e0bfef15 	stw	r2,-68(fp)
 4006c44:	e0bfef17 	ldw	r2,-68(fp)
 4006c48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4006c4c:	00000a06 	br	4006c78 <OSFlagPend+0x448>
 4006c50:	e0bfe517 	ldw	r2,-108(fp)
 4006c54:	e0bff015 	stw	r2,-64(fp)
 4006c58:	e0bff017 	ldw	r2,-64(fp)
 4006c5c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4006c60:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4006c64:	e0800217 	ldw	r2,8(fp)
 4006c68:	00c01bc4 	movi	r3,111
 4006c6c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 4006c70:	e0bfe80b 	ldhu	r2,-96(fp)
 4006c74:	00005706 	br	4006dd4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4006c78:	40057000 	call	4005700 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006c7c:	0005303a 	rdctl	r2,status
 4006c80:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006c84:	e0fff117 	ldw	r3,-60(fp)
 4006c88:	00bfff84 	movi	r2,-2
 4006c8c:	1884703a 	and	r2,r3,r2
 4006c90:	1001703a 	wrctl	status,r2
  
  return context;
 4006c94:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 4006c98:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 4006c9c:	d0a70517 	ldw	r2,-25580(gp)
 4006ca0:	10800c43 	ldbu	r2,49(r2)
 4006ca4:	10803fcc 	andi	r2,r2,255
 4006ca8:	10001c26 	beq	r2,zero,4006d1c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4006cac:	d0a70517 	ldw	r2,-25580(gp)
 4006cb0:	10800c43 	ldbu	r2,49(r2)
 4006cb4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4006cb8:	d0a70517 	ldw	r2,-25580(gp)
 4006cbc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4006cc0:	e0bff704 	addi	r2,fp,-36
 4006cc4:	1009883a 	mov	r4,r2
 4006cc8:	40075d40 	call	40075d4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4006ccc:	d0a70517 	ldw	r2,-25580(gp)
 4006cd0:	10000c05 	stb	zero,48(r2)
 4006cd4:	e0bfe517 	ldw	r2,-108(fp)
 4006cd8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006cdc:	e0bff217 	ldw	r2,-56(fp)
 4006ce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4006ce4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4006ce8:	e0bff303 	ldbu	r2,-52(fp)
 4006cec:	108000a0 	cmpeqi	r2,r2,2
 4006cf0:	10000426 	beq	r2,zero,4006d04 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4006cf4:	e0800217 	ldw	r2,8(fp)
 4006cf8:	00c00384 	movi	r3,14
 4006cfc:	10c00005 	stb	r3,0(r2)
                 break;
 4006d00:	00000406 	br	4006d14 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4006d04:	e0800217 	ldw	r2,8(fp)
 4006d08:	00c00284 	movi	r3,10
 4006d0c:	10c00005 	stb	r3,0(r2)
                 break;
 4006d10:	0001883a 	nop
        }
        return (flags_rdy);
 4006d14:	e0bfe80b 	ldhu	r2,-96(fp)
 4006d18:	00002e06 	br	4006dd4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4006d1c:	d0a70517 	ldw	r2,-25580(gp)
 4006d20:	10800b0b 	ldhu	r2,44(r2)
 4006d24:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4006d28:	e0bfe403 	ldbu	r2,-112(fp)
 4006d2c:	10800058 	cmpnei	r2,r2,1
 4006d30:	1000211e 	bne	r2,zero,4006db8 <OSFlagPend+0x588>
        switch (wait_type) {
 4006d34:	e0bffe03 	ldbu	r2,-8(fp)
 4006d38:	10001616 	blt	r2,zero,4006d94 <OSFlagPend+0x564>
 4006d3c:	10c00090 	cmplti	r3,r2,2
 4006d40:	18000c1e 	bne	r3,zero,4006d74 <OSFlagPend+0x544>
 4006d44:	10800108 	cmpgei	r2,r2,4
 4006d48:	1000121e 	bne	r2,zero,4006d94 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4006d4c:	e0bffc17 	ldw	r2,-16(fp)
 4006d50:	1080020b 	ldhu	r2,8(r2)
 4006d54:	1007883a 	mov	r3,r2
 4006d58:	e0bfe80b 	ldhu	r2,-96(fp)
 4006d5c:	0084303a 	nor	r2,zero,r2
 4006d60:	1884703a 	and	r2,r3,r2
 4006d64:	1007883a 	mov	r3,r2
 4006d68:	e0bffc17 	ldw	r2,-16(fp)
 4006d6c:	10c0020d 	sth	r3,8(r2)
                 break;
 4006d70:	00001106 	br	4006db8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 4006d74:	e0bffc17 	ldw	r2,-16(fp)
 4006d78:	10c0020b 	ldhu	r3,8(r2)
 4006d7c:	e0bfe80b 	ldhu	r2,-96(fp)
 4006d80:	1884b03a 	or	r2,r3,r2
 4006d84:	1007883a 	mov	r3,r2
 4006d88:	e0bffc17 	ldw	r2,-16(fp)
 4006d8c:	10c0020d 	sth	r3,8(r2)
                 break;
 4006d90:	00000906 	br	4006db8 <OSFlagPend+0x588>
 4006d94:	e0bfe517 	ldw	r2,-108(fp)
 4006d98:	e0bff415 	stw	r2,-48(fp)
 4006d9c:	e0bff417 	ldw	r2,-48(fp)
 4006da0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4006da4:	e0800217 	ldw	r2,8(fp)
 4006da8:	00c01bc4 	movi	r3,111
 4006dac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4006db0:	0005883a 	mov	r2,zero
 4006db4:	00000706 	br	4006dd4 <OSFlagPend+0x5a4>
 4006db8:	e0bfe517 	ldw	r2,-108(fp)
 4006dbc:	e0bff515 	stw	r2,-44(fp)
 4006dc0:	e0bff517 	ldw	r2,-44(fp)
 4006dc4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 4006dc8:	e0800217 	ldw	r2,8(fp)
 4006dcc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 4006dd0:	e0bfe80b 	ldhu	r2,-96(fp)
}
 4006dd4:	e037883a 	mov	sp,fp
 4006dd8:	dfc00117 	ldw	ra,4(sp)
 4006ddc:	df000017 	ldw	fp,0(sp)
 4006de0:	dec00204 	addi	sp,sp,8
 4006de4:	f800283a 	ret

04006de8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 4006de8:	defffb04 	addi	sp,sp,-20
 4006dec:	df000415 	stw	fp,16(sp)
 4006df0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4006df4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006df8:	0005303a 	rdctl	r2,status
 4006dfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e00:	e0fffe17 	ldw	r3,-8(fp)
 4006e04:	00bfff84 	movi	r2,-2
 4006e08:	1884703a 	and	r2,r3,r2
 4006e0c:	1001703a 	wrctl	status,r2
  
  return context;
 4006e10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4006e14:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4006e18:	d0a70517 	ldw	r2,-25580(gp)
 4006e1c:	10800b0b 	ldhu	r2,44(r2)
 4006e20:	e0bffd0d 	sth	r2,-12(fp)
 4006e24:	e0bffc17 	ldw	r2,-16(fp)
 4006e28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006e2c:	e0bfff17 	ldw	r2,-4(fp)
 4006e30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 4006e34:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4006e38:	e037883a 	mov	sp,fp
 4006e3c:	df000017 	ldw	fp,0(sp)
 4006e40:	dec00104 	addi	sp,sp,4
 4006e44:	f800283a 	ret

04006e48 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4006e48:	deffef04 	addi	sp,sp,-68
 4006e4c:	dfc01015 	stw	ra,64(sp)
 4006e50:	df000f15 	stw	fp,60(sp)
 4006e54:	df000f04 	addi	fp,sp,60
 4006e58:	e13ffc15 	stw	r4,-16(fp)
 4006e5c:	2807883a 	mov	r3,r5
 4006e60:	3005883a 	mov	r2,r6
 4006e64:	e1ffff15 	stw	r7,-4(fp)
 4006e68:	e0fffd0d 	sth	r3,-12(fp)
 4006e6c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 4006e70:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4006e74:	e0bfff17 	ldw	r2,-4(fp)
 4006e78:	1000021e 	bne	r2,zero,4006e84 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 4006e7c:	0005883a 	mov	r2,zero
 4006e80:	0000d106 	br	40071c8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4006e84:	e0bffc17 	ldw	r2,-16(fp)
 4006e88:	1000051e 	bne	r2,zero,4006ea0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4006e8c:	e0bfff17 	ldw	r2,-4(fp)
 4006e90:	00c01b84 	movi	r3,110
 4006e94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4006e98:	0005883a 	mov	r2,zero
 4006e9c:	0000ca06 	br	40071c8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4006ea0:	e0bffc17 	ldw	r2,-16(fp)
 4006ea4:	10800003 	ldbu	r2,0(r2)
 4006ea8:	10803fcc 	andi	r2,r2,255
 4006eac:	10800160 	cmpeqi	r2,r2,5
 4006eb0:	1000051e 	bne	r2,zero,4006ec8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 4006eb4:	e0bfff17 	ldw	r2,-4(fp)
 4006eb8:	00c00044 	movi	r3,1
 4006ebc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4006ec0:	0005883a 	mov	r2,zero
 4006ec4:	0000c006 	br	40071c8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006ec8:	0005303a 	rdctl	r2,status
 4006ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006ed0:	e0fffb17 	ldw	r3,-20(fp)
 4006ed4:	00bfff84 	movi	r2,-2
 4006ed8:	1884703a 	and	r2,r3,r2
 4006edc:	1001703a 	wrctl	status,r2
  
  return context;
 4006ee0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4006ee4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 4006ee8:	e0bffe03 	ldbu	r2,-8(fp)
 4006eec:	10000326 	beq	r2,zero,4006efc <OSFlagPost+0xb4>
 4006ef0:	10800060 	cmpeqi	r2,r2,1
 4006ef4:	10000b1e 	bne	r2,zero,4006f24 <OSFlagPost+0xdc>
 4006ef8:	00001206 	br	4006f44 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4006efc:	e0bffc17 	ldw	r2,-16(fp)
 4006f00:	1080020b 	ldhu	r2,8(r2)
 4006f04:	1007883a 	mov	r3,r2
 4006f08:	e0bffd0b 	ldhu	r2,-12(fp)
 4006f0c:	0084303a 	nor	r2,zero,r2
 4006f10:	1884703a 	and	r2,r3,r2
 4006f14:	1007883a 	mov	r3,r2
 4006f18:	e0bffc17 	ldw	r2,-16(fp)
 4006f1c:	10c0020d 	sth	r3,8(r2)
             break;
 4006f20:	00001106 	br	4006f68 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 4006f24:	e0bffc17 	ldw	r2,-16(fp)
 4006f28:	10c0020b 	ldhu	r3,8(r2)
 4006f2c:	e0bffd0b 	ldhu	r2,-12(fp)
 4006f30:	1884b03a 	or	r2,r3,r2
 4006f34:	1007883a 	mov	r3,r2
 4006f38:	e0bffc17 	ldw	r2,-16(fp)
 4006f3c:	10c0020d 	sth	r3,8(r2)
             break;
 4006f40:	00000906 	br	4006f68 <OSFlagPost+0x120>
 4006f44:	e0bff317 	ldw	r2,-52(fp)
 4006f48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006f4c:	e0bff417 	ldw	r2,-48(fp)
 4006f50:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 4006f54:	e0bfff17 	ldw	r2,-4(fp)
 4006f58:	00c01c44 	movi	r3,113
 4006f5c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 4006f60:	0005883a 	mov	r2,zero
 4006f64:	00009806 	br	40071c8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 4006f68:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4006f6c:	e0bffc17 	ldw	r2,-16(fp)
 4006f70:	10800117 	ldw	r2,4(r2)
 4006f74:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4006f78:	00007706 	br	4007158 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 4006f7c:	e0bff117 	ldw	r2,-60(fp)
 4006f80:	10800483 	ldbu	r2,18(r2)
 4006f84:	10803fcc 	andi	r2,r2,255
 4006f88:	10c00060 	cmpeqi	r3,r2,1
 4006f8c:	18004a1e 	bne	r3,zero,40070b8 <OSFlagPost+0x270>
 4006f90:	10c00088 	cmpgei	r3,r2,2
 4006f94:	1800021e 	bne	r3,zero,4006fa0 <OSFlagPost+0x158>
 4006f98:	10002f26 	beq	r2,zero,4007058 <OSFlagPost+0x210>
 4006f9c:	00005b06 	br	400710c <OSFlagPost+0x2c4>
 4006fa0:	10c000a0 	cmpeqi	r3,r2,2
 4006fa4:	1800031e 	bne	r3,zero,4006fb4 <OSFlagPost+0x16c>
 4006fa8:	108000e0 	cmpeqi	r2,r2,3
 4006fac:	1000171e 	bne	r2,zero,400700c <OSFlagPost+0x1c4>
 4006fb0:	00005606 	br	400710c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4006fb4:	e0bffc17 	ldw	r2,-16(fp)
 4006fb8:	10c0020b 	ldhu	r3,8(r2)
 4006fbc:	e0bff117 	ldw	r2,-60(fp)
 4006fc0:	1080040b 	ldhu	r2,16(r2)
 4006fc4:	1884703a 	and	r2,r3,r2
 4006fc8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4006fcc:	e0bff117 	ldw	r2,-60(fp)
 4006fd0:	1080040b 	ldhu	r2,16(r2)
 4006fd4:	10ffffcc 	andi	r3,r2,65535
 4006fd8:	e0bff60b 	ldhu	r2,-40(fp)
 4006fdc:	1880541e 	bne	r3,r2,4007130 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4006fe0:	e0bff60b 	ldhu	r2,-40(fp)
 4006fe4:	100b883a 	mov	r5,r2
 4006fe8:	e13ff117 	ldw	r4,-60(fp)
 4006fec:	40074e00 	call	40074e0 <OS_FlagTaskRdy>
 4006ff0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4006ff4:	e0bff683 	ldbu	r2,-38(fp)
 4006ff8:	10800058 	cmpnei	r2,r2,1
 4006ffc:	10004c1e 	bne	r2,zero,4007130 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4007000:	00800044 	movi	r2,1
 4007004:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4007008:	00004906 	br	4007130 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400700c:	e0bffc17 	ldw	r2,-16(fp)
 4007010:	10c0020b 	ldhu	r3,8(r2)
 4007014:	e0bff117 	ldw	r2,-60(fp)
 4007018:	1080040b 	ldhu	r2,16(r2)
 400701c:	1884703a 	and	r2,r3,r2
 4007020:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4007024:	e0bff60b 	ldhu	r2,-40(fp)
 4007028:	10004326 	beq	r2,zero,4007138 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400702c:	e0bff60b 	ldhu	r2,-40(fp)
 4007030:	100b883a 	mov	r5,r2
 4007034:	e13ff117 	ldw	r4,-60(fp)
 4007038:	40074e00 	call	40074e0 <OS_FlagTaskRdy>
 400703c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4007040:	e0bff683 	ldbu	r2,-38(fp)
 4007044:	10800058 	cmpnei	r2,r2,1
 4007048:	10003b1e 	bne	r2,zero,4007138 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400704c:	00800044 	movi	r2,1
 4007050:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4007054:	00003806 	br	4007138 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4007058:	e0bffc17 	ldw	r2,-16(fp)
 400705c:	1080020b 	ldhu	r2,8(r2)
 4007060:	0084303a 	nor	r2,zero,r2
 4007064:	1007883a 	mov	r3,r2
 4007068:	e0bff117 	ldw	r2,-60(fp)
 400706c:	1080040b 	ldhu	r2,16(r2)
 4007070:	1884703a 	and	r2,r3,r2
 4007074:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4007078:	e0bff117 	ldw	r2,-60(fp)
 400707c:	1080040b 	ldhu	r2,16(r2)
 4007080:	10ffffcc 	andi	r3,r2,65535
 4007084:	e0bff60b 	ldhu	r2,-40(fp)
 4007088:	18802d1e 	bne	r3,r2,4007140 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400708c:	e0bff60b 	ldhu	r2,-40(fp)
 4007090:	100b883a 	mov	r5,r2
 4007094:	e13ff117 	ldw	r4,-60(fp)
 4007098:	40074e00 	call	40074e0 <OS_FlagTaskRdy>
 400709c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40070a0:	e0bff683 	ldbu	r2,-38(fp)
 40070a4:	10800058 	cmpnei	r2,r2,1
 40070a8:	1000251e 	bne	r2,zero,4007140 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40070ac:	00800044 	movi	r2,1
 40070b0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40070b4:	00002206 	br	4007140 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40070b8:	e0bffc17 	ldw	r2,-16(fp)
 40070bc:	1080020b 	ldhu	r2,8(r2)
 40070c0:	0084303a 	nor	r2,zero,r2
 40070c4:	1007883a 	mov	r3,r2
 40070c8:	e0bff117 	ldw	r2,-60(fp)
 40070cc:	1080040b 	ldhu	r2,16(r2)
 40070d0:	1884703a 	and	r2,r3,r2
 40070d4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 40070d8:	e0bff60b 	ldhu	r2,-40(fp)
 40070dc:	10001a26 	beq	r2,zero,4007148 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40070e0:	e0bff60b 	ldhu	r2,-40(fp)
 40070e4:	100b883a 	mov	r5,r2
 40070e8:	e13ff117 	ldw	r4,-60(fp)
 40070ec:	40074e00 	call	40074e0 <OS_FlagTaskRdy>
 40070f0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40070f4:	e0bff683 	ldbu	r2,-38(fp)
 40070f8:	10800058 	cmpnei	r2,r2,1
 40070fc:	1000121e 	bne	r2,zero,4007148 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4007100:	00800044 	movi	r2,1
 4007104:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4007108:	00000f06 	br	4007148 <OSFlagPost+0x300>
 400710c:	e0bff317 	ldw	r2,-52(fp)
 4007110:	e0bff515 	stw	r2,-44(fp)
 4007114:	e0bff517 	ldw	r2,-44(fp)
 4007118:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400711c:	e0bfff17 	ldw	r2,-4(fp)
 4007120:	00c01bc4 	movi	r3,111
 4007124:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4007128:	0005883a 	mov	r2,zero
 400712c:	00002606 	br	40071c8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4007130:	0001883a 	nop
 4007134:	00000506 	br	400714c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4007138:	0001883a 	nop
 400713c:	00000306 	br	400714c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4007140:	0001883a 	nop
 4007144:	00000106 	br	400714c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4007148:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 400714c:	e0bff117 	ldw	r2,-60(fp)
 4007150:	10800017 	ldw	r2,0(r2)
 4007154:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4007158:	e0bff117 	ldw	r2,-60(fp)
 400715c:	103f871e 	bne	r2,zero,4006f7c <__alt_mem_onchip_memory2_0+0xfc004f7c>
 4007160:	e0bff317 	ldw	r2,-52(fp)
 4007164:	e0bff715 	stw	r2,-36(fp)
 4007168:	e0bff717 	ldw	r2,-36(fp)
 400716c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4007170:	e0bff203 	ldbu	r2,-56(fp)
 4007174:	10800058 	cmpnei	r2,r2,1
 4007178:	1000011e 	bne	r2,zero,4007180 <OSFlagPost+0x338>
        OS_Sched();
 400717c:	40057000 	call	4005700 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007180:	0005303a 	rdctl	r2,status
 4007184:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007188:	e0fffa17 	ldw	r3,-24(fp)
 400718c:	00bfff84 	movi	r2,-2
 4007190:	1884703a 	and	r2,r3,r2
 4007194:	1001703a 	wrctl	status,r2
  
  return context;
 4007198:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400719c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 40071a0:	e0bffc17 	ldw	r2,-16(fp)
 40071a4:	1080020b 	ldhu	r2,8(r2)
 40071a8:	e0bff90d 	sth	r2,-28(fp)
 40071ac:	e0bff317 	ldw	r2,-52(fp)
 40071b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40071b4:	e0bff817 	ldw	r2,-32(fp)
 40071b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 40071bc:	e0bfff17 	ldw	r2,-4(fp)
 40071c0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 40071c4:	e0bff90b 	ldhu	r2,-28(fp)
}
 40071c8:	e037883a 	mov	sp,fp
 40071cc:	dfc00117 	ldw	ra,4(sp)
 40071d0:	df000017 	ldw	fp,0(sp)
 40071d4:	dec00204 	addi	sp,sp,8
 40071d8:	f800283a 	ret

040071dc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 40071dc:	defff904 	addi	sp,sp,-28
 40071e0:	df000615 	stw	fp,24(sp)
 40071e4:	df000604 	addi	fp,sp,24
 40071e8:	e13ffe15 	stw	r4,-8(fp)
 40071ec:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 40071f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 40071f4:	e0bfff17 	ldw	r2,-4(fp)
 40071f8:	1000021e 	bne	r2,zero,4007204 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 40071fc:	0005883a 	mov	r2,zero
 4007200:	00002306 	br	4007290 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4007204:	e0bffe17 	ldw	r2,-8(fp)
 4007208:	1000051e 	bne	r2,zero,4007220 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400720c:	e0bfff17 	ldw	r2,-4(fp)
 4007210:	00c01b84 	movi	r3,110
 4007214:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4007218:	0005883a 	mov	r2,zero
 400721c:	00001c06 	br	4007290 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4007220:	e0bffe17 	ldw	r2,-8(fp)
 4007224:	10800003 	ldbu	r2,0(r2)
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	10800160 	cmpeqi	r2,r2,5
 4007230:	1000051e 	bne	r2,zero,4007248 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4007234:	e0bfff17 	ldw	r2,-4(fp)
 4007238:	00c00044 	movi	r3,1
 400723c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4007240:	0005883a 	mov	r2,zero
 4007244:	00001206 	br	4007290 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007248:	0005303a 	rdctl	r2,status
 400724c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007250:	e0fffc17 	ldw	r3,-16(fp)
 4007254:	00bfff84 	movi	r2,-2
 4007258:	1884703a 	and	r2,r3,r2
 400725c:	1001703a 	wrctl	status,r2
  
  return context;
 4007260:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4007264:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 4007268:	e0bffe17 	ldw	r2,-8(fp)
 400726c:	1080020b 	ldhu	r2,8(r2)
 4007270:	e0bffb0d 	sth	r2,-20(fp)
 4007274:	e0bffa17 	ldw	r2,-24(fp)
 4007278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400727c:	e0bffd17 	ldw	r2,-12(fp)
 4007280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007284:	e0bfff17 	ldw	r2,-4(fp)
 4007288:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 400728c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007290:	e037883a 	mov	sp,fp
 4007294:	df000017 	ldw	fp,0(sp)
 4007298:	dec00104 	addi	sp,sp,4
 400729c:	f800283a 	ret

040072a0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 40072a0:	defff804 	addi	sp,sp,-32
 40072a4:	df000715 	stw	fp,28(sp)
 40072a8:	df000704 	addi	fp,sp,28
 40072ac:	e13ffb15 	stw	r4,-20(fp)
 40072b0:	e17ffc15 	stw	r5,-16(fp)
 40072b4:	3009883a 	mov	r4,r6
 40072b8:	3807883a 	mov	r3,r7
 40072bc:	e0800117 	ldw	r2,4(fp)
 40072c0:	e13ffd0d 	sth	r4,-12(fp)
 40072c4:	e0fffe05 	stb	r3,-8(fp)
 40072c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 40072cc:	d0a70517 	ldw	r2,-25580(gp)
 40072d0:	d0e70517 	ldw	r3,-25580(gp)
 40072d4:	18c00c03 	ldbu	r3,48(r3)
 40072d8:	18c00814 	ori	r3,r3,32
 40072dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 40072e0:	d0a70517 	ldw	r2,-25580(gp)
 40072e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 40072e8:	d0a70517 	ldw	r2,-25580(gp)
 40072ec:	e0ffff0b 	ldhu	r3,-4(fp)
 40072f0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 40072f4:	d0a70517 	ldw	r2,-25580(gp)
 40072f8:	e0fffc17 	ldw	r3,-16(fp)
 40072fc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 4007300:	e0bffc17 	ldw	r2,-16(fp)
 4007304:	e0fffd0b 	ldhu	r3,-12(fp)
 4007308:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 400730c:	e0bffc17 	ldw	r2,-16(fp)
 4007310:	e0fffe03 	ldbu	r3,-8(fp)
 4007314:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4007318:	d0e70517 	ldw	r3,-25580(gp)
 400731c:	e0bffc17 	ldw	r2,-16(fp)
 4007320:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4007324:	e0bffb17 	ldw	r2,-20(fp)
 4007328:	10c00117 	ldw	r3,4(r2)
 400732c:	e0bffc17 	ldw	r2,-16(fp)
 4007330:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4007334:	e0bffc17 	ldw	r2,-16(fp)
 4007338:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 400733c:	e0bffc17 	ldw	r2,-16(fp)
 4007340:	e0fffb17 	ldw	r3,-20(fp)
 4007344:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4007348:	e0bffb17 	ldw	r2,-20(fp)
 400734c:	10800117 	ldw	r2,4(r2)
 4007350:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 4007354:	e0bff917 	ldw	r2,-28(fp)
 4007358:	10000326 	beq	r2,zero,4007368 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 400735c:	e0bff917 	ldw	r2,-28(fp)
 4007360:	e0fffc17 	ldw	r3,-16(fp)
 4007364:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 4007368:	e0bffb17 	ldw	r2,-20(fp)
 400736c:	e0fffc17 	ldw	r3,-16(fp)
 4007370:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 4007374:	d0a70517 	ldw	r2,-25580(gp)
 4007378:	10800d03 	ldbu	r2,52(r2)
 400737c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4007380:	e0fffa03 	ldbu	r3,-24(fp)
 4007384:	e13ffa03 	ldbu	r4,-24(fp)
 4007388:	d0a70244 	addi	r2,gp,-25591
 400738c:	2085883a 	add	r2,r4,r2
 4007390:	10800003 	ldbu	r2,0(r2)
 4007394:	1009883a 	mov	r4,r2
 4007398:	d0a70517 	ldw	r2,-25580(gp)
 400739c:	10800d43 	ldbu	r2,53(r2)
 40073a0:	0084303a 	nor	r2,zero,r2
 40073a4:	2084703a 	and	r2,r4,r2
 40073a8:	1009883a 	mov	r4,r2
 40073ac:	d0a70244 	addi	r2,gp,-25591
 40073b0:	1885883a 	add	r2,r3,r2
 40073b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 40073b8:	e0fffa03 	ldbu	r3,-24(fp)
 40073bc:	d0a70244 	addi	r2,gp,-25591
 40073c0:	1885883a 	add	r2,r3,r2
 40073c4:	10800003 	ldbu	r2,0(r2)
 40073c8:	10803fcc 	andi	r2,r2,255
 40073cc:	1000071e 	bne	r2,zero,40073ec <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 40073d0:	d0a70517 	ldw	r2,-25580(gp)
 40073d4:	10800d83 	ldbu	r2,54(r2)
 40073d8:	0084303a 	nor	r2,zero,r2
 40073dc:	1007883a 	mov	r3,r2
 40073e0:	d0a70203 	ldbu	r2,-25592(gp)
 40073e4:	1884703a 	and	r2,r3,r2
 40073e8:	d0a70205 	stb	r2,-25592(gp)
    }
}
 40073ec:	0001883a 	nop
 40073f0:	e037883a 	mov	sp,fp
 40073f4:	df000017 	ldw	fp,0(sp)
 40073f8:	dec00104 	addi	sp,sp,4
 40073fc:	f800283a 	ret

04007400 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4007400:	defffb04 	addi	sp,sp,-20
 4007404:	dfc00415 	stw	ra,16(sp)
 4007408:	df000315 	stw	fp,12(sp)
 400740c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4007410:	0140dc04 	movi	r5,880
 4007414:	01010074 	movhi	r4,1025
 4007418:	21149804 	addi	r4,r4,21088
 400741c:	40056440 	call	4005644 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 4007420:	00810074 	movhi	r2,1025
 4007424:	10949804 	addi	r2,r2,21088
 4007428:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 400742c:	00810074 	movhi	r2,1025
 4007430:	1094a304 	addi	r2,r2,21132
 4007434:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4007438:	e03ffd0d 	sth	zero,-12(fp)
 400743c:	00001306 	br	400748c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4007440:	e0bffe17 	ldw	r2,-8(fp)
 4007444:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 4007448:	e0bffe17 	ldw	r2,-8(fp)
 400744c:	e0ffff17 	ldw	r3,-4(fp)
 4007450:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 4007454:	e0bffe17 	ldw	r2,-8(fp)
 4007458:	00c00fc4 	movi	r3,63
 400745c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4007460:	e0bffe17 	ldw	r2,-8(fp)
 4007464:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 4007468:	e0bffe17 	ldw	r2,-8(fp)
 400746c:	10800b04 	addi	r2,r2,44
 4007470:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 4007474:	e0bfff17 	ldw	r2,-4(fp)
 4007478:	10800b04 	addi	r2,r2,44
 400747c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4007480:	e0bffd0b 	ldhu	r2,-12(fp)
 4007484:	10800044 	addi	r2,r2,1
 4007488:	e0bffd0d 	sth	r2,-12(fp)
 400748c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007490:	108004f0 	cmpltui	r2,r2,19
 4007494:	103fea1e 	bne	r2,zero,4007440 <__alt_mem_onchip_memory2_0+0xfc005440>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4007498:	e0bffe17 	ldw	r2,-8(fp)
 400749c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 40074a0:	e0bffe17 	ldw	r2,-8(fp)
 40074a4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 40074a8:	e0bffe17 	ldw	r2,-8(fp)
 40074ac:	00c00fc4 	movi	r3,63
 40074b0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 40074b4:	e0bffe17 	ldw	r2,-8(fp)
 40074b8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 40074bc:	00810074 	movhi	r2,1025
 40074c0:	10949804 	addi	r2,r2,21088
 40074c4:	d0a70715 	stw	r2,-25572(gp)
#endif
}
 40074c8:	0001883a 	nop
 40074cc:	e037883a 	mov	sp,fp
 40074d0:	dfc00117 	ldw	ra,4(sp)
 40074d4:	df000017 	ldw	fp,0(sp)
 40074d8:	dec00204 	addi	sp,sp,8
 40074dc:	f800283a 	ret

040074e0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 40074e0:	defffa04 	addi	sp,sp,-24
 40074e4:	dfc00515 	stw	ra,20(sp)
 40074e8:	df000415 	stw	fp,16(sp)
 40074ec:	df000404 	addi	fp,sp,16
 40074f0:	e13ffe15 	stw	r4,-8(fp)
 40074f4:	2805883a 	mov	r2,r5
 40074f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 40074fc:	e0bffe17 	ldw	r2,-8(fp)
 4007500:	10800217 	ldw	r2,8(r2)
 4007504:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 4007508:	e0bffd17 	ldw	r2,-12(fp)
 400750c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4007510:	e0bffd17 	ldw	r2,-12(fp)
 4007514:	e0ffff0b 	ldhu	r3,-4(fp)
 4007518:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400751c:	e0bffd17 	ldw	r2,-12(fp)
 4007520:	10c00c03 	ldbu	r3,48(r2)
 4007524:	00bff7c4 	movi	r2,-33
 4007528:	1884703a 	and	r2,r3,r2
 400752c:	1007883a 	mov	r3,r2
 4007530:	e0bffd17 	ldw	r2,-12(fp)
 4007534:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 4007538:	e0bffd17 	ldw	r2,-12(fp)
 400753c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 4007540:	e0bffd17 	ldw	r2,-12(fp)
 4007544:	10800c03 	ldbu	r2,48(r2)
 4007548:	10803fcc 	andi	r2,r2,255
 400754c:	1000181e 	bne	r2,zero,40075b0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 4007550:	e0bffd17 	ldw	r2,-12(fp)
 4007554:	10c00d83 	ldbu	r3,54(r2)
 4007558:	d0a70203 	ldbu	r2,-25592(gp)
 400755c:	1884b03a 	or	r2,r3,r2
 4007560:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4007564:	e0bffd17 	ldw	r2,-12(fp)
 4007568:	10800d03 	ldbu	r2,52(r2)
 400756c:	10c03fcc 	andi	r3,r2,255
 4007570:	e0bffd17 	ldw	r2,-12(fp)
 4007574:	10800d03 	ldbu	r2,52(r2)
 4007578:	11003fcc 	andi	r4,r2,255
 400757c:	d0a70244 	addi	r2,gp,-25591
 4007580:	2085883a 	add	r2,r4,r2
 4007584:	11000003 	ldbu	r4,0(r2)
 4007588:	e0bffd17 	ldw	r2,-12(fp)
 400758c:	10800d43 	ldbu	r2,53(r2)
 4007590:	2084b03a 	or	r2,r4,r2
 4007594:	1009883a 	mov	r4,r2
 4007598:	d0a70244 	addi	r2,gp,-25591
 400759c:	1885883a 	add	r2,r3,r2
 40075a0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 40075a4:	00800044 	movi	r2,1
 40075a8:	e0bffc05 	stb	r2,-16(fp)
 40075ac:	00000106 	br	40075b4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 40075b0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 40075b4:	e13ffe17 	ldw	r4,-8(fp)
 40075b8:	40075d40 	call	40075d4 <OS_FlagUnlink>
    return (sched);
 40075bc:	e0bffc03 	ldbu	r2,-16(fp)
}
 40075c0:	e037883a 	mov	sp,fp
 40075c4:	dfc00117 	ldw	ra,4(sp)
 40075c8:	df000017 	ldw	fp,0(sp)
 40075cc:	dec00204 	addi	sp,sp,8
 40075d0:	f800283a 	ret

040075d4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 40075d4:	defffa04 	addi	sp,sp,-24
 40075d8:	df000515 	stw	fp,20(sp)
 40075dc:	df000504 	addi	fp,sp,20
 40075e0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 40075e4:	e0bfff17 	ldw	r2,-4(fp)
 40075e8:	10800117 	ldw	r2,4(r2)
 40075ec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40075f0:	e0bfff17 	ldw	r2,-4(fp)
 40075f4:	10800017 	ldw	r2,0(r2)
 40075f8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 40075fc:	e0bffb17 	ldw	r2,-20(fp)
 4007600:	10000b1e 	bne	r2,zero,4007630 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 4007604:	e0bfff17 	ldw	r2,-4(fp)
 4007608:	10800317 	ldw	r2,12(r2)
 400760c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 4007610:	e0bffd17 	ldw	r2,-12(fp)
 4007614:	e0fffc17 	ldw	r3,-16(fp)
 4007618:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 400761c:	e0bffc17 	ldw	r2,-16(fp)
 4007620:	10000b26 	beq	r2,zero,4007650 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 4007624:	e0bffc17 	ldw	r2,-16(fp)
 4007628:	10000115 	stw	zero,4(r2)
 400762c:	00000806 	br	4007650 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 4007630:	e0bffb17 	ldw	r2,-20(fp)
 4007634:	e0fffc17 	ldw	r3,-16(fp)
 4007638:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10000326 	beq	r2,zero,4007650 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4007644:	e0bffc17 	ldw	r2,-16(fp)
 4007648:	e0fffb17 	ldw	r3,-20(fp)
 400764c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 4007650:	e0bfff17 	ldw	r2,-4(fp)
 4007654:	10800217 	ldw	r2,8(r2)
 4007658:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400765c:	e0bffe17 	ldw	r2,-8(fp)
 4007660:	10000a15 	stw	zero,40(r2)
#endif
}
 4007664:	0001883a 	nop
 4007668:	e037883a 	mov	sp,fp
 400766c:	df000017 	ldw	fp,0(sp)
 4007670:	dec00104 	addi	sp,sp,4
 4007674:	f800283a 	ret

04007678 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4007678:	defff404 	addi	sp,sp,-48
 400767c:	df000b15 	stw	fp,44(sp)
 4007680:	df000b04 	addi	fp,sp,44
 4007684:	e13ffc15 	stw	r4,-16(fp)
 4007688:	e17ffd15 	stw	r5,-12(fp)
 400768c:	e1bffe15 	stw	r6,-8(fp)
 4007690:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4007694:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4007698:	e0bfff17 	ldw	r2,-4(fp)
 400769c:	1000021e 	bne	r2,zero,40076a8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 40076a0:	0005883a 	mov	r2,zero
 40076a4:	00006506 	br	400783c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 40076a8:	e0bffc17 	ldw	r2,-16(fp)
 40076ac:	1000051e 	bne	r2,zero,40076c4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 40076b0:	e0bfff17 	ldw	r2,-4(fp)
 40076b4:	00c01884 	movi	r3,98
 40076b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40076bc:	0005883a 	mov	r2,zero
 40076c0:	00005e06 	br	400783c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 40076c4:	e0bffc17 	ldw	r2,-16(fp)
 40076c8:	108000cc 	andi	r2,r2,3
 40076cc:	10000526 	beq	r2,zero,40076e4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 40076d0:	e0bfff17 	ldw	r2,-4(fp)
 40076d4:	00c01884 	movi	r3,98
 40076d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40076dc:	0005883a 	mov	r2,zero
 40076e0:	00005606 	br	400783c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 40076e4:	e0bffd17 	ldw	r2,-12(fp)
 40076e8:	108000a8 	cmpgeui	r2,r2,2
 40076ec:	1000051e 	bne	r2,zero,4007704 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 40076f0:	e0bfff17 	ldw	r2,-4(fp)
 40076f4:	00c016c4 	movi	r3,91
 40076f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40076fc:	0005883a 	mov	r2,zero
 4007700:	00004e06 	br	400783c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4007704:	e0bffe17 	ldw	r2,-8(fp)
 4007708:	10800128 	cmpgeui	r2,r2,4
 400770c:	1000051e 	bne	r2,zero,4007724 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	00c01704 	movi	r3,92
 4007718:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 400771c:	0005883a 	mov	r2,zero
 4007720:	00004606 	br	400783c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007724:	0005303a 	rdctl	r2,status
 4007728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400772c:	e0fffb17 	ldw	r3,-20(fp)
 4007730:	00bfff84 	movi	r2,-2
 4007734:	1884703a 	and	r2,r3,r2
 4007738:	1001703a 	wrctl	status,r2
  
  return context;
 400773c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007740:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4007744:	d0a6ff17 	ldw	r2,-25604(gp)
 4007748:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 400774c:	d0a6ff17 	ldw	r2,-25604(gp)
 4007750:	10000326 	beq	r2,zero,4007760 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4007754:	d0a6ff17 	ldw	r2,-25604(gp)
 4007758:	10800117 	ldw	r2,4(r2)
 400775c:	d0a6ff15 	stw	r2,-25604(gp)
 4007760:	e0bff817 	ldw	r2,-32(fp)
 4007764:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007768:	e0bff917 	ldw	r2,-28(fp)
 400776c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 4007770:	e0bffa17 	ldw	r2,-24(fp)
 4007774:	1000051e 	bne	r2,zero,400778c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 4007778:	e0bfff17 	ldw	r2,-4(fp)
 400777c:	00c01684 	movi	r3,90
 4007780:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4007784:	0005883a 	mov	r2,zero
 4007788:	00002c06 	br	400783c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 400778c:	e0bffc17 	ldw	r2,-16(fp)
 4007790:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4007794:	e0fffc17 	ldw	r3,-16(fp)
 4007798:	e0bffe17 	ldw	r2,-8(fp)
 400779c:	1885883a 	add	r2,r3,r2
 40077a0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 40077a4:	e03ff715 	stw	zero,-36(fp)
 40077a8:	00000c06 	br	40077dc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 40077ac:	e0bff617 	ldw	r2,-40(fp)
 40077b0:	e0fff517 	ldw	r3,-44(fp)
 40077b4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 40077b8:	e0bff517 	ldw	r2,-44(fp)
 40077bc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 40077c0:	e0fff517 	ldw	r3,-44(fp)
 40077c4:	e0bffe17 	ldw	r2,-8(fp)
 40077c8:	1885883a 	add	r2,r3,r2
 40077cc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 40077d0:	e0bff717 	ldw	r2,-36(fp)
 40077d4:	10800044 	addi	r2,r2,1
 40077d8:	e0bff715 	stw	r2,-36(fp)
 40077dc:	e0bffd17 	ldw	r2,-12(fp)
 40077e0:	10bfffc4 	addi	r2,r2,-1
 40077e4:	e0fff717 	ldw	r3,-36(fp)
 40077e8:	18bff036 	bltu	r3,r2,40077ac <__alt_mem_onchip_memory2_0+0xfc0057ac>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 40077ec:	e0bff617 	ldw	r2,-40(fp)
 40077f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 40077f4:	e0bffa17 	ldw	r2,-24(fp)
 40077f8:	e0fffc17 	ldw	r3,-16(fp)
 40077fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4007800:	e0bffa17 	ldw	r2,-24(fp)
 4007804:	e0fffc17 	ldw	r3,-16(fp)
 4007808:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 400780c:	e0bffa17 	ldw	r2,-24(fp)
 4007810:	e0fffd17 	ldw	r3,-12(fp)
 4007814:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 4007818:	e0bffa17 	ldw	r2,-24(fp)
 400781c:	e0fffd17 	ldw	r3,-12(fp)
 4007820:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4007824:	e0bffa17 	ldw	r2,-24(fp)
 4007828:	e0fffe17 	ldw	r3,-8(fp)
 400782c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 4007830:	e0bfff17 	ldw	r2,-4(fp)
 4007834:	10000005 	stb	zero,0(r2)
    return (pmem);
 4007838:	e0bffa17 	ldw	r2,-24(fp)
}
 400783c:	e037883a 	mov	sp,fp
 4007840:	df000017 	ldw	fp,0(sp)
 4007844:	dec00104 	addi	sp,sp,4
 4007848:	f800283a 	ret

0400784c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 400784c:	defff804 	addi	sp,sp,-32
 4007850:	df000715 	stw	fp,28(sp)
 4007854:	df000704 	addi	fp,sp,28
 4007858:	e13ffe15 	stw	r4,-8(fp)
 400785c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4007860:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4007864:	e0bfff17 	ldw	r2,-4(fp)
 4007868:	1000021e 	bne	r2,zero,4007874 <OSMemGet+0x28>
        return ((void *)0);
 400786c:	0005883a 	mov	r2,zero
 4007870:	00002e06 	br	400792c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4007874:	e0bffe17 	ldw	r2,-8(fp)
 4007878:	1000051e 	bne	r2,zero,4007890 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400787c:	e0bfff17 	ldw	r2,-4(fp)
 4007880:	00c01804 	movi	r3,96
 4007884:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4007888:	0005883a 	mov	r2,zero
 400788c:	00002706 	br	400792c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007890:	0005303a 	rdctl	r2,status
 4007894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007898:	e0fffd17 	ldw	r3,-12(fp)
 400789c:	00bfff84 	movi	r2,-2
 40078a0:	1884703a 	and	r2,r3,r2
 40078a4:	1001703a 	wrctl	status,r2
  
  return context;
 40078a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40078ac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 40078b0:	e0bffe17 	ldw	r2,-8(fp)
 40078b4:	10800417 	ldw	r2,16(r2)
 40078b8:	10001426 	beq	r2,zero,400790c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 40078bc:	e0bffe17 	ldw	r2,-8(fp)
 40078c0:	10800117 	ldw	r2,4(r2)
 40078c4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 40078c8:	e0bffb17 	ldw	r2,-20(fp)
 40078cc:	10c00017 	ldw	r3,0(r2)
 40078d0:	e0bffe17 	ldw	r2,-8(fp)
 40078d4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 40078d8:	e0bffe17 	ldw	r2,-8(fp)
 40078dc:	10800417 	ldw	r2,16(r2)
 40078e0:	10ffffc4 	addi	r3,r2,-1
 40078e4:	e0bffe17 	ldw	r2,-8(fp)
 40078e8:	10c00415 	stw	r3,16(r2)
 40078ec:	e0bff917 	ldw	r2,-28(fp)
 40078f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40078f4:	e0bffa17 	ldw	r2,-24(fp)
 40078f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 40078fc:	e0bfff17 	ldw	r2,-4(fp)
 4007900:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4007904:	e0bffb17 	ldw	r2,-20(fp)
 4007908:	00000806 	br	400792c <OSMemGet+0xe0>
 400790c:	e0bff917 	ldw	r2,-28(fp)
 4007910:	e0bffc15 	stw	r2,-16(fp)
 4007914:	e0bffc17 	ldw	r2,-16(fp)
 4007918:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 400791c:	e0bfff17 	ldw	r2,-4(fp)
 4007920:	00c01744 	movi	r3,93
 4007924:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4007928:	0005883a 	mov	r2,zero
}
 400792c:	e037883a 	mov	sp,fp
 4007930:	df000017 	ldw	fp,0(sp)
 4007934:	dec00104 	addi	sp,sp,4
 4007938:	f800283a 	ret

0400793c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 400793c:	defff704 	addi	sp,sp,-36
 4007940:	dfc00815 	stw	ra,32(sp)
 4007944:	df000715 	stw	fp,28(sp)
 4007948:	df000704 	addi	fp,sp,28
 400794c:	e13ffd15 	stw	r4,-12(fp)
 4007950:	e17ffe15 	stw	r5,-8(fp)
 4007954:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007958:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400795c:	e0bfff17 	ldw	r2,-4(fp)
 4007960:	1000021e 	bne	r2,zero,400796c <OSMemNameGet+0x30>
        return (0);
 4007964:	0005883a 	mov	r2,zero
 4007968:	00002b06 	br	4007a18 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 400796c:	e0bffd17 	ldw	r2,-12(fp)
 4007970:	1000051e 	bne	r2,zero,4007988 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4007974:	e0bfff17 	ldw	r2,-4(fp)
 4007978:	00c01804 	movi	r3,96
 400797c:	10c00005 	stb	r3,0(r2)
        return (0);
 4007980:	0005883a 	mov	r2,zero
 4007984:	00002406 	br	4007a18 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4007988:	e0bffe17 	ldw	r2,-8(fp)
 400798c:	1000051e 	bne	r2,zero,40079a4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4007990:	e0bfff17 	ldw	r2,-4(fp)
 4007994:	00c00304 	movi	r3,12
 4007998:	10c00005 	stb	r3,0(r2)
        return (0);
 400799c:	0005883a 	mov	r2,zero
 40079a0:	00001d06 	br	4007a18 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40079a4:	d0a70403 	ldbu	r2,-25584(gp)
 40079a8:	10803fcc 	andi	r2,r2,255
 40079ac:	10000526 	beq	r2,zero,40079c4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 40079b0:	e0bfff17 	ldw	r2,-4(fp)
 40079b4:	00c00444 	movi	r3,17
 40079b8:	10c00005 	stb	r3,0(r2)
        return (0);
 40079bc:	0005883a 	mov	r2,zero
 40079c0:	00001506 	br	4007a18 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40079c4:	0005303a 	rdctl	r2,status
 40079c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40079cc:	e0fffb17 	ldw	r3,-20(fp)
 40079d0:	00bfff84 	movi	r2,-2
 40079d4:	1884703a 	and	r2,r3,r2
 40079d8:	1001703a 	wrctl	status,r2
  
  return context;
 40079dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40079e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 40079e4:	e0bffd17 	ldw	r2,-12(fp)
 40079e8:	10800504 	addi	r2,r2,20
 40079ec:	100b883a 	mov	r5,r2
 40079f0:	e13ffe17 	ldw	r4,-8(fp)
 40079f4:	40058440 	call	4005844 <OS_StrCopy>
 40079f8:	e0bffa05 	stb	r2,-24(fp)
 40079fc:	e0bff917 	ldw	r2,-28(fp)
 4007a00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007a04:	e0bffc17 	ldw	r2,-16(fp)
 4007a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007a0c:	e0bfff17 	ldw	r2,-4(fp)
 4007a10:	10000005 	stb	zero,0(r2)
    return (len);
 4007a14:	e0bffa03 	ldbu	r2,-24(fp)
}
 4007a18:	e037883a 	mov	sp,fp
 4007a1c:	dfc00117 	ldw	ra,4(sp)
 4007a20:	df000017 	ldw	fp,0(sp)
 4007a24:	dec00204 	addi	sp,sp,8
 4007a28:	f800283a 	ret

04007a2c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4007a2c:	defff604 	addi	sp,sp,-40
 4007a30:	dfc00915 	stw	ra,36(sp)
 4007a34:	df000815 	stw	fp,32(sp)
 4007a38:	df000804 	addi	fp,sp,32
 4007a3c:	e13ffd15 	stw	r4,-12(fp)
 4007a40:	e17ffe15 	stw	r5,-8(fp)
 4007a44:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007a48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4007a4c:	e0bfff17 	ldw	r2,-4(fp)
 4007a50:	10003526 	beq	r2,zero,4007b28 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4007a54:	e0bffd17 	ldw	r2,-12(fp)
 4007a58:	1000041e 	bne	r2,zero,4007a6c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4007a5c:	e0bfff17 	ldw	r2,-4(fp)
 4007a60:	00c01804 	movi	r3,96
 4007a64:	10c00005 	stb	r3,0(r2)
        return;
 4007a68:	00003006 	br	4007b2c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4007a6c:	e0bffe17 	ldw	r2,-8(fp)
 4007a70:	1000041e 	bne	r2,zero,4007a84 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4007a74:	e0bfff17 	ldw	r2,-4(fp)
 4007a78:	00c00304 	movi	r3,12
 4007a7c:	10c00005 	stb	r3,0(r2)
        return;
 4007a80:	00002a06 	br	4007b2c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4007a84:	d0a70403 	ldbu	r2,-25584(gp)
 4007a88:	10803fcc 	andi	r2,r2,255
 4007a8c:	10000426 	beq	r2,zero,4007aa0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4007a90:	e0bfff17 	ldw	r2,-4(fp)
 4007a94:	00c00484 	movi	r3,18
 4007a98:	10c00005 	stb	r3,0(r2)
        return;
 4007a9c:	00002306 	br	4007b2c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007aa0:	0005303a 	rdctl	r2,status
 4007aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007aa8:	e0fffc17 	ldw	r3,-16(fp)
 4007aac:	00bfff84 	movi	r2,-2
 4007ab0:	1884703a 	and	r2,r3,r2
 4007ab4:	1001703a 	wrctl	status,r2
  
  return context;
 4007ab8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4007abc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4007ac0:	e13ffe17 	ldw	r4,-8(fp)
 4007ac4:	40058b80 	call	40058b8 <OS_StrLen>
 4007ac8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4007acc:	e0bffa03 	ldbu	r2,-24(fp)
 4007ad0:	10800830 	cmpltui	r2,r2,32
 4007ad4:	1000081e 	bne	r2,zero,4007af8 <OSMemNameSet+0xcc>
 4007ad8:	e0bff817 	ldw	r2,-32(fp)
 4007adc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007ae0:	e0bff917 	ldw	r2,-28(fp)
 4007ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4007ae8:	e0bfff17 	ldw	r2,-4(fp)
 4007aec:	00c018c4 	movi	r3,99
 4007af0:	10c00005 	stb	r3,0(r2)
        return;
 4007af4:	00000d06 	br	4007b2c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4007af8:	e0bffd17 	ldw	r2,-12(fp)
 4007afc:	10800504 	addi	r2,r2,20
 4007b00:	e17ffe17 	ldw	r5,-8(fp)
 4007b04:	1009883a 	mov	r4,r2
 4007b08:	40058440 	call	4005844 <OS_StrCopy>
 4007b0c:	e0bff817 	ldw	r2,-32(fp)
 4007b10:	e0bffb15 	stw	r2,-20(fp)
 4007b14:	e0bffb17 	ldw	r2,-20(fp)
 4007b18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4007b1c:	e0bfff17 	ldw	r2,-4(fp)
 4007b20:	10000005 	stb	zero,0(r2)
 4007b24:	00000106 	br	4007b2c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4007b28:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4007b2c:	e037883a 	mov	sp,fp
 4007b30:	dfc00117 	ldw	ra,4(sp)
 4007b34:	df000017 	ldw	fp,0(sp)
 4007b38:	dec00204 	addi	sp,sp,8
 4007b3c:	f800283a 	ret

04007b40 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4007b40:	defff904 	addi	sp,sp,-28
 4007b44:	df000615 	stw	fp,24(sp)
 4007b48:	df000604 	addi	fp,sp,24
 4007b4c:	e13ffe15 	stw	r4,-8(fp)
 4007b50:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007b54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4007b58:	e0bffe17 	ldw	r2,-8(fp)
 4007b5c:	1000021e 	bne	r2,zero,4007b68 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4007b60:	00801804 	movi	r2,96
 4007b64:	00002806 	br	4007c08 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4007b68:	e0bfff17 	ldw	r2,-4(fp)
 4007b6c:	1000021e 	bne	r2,zero,4007b78 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 4007b70:	008017c4 	movi	r2,95
 4007b74:	00002406 	br	4007c08 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007b78:	0005303a 	rdctl	r2,status
 4007b7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007b80:	e0fffd17 	ldw	r3,-12(fp)
 4007b84:	00bfff84 	movi	r2,-2
 4007b88:	1884703a 	and	r2,r3,r2
 4007b8c:	1001703a 	wrctl	status,r2
  
  return context;
 4007b90:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007b94:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4007b98:	e0bffe17 	ldw	r2,-8(fp)
 4007b9c:	10c00417 	ldw	r3,16(r2)
 4007ba0:	e0bffe17 	ldw	r2,-8(fp)
 4007ba4:	10800317 	ldw	r2,12(r2)
 4007ba8:	18800636 	bltu	r3,r2,4007bc4 <OSMemPut+0x84>
 4007bac:	e0bffa17 	ldw	r2,-24(fp)
 4007bb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007bb4:	e0bffb17 	ldw	r2,-20(fp)
 4007bb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4007bbc:	00801784 	movi	r2,94
 4007bc0:	00001106 	br	4007c08 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4007bc4:	e0bffe17 	ldw	r2,-8(fp)
 4007bc8:	10c00117 	ldw	r3,4(r2)
 4007bcc:	e0bfff17 	ldw	r2,-4(fp)
 4007bd0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4007bd4:	e0bffe17 	ldw	r2,-8(fp)
 4007bd8:	e0ffff17 	ldw	r3,-4(fp)
 4007bdc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4007be0:	e0bffe17 	ldw	r2,-8(fp)
 4007be4:	10800417 	ldw	r2,16(r2)
 4007be8:	10c00044 	addi	r3,r2,1
 4007bec:	e0bffe17 	ldw	r2,-8(fp)
 4007bf0:	10c00415 	stw	r3,16(r2)
 4007bf4:	e0bffa17 	ldw	r2,-24(fp)
 4007bf8:	e0bffc15 	stw	r2,-16(fp)
 4007bfc:	e0bffc17 	ldw	r2,-16(fp)
 4007c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4007c04:	0005883a 	mov	r2,zero
}
 4007c08:	e037883a 	mov	sp,fp
 4007c0c:	df000017 	ldw	fp,0(sp)
 4007c10:	dec00104 	addi	sp,sp,4
 4007c14:	f800283a 	ret

04007c18 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4007c18:	defffa04 	addi	sp,sp,-24
 4007c1c:	df000515 	stw	fp,20(sp)
 4007c20:	df000504 	addi	fp,sp,20
 4007c24:	e13ffe15 	stw	r4,-8(fp)
 4007c28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007c2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4007c30:	e0bffe17 	ldw	r2,-8(fp)
 4007c34:	1000021e 	bne	r2,zero,4007c40 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4007c38:	00801804 	movi	r2,96
 4007c3c:	00002c06 	br	4007cf0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 4007c40:	e0bfff17 	ldw	r2,-4(fp)
 4007c44:	1000021e 	bne	r2,zero,4007c50 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 4007c48:	00801844 	movi	r2,97
 4007c4c:	00002806 	br	4007cf0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007c50:	0005303a 	rdctl	r2,status
 4007c54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007c58:	e0fffc17 	ldw	r3,-16(fp)
 4007c5c:	00bfff84 	movi	r2,-2
 4007c60:	1884703a 	and	r2,r3,r2
 4007c64:	1001703a 	wrctl	status,r2
  
  return context;
 4007c68:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4007c6c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4007c70:	e0bffe17 	ldw	r2,-8(fp)
 4007c74:	10c00017 	ldw	r3,0(r2)
 4007c78:	e0bfff17 	ldw	r2,-4(fp)
 4007c7c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4007c80:	e0bffe17 	ldw	r2,-8(fp)
 4007c84:	10c00117 	ldw	r3,4(r2)
 4007c88:	e0bfff17 	ldw	r2,-4(fp)
 4007c8c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4007c90:	e0bffe17 	ldw	r2,-8(fp)
 4007c94:	10c00217 	ldw	r3,8(r2)
 4007c98:	e0bfff17 	ldw	r2,-4(fp)
 4007c9c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4007ca0:	e0bffe17 	ldw	r2,-8(fp)
 4007ca4:	10c00317 	ldw	r3,12(r2)
 4007ca8:	e0bfff17 	ldw	r2,-4(fp)
 4007cac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4007cb0:	e0bffe17 	ldw	r2,-8(fp)
 4007cb4:	10c00417 	ldw	r3,16(r2)
 4007cb8:	e0bfff17 	ldw	r2,-4(fp)
 4007cbc:	10c00415 	stw	r3,16(r2)
 4007cc0:	e0bffb17 	ldw	r2,-20(fp)
 4007cc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007cc8:	e0bffd17 	ldw	r2,-12(fp)
 4007ccc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4007cd0:	e0bfff17 	ldw	r2,-4(fp)
 4007cd4:	10c00317 	ldw	r3,12(r2)
 4007cd8:	e0bfff17 	ldw	r2,-4(fp)
 4007cdc:	10800417 	ldw	r2,16(r2)
 4007ce0:	1887c83a 	sub	r3,r3,r2
 4007ce4:	e0bfff17 	ldw	r2,-4(fp)
 4007ce8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4007cec:	0005883a 	mov	r2,zero
}
 4007cf0:	e037883a 	mov	sp,fp
 4007cf4:	df000017 	ldw	fp,0(sp)
 4007cf8:	dec00104 	addi	sp,sp,4
 4007cfc:	f800283a 	ret

04007d00 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4007d00:	defffc04 	addi	sp,sp,-16
 4007d04:	dfc00315 	stw	ra,12(sp)
 4007d08:	df000215 	stw	fp,8(sp)
 4007d0c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4007d10:	01430c04 	movi	r5,3120
 4007d14:	01010074 	movhi	r4,1025
 4007d18:	21157404 	addi	r4,r4,21968
 4007d1c:	40056440 	call	4005644 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4007d20:	00810074 	movhi	r2,1025
 4007d24:	10957404 	addi	r2,r2,21968
 4007d28:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4007d2c:	e03fff0d 	sth	zero,-4(fp)
 4007d30:	00001306 	br	4007d80 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4007d34:	e0bfff0b 	ldhu	r2,-4(fp)
 4007d38:	10800044 	addi	r2,r2,1
 4007d3c:	10c00d24 	muli	r3,r2,52
 4007d40:	00810074 	movhi	r2,1025
 4007d44:	10957404 	addi	r2,r2,21968
 4007d48:	1887883a 	add	r3,r3,r2
 4007d4c:	e0bffe17 	ldw	r2,-8(fp)
 4007d50:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4007d54:	e0bffe17 	ldw	r2,-8(fp)
 4007d58:	00c00fc4 	movi	r3,63
 4007d5c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4007d60:	e0bffe17 	ldw	r2,-8(fp)
 4007d64:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4007d68:	e0bffe17 	ldw	r2,-8(fp)
 4007d6c:	10800d04 	addi	r2,r2,52
 4007d70:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4007d74:	e0bfff0b 	ldhu	r2,-4(fp)
 4007d78:	10800044 	addi	r2,r2,1
 4007d7c:	e0bfff0d 	sth	r2,-4(fp)
 4007d80:	e0bfff0b 	ldhu	r2,-4(fp)
 4007d84:	10800ef0 	cmpltui	r2,r2,59
 4007d88:	103fea1e 	bne	r2,zero,4007d34 <__alt_mem_onchip_memory2_0+0xfc005d34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4007d8c:	e0bffe17 	ldw	r2,-8(fp)
 4007d90:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4007d94:	e0bffe17 	ldw	r2,-8(fp)
 4007d98:	00c00fc4 	movi	r3,63
 4007d9c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4007da0:	e0bffe17 	ldw	r2,-8(fp)
 4007da4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4007da8:	00810074 	movhi	r2,1025
 4007dac:	10957404 	addi	r2,r2,21968
 4007db0:	d0a6ff15 	stw	r2,-25604(gp)
#endif
}
 4007db4:	0001883a 	nop
 4007db8:	e037883a 	mov	sp,fp
 4007dbc:	dfc00117 	ldw	ra,4(sp)
 4007dc0:	df000017 	ldw	fp,0(sp)
 4007dc4:	dec00204 	addi	sp,sp,8
 4007dc8:	f800283a 	ret

04007dcc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4007dcc:	defff804 	addi	sp,sp,-32
 4007dd0:	df000715 	stw	fp,28(sp)
 4007dd4:	df000704 	addi	fp,sp,28
 4007dd8:	e13ffe15 	stw	r4,-8(fp)
 4007ddc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007de0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4007de4:	e0bfff17 	ldw	r2,-4(fp)
 4007de8:	1000021e 	bne	r2,zero,4007df4 <OSQAccept+0x28>
        return ((void *)0);
 4007dec:	0005883a 	mov	r2,zero
 4007df0:	00004206 	br	4007efc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4007df4:	e0bffe17 	ldw	r2,-8(fp)
 4007df8:	1000051e 	bne	r2,zero,4007e10 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4007dfc:	e0bfff17 	ldw	r2,-4(fp)
 4007e00:	00c00104 	movi	r3,4
 4007e04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4007e08:	0005883a 	mov	r2,zero
 4007e0c:	00003b06 	br	4007efc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4007e10:	e0bffe17 	ldw	r2,-8(fp)
 4007e14:	10800003 	ldbu	r2,0(r2)
 4007e18:	10803fcc 	andi	r2,r2,255
 4007e1c:	108000a0 	cmpeqi	r2,r2,2
 4007e20:	1000051e 	bne	r2,zero,4007e38 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4007e24:	e0bfff17 	ldw	r2,-4(fp)
 4007e28:	00c00044 	movi	r3,1
 4007e2c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4007e30:	0005883a 	mov	r2,zero
 4007e34:	00003106 	br	4007efc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007e38:	0005303a 	rdctl	r2,status
 4007e3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007e40:	e0fffd17 	ldw	r3,-12(fp)
 4007e44:	00bfff84 	movi	r2,-2
 4007e48:	1884703a 	and	r2,r3,r2
 4007e4c:	1001703a 	wrctl	status,r2
  
  return context;
 4007e50:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4007e54:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4007e58:	e0bffe17 	ldw	r2,-8(fp)
 4007e5c:	10800117 	ldw	r2,4(r2)
 4007e60:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4007e64:	e0bffc17 	ldw	r2,-16(fp)
 4007e68:	1080058b 	ldhu	r2,22(r2)
 4007e6c:	10bfffcc 	andi	r2,r2,65535
 4007e70:	10001926 	beq	r2,zero,4007ed8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4007e74:	e0bffc17 	ldw	r2,-16(fp)
 4007e78:	10800417 	ldw	r2,16(r2)
 4007e7c:	11000104 	addi	r4,r2,4
 4007e80:	e0fffc17 	ldw	r3,-16(fp)
 4007e84:	19000415 	stw	r4,16(r3)
 4007e88:	10800017 	ldw	r2,0(r2)
 4007e8c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4007e90:	e0bffc17 	ldw	r2,-16(fp)
 4007e94:	1080058b 	ldhu	r2,22(r2)
 4007e98:	10bfffc4 	addi	r2,r2,-1
 4007e9c:	1007883a 	mov	r3,r2
 4007ea0:	e0bffc17 	ldw	r2,-16(fp)
 4007ea4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4007ea8:	e0bffc17 	ldw	r2,-16(fp)
 4007eac:	10c00417 	ldw	r3,16(r2)
 4007eb0:	e0bffc17 	ldw	r2,-16(fp)
 4007eb4:	10800217 	ldw	r2,8(r2)
 4007eb8:	1880041e 	bne	r3,r2,4007ecc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 4007ebc:	e0bffc17 	ldw	r2,-16(fp)
 4007ec0:	10c00117 	ldw	r3,4(r2)
 4007ec4:	e0bffc17 	ldw	r2,-16(fp)
 4007ec8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4007ecc:	e0bfff17 	ldw	r2,-4(fp)
 4007ed0:	10000005 	stb	zero,0(r2)
 4007ed4:	00000406 	br	4007ee8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4007ed8:	e0bfff17 	ldw	r2,-4(fp)
 4007edc:	00c007c4 	movi	r3,31
 4007ee0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4007ee4:	e03ff915 	stw	zero,-28(fp)
 4007ee8:	e0bffa17 	ldw	r2,-24(fp)
 4007eec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007ef0:	e0bffb17 	ldw	r2,-20(fp)
 4007ef4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4007ef8:	e0bff917 	ldw	r2,-28(fp)
}
 4007efc:	e037883a 	mov	sp,fp
 4007f00:	df000017 	ldw	fp,0(sp)
 4007f04:	dec00104 	addi	sp,sp,4
 4007f08:	f800283a 	ret

04007f0c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4007f0c:	defff404 	addi	sp,sp,-48
 4007f10:	dfc00b15 	stw	ra,44(sp)
 4007f14:	df000a15 	stw	fp,40(sp)
 4007f18:	df000a04 	addi	fp,sp,40
 4007f1c:	e13ffe15 	stw	r4,-8(fp)
 4007f20:	2805883a 	mov	r2,r5
 4007f24:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4007f28:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4007f2c:	d0a70403 	ldbu	r2,-25584(gp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	10000226 	beq	r2,zero,4007f40 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4007f38:	0005883a 	mov	r2,zero
 4007f3c:	00005906 	br	40080a4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007f40:	0005303a 	rdctl	r2,status
 4007f44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007f48:	e0fffd17 	ldw	r3,-12(fp)
 4007f4c:	00bfff84 	movi	r2,-2
 4007f50:	1884703a 	and	r2,r3,r2
 4007f54:	1001703a 	wrctl	status,r2
  
  return context;
 4007f58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4007f5c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4007f60:	d0a70317 	ldw	r2,-25588(gp)
 4007f64:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4007f68:	d0a70317 	ldw	r2,-25588(gp)
 4007f6c:	10000326 	beq	r2,zero,4007f7c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4007f70:	d0a70317 	ldw	r2,-25588(gp)
 4007f74:	10800117 	ldw	r2,4(r2)
 4007f78:	d0a70315 	stw	r2,-25588(gp)
 4007f7c:	e0bff717 	ldw	r2,-36(fp)
 4007f80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007f84:	e0bff817 	ldw	r2,-32(fp)
 4007f88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 4007f8c:	e0bff617 	ldw	r2,-40(fp)
 4007f90:	10004326 	beq	r2,zero,40080a0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007f94:	0005303a 	rdctl	r2,status
 4007f98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007f9c:	e0fff917 	ldw	r3,-28(fp)
 4007fa0:	00bfff84 	movi	r2,-2
 4007fa4:	1884703a 	and	r2,r3,r2
 4007fa8:	1001703a 	wrctl	status,r2
  
  return context;
 4007fac:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 4007fb0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4007fb4:	d0a70117 	ldw	r2,-25596(gp)
 4007fb8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4007fbc:	e0bffb17 	ldw	r2,-20(fp)
 4007fc0:	10002d26 	beq	r2,zero,4008078 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4007fc4:	d0a70117 	ldw	r2,-25596(gp)
 4007fc8:	10800017 	ldw	r2,0(r2)
 4007fcc:	d0a70115 	stw	r2,-25596(gp)
 4007fd0:	e0bff717 	ldw	r2,-36(fp)
 4007fd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007fd8:	e0bffa17 	ldw	r2,-24(fp)
 4007fdc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 4007fe0:	e0bffb17 	ldw	r2,-20(fp)
 4007fe4:	e0fffe17 	ldw	r3,-8(fp)
 4007fe8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4007fec:	e0bfff0b 	ldhu	r2,-4(fp)
 4007ff0:	1085883a 	add	r2,r2,r2
 4007ff4:	1085883a 	add	r2,r2,r2
 4007ff8:	1007883a 	mov	r3,r2
 4007ffc:	e0bffe17 	ldw	r2,-8(fp)
 4008000:	10c7883a 	add	r3,r2,r3
 4008004:	e0bffb17 	ldw	r2,-20(fp)
 4008008:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 400800c:	e0bffb17 	ldw	r2,-20(fp)
 4008010:	e0fffe17 	ldw	r3,-8(fp)
 4008014:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4008018:	e0bffb17 	ldw	r2,-20(fp)
 400801c:	e0fffe17 	ldw	r3,-8(fp)
 4008020:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 4008024:	e0bffb17 	ldw	r2,-20(fp)
 4008028:	e0ffff0b 	ldhu	r3,-4(fp)
 400802c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 4008030:	e0bffb17 	ldw	r2,-20(fp)
 4008034:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4008038:	e0bff617 	ldw	r2,-40(fp)
 400803c:	00c00084 	movi	r3,2
 4008040:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 4008044:	e0bff617 	ldw	r2,-40(fp)
 4008048:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 400804c:	e0bff617 	ldw	r2,-40(fp)
 4008050:	e0fffb17 	ldw	r3,-20(fp)
 4008054:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4008058:	e0bff617 	ldw	r2,-40(fp)
 400805c:	00c00fc4 	movi	r3,63
 4008060:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4008064:	e0bff617 	ldw	r2,-40(fp)
 4008068:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 400806c:	e13ff617 	ldw	r4,-40(fp)
 4008070:	40052640 	call	4005264 <OS_EventWaitListInit>
 4008074:	00000a06 	br	40080a0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4008078:	d0e70317 	ldw	r3,-25588(gp)
 400807c:	e0bff617 	ldw	r2,-40(fp)
 4008080:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 4008084:	e0bff617 	ldw	r2,-40(fp)
 4008088:	d0a70315 	stw	r2,-25588(gp)
 400808c:	e0bff717 	ldw	r2,-36(fp)
 4008090:	e0bffc15 	stw	r2,-16(fp)
 4008094:	e0bffc17 	ldw	r2,-16(fp)
 4008098:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 400809c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 40080a0:	e0bff617 	ldw	r2,-40(fp)
}
 40080a4:	e037883a 	mov	sp,fp
 40080a8:	dfc00117 	ldw	ra,4(sp)
 40080ac:	df000017 	ldw	fp,0(sp)
 40080b0:	dec00204 	addi	sp,sp,8
 40080b4:	f800283a 	ret

040080b8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40080b8:	defff204 	addi	sp,sp,-56
 40080bc:	dfc00d15 	stw	ra,52(sp)
 40080c0:	df000c15 	stw	fp,48(sp)
 40080c4:	df000c04 	addi	fp,sp,48
 40080c8:	e13ffd15 	stw	r4,-12(fp)
 40080cc:	2805883a 	mov	r2,r5
 40080d0:	e1bfff15 	stw	r6,-4(fp)
 40080d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40080d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40080dc:	e0bfff17 	ldw	r2,-4(fp)
 40080e0:	1000021e 	bne	r2,zero,40080ec <OSQDel+0x34>
        return (pevent);
 40080e4:	e0bffd17 	ldw	r2,-12(fp)
 40080e8:	00008e06 	br	4008324 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40080ec:	e0bffd17 	ldw	r2,-12(fp)
 40080f0:	1000051e 	bne	r2,zero,4008108 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40080f4:	e0bfff17 	ldw	r2,-4(fp)
 40080f8:	00c00104 	movi	r3,4
 40080fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4008100:	e0bffd17 	ldw	r2,-12(fp)
 4008104:	00008706 	br	4008324 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4008108:	e0bffd17 	ldw	r2,-12(fp)
 400810c:	10800003 	ldbu	r2,0(r2)
 4008110:	10803fcc 	andi	r2,r2,255
 4008114:	108000a0 	cmpeqi	r2,r2,2
 4008118:	1000051e 	bne	r2,zero,4008130 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 400811c:	e0bfff17 	ldw	r2,-4(fp)
 4008120:	00c00044 	movi	r3,1
 4008124:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4008128:	e0bffd17 	ldw	r2,-12(fp)
 400812c:	00007d06 	br	4008324 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4008130:	d0a70403 	ldbu	r2,-25584(gp)
 4008134:	10803fcc 	andi	r2,r2,255
 4008138:	10000526 	beq	r2,zero,4008150 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400813c:	e0bfff17 	ldw	r2,-4(fp)
 4008140:	00c003c4 	movi	r3,15
 4008144:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4008148:	e0bffd17 	ldw	r2,-12(fp)
 400814c:	00007506 	br	4008324 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008150:	0005303a 	rdctl	r2,status
 4008154:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008158:	e0fffc17 	ldw	r3,-16(fp)
 400815c:	00bfff84 	movi	r2,-2
 4008160:	1884703a 	and	r2,r3,r2
 4008164:	1001703a 	wrctl	status,r2
  
  return context;
 4008168:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 400816c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4008170:	e0bffd17 	ldw	r2,-12(fp)
 4008174:	10800283 	ldbu	r2,10(r2)
 4008178:	10803fcc 	andi	r2,r2,255
 400817c:	10000326 	beq	r2,zero,400818c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4008180:	00800044 	movi	r2,1
 4008184:	e0bff405 	stb	r2,-48(fp)
 4008188:	00000106 	br	4008190 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400818c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4008190:	e0bffe03 	ldbu	r2,-8(fp)
 4008194:	10000326 	beq	r2,zero,40081a4 <OSQDel+0xec>
 4008198:	10800060 	cmpeqi	r2,r2,1
 400819c:	1000301e 	bne	r2,zero,4008260 <OSQDel+0x1a8>
 40081a0:	00005506 	br	40082f8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 40081a4:	e0bff403 	ldbu	r2,-48(fp)
 40081a8:	10001e1e 	bne	r2,zero,4008224 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 40081ac:	e0bffd17 	ldw	r2,-12(fp)
 40081b0:	00c00fc4 	movi	r3,63
 40081b4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 40081b8:	e0bffd17 	ldw	r2,-12(fp)
 40081bc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 40081c0:	e0bffd17 	ldw	r2,-12(fp)
 40081c4:	10800117 	ldw	r2,4(r2)
 40081c8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 40081cc:	d0e70117 	ldw	r3,-25596(gp)
 40081d0:	e0bff817 	ldw	r2,-32(fp)
 40081d4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 40081d8:	e0bff817 	ldw	r2,-32(fp)
 40081dc:	d0a70115 	stw	r2,-25596(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40081e0:	e0bffd17 	ldw	r2,-12(fp)
 40081e4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 40081e8:	d0e70317 	ldw	r3,-25588(gp)
 40081ec:	e0bffd17 	ldw	r2,-12(fp)
 40081f0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 40081f4:	e0bffd17 	ldw	r2,-12(fp)
 40081f8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40081fc:	e0bffd17 	ldw	r2,-12(fp)
 4008200:	d0a70315 	stw	r2,-25588(gp)
 4008204:	e0bff617 	ldw	r2,-40(fp)
 4008208:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400820c:	e0bff717 	ldw	r2,-36(fp)
 4008210:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4008214:	e0bfff17 	ldw	r2,-4(fp)
 4008218:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 400821c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4008220:	00003f06 	br	4008320 <OSQDel+0x268>
 4008224:	e0bff617 	ldw	r2,-40(fp)
 4008228:	e0bff915 	stw	r2,-28(fp)
 400822c:	e0bff917 	ldw	r2,-28(fp)
 4008230:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4008234:	e0bfff17 	ldw	r2,-4(fp)
 4008238:	00c01244 	movi	r3,73
 400823c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4008240:	e0bffd17 	ldw	r2,-12(fp)
 4008244:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 4008248:	00003506 	br	4008320 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 400824c:	000f883a 	mov	r7,zero
 4008250:	01800104 	movi	r6,4
 4008254:	000b883a 	mov	r5,zero
 4008258:	e13ffd17 	ldw	r4,-12(fp)
 400825c:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4008260:	e0bffd17 	ldw	r2,-12(fp)
 4008264:	10800283 	ldbu	r2,10(r2)
 4008268:	10803fcc 	andi	r2,r2,255
 400826c:	103ff71e 	bne	r2,zero,400824c <__alt_mem_onchip_memory2_0+0xfc00624c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4008270:	e0bffd17 	ldw	r2,-12(fp)
 4008274:	00c00fc4 	movi	r3,63
 4008278:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 400827c:	e0bffd17 	ldw	r2,-12(fp)
 4008280:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 4008284:	e0bffd17 	ldw	r2,-12(fp)
 4008288:	10800117 	ldw	r2,4(r2)
 400828c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 4008290:	d0e70117 	ldw	r3,-25596(gp)
 4008294:	e0bff817 	ldw	r2,-32(fp)
 4008298:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 400829c:	e0bff817 	ldw	r2,-32(fp)
 40082a0:	d0a70115 	stw	r2,-25596(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40082a4:	e0bffd17 	ldw	r2,-12(fp)
 40082a8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 40082ac:	d0e70317 	ldw	r3,-25588(gp)
 40082b0:	e0bffd17 	ldw	r2,-12(fp)
 40082b4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 40082b8:	e0bffd17 	ldw	r2,-12(fp)
 40082bc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 40082c0:	e0bffd17 	ldw	r2,-12(fp)
 40082c4:	d0a70315 	stw	r2,-25588(gp)
 40082c8:	e0bff617 	ldw	r2,-40(fp)
 40082cc:	e0bffa15 	stw	r2,-24(fp)
 40082d0:	e0bffa17 	ldw	r2,-24(fp)
 40082d4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 40082d8:	e0bff403 	ldbu	r2,-48(fp)
 40082dc:	10800058 	cmpnei	r2,r2,1
 40082e0:	1000011e 	bne	r2,zero,40082e8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40082e4:	40057000 	call	4005700 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 40082e8:	e0bfff17 	ldw	r2,-4(fp)
 40082ec:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 40082f0:	e03ff515 	stw	zero,-44(fp)
             break;
 40082f4:	00000a06 	br	4008320 <OSQDel+0x268>
 40082f8:	e0bff617 	ldw	r2,-40(fp)
 40082fc:	e0bffb15 	stw	r2,-20(fp)
 4008300:	e0bffb17 	ldw	r2,-20(fp)
 4008304:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4008308:	e0bfff17 	ldw	r2,-4(fp)
 400830c:	00c001c4 	movi	r3,7
 4008310:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4008314:	e0bffd17 	ldw	r2,-12(fp)
 4008318:	e0bff515 	stw	r2,-44(fp)
             break;
 400831c:	0001883a 	nop
    }
    return (pevent_return);
 4008320:	e0bff517 	ldw	r2,-44(fp)
}
 4008324:	e037883a 	mov	sp,fp
 4008328:	dfc00117 	ldw	ra,4(sp)
 400832c:	df000017 	ldw	fp,0(sp)
 4008330:	dec00204 	addi	sp,sp,8
 4008334:	f800283a 	ret

04008338 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 4008338:	defffa04 	addi	sp,sp,-24
 400833c:	df000515 	stw	fp,20(sp)
 4008340:	df000504 	addi	fp,sp,20
 4008344:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4008348:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400834c:	e0bfff17 	ldw	r2,-4(fp)
 4008350:	1000021e 	bne	r2,zero,400835c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 4008354:	00800104 	movi	r2,4
 4008358:	00002106 	br	40083e0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400835c:	e0bfff17 	ldw	r2,-4(fp)
 4008360:	10800003 	ldbu	r2,0(r2)
 4008364:	10803fcc 	andi	r2,r2,255
 4008368:	108000a0 	cmpeqi	r2,r2,2
 400836c:	1000021e 	bne	r2,zero,4008378 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 4008370:	00800044 	movi	r2,1
 4008374:	00001a06 	br	40083e0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008378:	0005303a 	rdctl	r2,status
 400837c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008380:	e0fffd17 	ldw	r3,-12(fp)
 4008384:	00bfff84 	movi	r2,-2
 4008388:	1884703a 	and	r2,r3,r2
 400838c:	1001703a 	wrctl	status,r2
  
  return context;
 4008390:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4008394:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 4008398:	e0bfff17 	ldw	r2,-4(fp)
 400839c:	10800117 	ldw	r2,4(r2)
 40083a0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 40083a4:	e0bffc17 	ldw	r2,-16(fp)
 40083a8:	10c00117 	ldw	r3,4(r2)
 40083ac:	e0bffc17 	ldw	r2,-16(fp)
 40083b0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 40083b4:	e0bffc17 	ldw	r2,-16(fp)
 40083b8:	10c00117 	ldw	r3,4(r2)
 40083bc:	e0bffc17 	ldw	r2,-16(fp)
 40083c0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 40083c4:	e0bffc17 	ldw	r2,-16(fp)
 40083c8:	1000058d 	sth	zero,22(r2)
 40083cc:	e0bffb17 	ldw	r2,-20(fp)
 40083d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40083d4:	e0bffe17 	ldw	r2,-8(fp)
 40083d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40083dc:	0005883a 	mov	r2,zero
}
 40083e0:	e037883a 	mov	sp,fp
 40083e4:	df000017 	ldw	fp,0(sp)
 40083e8:	dec00104 	addi	sp,sp,4
 40083ec:	f800283a 	ret

040083f0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 40083f0:	defff304 	addi	sp,sp,-52
 40083f4:	dfc00c15 	stw	ra,48(sp)
 40083f8:	df000b15 	stw	fp,44(sp)
 40083fc:	df000b04 	addi	fp,sp,44
 4008400:	e13ffd15 	stw	r4,-12(fp)
 4008404:	2805883a 	mov	r2,r5
 4008408:	e1bfff15 	stw	r6,-4(fp)
 400840c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4008410:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4008414:	e0bfff17 	ldw	r2,-4(fp)
 4008418:	1000021e 	bne	r2,zero,4008424 <OSQPend+0x34>
        return ((void *)0);
 400841c:	0005883a 	mov	r2,zero
 4008420:	00009106 	br	4008668 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4008424:	e0bffd17 	ldw	r2,-12(fp)
 4008428:	1000051e 	bne	r2,zero,4008440 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 400842c:	e0bfff17 	ldw	r2,-4(fp)
 4008430:	00c00104 	movi	r3,4
 4008434:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4008438:	0005883a 	mov	r2,zero
 400843c:	00008a06 	br	4008668 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4008440:	e0bffd17 	ldw	r2,-12(fp)
 4008444:	10800003 	ldbu	r2,0(r2)
 4008448:	10803fcc 	andi	r2,r2,255
 400844c:	108000a0 	cmpeqi	r2,r2,2
 4008450:	1000051e 	bne	r2,zero,4008468 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4008454:	e0bfff17 	ldw	r2,-4(fp)
 4008458:	00c00044 	movi	r3,1
 400845c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4008460:	0005883a 	mov	r2,zero
 4008464:	00008006 	br	4008668 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4008468:	d0a70403 	ldbu	r2,-25584(gp)
 400846c:	10803fcc 	andi	r2,r2,255
 4008470:	10000526 	beq	r2,zero,4008488 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 4008474:	e0bfff17 	ldw	r2,-4(fp)
 4008478:	00c00084 	movi	r3,2
 400847c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4008480:	0005883a 	mov	r2,zero
 4008484:	00007806 	br	4008668 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4008488:	d0a6f603 	ldbu	r2,-25640(gp)
 400848c:	10803fcc 	andi	r2,r2,255
 4008490:	10000526 	beq	r2,zero,40084a8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4008494:	e0bfff17 	ldw	r2,-4(fp)
 4008498:	00c00344 	movi	r3,13
 400849c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40084a0:	0005883a 	mov	r2,zero
 40084a4:	00007006 	br	4008668 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40084a8:	0005303a 	rdctl	r2,status
 40084ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40084b0:	e0fffc17 	ldw	r3,-16(fp)
 40084b4:	00bfff84 	movi	r2,-2
 40084b8:	1884703a 	and	r2,r3,r2
 40084bc:	1001703a 	wrctl	status,r2
  
  return context;
 40084c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40084c4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 40084c8:	e0bffd17 	ldw	r2,-12(fp)
 40084cc:	10800117 	ldw	r2,4(r2)
 40084d0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 40084d4:	e0bff817 	ldw	r2,-32(fp)
 40084d8:	1080058b 	ldhu	r2,22(r2)
 40084dc:	10bfffcc 	andi	r2,r2,65535
 40084e0:	10001e26 	beq	r2,zero,400855c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 40084e4:	e0bff817 	ldw	r2,-32(fp)
 40084e8:	10800417 	ldw	r2,16(r2)
 40084ec:	11000104 	addi	r4,r2,4
 40084f0:	e0fff817 	ldw	r3,-32(fp)
 40084f4:	19000415 	stw	r4,16(r3)
 40084f8:	10800017 	ldw	r2,0(r2)
 40084fc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4008500:	e0bff817 	ldw	r2,-32(fp)
 4008504:	1080058b 	ldhu	r2,22(r2)
 4008508:	10bfffc4 	addi	r2,r2,-1
 400850c:	1007883a 	mov	r3,r2
 4008510:	e0bff817 	ldw	r2,-32(fp)
 4008514:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4008518:	e0bff817 	ldw	r2,-32(fp)
 400851c:	10c00417 	ldw	r3,16(r2)
 4008520:	e0bff817 	ldw	r2,-32(fp)
 4008524:	10800217 	ldw	r2,8(r2)
 4008528:	1880041e 	bne	r3,r2,400853c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 400852c:	e0bff817 	ldw	r2,-32(fp)
 4008530:	10c00117 	ldw	r3,4(r2)
 4008534:	e0bff817 	ldw	r2,-32(fp)
 4008538:	10c00415 	stw	r3,16(r2)
 400853c:	e0bff617 	ldw	r2,-40(fp)
 4008540:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008544:	e0bff717 	ldw	r2,-36(fp)
 4008548:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 400854c:	e0bfff17 	ldw	r2,-4(fp)
 4008550:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 4008554:	e0bff517 	ldw	r2,-44(fp)
 4008558:	00004306 	br	4008668 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 400855c:	d0a70517 	ldw	r2,-25580(gp)
 4008560:	d0e70517 	ldw	r3,-25580(gp)
 4008564:	18c00c03 	ldbu	r3,48(r3)
 4008568:	18c00114 	ori	r3,r3,4
 400856c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4008570:	d0a70517 	ldw	r2,-25580(gp)
 4008574:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 4008578:	d0a70517 	ldw	r2,-25580(gp)
 400857c:	e0fffe0b 	ldhu	r3,-8(fp)
 4008580:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4008584:	e13ffd17 	ldw	r4,-12(fp)
 4008588:	4004e4c0 	call	4004e4c <OS_EventTaskWait>
 400858c:	e0bff617 	ldw	r2,-40(fp)
 4008590:	e0bffb15 	stw	r2,-20(fp)
 4008594:	e0bffb17 	ldw	r2,-20(fp)
 4008598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 400859c:	40057000 	call	4005700 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40085a0:	0005303a 	rdctl	r2,status
 40085a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40085a8:	e0fff917 	ldw	r3,-28(fp)
 40085ac:	00bfff84 	movi	r2,-2
 40085b0:	1884703a 	and	r2,r3,r2
 40085b4:	1001703a 	wrctl	status,r2
  
  return context;
 40085b8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 40085bc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 40085c0:	d0a70517 	ldw	r2,-25580(gp)
 40085c4:	10800c43 	ldbu	r2,49(r2)
 40085c8:	10803fcc 	andi	r2,r2,255
 40085cc:	10000326 	beq	r2,zero,40085dc <OSQPend+0x1ec>
 40085d0:	108000a0 	cmpeqi	r2,r2,2
 40085d4:	1000071e 	bne	r2,zero,40085f4 <OSQPend+0x204>
 40085d8:	00000b06 	br	4008608 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 40085dc:	d0a70517 	ldw	r2,-25580(gp)
 40085e0:	10800917 	ldw	r2,36(r2)
 40085e4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 40085e8:	e0bfff17 	ldw	r2,-4(fp)
 40085ec:	10000005 	stb	zero,0(r2)
             break;
 40085f0:	00000e06 	br	400862c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 40085f4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40085f8:	e0bfff17 	ldw	r2,-4(fp)
 40085fc:	00c00384 	movi	r3,14
 4008600:	10c00005 	stb	r3,0(r2)
             break;
 4008604:	00000906 	br	400862c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4008608:	d0a70517 	ldw	r2,-25580(gp)
 400860c:	e17ffd17 	ldw	r5,-12(fp)
 4008610:	1009883a 	mov	r4,r2
 4008614:	40050ac0 	call	40050ac <OS_EventTaskRemove>
             pmsg = (void *)0;
 4008618:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 400861c:	e0bfff17 	ldw	r2,-4(fp)
 4008620:	00c00284 	movi	r3,10
 4008624:	10c00005 	stb	r3,0(r2)
             break;
 4008628:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 400862c:	d0a70517 	ldw	r2,-25580(gp)
 4008630:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4008634:	d0a70517 	ldw	r2,-25580(gp)
 4008638:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 400863c:	d0a70517 	ldw	r2,-25580(gp)
 4008640:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4008644:	d0a70517 	ldw	r2,-25580(gp)
 4008648:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 400864c:	d0a70517 	ldw	r2,-25580(gp)
 4008650:	10000915 	stw	zero,36(r2)
 4008654:	e0bff617 	ldw	r2,-40(fp)
 4008658:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400865c:	e0bffa17 	ldw	r2,-24(fp)
 4008660:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4008664:	e0bff517 	ldw	r2,-44(fp)
}
 4008668:	e037883a 	mov	sp,fp
 400866c:	dfc00117 	ldw	ra,4(sp)
 4008670:	df000017 	ldw	fp,0(sp)
 4008674:	dec00204 	addi	sp,sp,8
 4008678:	f800283a 	ret

0400867c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 400867c:	defff604 	addi	sp,sp,-40
 4008680:	dfc00915 	stw	ra,36(sp)
 4008684:	df000815 	stw	fp,32(sp)
 4008688:	df000804 	addi	fp,sp,32
 400868c:	e13ffd15 	stw	r4,-12(fp)
 4008690:	2805883a 	mov	r2,r5
 4008694:	e1bfff15 	stw	r6,-4(fp)
 4008698:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400869c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40086a0:	e0bfff17 	ldw	r2,-4(fp)
 40086a4:	1000021e 	bne	r2,zero,40086b0 <OSQPendAbort+0x34>
        return (0);
 40086a8:	0005883a 	mov	r2,zero
 40086ac:	00004906 	br	40087d4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40086b0:	e0bffd17 	ldw	r2,-12(fp)
 40086b4:	1000051e 	bne	r2,zero,40086cc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40086b8:	e0bfff17 	ldw	r2,-4(fp)
 40086bc:	00c00104 	movi	r3,4
 40086c0:	10c00005 	stb	r3,0(r2)
        return (0);
 40086c4:	0005883a 	mov	r2,zero
 40086c8:	00004206 	br	40087d4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 40086cc:	e0bffd17 	ldw	r2,-12(fp)
 40086d0:	10800003 	ldbu	r2,0(r2)
 40086d4:	10803fcc 	andi	r2,r2,255
 40086d8:	108000a0 	cmpeqi	r2,r2,2
 40086dc:	1000051e 	bne	r2,zero,40086f4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40086e0:	e0bfff17 	ldw	r2,-4(fp)
 40086e4:	00c00044 	movi	r3,1
 40086e8:	10c00005 	stb	r3,0(r2)
        return (0);
 40086ec:	0005883a 	mov	r2,zero
 40086f0:	00003806 	br	40087d4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40086f4:	0005303a 	rdctl	r2,status
 40086f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40086fc:	e0fffc17 	ldw	r3,-16(fp)
 4008700:	00bfff84 	movi	r2,-2
 4008704:	1884703a 	and	r2,r3,r2
 4008708:	1001703a 	wrctl	status,r2
  
  return context;
 400870c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4008710:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4008714:	e0bffd17 	ldw	r2,-12(fp)
 4008718:	10800283 	ldbu	r2,10(r2)
 400871c:	10803fcc 	andi	r2,r2,255
 4008720:	10002526 	beq	r2,zero,40087b8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 4008724:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4008728:	e0bffe03 	ldbu	r2,-8(fp)
 400872c:	10800060 	cmpeqi	r2,r2,1
 4008730:	10000e26 	beq	r2,zero,400876c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4008734:	00000806 	br	4008758 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4008738:	01c00084 	movi	r7,2
 400873c:	01800104 	movi	r6,4
 4008740:	000b883a 	mov	r5,zero
 4008744:	e13ffd17 	ldw	r4,-12(fp)
 4008748:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                     nbr_tasks++;
 400874c:	e0bff803 	ldbu	r2,-32(fp)
 4008750:	10800044 	addi	r2,r2,1
 4008754:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4008758:	e0bffd17 	ldw	r2,-12(fp)
 400875c:	10800283 	ldbu	r2,10(r2)
 4008760:	10803fcc 	andi	r2,r2,255
 4008764:	103ff41e 	bne	r2,zero,4008738 <__alt_mem_onchip_memory2_0+0xfc006738>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4008768:	00000906 	br	4008790 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 400876c:	01c00084 	movi	r7,2
 4008770:	01800104 	movi	r6,4
 4008774:	000b883a 	mov	r5,zero
 4008778:	e13ffd17 	ldw	r4,-12(fp)
 400877c:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                 nbr_tasks++;
 4008780:	e0bff803 	ldbu	r2,-32(fp)
 4008784:	10800044 	addi	r2,r2,1
 4008788:	e0bff805 	stb	r2,-32(fp)
                 break;
 400878c:	0001883a 	nop
 4008790:	e0bff917 	ldw	r2,-28(fp)
 4008794:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008798:	e0bffa17 	ldw	r2,-24(fp)
 400879c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 40087a0:	40057000 	call	4005700 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40087a4:	e0bfff17 	ldw	r2,-4(fp)
 40087a8:	00c00384 	movi	r3,14
 40087ac:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40087b0:	e0bff803 	ldbu	r2,-32(fp)
 40087b4:	00000706 	br	40087d4 <OSQPendAbort+0x158>
 40087b8:	e0bff917 	ldw	r2,-28(fp)
 40087bc:	e0bffb15 	stw	r2,-20(fp)
 40087c0:	e0bffb17 	ldw	r2,-20(fp)
 40087c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40087c8:	e0bfff17 	ldw	r2,-4(fp)
 40087cc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 40087d0:	0005883a 	mov	r2,zero
}
 40087d4:	e037883a 	mov	sp,fp
 40087d8:	dfc00117 	ldw	ra,4(sp)
 40087dc:	df000017 	ldw	fp,0(sp)
 40087e0:	dec00204 	addi	sp,sp,8
 40087e4:	f800283a 	ret

040087e8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 40087e8:	defff604 	addi	sp,sp,-40
 40087ec:	dfc00915 	stw	ra,36(sp)
 40087f0:	df000815 	stw	fp,32(sp)
 40087f4:	df000804 	addi	fp,sp,32
 40087f8:	e13ffe15 	stw	r4,-8(fp)
 40087fc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4008800:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4008804:	e0bffe17 	ldw	r2,-8(fp)
 4008808:	1000021e 	bne	r2,zero,4008814 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 400880c:	00800104 	movi	r2,4
 4008810:	00004a06 	br	400893c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4008814:	e0bffe17 	ldw	r2,-8(fp)
 4008818:	10800003 	ldbu	r2,0(r2)
 400881c:	10803fcc 	andi	r2,r2,255
 4008820:	108000a0 	cmpeqi	r2,r2,2
 4008824:	1000021e 	bne	r2,zero,4008830 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 4008828:	00800044 	movi	r2,1
 400882c:	00004306 	br	400893c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008830:	0005303a 	rdctl	r2,status
 4008834:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008838:	e0fffd17 	ldw	r3,-12(fp)
 400883c:	00bfff84 	movi	r2,-2
 4008840:	1884703a 	and	r2,r3,r2
 4008844:	1001703a 	wrctl	status,r2
  
  return context;
 4008848:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 400884c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 4008850:	e0bffe17 	ldw	r2,-8(fp)
 4008854:	10800283 	ldbu	r2,10(r2)
 4008858:	10803fcc 	andi	r2,r2,255
 400885c:	10000c26 	beq	r2,zero,4008890 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4008860:	000f883a 	mov	r7,zero
 4008864:	01800104 	movi	r6,4
 4008868:	e17fff17 	ldw	r5,-4(fp)
 400886c:	e13ffe17 	ldw	r4,-8(fp)
 4008870:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
 4008874:	e0bff817 	ldw	r2,-32(fp)
 4008878:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400887c:	e0bff917 	ldw	r2,-28(fp)
 4008880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 4008884:	40057000 	call	4005700 <OS_Sched>
        return (OS_ERR_NONE);
 4008888:	0005883a 	mov	r2,zero
 400888c:	00002b06 	br	400893c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 4008890:	e0bffe17 	ldw	r2,-8(fp)
 4008894:	10800117 	ldw	r2,4(r2)
 4008898:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 400889c:	e0bffb17 	ldw	r2,-20(fp)
 40088a0:	10c0058b 	ldhu	r3,22(r2)
 40088a4:	e0bffb17 	ldw	r2,-20(fp)
 40088a8:	1080050b 	ldhu	r2,20(r2)
 40088ac:	18ffffcc 	andi	r3,r3,65535
 40088b0:	10bfffcc 	andi	r2,r2,65535
 40088b4:	18800636 	bltu	r3,r2,40088d0 <OSQPost+0xe8>
 40088b8:	e0bff817 	ldw	r2,-32(fp)
 40088bc:	e0bffa15 	stw	r2,-24(fp)
 40088c0:	e0bffa17 	ldw	r2,-24(fp)
 40088c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 40088c8:	00800784 	movi	r2,30
 40088cc:	00001b06 	br	400893c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 40088d0:	e0bffb17 	ldw	r2,-20(fp)
 40088d4:	10800317 	ldw	r2,12(r2)
 40088d8:	11000104 	addi	r4,r2,4
 40088dc:	e0fffb17 	ldw	r3,-20(fp)
 40088e0:	19000315 	stw	r4,12(r3)
 40088e4:	e0ffff17 	ldw	r3,-4(fp)
 40088e8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 40088ec:	e0bffb17 	ldw	r2,-20(fp)
 40088f0:	1080058b 	ldhu	r2,22(r2)
 40088f4:	10800044 	addi	r2,r2,1
 40088f8:	1007883a 	mov	r3,r2
 40088fc:	e0bffb17 	ldw	r2,-20(fp)
 4008900:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4008904:	e0bffb17 	ldw	r2,-20(fp)
 4008908:	10c00317 	ldw	r3,12(r2)
 400890c:	e0bffb17 	ldw	r2,-20(fp)
 4008910:	10800217 	ldw	r2,8(r2)
 4008914:	1880041e 	bne	r3,r2,4008928 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 4008918:	e0bffb17 	ldw	r2,-20(fp)
 400891c:	10c00117 	ldw	r3,4(r2)
 4008920:	e0bffb17 	ldw	r2,-20(fp)
 4008924:	10c00315 	stw	r3,12(r2)
 4008928:	e0bff817 	ldw	r2,-32(fp)
 400892c:	e0bffc15 	stw	r2,-16(fp)
 4008930:	e0bffc17 	ldw	r2,-16(fp)
 4008934:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008938:	0005883a 	mov	r2,zero
}
 400893c:	e037883a 	mov	sp,fp
 4008940:	dfc00117 	ldw	ra,4(sp)
 4008944:	df000017 	ldw	fp,0(sp)
 4008948:	dec00204 	addi	sp,sp,8
 400894c:	f800283a 	ret

04008950 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4008950:	defff604 	addi	sp,sp,-40
 4008954:	dfc00915 	stw	ra,36(sp)
 4008958:	df000815 	stw	fp,32(sp)
 400895c:	df000804 	addi	fp,sp,32
 4008960:	e13ffe15 	stw	r4,-8(fp)
 4008964:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4008968:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400896c:	e0bffe17 	ldw	r2,-8(fp)
 4008970:	1000021e 	bne	r2,zero,400897c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4008974:	00800104 	movi	r2,4
 4008978:	00004c06 	br	4008aac <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400897c:	e0bffe17 	ldw	r2,-8(fp)
 4008980:	10800003 	ldbu	r2,0(r2)
 4008984:	10803fcc 	andi	r2,r2,255
 4008988:	108000a0 	cmpeqi	r2,r2,2
 400898c:	1000021e 	bne	r2,zero,4008998 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 4008990:	00800044 	movi	r2,1
 4008994:	00004506 	br	4008aac <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008998:	0005303a 	rdctl	r2,status
 400899c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40089a0:	e0fffd17 	ldw	r3,-12(fp)
 40089a4:	00bfff84 	movi	r2,-2
 40089a8:	1884703a 	and	r2,r3,r2
 40089ac:	1001703a 	wrctl	status,r2
  
  return context;
 40089b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40089b4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 40089b8:	e0bffe17 	ldw	r2,-8(fp)
 40089bc:	10800283 	ldbu	r2,10(r2)
 40089c0:	10803fcc 	andi	r2,r2,255
 40089c4:	10000c26 	beq	r2,zero,40089f8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40089c8:	000f883a 	mov	r7,zero
 40089cc:	01800104 	movi	r6,4
 40089d0:	e17fff17 	ldw	r5,-4(fp)
 40089d4:	e13ffe17 	ldw	r4,-8(fp)
 40089d8:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
 40089dc:	e0bff817 	ldw	r2,-32(fp)
 40089e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40089e4:	e0bff917 	ldw	r2,-28(fp)
 40089e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 40089ec:	40057000 	call	4005700 <OS_Sched>
        return (OS_ERR_NONE);
 40089f0:	0005883a 	mov	r2,zero
 40089f4:	00002d06 	br	4008aac <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 40089f8:	e0bffe17 	ldw	r2,-8(fp)
 40089fc:	10800117 	ldw	r2,4(r2)
 4008a00:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4008a04:	e0bffb17 	ldw	r2,-20(fp)
 4008a08:	10c0058b 	ldhu	r3,22(r2)
 4008a0c:	e0bffb17 	ldw	r2,-20(fp)
 4008a10:	1080050b 	ldhu	r2,20(r2)
 4008a14:	18ffffcc 	andi	r3,r3,65535
 4008a18:	10bfffcc 	andi	r2,r2,65535
 4008a1c:	18800636 	bltu	r3,r2,4008a38 <OSQPostFront+0xe8>
 4008a20:	e0bff817 	ldw	r2,-32(fp)
 4008a24:	e0bffa15 	stw	r2,-24(fp)
 4008a28:	e0bffa17 	ldw	r2,-24(fp)
 4008a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4008a30:	00800784 	movi	r2,30
 4008a34:	00001d06 	br	4008aac <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4008a38:	e0bffb17 	ldw	r2,-20(fp)
 4008a3c:	10c00417 	ldw	r3,16(r2)
 4008a40:	e0bffb17 	ldw	r2,-20(fp)
 4008a44:	10800117 	ldw	r2,4(r2)
 4008a48:	1880041e 	bne	r3,r2,4008a5c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 4008a4c:	e0bffb17 	ldw	r2,-20(fp)
 4008a50:	10c00217 	ldw	r3,8(r2)
 4008a54:	e0bffb17 	ldw	r2,-20(fp)
 4008a58:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4008a5c:	e0bffb17 	ldw	r2,-20(fp)
 4008a60:	10800417 	ldw	r2,16(r2)
 4008a64:	10ffff04 	addi	r3,r2,-4
 4008a68:	e0bffb17 	ldw	r2,-20(fp)
 4008a6c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 4008a70:	e0bffb17 	ldw	r2,-20(fp)
 4008a74:	10800417 	ldw	r2,16(r2)
 4008a78:	e0ffff17 	ldw	r3,-4(fp)
 4008a7c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4008a80:	e0bffb17 	ldw	r2,-20(fp)
 4008a84:	1080058b 	ldhu	r2,22(r2)
 4008a88:	10800044 	addi	r2,r2,1
 4008a8c:	1007883a 	mov	r3,r2
 4008a90:	e0bffb17 	ldw	r2,-20(fp)
 4008a94:	10c0058d 	sth	r3,22(r2)
 4008a98:	e0bff817 	ldw	r2,-32(fp)
 4008a9c:	e0bffc15 	stw	r2,-16(fp)
 4008aa0:	e0bffc17 	ldw	r2,-16(fp)
 4008aa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008aa8:	0005883a 	mov	r2,zero
}
 4008aac:	e037883a 	mov	sp,fp
 4008ab0:	dfc00117 	ldw	ra,4(sp)
 4008ab4:	df000017 	ldw	fp,0(sp)
 4008ab8:	dec00204 	addi	sp,sp,8
 4008abc:	f800283a 	ret

04008ac0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 4008ac0:	defff504 	addi	sp,sp,-44
 4008ac4:	dfc00a15 	stw	ra,40(sp)
 4008ac8:	df000915 	stw	fp,36(sp)
 4008acc:	df000904 	addi	fp,sp,36
 4008ad0:	e13ffd15 	stw	r4,-12(fp)
 4008ad4:	e17ffe15 	stw	r5,-8(fp)
 4008ad8:	3005883a 	mov	r2,r6
 4008adc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4008ae0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4008ae4:	e0bffd17 	ldw	r2,-12(fp)
 4008ae8:	1000021e 	bne	r2,zero,4008af4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4008aec:	00800104 	movi	r2,4
 4008af0:	00007106 	br	4008cb8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4008af4:	e0bffd17 	ldw	r2,-12(fp)
 4008af8:	10800003 	ldbu	r2,0(r2)
 4008afc:	10803fcc 	andi	r2,r2,255
 4008b00:	108000a0 	cmpeqi	r2,r2,2
 4008b04:	1000021e 	bne	r2,zero,4008b10 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 4008b08:	00800044 	movi	r2,1
 4008b0c:	00006a06 	br	4008cb8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008b10:	0005303a 	rdctl	r2,status
 4008b14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008b18:	e0fffc17 	ldw	r3,-16(fp)
 4008b1c:	00bfff84 	movi	r2,-2
 4008b20:	1884703a 	and	r2,r3,r2
 4008b24:	1001703a 	wrctl	status,r2
  
  return context;
 4008b28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4008b2c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4008b30:	e0bffd17 	ldw	r2,-12(fp)
 4008b34:	10800283 	ldbu	r2,10(r2)
 4008b38:	10803fcc 	andi	r2,r2,255
 4008b3c:	10001d26 	beq	r2,zero,4008bb4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4008b40:	e0bfff03 	ldbu	r2,-4(fp)
 4008b44:	1080004c 	andi	r2,r2,1
 4008b48:	10000b26 	beq	r2,zero,4008b78 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4008b4c:	00000506 	br	4008b64 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4008b50:	000f883a 	mov	r7,zero
 4008b54:	01800104 	movi	r6,4
 4008b58:	e17ffe17 	ldw	r5,-8(fp)
 4008b5c:	e13ffd17 	ldw	r4,-12(fp)
 4008b60:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4008b64:	e0bffd17 	ldw	r2,-12(fp)
 4008b68:	10800283 	ldbu	r2,10(r2)
 4008b6c:	10803fcc 	andi	r2,r2,255
 4008b70:	103ff71e 	bne	r2,zero,4008b50 <__alt_mem_onchip_memory2_0+0xfc006b50>
 4008b74:	00000506 	br	4008b8c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4008b78:	000f883a 	mov	r7,zero
 4008b7c:	01800104 	movi	r6,4
 4008b80:	e17ffe17 	ldw	r5,-8(fp)
 4008b84:	e13ffd17 	ldw	r4,-12(fp)
 4008b88:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
 4008b8c:	e0bff717 	ldw	r2,-36(fp)
 4008b90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008b94:	e0bff817 	ldw	r2,-32(fp)
 4008b98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4008b9c:	e0bfff03 	ldbu	r2,-4(fp)
 4008ba0:	1080010c 	andi	r2,r2,4
 4008ba4:	1000011e 	bne	r2,zero,4008bac <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4008ba8:	40057000 	call	4005700 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4008bac:	0005883a 	mov	r2,zero
 4008bb0:	00004106 	br	4008cb8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4008bb4:	e0bffd17 	ldw	r2,-12(fp)
 4008bb8:	10800117 	ldw	r2,4(r2)
 4008bbc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4008bc0:	e0bffa17 	ldw	r2,-24(fp)
 4008bc4:	10c0058b 	ldhu	r3,22(r2)
 4008bc8:	e0bffa17 	ldw	r2,-24(fp)
 4008bcc:	1080050b 	ldhu	r2,20(r2)
 4008bd0:	18ffffcc 	andi	r3,r3,65535
 4008bd4:	10bfffcc 	andi	r2,r2,65535
 4008bd8:	18800636 	bltu	r3,r2,4008bf4 <OSQPostOpt+0x134>
 4008bdc:	e0bff717 	ldw	r2,-36(fp)
 4008be0:	e0bff915 	stw	r2,-28(fp)
 4008be4:	e0bff917 	ldw	r2,-28(fp)
 4008be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4008bec:	00800784 	movi	r2,30
 4008bf0:	00003106 	br	4008cb8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4008bf4:	e0bfff03 	ldbu	r2,-4(fp)
 4008bf8:	1080008c 	andi	r2,r2,2
 4008bfc:	10001326 	beq	r2,zero,4008c4c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4008c00:	e0bffa17 	ldw	r2,-24(fp)
 4008c04:	10c00417 	ldw	r3,16(r2)
 4008c08:	e0bffa17 	ldw	r2,-24(fp)
 4008c0c:	10800117 	ldw	r2,4(r2)
 4008c10:	1880041e 	bne	r3,r2,4008c24 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4008c14:	e0bffa17 	ldw	r2,-24(fp)
 4008c18:	10c00217 	ldw	r3,8(r2)
 4008c1c:	e0bffa17 	ldw	r2,-24(fp)
 4008c20:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4008c24:	e0bffa17 	ldw	r2,-24(fp)
 4008c28:	10800417 	ldw	r2,16(r2)
 4008c2c:	10ffff04 	addi	r3,r2,-4
 4008c30:	e0bffa17 	ldw	r2,-24(fp)
 4008c34:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4008c38:	e0bffa17 	ldw	r2,-24(fp)
 4008c3c:	10800417 	ldw	r2,16(r2)
 4008c40:	e0fffe17 	ldw	r3,-8(fp)
 4008c44:	10c00015 	stw	r3,0(r2)
 4008c48:	00001006 	br	4008c8c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4008c4c:	e0bffa17 	ldw	r2,-24(fp)
 4008c50:	10800317 	ldw	r2,12(r2)
 4008c54:	11000104 	addi	r4,r2,4
 4008c58:	e0fffa17 	ldw	r3,-24(fp)
 4008c5c:	19000315 	stw	r4,12(r3)
 4008c60:	e0fffe17 	ldw	r3,-8(fp)
 4008c64:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4008c68:	e0bffa17 	ldw	r2,-24(fp)
 4008c6c:	10c00317 	ldw	r3,12(r2)
 4008c70:	e0bffa17 	ldw	r2,-24(fp)
 4008c74:	10800217 	ldw	r2,8(r2)
 4008c78:	1880041e 	bne	r3,r2,4008c8c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 4008c7c:	e0bffa17 	ldw	r2,-24(fp)
 4008c80:	10c00117 	ldw	r3,4(r2)
 4008c84:	e0bffa17 	ldw	r2,-24(fp)
 4008c88:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4008c8c:	e0bffa17 	ldw	r2,-24(fp)
 4008c90:	1080058b 	ldhu	r2,22(r2)
 4008c94:	10800044 	addi	r2,r2,1
 4008c98:	1007883a 	mov	r3,r2
 4008c9c:	e0bffa17 	ldw	r2,-24(fp)
 4008ca0:	10c0058d 	sth	r3,22(r2)
 4008ca4:	e0bff717 	ldw	r2,-36(fp)
 4008ca8:	e0bffb15 	stw	r2,-20(fp)
 4008cac:	e0bffb17 	ldw	r2,-20(fp)
 4008cb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008cb4:	0005883a 	mov	r2,zero
}
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	dfc00117 	ldw	ra,4(sp)
 4008cc0:	df000017 	ldw	fp,0(sp)
 4008cc4:	dec00204 	addi	sp,sp,8
 4008cc8:	f800283a 	ret

04008ccc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4008ccc:	defff604 	addi	sp,sp,-40
 4008cd0:	df000915 	stw	fp,36(sp)
 4008cd4:	df000904 	addi	fp,sp,36
 4008cd8:	e13ffe15 	stw	r4,-8(fp)
 4008cdc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4008ce0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4008ce4:	e0bffe17 	ldw	r2,-8(fp)
 4008ce8:	1000021e 	bne	r2,zero,4008cf4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4008cec:	00800104 	movi	r2,4
 4008cf0:	00004906 	br	4008e18 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4008cf4:	e0bfff17 	ldw	r2,-4(fp)
 4008cf8:	1000021e 	bne	r2,zero,4008d04 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4008cfc:	00800244 	movi	r2,9
 4008d00:	00004506 	br	4008e18 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4008d04:	e0bffe17 	ldw	r2,-8(fp)
 4008d08:	10800003 	ldbu	r2,0(r2)
 4008d0c:	10803fcc 	andi	r2,r2,255
 4008d10:	108000a0 	cmpeqi	r2,r2,2
 4008d14:	1000021e 	bne	r2,zero,4008d20 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4008d18:	00800044 	movi	r2,1
 4008d1c:	00003e06 	br	4008e18 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008d20:	0005303a 	rdctl	r2,status
 4008d24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008d28:	e0fffd17 	ldw	r3,-12(fp)
 4008d2c:	00bfff84 	movi	r2,-2
 4008d30:	1884703a 	and	r2,r3,r2
 4008d34:	1001703a 	wrctl	status,r2
  
  return context;
 4008d38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4008d3c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4008d40:	e0bffe17 	ldw	r2,-8(fp)
 4008d44:	10c00283 	ldbu	r3,10(r2)
 4008d48:	e0bfff17 	ldw	r2,-4(fp)
 4008d4c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 4008d50:	e0bffe17 	ldw	r2,-8(fp)
 4008d54:	108002c4 	addi	r2,r2,11
 4008d58:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4008d5c:	e0bfff17 	ldw	r2,-4(fp)
 4008d60:	10800204 	addi	r2,r2,8
 4008d64:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4008d68:	e03ff705 	stb	zero,-36(fp)
 4008d6c:	00000b06 	br	4008d9c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 4008d70:	e0bff917 	ldw	r2,-28(fp)
 4008d74:	10c00044 	addi	r3,r2,1
 4008d78:	e0fff915 	stw	r3,-28(fp)
 4008d7c:	e0fff817 	ldw	r3,-32(fp)
 4008d80:	19000044 	addi	r4,r3,1
 4008d84:	e13ff815 	stw	r4,-32(fp)
 4008d88:	18c00003 	ldbu	r3,0(r3)
 4008d8c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4008d90:	e0bff703 	ldbu	r2,-36(fp)
 4008d94:	10800044 	addi	r2,r2,1
 4008d98:	e0bff705 	stb	r2,-36(fp)
 4008d9c:	e0bff703 	ldbu	r2,-36(fp)
 4008da0:	108000f0 	cmpltui	r2,r2,3
 4008da4:	103ff21e 	bne	r2,zero,4008d70 <__alt_mem_onchip_memory2_0+0xfc006d70>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4008da8:	e0bffe17 	ldw	r2,-8(fp)
 4008dac:	10800117 	ldw	r2,4(r2)
 4008db0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4008db4:	e0bffc17 	ldw	r2,-16(fp)
 4008db8:	1080058b 	ldhu	r2,22(r2)
 4008dbc:	10bfffcc 	andi	r2,r2,65535
 4008dc0:	10000626 	beq	r2,zero,4008ddc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4008dc4:	e0bffc17 	ldw	r2,-16(fp)
 4008dc8:	10800417 	ldw	r2,16(r2)
 4008dcc:	10c00017 	ldw	r3,0(r2)
 4008dd0:	e0bfff17 	ldw	r2,-4(fp)
 4008dd4:	10c00015 	stw	r3,0(r2)
 4008dd8:	00000206 	br	4008de4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4008ddc:	e0bfff17 	ldw	r2,-4(fp)
 4008de0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4008de4:	e0bffc17 	ldw	r2,-16(fp)
 4008de8:	10c0058b 	ldhu	r3,22(r2)
 4008dec:	e0bfff17 	ldw	r2,-4(fp)
 4008df0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4008df4:	e0bffc17 	ldw	r2,-16(fp)
 4008df8:	10c0050b 	ldhu	r3,20(r2)
 4008dfc:	e0bfff17 	ldw	r2,-4(fp)
 4008e00:	10c0018d 	sth	r3,6(r2)
 4008e04:	e0bffa17 	ldw	r2,-24(fp)
 4008e08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008e0c:	e0bffb17 	ldw	r2,-20(fp)
 4008e10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4008e14:	0005883a 	mov	r2,zero
}
 4008e18:	e037883a 	mov	sp,fp
 4008e1c:	df000017 	ldw	fp,0(sp)
 4008e20:	dec00104 	addi	sp,sp,4
 4008e24:	f800283a 	ret

04008e28 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4008e28:	defffb04 	addi	sp,sp,-20
 4008e2c:	dfc00415 	stw	ra,16(sp)
 4008e30:	df000315 	stw	fp,12(sp)
 4008e34:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4008e38:	01407804 	movi	r5,480
 4008e3c:	01010074 	movhi	r4,1025
 4008e40:	211a8004 	addi	r4,r4,27136
 4008e44:	40056440 	call	4005644 <OS_MemClr>
    pq1 = &OSQTbl[0];
 4008e48:	00810074 	movhi	r2,1025
 4008e4c:	109a8004 	addi	r2,r2,27136
 4008e50:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4008e54:	00810074 	movhi	r2,1025
 4008e58:	109a8604 	addi	r2,r2,27160
 4008e5c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4008e60:	e03ffd0d 	sth	zero,-12(fp)
 4008e64:	00000c06 	br	4008e98 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4008e68:	e0bffe17 	ldw	r2,-8(fp)
 4008e6c:	e0ffff17 	ldw	r3,-4(fp)
 4008e70:	10c00015 	stw	r3,0(r2)
        pq1++;
 4008e74:	e0bffe17 	ldw	r2,-8(fp)
 4008e78:	10800604 	addi	r2,r2,24
 4008e7c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4008e80:	e0bfff17 	ldw	r2,-4(fp)
 4008e84:	10800604 	addi	r2,r2,24
 4008e88:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4008e8c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e90:	10800044 	addi	r2,r2,1
 4008e94:	e0bffd0d 	sth	r2,-12(fp)
 4008e98:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e9c:	108004f0 	cmpltui	r2,r2,19
 4008ea0:	103ff11e 	bne	r2,zero,4008e68 <__alt_mem_onchip_memory2_0+0xfc006e68>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4008ea4:	e0bffe17 	ldw	r2,-8(fp)
 4008ea8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4008eac:	00810074 	movhi	r2,1025
 4008eb0:	109a8004 	addi	r2,r2,27136
 4008eb4:	d0a70115 	stw	r2,-25596(gp)
#endif
}
 4008eb8:	0001883a 	nop
 4008ebc:	e037883a 	mov	sp,fp
 4008ec0:	dfc00117 	ldw	ra,4(sp)
 4008ec4:	df000017 	ldw	fp,0(sp)
 4008ec8:	dec00204 	addi	sp,sp,8
 4008ecc:	f800283a 	ret

04008ed0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 4008ed0:	defffa04 	addi	sp,sp,-24
 4008ed4:	df000515 	stw	fp,20(sp)
 4008ed8:	df000504 	addi	fp,sp,20
 4008edc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4008ee0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4008ee4:	e0bfff17 	ldw	r2,-4(fp)
 4008ee8:	1000021e 	bne	r2,zero,4008ef4 <OSSemAccept+0x24>
        return (0);
 4008eec:	0005883a 	mov	r2,zero
 4008ef0:	00001f06 	br	4008f70 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4008ef4:	e0bfff17 	ldw	r2,-4(fp)
 4008ef8:	10800003 	ldbu	r2,0(r2)
 4008efc:	10803fcc 	andi	r2,r2,255
 4008f00:	108000e0 	cmpeqi	r2,r2,3
 4008f04:	1000021e 	bne	r2,zero,4008f10 <OSSemAccept+0x40>
        return (0);
 4008f08:	0005883a 	mov	r2,zero
 4008f0c:	00001806 	br	4008f70 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008f10:	0005303a 	rdctl	r2,status
 4008f14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008f18:	e0fffe17 	ldw	r3,-8(fp)
 4008f1c:	00bfff84 	movi	r2,-2
 4008f20:	1884703a 	and	r2,r3,r2
 4008f24:	1001703a 	wrctl	status,r2
  
  return context;
 4008f28:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4008f2c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 4008f30:	e0bfff17 	ldw	r2,-4(fp)
 4008f34:	1080020b 	ldhu	r2,8(r2)
 4008f38:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4008f3c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008f40:	10000626 	beq	r2,zero,4008f5c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4008f44:	e0bfff17 	ldw	r2,-4(fp)
 4008f48:	1080020b 	ldhu	r2,8(r2)
 4008f4c:	10bfffc4 	addi	r2,r2,-1
 4008f50:	1007883a 	mov	r3,r2
 4008f54:	e0bfff17 	ldw	r2,-4(fp)
 4008f58:	10c0020d 	sth	r3,8(r2)
 4008f5c:	e0bffb17 	ldw	r2,-20(fp)
 4008f60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008f64:	e0bffc17 	ldw	r2,-16(fp)
 4008f68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4008f6c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4008f70:	e037883a 	mov	sp,fp
 4008f74:	df000017 	ldw	fp,0(sp)
 4008f78:	dec00104 	addi	sp,sp,4
 4008f7c:	f800283a 	ret

04008f80 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4008f80:	defff904 	addi	sp,sp,-28
 4008f84:	dfc00615 	stw	ra,24(sp)
 4008f88:	df000515 	stw	fp,20(sp)
 4008f8c:	df000504 	addi	fp,sp,20
 4008f90:	2005883a 	mov	r2,r4
 4008f94:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4008f98:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4008f9c:	d0a70403 	ldbu	r2,-25584(gp)
 4008fa0:	10803fcc 	andi	r2,r2,255
 4008fa4:	10000226 	beq	r2,zero,4008fb0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 4008fa8:	0005883a 	mov	r2,zero
 4008fac:	00002506 	br	4009044 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008fb0:	0005303a 	rdctl	r2,status
 4008fb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008fb8:	e0fffe17 	ldw	r3,-8(fp)
 4008fbc:	00bfff84 	movi	r2,-2
 4008fc0:	1884703a 	and	r2,r3,r2
 4008fc4:	1001703a 	wrctl	status,r2
  
  return context;
 4008fc8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4008fcc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4008fd0:	d0a70317 	ldw	r2,-25588(gp)
 4008fd4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4008fd8:	d0a70317 	ldw	r2,-25588(gp)
 4008fdc:	10000326 	beq	r2,zero,4008fec <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4008fe0:	d0a70317 	ldw	r2,-25588(gp)
 4008fe4:	10800117 	ldw	r2,4(r2)
 4008fe8:	d0a70315 	stw	r2,-25588(gp)
 4008fec:	e0bffb17 	ldw	r2,-20(fp)
 4008ff0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008ff4:	e0bffc17 	ldw	r2,-16(fp)
 4008ff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4008ffc:	e0bffd17 	ldw	r2,-12(fp)
 4009000:	10000f26 	beq	r2,zero,4009040 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4009004:	e0bffd17 	ldw	r2,-12(fp)
 4009008:	00c000c4 	movi	r3,3
 400900c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4009010:	e0bffd17 	ldw	r2,-12(fp)
 4009014:	e0ffff0b 	ldhu	r3,-4(fp)
 4009018:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 400901c:	e0bffd17 	ldw	r2,-12(fp)
 4009020:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4009024:	e0bffd17 	ldw	r2,-12(fp)
 4009028:	00c00fc4 	movi	r3,63
 400902c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4009030:	e0bffd17 	ldw	r2,-12(fp)
 4009034:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4009038:	e13ffd17 	ldw	r4,-12(fp)
 400903c:	40052640 	call	4005264 <OS_EventWaitListInit>
    }
    return (pevent);
 4009040:	e0bffd17 	ldw	r2,-12(fp)
}
 4009044:	e037883a 	mov	sp,fp
 4009048:	dfc00117 	ldw	ra,4(sp)
 400904c:	df000017 	ldw	fp,0(sp)
 4009050:	dec00204 	addi	sp,sp,8
 4009054:	f800283a 	ret

04009058 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4009058:	defff304 	addi	sp,sp,-52
 400905c:	dfc00c15 	stw	ra,48(sp)
 4009060:	df000b15 	stw	fp,44(sp)
 4009064:	df000b04 	addi	fp,sp,44
 4009068:	e13ffd15 	stw	r4,-12(fp)
 400906c:	2805883a 	mov	r2,r5
 4009070:	e1bfff15 	stw	r6,-4(fp)
 4009074:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4009078:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400907c:	e0bfff17 	ldw	r2,-4(fp)
 4009080:	1000021e 	bne	r2,zero,400908c <OSSemDel+0x34>
        return (pevent);
 4009084:	e0bffd17 	ldw	r2,-12(fp)
 4009088:	00007e06 	br	4009284 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 400908c:	e0bffd17 	ldw	r2,-12(fp)
 4009090:	1000051e 	bne	r2,zero,40090a8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4009094:	e0bfff17 	ldw	r2,-4(fp)
 4009098:	00c00104 	movi	r3,4
 400909c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40090a0:	e0bffd17 	ldw	r2,-12(fp)
 40090a4:	00007706 	br	4009284 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40090a8:	e0bffd17 	ldw	r2,-12(fp)
 40090ac:	10800003 	ldbu	r2,0(r2)
 40090b0:	10803fcc 	andi	r2,r2,255
 40090b4:	108000e0 	cmpeqi	r2,r2,3
 40090b8:	1000051e 	bne	r2,zero,40090d0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40090bc:	e0bfff17 	ldw	r2,-4(fp)
 40090c0:	00c00044 	movi	r3,1
 40090c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40090c8:	e0bffd17 	ldw	r2,-12(fp)
 40090cc:	00006d06 	br	4009284 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40090d0:	d0a70403 	ldbu	r2,-25584(gp)
 40090d4:	10803fcc 	andi	r2,r2,255
 40090d8:	10000526 	beq	r2,zero,40090f0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 40090dc:	e0bfff17 	ldw	r2,-4(fp)
 40090e0:	00c003c4 	movi	r3,15
 40090e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40090e8:	e0bffd17 	ldw	r2,-12(fp)
 40090ec:	00006506 	br	4009284 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40090f0:	0005303a 	rdctl	r2,status
 40090f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40090f8:	e0fffc17 	ldw	r3,-16(fp)
 40090fc:	00bfff84 	movi	r2,-2
 4009100:	1884703a 	and	r2,r3,r2
 4009104:	1001703a 	wrctl	status,r2
  
  return context;
 4009108:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 400910c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4009110:	e0bffd17 	ldw	r2,-12(fp)
 4009114:	10800283 	ldbu	r2,10(r2)
 4009118:	10803fcc 	andi	r2,r2,255
 400911c:	10000326 	beq	r2,zero,400912c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4009120:	00800044 	movi	r2,1
 4009124:	e0bff505 	stb	r2,-44(fp)
 4009128:	00000106 	br	4009130 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400912c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4009130:	e0bffe03 	ldbu	r2,-8(fp)
 4009134:	10000326 	beq	r2,zero,4009144 <OSSemDel+0xec>
 4009138:	10800060 	cmpeqi	r2,r2,1
 400913c:	1000281e 	bne	r2,zero,40091e0 <OSSemDel+0x188>
 4009140:	00004506 	br	4009258 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4009144:	e0bff503 	ldbu	r2,-44(fp)
 4009148:	1000161e 	bne	r2,zero,40091a4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 400914c:	e0bffd17 	ldw	r2,-12(fp)
 4009150:	00c00fc4 	movi	r3,63
 4009154:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4009158:	e0bffd17 	ldw	r2,-12(fp)
 400915c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4009160:	e0bffd17 	ldw	r2,-12(fp)
 4009164:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4009168:	d0e70317 	ldw	r3,-25588(gp)
 400916c:	e0bffd17 	ldw	r2,-12(fp)
 4009170:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4009174:	e0bffd17 	ldw	r2,-12(fp)
 4009178:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 400917c:	e0bffd17 	ldw	r2,-12(fp)
 4009180:	d0a70315 	stw	r2,-25588(gp)
 4009184:	e0bff717 	ldw	r2,-36(fp)
 4009188:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400918c:	e0bff817 	ldw	r2,-32(fp)
 4009190:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4009194:	e0bfff17 	ldw	r2,-4(fp)
 4009198:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 400919c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 40091a0:	00003706 	br	4009280 <OSSemDel+0x228>
 40091a4:	e0bff717 	ldw	r2,-36(fp)
 40091a8:	e0bff915 	stw	r2,-28(fp)
 40091ac:	e0bff917 	ldw	r2,-28(fp)
 40091b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40091b4:	e0bfff17 	ldw	r2,-4(fp)
 40091b8:	00c01244 	movi	r3,73
 40091bc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 40091c0:	e0bffd17 	ldw	r2,-12(fp)
 40091c4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 40091c8:	00002d06 	br	4009280 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 40091cc:	000f883a 	mov	r7,zero
 40091d0:	01800044 	movi	r6,1
 40091d4:	000b883a 	mov	r5,zero
 40091d8:	e13ffd17 	ldw	r4,-12(fp)
 40091dc:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 40091e0:	e0bffd17 	ldw	r2,-12(fp)
 40091e4:	10800283 	ldbu	r2,10(r2)
 40091e8:	10803fcc 	andi	r2,r2,255
 40091ec:	103ff71e 	bne	r2,zero,40091cc <__alt_mem_onchip_memory2_0+0xfc0071cc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 40091f0:	e0bffd17 	ldw	r2,-12(fp)
 40091f4:	00c00fc4 	movi	r3,63
 40091f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 40091fc:	e0bffd17 	ldw	r2,-12(fp)
 4009200:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4009204:	e0bffd17 	ldw	r2,-12(fp)
 4009208:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 400920c:	d0e70317 	ldw	r3,-25588(gp)
 4009210:	e0bffd17 	ldw	r2,-12(fp)
 4009214:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4009218:	e0bffd17 	ldw	r2,-12(fp)
 400921c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4009220:	e0bffd17 	ldw	r2,-12(fp)
 4009224:	d0a70315 	stw	r2,-25588(gp)
 4009228:	e0bff717 	ldw	r2,-36(fp)
 400922c:	e0bffa15 	stw	r2,-24(fp)
 4009230:	e0bffa17 	ldw	r2,-24(fp)
 4009234:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4009238:	e0bff503 	ldbu	r2,-44(fp)
 400923c:	10800058 	cmpnei	r2,r2,1
 4009240:	1000011e 	bne	r2,zero,4009248 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4009244:	40057000 	call	4005700 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4009248:	e0bfff17 	ldw	r2,-4(fp)
 400924c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4009250:	e03ff615 	stw	zero,-40(fp)
             break;
 4009254:	00000a06 	br	4009280 <OSSemDel+0x228>
 4009258:	e0bff717 	ldw	r2,-36(fp)
 400925c:	e0bffb15 	stw	r2,-20(fp)
 4009260:	e0bffb17 	ldw	r2,-20(fp)
 4009264:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4009268:	e0bfff17 	ldw	r2,-4(fp)
 400926c:	00c001c4 	movi	r3,7
 4009270:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4009274:	e0bffd17 	ldw	r2,-12(fp)
 4009278:	e0bff615 	stw	r2,-40(fp)
             break;
 400927c:	0001883a 	nop
    }
    return (pevent_return);
 4009280:	e0bff617 	ldw	r2,-40(fp)
}
 4009284:	e037883a 	mov	sp,fp
 4009288:	dfc00117 	ldw	ra,4(sp)
 400928c:	df000017 	ldw	fp,0(sp)
 4009290:	dec00204 	addi	sp,sp,8
 4009294:	f800283a 	ret

04009298 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4009298:	defff504 	addi	sp,sp,-44
 400929c:	dfc00a15 	stw	ra,40(sp)
 40092a0:	df000915 	stw	fp,36(sp)
 40092a4:	df000904 	addi	fp,sp,36
 40092a8:	e13ffd15 	stw	r4,-12(fp)
 40092ac:	2805883a 	mov	r2,r5
 40092b0:	e1bfff15 	stw	r6,-4(fp)
 40092b4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40092b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40092bc:	e0bfff17 	ldw	r2,-4(fp)
 40092c0:	10007226 	beq	r2,zero,400948c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40092c4:	e0bffd17 	ldw	r2,-12(fp)
 40092c8:	1000041e 	bne	r2,zero,40092dc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 40092cc:	e0bfff17 	ldw	r2,-4(fp)
 40092d0:	00c00104 	movi	r3,4
 40092d4:	10c00005 	stb	r3,0(r2)
        return;
 40092d8:	00006d06 	br	4009490 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40092dc:	e0bffd17 	ldw	r2,-12(fp)
 40092e0:	10800003 	ldbu	r2,0(r2)
 40092e4:	10803fcc 	andi	r2,r2,255
 40092e8:	108000e0 	cmpeqi	r2,r2,3
 40092ec:	1000041e 	bne	r2,zero,4009300 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 40092f0:	e0bfff17 	ldw	r2,-4(fp)
 40092f4:	00c00044 	movi	r3,1
 40092f8:	10c00005 	stb	r3,0(r2)
        return;
 40092fc:	00006406 	br	4009490 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4009300:	d0a70403 	ldbu	r2,-25584(gp)
 4009304:	10803fcc 	andi	r2,r2,255
 4009308:	10000426 	beq	r2,zero,400931c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 400930c:	e0bfff17 	ldw	r2,-4(fp)
 4009310:	00c00084 	movi	r3,2
 4009314:	10c00005 	stb	r3,0(r2)
        return;
 4009318:	00005d06 	br	4009490 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 400931c:	d0a6f603 	ldbu	r2,-25640(gp)
 4009320:	10803fcc 	andi	r2,r2,255
 4009324:	10000426 	beq	r2,zero,4009338 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4009328:	e0bfff17 	ldw	r2,-4(fp)
 400932c:	00c00344 	movi	r3,13
 4009330:	10c00005 	stb	r3,0(r2)
        return;
 4009334:	00005606 	br	4009490 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009338:	0005303a 	rdctl	r2,status
 400933c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009340:	e0fffc17 	ldw	r3,-16(fp)
 4009344:	00bfff84 	movi	r2,-2
 4009348:	1884703a 	and	r2,r3,r2
 400934c:	1001703a 	wrctl	status,r2
  
  return context;
 4009350:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4009354:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4009358:	e0bffd17 	ldw	r2,-12(fp)
 400935c:	1080020b 	ldhu	r2,8(r2)
 4009360:	10bfffcc 	andi	r2,r2,65535
 4009364:	10000d26 	beq	r2,zero,400939c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4009368:	e0bffd17 	ldw	r2,-12(fp)
 400936c:	1080020b 	ldhu	r2,8(r2)
 4009370:	10bfffc4 	addi	r2,r2,-1
 4009374:	1007883a 	mov	r3,r2
 4009378:	e0bffd17 	ldw	r2,-12(fp)
 400937c:	10c0020d 	sth	r3,8(r2)
 4009380:	e0bff717 	ldw	r2,-36(fp)
 4009384:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009388:	e0bff817 	ldw	r2,-32(fp)
 400938c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4009390:	e0bfff17 	ldw	r2,-4(fp)
 4009394:	10000005 	stb	zero,0(r2)
        return;
 4009398:	00003d06 	br	4009490 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 400939c:	d0a70517 	ldw	r2,-25580(gp)
 40093a0:	d0e70517 	ldw	r3,-25580(gp)
 40093a4:	18c00c03 	ldbu	r3,48(r3)
 40093a8:	18c00054 	ori	r3,r3,1
 40093ac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40093b0:	d0a70517 	ldw	r2,-25580(gp)
 40093b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 40093b8:	d0a70517 	ldw	r2,-25580(gp)
 40093bc:	e0fffe0b 	ldhu	r3,-8(fp)
 40093c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 40093c4:	e13ffd17 	ldw	r4,-12(fp)
 40093c8:	4004e4c0 	call	4004e4c <OS_EventTaskWait>
 40093cc:	e0bff717 	ldw	r2,-36(fp)
 40093d0:	e0bffb15 	stw	r2,-20(fp)
 40093d4:	e0bffb17 	ldw	r2,-20(fp)
 40093d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 40093dc:	40057000 	call	4005700 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40093e0:	0005303a 	rdctl	r2,status
 40093e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40093e8:	e0fff917 	ldw	r3,-28(fp)
 40093ec:	00bfff84 	movi	r2,-2
 40093f0:	1884703a 	and	r2,r3,r2
 40093f4:	1001703a 	wrctl	status,r2
  
  return context;
 40093f8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 40093fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4009400:	d0a70517 	ldw	r2,-25580(gp)
 4009404:	10800c43 	ldbu	r2,49(r2)
 4009408:	10803fcc 	andi	r2,r2,255
 400940c:	10000326 	beq	r2,zero,400941c <OSSemPend+0x184>
 4009410:	108000a0 	cmpeqi	r2,r2,2
 4009414:	1000041e 	bne	r2,zero,4009428 <OSSemPend+0x190>
 4009418:	00000706 	br	4009438 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 400941c:	e0bfff17 	ldw	r2,-4(fp)
 4009420:	10000005 	stb	zero,0(r2)
             break;
 4009424:	00000c06 	br	4009458 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4009428:	e0bfff17 	ldw	r2,-4(fp)
 400942c:	00c00384 	movi	r3,14
 4009430:	10c00005 	stb	r3,0(r2)
             break;
 4009434:	00000806 	br	4009458 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4009438:	d0a70517 	ldw	r2,-25580(gp)
 400943c:	e17ffd17 	ldw	r5,-12(fp)
 4009440:	1009883a 	mov	r4,r2
 4009444:	40050ac0 	call	40050ac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4009448:	e0bfff17 	ldw	r2,-4(fp)
 400944c:	00c00284 	movi	r3,10
 4009450:	10c00005 	stb	r3,0(r2)
             break;
 4009454:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4009458:	d0a70517 	ldw	r2,-25580(gp)
 400945c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4009460:	d0a70517 	ldw	r2,-25580(gp)
 4009464:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4009468:	d0a70517 	ldw	r2,-25580(gp)
 400946c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4009470:	d0a70517 	ldw	r2,-25580(gp)
 4009474:	10000815 	stw	zero,32(r2)
 4009478:	e0bff717 	ldw	r2,-36(fp)
 400947c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009480:	e0bffa17 	ldw	r2,-24(fp)
 4009484:	1001703a 	wrctl	status,r2
 4009488:	00000106 	br	4009490 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 400948c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 4009490:	e037883a 	mov	sp,fp
 4009494:	dfc00117 	ldw	ra,4(sp)
 4009498:	df000017 	ldw	fp,0(sp)
 400949c:	dec00204 	addi	sp,sp,8
 40094a0:	f800283a 	ret

040094a4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40094a4:	defff604 	addi	sp,sp,-40
 40094a8:	dfc00915 	stw	ra,36(sp)
 40094ac:	df000815 	stw	fp,32(sp)
 40094b0:	df000804 	addi	fp,sp,32
 40094b4:	e13ffd15 	stw	r4,-12(fp)
 40094b8:	2805883a 	mov	r2,r5
 40094bc:	e1bfff15 	stw	r6,-4(fp)
 40094c0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40094c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40094c8:	e0bfff17 	ldw	r2,-4(fp)
 40094cc:	1000021e 	bne	r2,zero,40094d8 <OSSemPendAbort+0x34>
        return (0);
 40094d0:	0005883a 	mov	r2,zero
 40094d4:	00004906 	br	40095fc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40094d8:	e0bffd17 	ldw	r2,-12(fp)
 40094dc:	1000051e 	bne	r2,zero,40094f4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40094e0:	e0bfff17 	ldw	r2,-4(fp)
 40094e4:	00c00104 	movi	r3,4
 40094e8:	10c00005 	stb	r3,0(r2)
        return (0);
 40094ec:	0005883a 	mov	r2,zero
 40094f0:	00004206 	br	40095fc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40094f4:	e0bffd17 	ldw	r2,-12(fp)
 40094f8:	10800003 	ldbu	r2,0(r2)
 40094fc:	10803fcc 	andi	r2,r2,255
 4009500:	108000e0 	cmpeqi	r2,r2,3
 4009504:	1000051e 	bne	r2,zero,400951c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4009508:	e0bfff17 	ldw	r2,-4(fp)
 400950c:	00c00044 	movi	r3,1
 4009510:	10c00005 	stb	r3,0(r2)
        return (0);
 4009514:	0005883a 	mov	r2,zero
 4009518:	00003806 	br	40095fc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400951c:	0005303a 	rdctl	r2,status
 4009520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009524:	e0fffc17 	ldw	r3,-16(fp)
 4009528:	00bfff84 	movi	r2,-2
 400952c:	1884703a 	and	r2,r3,r2
 4009530:	1001703a 	wrctl	status,r2
  
  return context;
 4009534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4009538:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 400953c:	e0bffd17 	ldw	r2,-12(fp)
 4009540:	10800283 	ldbu	r2,10(r2)
 4009544:	10803fcc 	andi	r2,r2,255
 4009548:	10002526 	beq	r2,zero,40095e0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 400954c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4009550:	e0bffe03 	ldbu	r2,-8(fp)
 4009554:	10800060 	cmpeqi	r2,r2,1
 4009558:	10000e26 	beq	r2,zero,4009594 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 400955c:	00000806 	br	4009580 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4009560:	01c00084 	movi	r7,2
 4009564:	01800044 	movi	r6,1
 4009568:	000b883a 	mov	r5,zero
 400956c:	e13ffd17 	ldw	r4,-12(fp)
 4009570:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                     nbr_tasks++;
 4009574:	e0bff803 	ldbu	r2,-32(fp)
 4009578:	10800044 	addi	r2,r2,1
 400957c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4009580:	e0bffd17 	ldw	r2,-12(fp)
 4009584:	10800283 	ldbu	r2,10(r2)
 4009588:	10803fcc 	andi	r2,r2,255
 400958c:	103ff41e 	bne	r2,zero,4009560 <__alt_mem_onchip_memory2_0+0xfc007560>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4009590:	00000906 	br	40095b8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4009594:	01c00084 	movi	r7,2
 4009598:	01800044 	movi	r6,1
 400959c:	000b883a 	mov	r5,zero
 40095a0:	e13ffd17 	ldw	r4,-12(fp)
 40095a4:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
                 nbr_tasks++;
 40095a8:	e0bff803 	ldbu	r2,-32(fp)
 40095ac:	10800044 	addi	r2,r2,1
 40095b0:	e0bff805 	stb	r2,-32(fp)
                 break;
 40095b4:	0001883a 	nop
 40095b8:	e0bff917 	ldw	r2,-28(fp)
 40095bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40095c0:	e0bffa17 	ldw	r2,-24(fp)
 40095c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 40095c8:	40057000 	call	4005700 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40095cc:	e0bfff17 	ldw	r2,-4(fp)
 40095d0:	00c00384 	movi	r3,14
 40095d4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40095d8:	e0bff803 	ldbu	r2,-32(fp)
 40095dc:	00000706 	br	40095fc <OSSemPendAbort+0x158>
 40095e0:	e0bff917 	ldw	r2,-28(fp)
 40095e4:	e0bffb15 	stw	r2,-20(fp)
 40095e8:	e0bffb17 	ldw	r2,-20(fp)
 40095ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40095f0:	e0bfff17 	ldw	r2,-4(fp)
 40095f4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 40095f8:	0005883a 	mov	r2,zero
}
 40095fc:	e037883a 	mov	sp,fp
 4009600:	dfc00117 	ldw	ra,4(sp)
 4009604:	df000017 	ldw	fp,0(sp)
 4009608:	dec00204 	addi	sp,sp,8
 400960c:	f800283a 	ret

04009610 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4009610:	defff804 	addi	sp,sp,-32
 4009614:	dfc00715 	stw	ra,28(sp)
 4009618:	df000615 	stw	fp,24(sp)
 400961c:	df000604 	addi	fp,sp,24
 4009620:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4009624:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4009628:	e0bfff17 	ldw	r2,-4(fp)
 400962c:	1000021e 	bne	r2,zero,4009638 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 4009630:	00800104 	movi	r2,4
 4009634:	00003506 	br	400970c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009638:	e0bfff17 	ldw	r2,-4(fp)
 400963c:	10800003 	ldbu	r2,0(r2)
 4009640:	10803fcc 	andi	r2,r2,255
 4009644:	108000e0 	cmpeqi	r2,r2,3
 4009648:	1000021e 	bne	r2,zero,4009654 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 400964c:	00800044 	movi	r2,1
 4009650:	00002e06 	br	400970c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009654:	0005303a 	rdctl	r2,status
 4009658:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400965c:	e0fffe17 	ldw	r3,-8(fp)
 4009660:	00bfff84 	movi	r2,-2
 4009664:	1884703a 	and	r2,r3,r2
 4009668:	1001703a 	wrctl	status,r2
  
  return context;
 400966c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4009670:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4009674:	e0bfff17 	ldw	r2,-4(fp)
 4009678:	10800283 	ldbu	r2,10(r2)
 400967c:	10803fcc 	andi	r2,r2,255
 4009680:	10000c26 	beq	r2,zero,40096b4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4009684:	000f883a 	mov	r7,zero
 4009688:	01800044 	movi	r6,1
 400968c:	000b883a 	mov	r5,zero
 4009690:	e13fff17 	ldw	r4,-4(fp)
 4009694:	4004cb40 	call	4004cb4 <OS_EventTaskRdy>
 4009698:	e0bffa17 	ldw	r2,-24(fp)
 400969c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40096a0:	e0bffb17 	ldw	r2,-20(fp)
 40096a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 40096a8:	40057000 	call	4005700 <OS_Sched>
        return (OS_ERR_NONE);
 40096ac:	0005883a 	mov	r2,zero
 40096b0:	00001606 	br	400970c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 40096b4:	e0bfff17 	ldw	r2,-4(fp)
 40096b8:	1080020b 	ldhu	r2,8(r2)
 40096bc:	10ffffcc 	andi	r3,r2,65535
 40096c0:	00bfffd4 	movui	r2,65535
 40096c4:	18800c26 	beq	r3,r2,40096f8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 40096c8:	e0bfff17 	ldw	r2,-4(fp)
 40096cc:	1080020b 	ldhu	r2,8(r2)
 40096d0:	10800044 	addi	r2,r2,1
 40096d4:	1007883a 	mov	r3,r2
 40096d8:	e0bfff17 	ldw	r2,-4(fp)
 40096dc:	10c0020d 	sth	r3,8(r2)
 40096e0:	e0bffa17 	ldw	r2,-24(fp)
 40096e4:	e0bffc15 	stw	r2,-16(fp)
 40096e8:	e0bffc17 	ldw	r2,-16(fp)
 40096ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 40096f0:	0005883a 	mov	r2,zero
 40096f4:	00000506 	br	400970c <OSSemPost+0xfc>
 40096f8:	e0bffa17 	ldw	r2,-24(fp)
 40096fc:	e0bffd15 	stw	r2,-12(fp)
 4009700:	e0bffd17 	ldw	r2,-12(fp)
 4009704:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4009708:	00800c84 	movi	r2,50
}
 400970c:	e037883a 	mov	sp,fp
 4009710:	dfc00117 	ldw	ra,4(sp)
 4009714:	df000017 	ldw	fp,0(sp)
 4009718:	dec00204 	addi	sp,sp,8
 400971c:	f800283a 	ret

04009720 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4009720:	defff704 	addi	sp,sp,-36
 4009724:	df000815 	stw	fp,32(sp)
 4009728:	df000804 	addi	fp,sp,32
 400972c:	e13ffe15 	stw	r4,-8(fp)
 4009730:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4009734:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4009738:	e0bffe17 	ldw	r2,-8(fp)
 400973c:	1000021e 	bne	r2,zero,4009748 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4009740:	00800104 	movi	r2,4
 4009744:	00003606 	br	4009820 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4009748:	e0bfff17 	ldw	r2,-4(fp)
 400974c:	1000021e 	bne	r2,zero,4009758 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4009750:	00800244 	movi	r2,9
 4009754:	00003206 	br	4009820 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4009758:	e0bffe17 	ldw	r2,-8(fp)
 400975c:	10800003 	ldbu	r2,0(r2)
 4009760:	10803fcc 	andi	r2,r2,255
 4009764:	108000e0 	cmpeqi	r2,r2,3
 4009768:	1000021e 	bne	r2,zero,4009774 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 400976c:	00800044 	movi	r2,1
 4009770:	00002b06 	br	4009820 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009774:	0005303a 	rdctl	r2,status
 4009778:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400977c:	e0fffd17 	ldw	r3,-12(fp)
 4009780:	00bfff84 	movi	r2,-2
 4009784:	1884703a 	and	r2,r3,r2
 4009788:	1001703a 	wrctl	status,r2
  
  return context;
 400978c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4009790:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4009794:	e0bffe17 	ldw	r2,-8(fp)
 4009798:	10c00283 	ldbu	r3,10(r2)
 400979c:	e0bfff17 	ldw	r2,-4(fp)
 40097a0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 40097a4:	e0bffe17 	ldw	r2,-8(fp)
 40097a8:	108002c4 	addi	r2,r2,11
 40097ac:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 40097b0:	e0bfff17 	ldw	r2,-4(fp)
 40097b4:	10800084 	addi	r2,r2,2
 40097b8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40097bc:	e03ffa05 	stb	zero,-24(fp)
 40097c0:	00000b06 	br	40097f0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 40097c4:	e0bff917 	ldw	r2,-28(fp)
 40097c8:	10c00044 	addi	r3,r2,1
 40097cc:	e0fff915 	stw	r3,-28(fp)
 40097d0:	e0fff817 	ldw	r3,-32(fp)
 40097d4:	19000044 	addi	r4,r3,1
 40097d8:	e13ff815 	stw	r4,-32(fp)
 40097dc:	18c00003 	ldbu	r3,0(r3)
 40097e0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40097e4:	e0bffa03 	ldbu	r2,-24(fp)
 40097e8:	10800044 	addi	r2,r2,1
 40097ec:	e0bffa05 	stb	r2,-24(fp)
 40097f0:	e0bffa03 	ldbu	r2,-24(fp)
 40097f4:	108000f0 	cmpltui	r2,r2,3
 40097f8:	103ff21e 	bne	r2,zero,40097c4 <__alt_mem_onchip_memory2_0+0xfc0077c4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 40097fc:	e0bffe17 	ldw	r2,-8(fp)
 4009800:	10c0020b 	ldhu	r3,8(r2)
 4009804:	e0bfff17 	ldw	r2,-4(fp)
 4009808:	10c0000d 	sth	r3,0(r2)
 400980c:	e0bffb17 	ldw	r2,-20(fp)
 4009810:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009814:	e0bffc17 	ldw	r2,-16(fp)
 4009818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400981c:	0005883a 	mov	r2,zero
}
 4009820:	e037883a 	mov	sp,fp
 4009824:	df000017 	ldw	fp,0(sp)
 4009828:	dec00104 	addi	sp,sp,4
 400982c:	f800283a 	ret

04009830 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 4009830:	defff904 	addi	sp,sp,-28
 4009834:	df000615 	stw	fp,24(sp)
 4009838:	df000604 	addi	fp,sp,24
 400983c:	e13ffd15 	stw	r4,-12(fp)
 4009840:	2805883a 	mov	r2,r5
 4009844:	e1bfff15 	stw	r6,-4(fp)
 4009848:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400984c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4009850:	e0bfff17 	ldw	r2,-4(fp)
 4009854:	10003126 	beq	r2,zero,400991c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4009858:	e0bffd17 	ldw	r2,-12(fp)
 400985c:	1000041e 	bne	r2,zero,4009870 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 4009860:	e0bfff17 	ldw	r2,-4(fp)
 4009864:	00c00104 	movi	r3,4
 4009868:	10c00005 	stb	r3,0(r2)
        return;
 400986c:	00002c06 	br	4009920 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4009870:	e0bffd17 	ldw	r2,-12(fp)
 4009874:	10800003 	ldbu	r2,0(r2)
 4009878:	10803fcc 	andi	r2,r2,255
 400987c:	108000e0 	cmpeqi	r2,r2,3
 4009880:	1000041e 	bne	r2,zero,4009894 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 4009884:	e0bfff17 	ldw	r2,-4(fp)
 4009888:	00c00044 	movi	r3,1
 400988c:	10c00005 	stb	r3,0(r2)
        return;
 4009890:	00002306 	br	4009920 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009894:	0005303a 	rdctl	r2,status
 4009898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400989c:	e0fffc17 	ldw	r3,-16(fp)
 40098a0:	00bfff84 	movi	r2,-2
 40098a4:	1884703a 	and	r2,r3,r2
 40098a8:	1001703a 	wrctl	status,r2
  
  return context;
 40098ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40098b0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 40098b4:	e0bfff17 	ldw	r2,-4(fp)
 40098b8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 40098bc:	e0bffd17 	ldw	r2,-12(fp)
 40098c0:	1080020b 	ldhu	r2,8(r2)
 40098c4:	10bfffcc 	andi	r2,r2,65535
 40098c8:	10000426 	beq	r2,zero,40098dc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 40098cc:	e0bffd17 	ldw	r2,-12(fp)
 40098d0:	e0fffe0b 	ldhu	r3,-8(fp)
 40098d4:	10c0020d 	sth	r3,8(r2)
 40098d8:	00000b06 	br	4009908 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 40098dc:	e0bffd17 	ldw	r2,-12(fp)
 40098e0:	10800283 	ldbu	r2,10(r2)
 40098e4:	10803fcc 	andi	r2,r2,255
 40098e8:	1000041e 	bne	r2,zero,40098fc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 40098ec:	e0bffd17 	ldw	r2,-12(fp)
 40098f0:	e0fffe0b 	ldhu	r3,-8(fp)
 40098f4:	10c0020d 	sth	r3,8(r2)
 40098f8:	00000306 	br	4009908 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 40098fc:	e0bfff17 	ldw	r2,-4(fp)
 4009900:	00c01244 	movi	r3,73
 4009904:	10c00005 	stb	r3,0(r2)
 4009908:	e0bffa17 	ldw	r2,-24(fp)
 400990c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009910:	e0bffb17 	ldw	r2,-20(fp)
 4009914:	1001703a 	wrctl	status,r2
 4009918:	00000106 	br	4009920 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 400991c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 4009920:	e037883a 	mov	sp,fp
 4009924:	df000017 	ldw	fp,0(sp)
 4009928:	dec00104 	addi	sp,sp,4
 400992c:	f800283a 	ret

04009930 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 4009930:	defff104 	addi	sp,sp,-60
 4009934:	dfc00e15 	stw	ra,56(sp)
 4009938:	df000d15 	stw	fp,52(sp)
 400993c:	df000d04 	addi	fp,sp,52
 4009940:	2007883a 	mov	r3,r4
 4009944:	2805883a 	mov	r2,r5
 4009948:	e0fffe05 	stb	r3,-8(fp)
 400994c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 4009950:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4009954:	e0bffe03 	ldbu	r2,-8(fp)
 4009958:	10800530 	cmpltui	r2,r2,20
 400995c:	1000051e 	bne	r2,zero,4009974 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 4009960:	e0bffe03 	ldbu	r2,-8(fp)
 4009964:	10803fe0 	cmpeqi	r2,r2,255
 4009968:	1000021e 	bne	r2,zero,4009974 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 400996c:	00800a84 	movi	r2,42
 4009970:	00012606 	br	4009e0c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4009974:	e0bfff03 	ldbu	r2,-4(fp)
 4009978:	10800530 	cmpltui	r2,r2,20
 400997c:	1000021e 	bne	r2,zero,4009988 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 4009980:	00800a84 	movi	r2,42
 4009984:	00012106 	br	4009e0c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009988:	0005303a 	rdctl	r2,status
 400998c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009990:	e0fffd17 	ldw	r3,-12(fp)
 4009994:	00bfff84 	movi	r2,-2
 4009998:	1884703a 	and	r2,r3,r2
 400999c:	1001703a 	wrctl	status,r2
  
  return context;
 40099a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40099a4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 40099a8:	e0ffff03 	ldbu	r3,-4(fp)
 40099ac:	008100b4 	movhi	r2,1026
 40099b0:	10a10c04 	addi	r2,r2,-31696
 40099b4:	18c7883a 	add	r3,r3,r3
 40099b8:	18c7883a 	add	r3,r3,r3
 40099bc:	10c5883a 	add	r2,r2,r3
 40099c0:	10800017 	ldw	r2,0(r2)
 40099c4:	10000626 	beq	r2,zero,40099e0 <OSTaskChangePrio+0xb0>
 40099c8:	e0bff517 	ldw	r2,-44(fp)
 40099cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40099d0:	e0bff617 	ldw	r2,-40(fp)
 40099d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 40099d8:	00800a04 	movi	r2,40
 40099dc:	00010b06 	br	4009e0c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 40099e0:	e0bffe03 	ldbu	r2,-8(fp)
 40099e4:	10803fd8 	cmpnei	r2,r2,255
 40099e8:	1000031e 	bne	r2,zero,40099f8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 40099ec:	d0a70517 	ldw	r2,-25580(gp)
 40099f0:	10800c83 	ldbu	r2,50(r2)
 40099f4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 40099f8:	e0fffe03 	ldbu	r3,-8(fp)
 40099fc:	008100b4 	movhi	r2,1026
 4009a00:	10a10c04 	addi	r2,r2,-31696
 4009a04:	18c7883a 	add	r3,r3,r3
 4009a08:	18c7883a 	add	r3,r3,r3
 4009a0c:	10c5883a 	add	r2,r2,r3
 4009a10:	10800017 	ldw	r2,0(r2)
 4009a14:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 4009a18:	e0bff817 	ldw	r2,-32(fp)
 4009a1c:	1000061e 	bne	r2,zero,4009a38 <OSTaskChangePrio+0x108>
 4009a20:	e0bff517 	ldw	r2,-44(fp)
 4009a24:	e0bff715 	stw	r2,-36(fp)
 4009a28:	e0bff717 	ldw	r2,-36(fp)
 4009a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4009a30:	00800a44 	movi	r2,41
 4009a34:	0000f506 	br	4009e0c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4009a38:	e0bff817 	ldw	r2,-32(fp)
 4009a3c:	10800058 	cmpnei	r2,r2,1
 4009a40:	1000061e 	bne	r2,zero,4009a5c <OSTaskChangePrio+0x12c>
 4009a44:	e0bff517 	ldw	r2,-44(fp)
 4009a48:	e0bff915 	stw	r2,-28(fp)
 4009a4c:	e0bff917 	ldw	r2,-28(fp)
 4009a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4009a54:	008010c4 	movi	r2,67
 4009a58:	0000ec06 	br	4009e0c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 4009a5c:	e0bfff03 	ldbu	r2,-4(fp)
 4009a60:	1004d0fa 	srli	r2,r2,3
 4009a64:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4009a68:	e0bfff03 	ldbu	r2,-4(fp)
 4009a6c:	108001cc 	andi	r2,r2,7
 4009a70:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 4009a74:	e0bffb03 	ldbu	r2,-20(fp)
 4009a78:	00c00044 	movi	r3,1
 4009a7c:	1884983a 	sll	r2,r3,r2
 4009a80:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 4009a84:	e0bffb43 	ldbu	r2,-19(fp)
 4009a88:	00c00044 	movi	r3,1
 4009a8c:	1884983a 	sll	r2,r3,r2
 4009a90:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 4009a94:	e0fffe03 	ldbu	r3,-8(fp)
 4009a98:	008100b4 	movhi	r2,1026
 4009a9c:	10a10c04 	addi	r2,r2,-31696
 4009aa0:	18c7883a 	add	r3,r3,r3
 4009aa4:	18c7883a 	add	r3,r3,r3
 4009aa8:	10c5883a 	add	r2,r2,r3
 4009aac:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 4009ab0:	e0ffff03 	ldbu	r3,-4(fp)
 4009ab4:	008100b4 	movhi	r2,1026
 4009ab8:	10a10c04 	addi	r2,r2,-31696
 4009abc:	18c7883a 	add	r3,r3,r3
 4009ac0:	18c7883a 	add	r3,r3,r3
 4009ac4:	10c5883a 	add	r2,r2,r3
 4009ac8:	e0fff817 	ldw	r3,-32(fp)
 4009acc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 4009ad0:	e0bff817 	ldw	r2,-32(fp)
 4009ad4:	10800d03 	ldbu	r2,52(r2)
 4009ad8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 4009adc:	e0bff817 	ldw	r2,-32(fp)
 4009ae0:	10800d83 	ldbu	r2,54(r2)
 4009ae4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4009ae8:	e0bff817 	ldw	r2,-32(fp)
 4009aec:	10800d43 	ldbu	r2,53(r2)
 4009af0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4009af4:	e0fffc03 	ldbu	r3,-16(fp)
 4009af8:	d0a70244 	addi	r2,gp,-25591
 4009afc:	1885883a 	add	r2,r3,r2
 4009b00:	10c00003 	ldbu	r3,0(r2)
 4009b04:	e0bffc83 	ldbu	r2,-14(fp)
 4009b08:	1884703a 	and	r2,r3,r2
 4009b0c:	10803fcc 	andi	r2,r2,255
 4009b10:	10002826 	beq	r2,zero,4009bb4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 4009b14:	e0fffc03 	ldbu	r3,-16(fp)
 4009b18:	e13ffc03 	ldbu	r4,-16(fp)
 4009b1c:	d0a70244 	addi	r2,gp,-25591
 4009b20:	2085883a 	add	r2,r4,r2
 4009b24:	10800003 	ldbu	r2,0(r2)
 4009b28:	1009883a 	mov	r4,r2
 4009b2c:	e0bffc83 	ldbu	r2,-14(fp)
 4009b30:	0084303a 	nor	r2,zero,r2
 4009b34:	2084703a 	and	r2,r4,r2
 4009b38:	1009883a 	mov	r4,r2
 4009b3c:	d0a70244 	addi	r2,gp,-25591
 4009b40:	1885883a 	add	r2,r3,r2
 4009b44:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4009b48:	e0fffc03 	ldbu	r3,-16(fp)
 4009b4c:	d0a70244 	addi	r2,gp,-25591
 4009b50:	1885883a 	add	r2,r3,r2
 4009b54:	10800003 	ldbu	r2,0(r2)
 4009b58:	10803fcc 	andi	r2,r2,255
 4009b5c:	1000061e 	bne	r2,zero,4009b78 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 4009b60:	e0bffc43 	ldbu	r2,-15(fp)
 4009b64:	0084303a 	nor	r2,zero,r2
 4009b68:	1007883a 	mov	r3,r2
 4009b6c:	d0a70203 	ldbu	r2,-25592(gp)
 4009b70:	1884703a 	and	r2,r3,r2
 4009b74:	d0a70205 	stb	r2,-25592(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4009b78:	d0e70203 	ldbu	r3,-25592(gp)
 4009b7c:	e0bffb83 	ldbu	r2,-18(fp)
 4009b80:	1884b03a 	or	r2,r3,r2
 4009b84:	d0a70205 	stb	r2,-25592(gp)
         OSRdyTbl[y_new] |= bitx_new;
 4009b88:	e0fffb03 	ldbu	r3,-20(fp)
 4009b8c:	e13ffb03 	ldbu	r4,-20(fp)
 4009b90:	d0a70244 	addi	r2,gp,-25591
 4009b94:	2085883a 	add	r2,r4,r2
 4009b98:	11000003 	ldbu	r4,0(r2)
 4009b9c:	e0bffbc3 	ldbu	r2,-17(fp)
 4009ba0:	2084b03a 	or	r2,r4,r2
 4009ba4:	1009883a 	mov	r4,r2
 4009ba8:	d0a70244 	addi	r2,gp,-25591
 4009bac:	1885883a 	add	r2,r3,r2
 4009bb0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 4009bb4:	e0bff817 	ldw	r2,-32(fp)
 4009bb8:	10800717 	ldw	r2,28(r2)
 4009bbc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 4009bc0:	e0bff317 	ldw	r2,-52(fp)
 4009bc4:	10003326 	beq	r2,zero,4009c94 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4009bc8:	e0bffc03 	ldbu	r2,-16(fp)
 4009bcc:	e0fffc03 	ldbu	r3,-16(fp)
 4009bd0:	e13ff317 	ldw	r4,-52(fp)
 4009bd4:	20c7883a 	add	r3,r4,r3
 4009bd8:	18c002c4 	addi	r3,r3,11
 4009bdc:	18c00003 	ldbu	r3,0(r3)
 4009be0:	1809883a 	mov	r4,r3
 4009be4:	e0fffc83 	ldbu	r3,-14(fp)
 4009be8:	00c6303a 	nor	r3,zero,r3
 4009bec:	20c6703a 	and	r3,r4,r3
 4009bf0:	1809883a 	mov	r4,r3
 4009bf4:	e0fff317 	ldw	r3,-52(fp)
 4009bf8:	1885883a 	add	r2,r3,r2
 4009bfc:	108002c4 	addi	r2,r2,11
 4009c00:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4009c04:	e0bffc03 	ldbu	r2,-16(fp)
 4009c08:	e0fff317 	ldw	r3,-52(fp)
 4009c0c:	1885883a 	add	r2,r3,r2
 4009c10:	108002c4 	addi	r2,r2,11
 4009c14:	10800003 	ldbu	r2,0(r2)
 4009c18:	10803fcc 	andi	r2,r2,255
 4009c1c:	1000091e 	bne	r2,zero,4009c44 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 4009c20:	e0bff317 	ldw	r2,-52(fp)
 4009c24:	10800283 	ldbu	r2,10(r2)
 4009c28:	1007883a 	mov	r3,r2
 4009c2c:	e0bffc43 	ldbu	r2,-15(fp)
 4009c30:	0084303a 	nor	r2,zero,r2
 4009c34:	1884703a 	and	r2,r3,r2
 4009c38:	1007883a 	mov	r3,r2
 4009c3c:	e0bff317 	ldw	r2,-52(fp)
 4009c40:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 4009c44:	e0bff317 	ldw	r2,-52(fp)
 4009c48:	10c00283 	ldbu	r3,10(r2)
 4009c4c:	e0bffb83 	ldbu	r2,-18(fp)
 4009c50:	1884b03a 	or	r2,r3,r2
 4009c54:	1007883a 	mov	r3,r2
 4009c58:	e0bff317 	ldw	r2,-52(fp)
 4009c5c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 4009c60:	e0bffb03 	ldbu	r2,-20(fp)
 4009c64:	e0fffb03 	ldbu	r3,-20(fp)
 4009c68:	e13ff317 	ldw	r4,-52(fp)
 4009c6c:	20c7883a 	add	r3,r4,r3
 4009c70:	18c002c4 	addi	r3,r3,11
 4009c74:	19000003 	ldbu	r4,0(r3)
 4009c78:	e0fffbc3 	ldbu	r3,-17(fp)
 4009c7c:	20c6b03a 	or	r3,r4,r3
 4009c80:	1809883a 	mov	r4,r3
 4009c84:	e0fff317 	ldw	r3,-52(fp)
 4009c88:	1885883a 	add	r2,r3,r2
 4009c8c:	108002c4 	addi	r2,r2,11
 4009c90:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4009c94:	e0bff817 	ldw	r2,-32(fp)
 4009c98:	10800817 	ldw	r2,32(r2)
 4009c9c:	10004226 	beq	r2,zero,4009da8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4009ca0:	e0bff817 	ldw	r2,-32(fp)
 4009ca4:	10800817 	ldw	r2,32(r2)
 4009ca8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 4009cac:	e0bff417 	ldw	r2,-48(fp)
 4009cb0:	10800017 	ldw	r2,0(r2)
 4009cb4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 4009cb8:	00003906 	br	4009da0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4009cbc:	e0bffc03 	ldbu	r2,-16(fp)
 4009cc0:	e0fffc03 	ldbu	r3,-16(fp)
 4009cc4:	e13ff317 	ldw	r4,-52(fp)
 4009cc8:	20c7883a 	add	r3,r4,r3
 4009ccc:	18c002c4 	addi	r3,r3,11
 4009cd0:	18c00003 	ldbu	r3,0(r3)
 4009cd4:	1809883a 	mov	r4,r3
 4009cd8:	e0fffc83 	ldbu	r3,-14(fp)
 4009cdc:	00c6303a 	nor	r3,zero,r3
 4009ce0:	20c6703a 	and	r3,r4,r3
 4009ce4:	1809883a 	mov	r4,r3
 4009ce8:	e0fff317 	ldw	r3,-52(fp)
 4009cec:	1885883a 	add	r2,r3,r2
 4009cf0:	108002c4 	addi	r2,r2,11
 4009cf4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 4009cf8:	e0bffc03 	ldbu	r2,-16(fp)
 4009cfc:	e0fff317 	ldw	r3,-52(fp)
 4009d00:	1885883a 	add	r2,r3,r2
 4009d04:	108002c4 	addi	r2,r2,11
 4009d08:	10800003 	ldbu	r2,0(r2)
 4009d0c:	10803fcc 	andi	r2,r2,255
 4009d10:	1000091e 	bne	r2,zero,4009d38 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 4009d14:	e0bff317 	ldw	r2,-52(fp)
 4009d18:	10800283 	ldbu	r2,10(r2)
 4009d1c:	1007883a 	mov	r3,r2
 4009d20:	e0bffc43 	ldbu	r2,-15(fp)
 4009d24:	0084303a 	nor	r2,zero,r2
 4009d28:	1884703a 	and	r2,r3,r2
 4009d2c:	1007883a 	mov	r3,r2
 4009d30:	e0bff317 	ldw	r2,-52(fp)
 4009d34:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4009d38:	e0bff317 	ldw	r2,-52(fp)
 4009d3c:	10c00283 	ldbu	r3,10(r2)
 4009d40:	e0bffb83 	ldbu	r2,-18(fp)
 4009d44:	1884b03a 	or	r2,r3,r2
 4009d48:	1007883a 	mov	r3,r2
 4009d4c:	e0bff317 	ldw	r2,-52(fp)
 4009d50:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4009d54:	e0bffb03 	ldbu	r2,-20(fp)
 4009d58:	e0fffb03 	ldbu	r3,-20(fp)
 4009d5c:	e13ff317 	ldw	r4,-52(fp)
 4009d60:	20c7883a 	add	r3,r4,r3
 4009d64:	18c002c4 	addi	r3,r3,11
 4009d68:	19000003 	ldbu	r4,0(r3)
 4009d6c:	e0fffbc3 	ldbu	r3,-17(fp)
 4009d70:	20c6b03a 	or	r3,r4,r3
 4009d74:	1809883a 	mov	r4,r3
 4009d78:	e0fff317 	ldw	r3,-52(fp)
 4009d7c:	1885883a 	add	r2,r3,r2
 4009d80:	108002c4 	addi	r2,r2,11
 4009d84:	11000005 	stb	r4,0(r2)
            pevents++;
 4009d88:	e0bff417 	ldw	r2,-48(fp)
 4009d8c:	10800104 	addi	r2,r2,4
 4009d90:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 4009d94:	e0bff417 	ldw	r2,-48(fp)
 4009d98:	10800017 	ldw	r2,0(r2)
 4009d9c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4009da0:	e0bff317 	ldw	r2,-52(fp)
 4009da4:	103fc51e 	bne	r2,zero,4009cbc <__alt_mem_onchip_memory2_0+0xfc007cbc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4009da8:	e0bff817 	ldw	r2,-32(fp)
 4009dac:	e0ffff03 	ldbu	r3,-4(fp)
 4009db0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 4009db4:	e0bff817 	ldw	r2,-32(fp)
 4009db8:	e0fffb03 	ldbu	r3,-20(fp)
 4009dbc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 4009dc0:	e0bff817 	ldw	r2,-32(fp)
 4009dc4:	e0fffb43 	ldbu	r3,-19(fp)
 4009dc8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 4009dcc:	e0bff817 	ldw	r2,-32(fp)
 4009dd0:	e0fffb83 	ldbu	r3,-18(fp)
 4009dd4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 4009dd8:	e0bff817 	ldw	r2,-32(fp)
 4009ddc:	e0fffbc3 	ldbu	r3,-17(fp)
 4009de0:	10c00d45 	stb	r3,53(r2)
 4009de4:	e0bff517 	ldw	r2,-44(fp)
 4009de8:	e0bffa15 	stw	r2,-24(fp)
 4009dec:	e0bffa17 	ldw	r2,-24(fp)
 4009df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4009df4:	d0a6f643 	ldbu	r2,-25639(gp)
 4009df8:	10803fcc 	andi	r2,r2,255
 4009dfc:	10800058 	cmpnei	r2,r2,1
 4009e00:	1000011e 	bne	r2,zero,4009e08 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 4009e04:	40057000 	call	4005700 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4009e08:	0005883a 	mov	r2,zero
}
 4009e0c:	e037883a 	mov	sp,fp
 4009e10:	dfc00117 	ldw	ra,4(sp)
 4009e14:	df000017 	ldw	fp,0(sp)
 4009e18:	dec00204 	addi	sp,sp,8
 4009e1c:	f800283a 	ret

04009e20 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 4009e20:	deffee04 	addi	sp,sp,-72
 4009e24:	dfc01115 	stw	ra,68(sp)
 4009e28:	df001015 	stw	fp,64(sp)
 4009e2c:	df001004 	addi	fp,sp,64
 4009e30:	e13ffc15 	stw	r4,-16(fp)
 4009e34:	e17ffd15 	stw	r5,-12(fp)
 4009e38:	e1bffe15 	stw	r6,-8(fp)
 4009e3c:	3805883a 	mov	r2,r7
 4009e40:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4009e44:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4009e48:	e0bfff03 	ldbu	r2,-4(fp)
 4009e4c:	10800570 	cmpltui	r2,r2,21
 4009e50:	1000021e 	bne	r2,zero,4009e5c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 4009e54:	00800a84 	movi	r2,42
 4009e58:	00005706 	br	4009fb8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009e5c:	0005303a 	rdctl	r2,status
 4009e60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009e64:	e0fffb17 	ldw	r3,-20(fp)
 4009e68:	00bfff84 	movi	r2,-2
 4009e6c:	1884703a 	and	r2,r3,r2
 4009e70:	1001703a 	wrctl	status,r2
  
  return context;
 4009e74:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4009e78:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4009e7c:	d0a70403 	ldbu	r2,-25584(gp)
 4009e80:	10803fcc 	andi	r2,r2,255
 4009e84:	10000626 	beq	r2,zero,4009ea0 <OSTaskCreate+0x80>
 4009e88:	e0bff317 	ldw	r2,-52(fp)
 4009e8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009e90:	e0bff417 	ldw	r2,-48(fp)
 4009e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4009e98:	00800f04 	movi	r2,60
 4009e9c:	00004606 	br	4009fb8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4009ea0:	e0ffff03 	ldbu	r3,-4(fp)
 4009ea4:	008100b4 	movhi	r2,1026
 4009ea8:	10a10c04 	addi	r2,r2,-31696
 4009eac:	18c7883a 	add	r3,r3,r3
 4009eb0:	18c7883a 	add	r3,r3,r3
 4009eb4:	10c5883a 	add	r2,r2,r3
 4009eb8:	10800017 	ldw	r2,0(r2)
 4009ebc:	1000391e 	bne	r2,zero,4009fa4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4009ec0:	e0ffff03 	ldbu	r3,-4(fp)
 4009ec4:	008100b4 	movhi	r2,1026
 4009ec8:	10a10c04 	addi	r2,r2,-31696
 4009ecc:	18c7883a 	add	r3,r3,r3
 4009ed0:	18c7883a 	add	r3,r3,r3
 4009ed4:	10c5883a 	add	r2,r2,r3
 4009ed8:	00c00044 	movi	r3,1
 4009edc:	10c00015 	stw	r3,0(r2)
 4009ee0:	e0bff317 	ldw	r2,-52(fp)
 4009ee4:	e0bff515 	stw	r2,-44(fp)
 4009ee8:	e0bff517 	ldw	r2,-44(fp)
 4009eec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 4009ef0:	000f883a 	mov	r7,zero
 4009ef4:	e1bffe17 	ldw	r6,-8(fp)
 4009ef8:	e17ffd17 	ldw	r5,-12(fp)
 4009efc:	e13ffc17 	ldw	r4,-16(fp)
 4009f00:	400d0840 	call	400d084 <OSTaskStkInit>
 4009f04:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 4009f08:	e0bfff03 	ldbu	r2,-4(fp)
 4009f0c:	d8000215 	stw	zero,8(sp)
 4009f10:	d8000115 	stw	zero,4(sp)
 4009f14:	d8000015 	stw	zero,0(sp)
 4009f18:	000f883a 	mov	r7,zero
 4009f1c:	000d883a 	mov	r6,zero
 4009f20:	e17ff717 	ldw	r5,-36(fp)
 4009f24:	1009883a 	mov	r4,r2
 4009f28:	4005b000 	call	4005b00 <OS_TCBInit>
 4009f2c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 4009f30:	e0bff803 	ldbu	r2,-32(fp)
 4009f34:	1000061e 	bne	r2,zero,4009f50 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4009f38:	d0a6f643 	ldbu	r2,-25639(gp)
 4009f3c:	10803fcc 	andi	r2,r2,255
 4009f40:	10800058 	cmpnei	r2,r2,1
 4009f44:	1000151e 	bne	r2,zero,4009f9c <OSTaskCreate+0x17c>
                OS_Sched();
 4009f48:	40057000 	call	4005700 <OS_Sched>
 4009f4c:	00001306 	br	4009f9c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009f50:	0005303a 	rdctl	r2,status
 4009f54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009f58:	e0fffa17 	ldw	r3,-24(fp)
 4009f5c:	00bfff84 	movi	r2,-2
 4009f60:	1884703a 	and	r2,r3,r2
 4009f64:	1001703a 	wrctl	status,r2
  
  return context;
 4009f68:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4009f6c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4009f70:	e0ffff03 	ldbu	r3,-4(fp)
 4009f74:	008100b4 	movhi	r2,1026
 4009f78:	10a10c04 	addi	r2,r2,-31696
 4009f7c:	18c7883a 	add	r3,r3,r3
 4009f80:	18c7883a 	add	r3,r3,r3
 4009f84:	10c5883a 	add	r2,r2,r3
 4009f88:	10000015 	stw	zero,0(r2)
 4009f8c:	e0bff317 	ldw	r2,-52(fp)
 4009f90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009f94:	e0bff617 	ldw	r2,-40(fp)
 4009f98:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4009f9c:	e0bff803 	ldbu	r2,-32(fp)
 4009fa0:	00000506 	br	4009fb8 <OSTaskCreate+0x198>
 4009fa4:	e0bff317 	ldw	r2,-52(fp)
 4009fa8:	e0bff915 	stw	r2,-28(fp)
 4009fac:	e0bff917 	ldw	r2,-28(fp)
 4009fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4009fb4:	00800a04 	movi	r2,40
}
 4009fb8:	e037883a 	mov	sp,fp
 4009fbc:	dfc00117 	ldw	ra,4(sp)
 4009fc0:	df000017 	ldw	fp,0(sp)
 4009fc4:	dec00204 	addi	sp,sp,8
 4009fc8:	f800283a 	ret

04009fcc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 4009fcc:	deffec04 	addi	sp,sp,-80
 4009fd0:	dfc01315 	stw	ra,76(sp)
 4009fd4:	df001215 	stw	fp,72(sp)
 4009fd8:	df001204 	addi	fp,sp,72
 4009fdc:	e13ffa15 	stw	r4,-24(fp)
 4009fe0:	e17ffb15 	stw	r5,-20(fp)
 4009fe4:	e1bffc15 	stw	r6,-16(fp)
 4009fe8:	3809883a 	mov	r4,r7
 4009fec:	e0c00217 	ldw	r3,8(fp)
 4009ff0:	e0800617 	ldw	r2,24(fp)
 4009ff4:	e13ffd05 	stb	r4,-12(fp)
 4009ff8:	e0fffe0d 	sth	r3,-8(fp)
 4009ffc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 400a000:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 400a004:	e0bffd03 	ldbu	r2,-12(fp)
 400a008:	10800570 	cmpltui	r2,r2,21
 400a00c:	1000021e 	bne	r2,zero,400a018 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 400a010:	00800a84 	movi	r2,42
 400a014:	00006106 	br	400a19c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a018:	0005303a 	rdctl	r2,status
 400a01c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a020:	e0fff917 	ldw	r3,-28(fp)
 400a024:	00bfff84 	movi	r2,-2
 400a028:	1884703a 	and	r2,r3,r2
 400a02c:	1001703a 	wrctl	status,r2
  
  return context;
 400a030:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400a034:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 400a038:	d0a70403 	ldbu	r2,-25584(gp)
 400a03c:	10803fcc 	andi	r2,r2,255
 400a040:	10000626 	beq	r2,zero,400a05c <OSTaskCreateExt+0x90>
 400a044:	e0bff117 	ldw	r2,-60(fp)
 400a048:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a04c:	e0bff217 	ldw	r2,-56(fp)
 400a050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 400a054:	00800f04 	movi	r2,60
 400a058:	00005006 	br	400a19c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 400a05c:	e0fffd03 	ldbu	r3,-12(fp)
 400a060:	008100b4 	movhi	r2,1026
 400a064:	10a10c04 	addi	r2,r2,-31696
 400a068:	18c7883a 	add	r3,r3,r3
 400a06c:	18c7883a 	add	r3,r3,r3
 400a070:	10c5883a 	add	r2,r2,r3
 400a074:	10800017 	ldw	r2,0(r2)
 400a078:	1000431e 	bne	r2,zero,400a188 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 400a07c:	e0fffd03 	ldbu	r3,-12(fp)
 400a080:	008100b4 	movhi	r2,1026
 400a084:	10a10c04 	addi	r2,r2,-31696
 400a088:	18c7883a 	add	r3,r3,r3
 400a08c:	18c7883a 	add	r3,r3,r3
 400a090:	10c5883a 	add	r2,r2,r3
 400a094:	00c00044 	movi	r3,1
 400a098:	10c00015 	stw	r3,0(r2)
 400a09c:	e0bff117 	ldw	r2,-60(fp)
 400a0a0:	e0bff315 	stw	r2,-52(fp)
 400a0a4:	e0bff317 	ldw	r2,-52(fp)
 400a0a8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 400a0ac:	e0bfff0b 	ldhu	r2,-4(fp)
 400a0b0:	100d883a 	mov	r6,r2
 400a0b4:	e1400417 	ldw	r5,16(fp)
 400a0b8:	e1000317 	ldw	r4,12(fp)
 400a0bc:	400b02c0 	call	400b02c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 400a0c0:	e0bfff0b 	ldhu	r2,-4(fp)
 400a0c4:	100f883a 	mov	r7,r2
 400a0c8:	e1bffc17 	ldw	r6,-16(fp)
 400a0cc:	e17ffb17 	ldw	r5,-20(fp)
 400a0d0:	e13ffa17 	ldw	r4,-24(fp)
 400a0d4:	400d0840 	call	400d084 <OSTaskStkInit>
 400a0d8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 400a0dc:	e0fffd03 	ldbu	r3,-12(fp)
 400a0e0:	e13ffe0b 	ldhu	r4,-8(fp)
 400a0e4:	e0bfff0b 	ldhu	r2,-4(fp)
 400a0e8:	d8800215 	stw	r2,8(sp)
 400a0ec:	e0800517 	ldw	r2,20(fp)
 400a0f0:	d8800115 	stw	r2,4(sp)
 400a0f4:	e0800417 	ldw	r2,16(fp)
 400a0f8:	d8800015 	stw	r2,0(sp)
 400a0fc:	200f883a 	mov	r7,r4
 400a100:	e1800317 	ldw	r6,12(fp)
 400a104:	e17ff517 	ldw	r5,-44(fp)
 400a108:	1809883a 	mov	r4,r3
 400a10c:	4005b000 	call	4005b00 <OS_TCBInit>
 400a110:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 400a114:	e0bff603 	ldbu	r2,-40(fp)
 400a118:	1000061e 	bne	r2,zero,400a134 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 400a11c:	d0a6f643 	ldbu	r2,-25639(gp)
 400a120:	10803fcc 	andi	r2,r2,255
 400a124:	10800058 	cmpnei	r2,r2,1
 400a128:	1000151e 	bne	r2,zero,400a180 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 400a12c:	40057000 	call	4005700 <OS_Sched>
 400a130:	00001306 	br	400a180 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a134:	0005303a 	rdctl	r2,status
 400a138:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a13c:	e0fff817 	ldw	r3,-32(fp)
 400a140:	00bfff84 	movi	r2,-2
 400a144:	1884703a 	and	r2,r3,r2
 400a148:	1001703a 	wrctl	status,r2
  
  return context;
 400a14c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 400a150:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 400a154:	e0fffd03 	ldbu	r3,-12(fp)
 400a158:	008100b4 	movhi	r2,1026
 400a15c:	10a10c04 	addi	r2,r2,-31696
 400a160:	18c7883a 	add	r3,r3,r3
 400a164:	18c7883a 	add	r3,r3,r3
 400a168:	10c5883a 	add	r2,r2,r3
 400a16c:	10000015 	stw	zero,0(r2)
 400a170:	e0bff117 	ldw	r2,-60(fp)
 400a174:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a178:	e0bff417 	ldw	r2,-48(fp)
 400a17c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 400a180:	e0bff603 	ldbu	r2,-40(fp)
 400a184:	00000506 	br	400a19c <OSTaskCreateExt+0x1d0>
 400a188:	e0bff117 	ldw	r2,-60(fp)
 400a18c:	e0bff715 	stw	r2,-36(fp)
 400a190:	e0bff717 	ldw	r2,-36(fp)
 400a194:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 400a198:	00800a04 	movi	r2,40
}
 400a19c:	e037883a 	mov	sp,fp
 400a1a0:	dfc00117 	ldw	ra,4(sp)
 400a1a4:	df000017 	ldw	fp,0(sp)
 400a1a8:	dec00204 	addi	sp,sp,8
 400a1ac:	f800283a 	ret

0400a1b0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 400a1b0:	defff404 	addi	sp,sp,-48
 400a1b4:	dfc00b15 	stw	ra,44(sp)
 400a1b8:	df000a15 	stw	fp,40(sp)
 400a1bc:	df000a04 	addi	fp,sp,40
 400a1c0:	2005883a 	mov	r2,r4
 400a1c4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 400a1c8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 400a1cc:	d0a70403 	ldbu	r2,-25584(gp)
 400a1d0:	10803fcc 	andi	r2,r2,255
 400a1d4:	10000226 	beq	r2,zero,400a1e0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 400a1d8:	00801004 	movi	r2,64
 400a1dc:	0000c006 	br	400a4e0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 400a1e0:	e0bfff03 	ldbu	r2,-4(fp)
 400a1e4:	10800518 	cmpnei	r2,r2,20
 400a1e8:	1000021e 	bne	r2,zero,400a1f4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 400a1ec:	00800f84 	movi	r2,62
 400a1f0:	0000bb06 	br	400a4e0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 400a1f4:	e0bfff03 	ldbu	r2,-4(fp)
 400a1f8:	10800530 	cmpltui	r2,r2,20
 400a1fc:	1000051e 	bne	r2,zero,400a214 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 400a200:	e0bfff03 	ldbu	r2,-4(fp)
 400a204:	10803fe0 	cmpeqi	r2,r2,255
 400a208:	1000021e 	bne	r2,zero,400a214 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 400a20c:	00800a84 	movi	r2,42
 400a210:	0000b306 	br	400a4e0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a214:	0005303a 	rdctl	r2,status
 400a218:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a21c:	e0fffe17 	ldw	r3,-8(fp)
 400a220:	00bfff84 	movi	r2,-2
 400a224:	1884703a 	and	r2,r3,r2
 400a228:	1001703a 	wrctl	status,r2
  
  return context;
 400a22c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400a230:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 400a234:	e0bfff03 	ldbu	r2,-4(fp)
 400a238:	10803fd8 	cmpnei	r2,r2,255
 400a23c:	1000031e 	bne	r2,zero,400a24c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 400a240:	d0a70517 	ldw	r2,-25580(gp)
 400a244:	10800c83 	ldbu	r2,50(r2)
 400a248:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400a24c:	e0ffff03 	ldbu	r3,-4(fp)
 400a250:	008100b4 	movhi	r2,1026
 400a254:	10a10c04 	addi	r2,r2,-31696
 400a258:	18c7883a 	add	r3,r3,r3
 400a25c:	18c7883a 	add	r3,r3,r3
 400a260:	10c5883a 	add	r2,r2,r3
 400a264:	10800017 	ldw	r2,0(r2)
 400a268:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 400a26c:	e0bff817 	ldw	r2,-32(fp)
 400a270:	1000061e 	bne	r2,zero,400a28c <OSTaskDel+0xdc>
 400a274:	e0bff617 	ldw	r2,-40(fp)
 400a278:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a27c:	e0bff717 	ldw	r2,-36(fp)
 400a280:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400a284:	008010c4 	movi	r2,67
 400a288:	00009506 	br	400a4e0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 400a28c:	e0bff817 	ldw	r2,-32(fp)
 400a290:	10800058 	cmpnei	r2,r2,1
 400a294:	1000061e 	bne	r2,zero,400a2b0 <OSTaskDel+0x100>
 400a298:	e0bff617 	ldw	r2,-40(fp)
 400a29c:	e0bff915 	stw	r2,-28(fp)
 400a2a0:	e0bff917 	ldw	r2,-28(fp)
 400a2a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 400a2a8:	00800f44 	movi	r2,61
 400a2ac:	00008c06 	br	400a4e0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 400a2b0:	e0bff817 	ldw	r2,-32(fp)
 400a2b4:	10800d03 	ldbu	r2,52(r2)
 400a2b8:	10c03fcc 	andi	r3,r2,255
 400a2bc:	e0bff817 	ldw	r2,-32(fp)
 400a2c0:	10800d03 	ldbu	r2,52(r2)
 400a2c4:	11003fcc 	andi	r4,r2,255
 400a2c8:	d0a70244 	addi	r2,gp,-25591
 400a2cc:	2085883a 	add	r2,r4,r2
 400a2d0:	10800003 	ldbu	r2,0(r2)
 400a2d4:	1009883a 	mov	r4,r2
 400a2d8:	e0bff817 	ldw	r2,-32(fp)
 400a2dc:	10800d43 	ldbu	r2,53(r2)
 400a2e0:	0084303a 	nor	r2,zero,r2
 400a2e4:	2084703a 	and	r2,r4,r2
 400a2e8:	1009883a 	mov	r4,r2
 400a2ec:	d0a70244 	addi	r2,gp,-25591
 400a2f0:	1885883a 	add	r2,r3,r2
 400a2f4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 400a2f8:	e0bff817 	ldw	r2,-32(fp)
 400a2fc:	10800d03 	ldbu	r2,52(r2)
 400a300:	10c03fcc 	andi	r3,r2,255
 400a304:	d0a70244 	addi	r2,gp,-25591
 400a308:	1885883a 	add	r2,r3,r2
 400a30c:	10800003 	ldbu	r2,0(r2)
 400a310:	10803fcc 	andi	r2,r2,255
 400a314:	1000071e 	bne	r2,zero,400a334 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 400a318:	e0bff817 	ldw	r2,-32(fp)
 400a31c:	10800d83 	ldbu	r2,54(r2)
 400a320:	0084303a 	nor	r2,zero,r2
 400a324:	1007883a 	mov	r3,r2
 400a328:	d0a70203 	ldbu	r2,-25592(gp)
 400a32c:	1884703a 	and	r2,r3,r2
 400a330:	d0a70205 	stb	r2,-25592(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 400a334:	e0bff817 	ldw	r2,-32(fp)
 400a338:	10800717 	ldw	r2,28(r2)
 400a33c:	10000526 	beq	r2,zero,400a354 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 400a340:	e0bff817 	ldw	r2,-32(fp)
 400a344:	10800717 	ldw	r2,28(r2)
 400a348:	100b883a 	mov	r5,r2
 400a34c:	e13ff817 	ldw	r4,-32(fp)
 400a350:	40050ac0 	call	40050ac <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 400a354:	e0bff817 	ldw	r2,-32(fp)
 400a358:	10800817 	ldw	r2,32(r2)
 400a35c:	10000526 	beq	r2,zero,400a374 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400a360:	e0bff817 	ldw	r2,-32(fp)
 400a364:	10800817 	ldw	r2,32(r2)
 400a368:	100b883a 	mov	r5,r2
 400a36c:	e13ff817 	ldw	r4,-32(fp)
 400a370:	40051640 	call	4005164 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 400a374:	e0bff817 	ldw	r2,-32(fp)
 400a378:	10800a17 	ldw	r2,40(r2)
 400a37c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 400a380:	e0bffb17 	ldw	r2,-20(fp)
 400a384:	10000226 	beq	r2,zero,400a390 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 400a388:	e13ffb17 	ldw	r4,-20(fp)
 400a38c:	40075d40 	call	40075d4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 400a390:	e0bff817 	ldw	r2,-32(fp)
 400a394:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 400a398:	e0bff817 	ldw	r2,-32(fp)
 400a39c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400a3a0:	e0bff817 	ldw	r2,-32(fp)
 400a3a4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 400a3a8:	d0a6f603 	ldbu	r2,-25640(gp)
 400a3ac:	10803fcc 	andi	r2,r2,255
 400a3b0:	10803fe0 	cmpeqi	r2,r2,255
 400a3b4:	1000031e 	bne	r2,zero,400a3c4 <OSTaskDel+0x214>
        OSLockNesting++;
 400a3b8:	d0a6f603 	ldbu	r2,-25640(gp)
 400a3bc:	10800044 	addi	r2,r2,1
 400a3c0:	d0a6f605 	stb	r2,-25640(gp)
 400a3c4:	e0bff617 	ldw	r2,-40(fp)
 400a3c8:	e0bffd15 	stw	r2,-12(fp)
 400a3cc:	e0bffd17 	ldw	r2,-12(fp)
 400a3d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 400a3d4:	4004c940 	call	4004c94 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a3d8:	0005303a 	rdctl	r2,status
 400a3dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a3e0:	e0fffa17 	ldw	r3,-24(fp)
 400a3e4:	00bfff84 	movi	r2,-2
 400a3e8:	1884703a 	and	r2,r3,r2
 400a3ec:	1001703a 	wrctl	status,r2
  
  return context;
 400a3f0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 400a3f4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 400a3f8:	d0a6f603 	ldbu	r2,-25640(gp)
 400a3fc:	10803fcc 	andi	r2,r2,255
 400a400:	10000326 	beq	r2,zero,400a410 <OSTaskDel+0x260>
        OSLockNesting--;
 400a404:	d0a6f603 	ldbu	r2,-25640(gp)
 400a408:	10bfffc4 	addi	r2,r2,-1
 400a40c:	d0a6f605 	stb	r2,-25640(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 400a410:	e13ff817 	ldw	r4,-32(fp)
 400a414:	400d2040 	call	400d204 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 400a418:	d0a6fe43 	ldbu	r2,-25607(gp)
 400a41c:	10bfffc4 	addi	r2,r2,-1
 400a420:	d0a6fe45 	stb	r2,-25607(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 400a424:	e0ffff03 	ldbu	r3,-4(fp)
 400a428:	008100b4 	movhi	r2,1026
 400a42c:	10a10c04 	addi	r2,r2,-31696
 400a430:	18c7883a 	add	r3,r3,r3
 400a434:	18c7883a 	add	r3,r3,r3
 400a438:	10c5883a 	add	r2,r2,r3
 400a43c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 400a440:	e0bff817 	ldw	r2,-32(fp)
 400a444:	10800617 	ldw	r2,24(r2)
 400a448:	1000071e 	bne	r2,zero,400a468 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 400a44c:	e0bff817 	ldw	r2,-32(fp)
 400a450:	10800517 	ldw	r2,20(r2)
 400a454:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 400a458:	e0bff817 	ldw	r2,-32(fp)
 400a45c:	10800517 	ldw	r2,20(r2)
 400a460:	d0a6f915 	stw	r2,-25628(gp)
 400a464:	00000a06 	br	400a490 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 400a468:	e0bff817 	ldw	r2,-32(fp)
 400a46c:	10800617 	ldw	r2,24(r2)
 400a470:	e0fff817 	ldw	r3,-32(fp)
 400a474:	18c00517 	ldw	r3,20(r3)
 400a478:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 400a47c:	e0bff817 	ldw	r2,-32(fp)
 400a480:	10800517 	ldw	r2,20(r2)
 400a484:	e0fff817 	ldw	r3,-32(fp)
 400a488:	18c00617 	ldw	r3,24(r3)
 400a48c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 400a490:	d0e6fd17 	ldw	r3,-25612(gp)
 400a494:	e0bff817 	ldw	r2,-32(fp)
 400a498:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 400a49c:	e0bff817 	ldw	r2,-32(fp)
 400a4a0:	d0a6fd15 	stw	r2,-25612(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 400a4a4:	e0bff817 	ldw	r2,-32(fp)
 400a4a8:	00c00fc4 	movi	r3,63
 400a4ac:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400a4b0:	e0bff817 	ldw	r2,-32(fp)
 400a4b4:	10001345 	stb	zero,77(r2)
 400a4b8:	e0bff617 	ldw	r2,-40(fp)
 400a4bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a4c0:	e0bffc17 	ldw	r2,-16(fp)
 400a4c4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 400a4c8:	d0a6f643 	ldbu	r2,-25639(gp)
 400a4cc:	10803fcc 	andi	r2,r2,255
 400a4d0:	10800058 	cmpnei	r2,r2,1
 400a4d4:	1000011e 	bne	r2,zero,400a4dc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 400a4d8:	40057000 	call	4005700 <OS_Sched>
    }
    return (OS_ERR_NONE);
 400a4dc:	0005883a 	mov	r2,zero
}
 400a4e0:	e037883a 	mov	sp,fp
 400a4e4:	dfc00117 	ldw	ra,4(sp)
 400a4e8:	df000017 	ldw	fp,0(sp)
 400a4ec:	dec00204 	addi	sp,sp,8
 400a4f0:	f800283a 	ret

0400a4f4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 400a4f4:	defff504 	addi	sp,sp,-44
 400a4f8:	df000a15 	stw	fp,40(sp)
 400a4fc:	df000a04 	addi	fp,sp,40
 400a500:	2005883a 	mov	r2,r4
 400a504:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400a508:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 400a50c:	e0bfff03 	ldbu	r2,-4(fp)
 400a510:	10800518 	cmpnei	r2,r2,20
 400a514:	1000021e 	bne	r2,zero,400a520 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 400a518:	00800f84 	movi	r2,62
 400a51c:	00004506 	br	400a634 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 400a520:	e0bfff03 	ldbu	r2,-4(fp)
 400a524:	10800530 	cmpltui	r2,r2,20
 400a528:	1000051e 	bne	r2,zero,400a540 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 400a52c:	e0bfff03 	ldbu	r2,-4(fp)
 400a530:	10803fe0 	cmpeqi	r2,r2,255
 400a534:	1000021e 	bne	r2,zero,400a540 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 400a538:	00800a84 	movi	r2,42
 400a53c:	00003d06 	br	400a634 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 400a540:	e0bfff03 	ldbu	r2,-4(fp)
 400a544:	10803fd8 	cmpnei	r2,r2,255
 400a548:	1000111e 	bne	r2,zero,400a590 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a54c:	0005303a 	rdctl	r2,status
 400a550:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a554:	e0fff917 	ldw	r3,-28(fp)
 400a558:	00bfff84 	movi	r2,-2
 400a55c:	1884703a 	and	r2,r3,r2
 400a560:	1001703a 	wrctl	status,r2
  
  return context;
 400a564:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 400a568:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 400a56c:	d0a70517 	ldw	r2,-25580(gp)
 400a570:	10800dc3 	ldbu	r2,55(r2)
 400a574:	e0bff805 	stb	r2,-32(fp)
 400a578:	e0bff617 	ldw	r2,-40(fp)
 400a57c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a580:	e0bffe17 	ldw	r2,-8(fp)
 400a584:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 400a588:	e0bff803 	ldbu	r2,-32(fp)
 400a58c:	00002906 	br	400a634 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a590:	0005303a 	rdctl	r2,status
 400a594:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a598:	e0fff717 	ldw	r3,-36(fp)
 400a59c:	00bfff84 	movi	r2,-2
 400a5a0:	1884703a 	and	r2,r3,r2
 400a5a4:	1001703a 	wrctl	status,r2
  
  return context;
 400a5a8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 400a5ac:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 400a5b0:	e0ffff03 	ldbu	r3,-4(fp)
 400a5b4:	008100b4 	movhi	r2,1026
 400a5b8:	10a10c04 	addi	r2,r2,-31696
 400a5bc:	18c7883a 	add	r3,r3,r3
 400a5c0:	18c7883a 	add	r3,r3,r3
 400a5c4:	10c5883a 	add	r2,r2,r3
 400a5c8:	10800017 	ldw	r2,0(r2)
 400a5cc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 400a5d0:	e0bffb17 	ldw	r2,-20(fp)
 400a5d4:	1000061e 	bne	r2,zero,400a5f0 <OSTaskDelReq+0xfc>
 400a5d8:	e0bff617 	ldw	r2,-40(fp)
 400a5dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a5e0:	e0bffa17 	ldw	r2,-24(fp)
 400a5e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 400a5e8:	008010c4 	movi	r2,67
 400a5ec:	00001106 	br	400a634 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 400a5f0:	e0bffb17 	ldw	r2,-20(fp)
 400a5f4:	10800058 	cmpnei	r2,r2,1
 400a5f8:	1000061e 	bne	r2,zero,400a614 <OSTaskDelReq+0x120>
 400a5fc:	e0bff617 	ldw	r2,-40(fp)
 400a600:	e0bffc15 	stw	r2,-16(fp)
 400a604:	e0bffc17 	ldw	r2,-16(fp)
 400a608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 400a60c:	00800f44 	movi	r2,61
 400a610:	00000806 	br	400a634 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 400a614:	e0bffb17 	ldw	r2,-20(fp)
 400a618:	00c00fc4 	movi	r3,63
 400a61c:	10c00dc5 	stb	r3,55(r2)
 400a620:	e0bff617 	ldw	r2,-40(fp)
 400a624:	e0bffd15 	stw	r2,-12(fp)
 400a628:	e0bffd17 	ldw	r2,-12(fp)
 400a62c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400a630:	0005883a 	mov	r2,zero
}
 400a634:	e037883a 	mov	sp,fp
 400a638:	df000017 	ldw	fp,0(sp)
 400a63c:	dec00104 	addi	sp,sp,4
 400a640:	f800283a 	ret

0400a644 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 400a644:	defff404 	addi	sp,sp,-48
 400a648:	dfc00b15 	stw	ra,44(sp)
 400a64c:	df000a15 	stw	fp,40(sp)
 400a650:	df000a04 	addi	fp,sp,40
 400a654:	2005883a 	mov	r2,r4
 400a658:	e17ffe15 	stw	r5,-8(fp)
 400a65c:	e1bfff15 	stw	r6,-4(fp)
 400a660:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 400a664:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 400a668:	e0bfff17 	ldw	r2,-4(fp)
 400a66c:	1000021e 	bne	r2,zero,400a678 <OSTaskNameGet+0x34>
        return (0);
 400a670:	0005883a 	mov	r2,zero
 400a674:	00005406 	br	400a7c8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 400a678:	e0bffd03 	ldbu	r2,-12(fp)
 400a67c:	10800570 	cmpltui	r2,r2,21
 400a680:	1000081e 	bne	r2,zero,400a6a4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 400a684:	e0bffd03 	ldbu	r2,-12(fp)
 400a688:	10803fe0 	cmpeqi	r2,r2,255
 400a68c:	1000051e 	bne	r2,zero,400a6a4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 400a690:	e0bfff17 	ldw	r2,-4(fp)
 400a694:	00c00a84 	movi	r3,42
 400a698:	10c00005 	stb	r3,0(r2)
            return (0);
 400a69c:	0005883a 	mov	r2,zero
 400a6a0:	00004906 	br	400a7c8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 400a6a4:	e0bffe17 	ldw	r2,-8(fp)
 400a6a8:	1000051e 	bne	r2,zero,400a6c0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 400a6ac:	e0bfff17 	ldw	r2,-4(fp)
 400a6b0:	00c00304 	movi	r3,12
 400a6b4:	10c00005 	stb	r3,0(r2)
        return (0);
 400a6b8:	0005883a 	mov	r2,zero
 400a6bc:	00004206 	br	400a7c8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 400a6c0:	d0a70403 	ldbu	r2,-25584(gp)
 400a6c4:	10803fcc 	andi	r2,r2,255
 400a6c8:	10000526 	beq	r2,zero,400a6e0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 400a6cc:	e0bfff17 	ldw	r2,-4(fp)
 400a6d0:	00c00444 	movi	r3,17
 400a6d4:	10c00005 	stb	r3,0(r2)
        return (0);
 400a6d8:	0005883a 	mov	r2,zero
 400a6dc:	00003a06 	br	400a7c8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a6e0:	0005303a 	rdctl	r2,status
 400a6e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a6e8:	e0fffc17 	ldw	r3,-16(fp)
 400a6ec:	00bfff84 	movi	r2,-2
 400a6f0:	1884703a 	and	r2,r3,r2
 400a6f4:	1001703a 	wrctl	status,r2
  
  return context;
 400a6f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 400a6fc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 400a700:	e0bffd03 	ldbu	r2,-12(fp)
 400a704:	10803fd8 	cmpnei	r2,r2,255
 400a708:	1000031e 	bne	r2,zero,400a718 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 400a70c:	d0a70517 	ldw	r2,-25580(gp)
 400a710:	10800c83 	ldbu	r2,50(r2)
 400a714:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400a718:	e0fffd03 	ldbu	r3,-12(fp)
 400a71c:	008100b4 	movhi	r2,1026
 400a720:	10a10c04 	addi	r2,r2,-31696
 400a724:	18c7883a 	add	r3,r3,r3
 400a728:	18c7883a 	add	r3,r3,r3
 400a72c:	10c5883a 	add	r2,r2,r3
 400a730:	10800017 	ldw	r2,0(r2)
 400a734:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 400a738:	e0bff817 	ldw	r2,-32(fp)
 400a73c:	1000091e 	bne	r2,zero,400a764 <OSTaskNameGet+0x120>
 400a740:	e0bff617 	ldw	r2,-40(fp)
 400a744:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a748:	e0bff717 	ldw	r2,-36(fp)
 400a74c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400a750:	e0bfff17 	ldw	r2,-4(fp)
 400a754:	00c010c4 	movi	r3,67
 400a758:	10c00005 	stb	r3,0(r2)
        return (0);
 400a75c:	0005883a 	mov	r2,zero
 400a760:	00001906 	br	400a7c8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 400a764:	e0bff817 	ldw	r2,-32(fp)
 400a768:	10800058 	cmpnei	r2,r2,1
 400a76c:	1000091e 	bne	r2,zero,400a794 <OSTaskNameGet+0x150>
 400a770:	e0bff617 	ldw	r2,-40(fp)
 400a774:	e0bff915 	stw	r2,-28(fp)
 400a778:	e0bff917 	ldw	r2,-28(fp)
 400a77c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400a780:	e0bfff17 	ldw	r2,-4(fp)
 400a784:	00c010c4 	movi	r3,67
 400a788:	10c00005 	stb	r3,0(r2)
        return (0);
 400a78c:	0005883a 	mov	r2,zero
 400a790:	00000d06 	br	400a7c8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 400a794:	e0bff817 	ldw	r2,-32(fp)
 400a798:	10801304 	addi	r2,r2,76
 400a79c:	100b883a 	mov	r5,r2
 400a7a0:	e13ffe17 	ldw	r4,-8(fp)
 400a7a4:	40058440 	call	4005844 <OS_StrCopy>
 400a7a8:	e0bffb05 	stb	r2,-20(fp)
 400a7ac:	e0bff617 	ldw	r2,-40(fp)
 400a7b0:	e0bffa15 	stw	r2,-24(fp)
 400a7b4:	e0bffa17 	ldw	r2,-24(fp)
 400a7b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400a7bc:	e0bfff17 	ldw	r2,-4(fp)
 400a7c0:	10000005 	stb	zero,0(r2)
    return (len);
 400a7c4:	e0bffb03 	ldbu	r2,-20(fp)
}
 400a7c8:	e037883a 	mov	sp,fp
 400a7cc:	dfc00117 	ldw	ra,4(sp)
 400a7d0:	df000017 	ldw	fp,0(sp)
 400a7d4:	dec00204 	addi	sp,sp,8
 400a7d8:	f800283a 	ret

0400a7dc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 400a7dc:	defff304 	addi	sp,sp,-52
 400a7e0:	dfc00c15 	stw	ra,48(sp)
 400a7e4:	df000b15 	stw	fp,44(sp)
 400a7e8:	df000b04 	addi	fp,sp,44
 400a7ec:	2005883a 	mov	r2,r4
 400a7f0:	e17ffe15 	stw	r5,-8(fp)
 400a7f4:	e1bfff15 	stw	r6,-4(fp)
 400a7f8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 400a7fc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 400a800:	e0bfff17 	ldw	r2,-4(fp)
 400a804:	10005c26 	beq	r2,zero,400a978 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 400a808:	e0bffd03 	ldbu	r2,-12(fp)
 400a80c:	10800570 	cmpltui	r2,r2,21
 400a810:	1000071e 	bne	r2,zero,400a830 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 400a814:	e0bffd03 	ldbu	r2,-12(fp)
 400a818:	10803fe0 	cmpeqi	r2,r2,255
 400a81c:	1000041e 	bne	r2,zero,400a830 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 400a820:	e0bfff17 	ldw	r2,-4(fp)
 400a824:	00c00a84 	movi	r3,42
 400a828:	10c00005 	stb	r3,0(r2)
            return;
 400a82c:	00005306 	br	400a97c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 400a830:	e0bffe17 	ldw	r2,-8(fp)
 400a834:	1000041e 	bne	r2,zero,400a848 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 400a838:	e0bfff17 	ldw	r2,-4(fp)
 400a83c:	00c00304 	movi	r3,12
 400a840:	10c00005 	stb	r3,0(r2)
        return;
 400a844:	00004d06 	br	400a97c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 400a848:	d0a70403 	ldbu	r2,-25584(gp)
 400a84c:	10803fcc 	andi	r2,r2,255
 400a850:	10000426 	beq	r2,zero,400a864 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 400a854:	e0bfff17 	ldw	r2,-4(fp)
 400a858:	00c00484 	movi	r3,18
 400a85c:	10c00005 	stb	r3,0(r2)
        return;
 400a860:	00004606 	br	400a97c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a864:	0005303a 	rdctl	r2,status
 400a868:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a86c:	e0fffc17 	ldw	r3,-16(fp)
 400a870:	00bfff84 	movi	r2,-2
 400a874:	1884703a 	and	r2,r3,r2
 400a878:	1001703a 	wrctl	status,r2
  
  return context;
 400a87c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 400a880:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 400a884:	e0bffd03 	ldbu	r2,-12(fp)
 400a888:	10803fd8 	cmpnei	r2,r2,255
 400a88c:	1000031e 	bne	r2,zero,400a89c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 400a890:	d0a70517 	ldw	r2,-25580(gp)
 400a894:	10800c83 	ldbu	r2,50(r2)
 400a898:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400a89c:	e0fffd03 	ldbu	r3,-12(fp)
 400a8a0:	008100b4 	movhi	r2,1026
 400a8a4:	10a10c04 	addi	r2,r2,-31696
 400a8a8:	18c7883a 	add	r3,r3,r3
 400a8ac:	18c7883a 	add	r3,r3,r3
 400a8b0:	10c5883a 	add	r2,r2,r3
 400a8b4:	10800017 	ldw	r2,0(r2)
 400a8b8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 400a8bc:	e0bff717 	ldw	r2,-36(fp)
 400a8c0:	1000081e 	bne	r2,zero,400a8e4 <OSTaskNameSet+0x108>
 400a8c4:	e0bff517 	ldw	r2,-44(fp)
 400a8c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a8cc:	e0bff617 	ldw	r2,-40(fp)
 400a8d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400a8d4:	e0bfff17 	ldw	r2,-4(fp)
 400a8d8:	00c010c4 	movi	r3,67
 400a8dc:	10c00005 	stb	r3,0(r2)
        return;
 400a8e0:	00002606 	br	400a97c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 400a8e4:	e0bff717 	ldw	r2,-36(fp)
 400a8e8:	10800058 	cmpnei	r2,r2,1
 400a8ec:	1000081e 	bne	r2,zero,400a910 <OSTaskNameSet+0x134>
 400a8f0:	e0bff517 	ldw	r2,-44(fp)
 400a8f4:	e0bff815 	stw	r2,-32(fp)
 400a8f8:	e0bff817 	ldw	r2,-32(fp)
 400a8fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 400a900:	e0bfff17 	ldw	r2,-4(fp)
 400a904:	00c010c4 	movi	r3,67
 400a908:	10c00005 	stb	r3,0(r2)
        return;
 400a90c:	00001b06 	br	400a97c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 400a910:	e13ffe17 	ldw	r4,-8(fp)
 400a914:	40058b80 	call	40058b8 <OS_StrLen>
 400a918:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 400a91c:	e0bffa03 	ldbu	r2,-24(fp)
 400a920:	10800830 	cmpltui	r2,r2,32
 400a924:	1000081e 	bne	r2,zero,400a948 <OSTaskNameSet+0x16c>
 400a928:	e0bff517 	ldw	r2,-44(fp)
 400a92c:	e0bff915 	stw	r2,-28(fp)
 400a930:	e0bff917 	ldw	r2,-28(fp)
 400a934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 400a938:	e0bfff17 	ldw	r2,-4(fp)
 400a93c:	00c01044 	movi	r3,65
 400a940:	10c00005 	stb	r3,0(r2)
        return;
 400a944:	00000d06 	br	400a97c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 400a948:	e0bff717 	ldw	r2,-36(fp)
 400a94c:	10801304 	addi	r2,r2,76
 400a950:	e17ffe17 	ldw	r5,-8(fp)
 400a954:	1009883a 	mov	r4,r2
 400a958:	40058440 	call	4005844 <OS_StrCopy>
 400a95c:	e0bff517 	ldw	r2,-44(fp)
 400a960:	e0bffb15 	stw	r2,-20(fp)
 400a964:	e0bffb17 	ldw	r2,-20(fp)
 400a968:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400a96c:	e0bfff17 	ldw	r2,-4(fp)
 400a970:	10000005 	stb	zero,0(r2)
 400a974:	00000106 	br	400a97c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 400a978:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400a97c:	e037883a 	mov	sp,fp
 400a980:	dfc00117 	ldw	ra,4(sp)
 400a984:	df000017 	ldw	fp,0(sp)
 400a988:	dec00204 	addi	sp,sp,8
 400a98c:	f800283a 	ret

0400a990 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 400a990:	defff404 	addi	sp,sp,-48
 400a994:	dfc00b15 	stw	ra,44(sp)
 400a998:	df000a15 	stw	fp,40(sp)
 400a99c:	df000a04 	addi	fp,sp,40
 400a9a0:	2005883a 	mov	r2,r4
 400a9a4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 400a9a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 400a9ac:	e0bfff03 	ldbu	r2,-4(fp)
 400a9b0:	10800530 	cmpltui	r2,r2,20
 400a9b4:	1000021e 	bne	r2,zero,400a9c0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 400a9b8:	00800a84 	movi	r2,42
 400a9bc:	00006406 	br	400ab50 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a9c0:	0005303a 	rdctl	r2,status
 400a9c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a9c8:	e0fffe17 	ldw	r3,-8(fp)
 400a9cc:	00bfff84 	movi	r2,-2
 400a9d0:	1884703a 	and	r2,r3,r2
 400a9d4:	1001703a 	wrctl	status,r2
  
  return context;
 400a9d8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400a9dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 400a9e0:	e0ffff03 	ldbu	r3,-4(fp)
 400a9e4:	008100b4 	movhi	r2,1026
 400a9e8:	10a10c04 	addi	r2,r2,-31696
 400a9ec:	18c7883a 	add	r3,r3,r3
 400a9f0:	18c7883a 	add	r3,r3,r3
 400a9f4:	10c5883a 	add	r2,r2,r3
 400a9f8:	10800017 	ldw	r2,0(r2)
 400a9fc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 400aa00:	e0bff817 	ldw	r2,-32(fp)
 400aa04:	1000061e 	bne	r2,zero,400aa20 <OSTaskResume+0x90>
 400aa08:	e0bff617 	ldw	r2,-40(fp)
 400aa0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aa10:	e0bff717 	ldw	r2,-36(fp)
 400aa14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 400aa18:	00801184 	movi	r2,70
 400aa1c:	00004c06 	br	400ab50 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 400aa20:	e0bff817 	ldw	r2,-32(fp)
 400aa24:	10800058 	cmpnei	r2,r2,1
 400aa28:	1000061e 	bne	r2,zero,400aa44 <OSTaskResume+0xb4>
 400aa2c:	e0bff617 	ldw	r2,-40(fp)
 400aa30:	e0bff915 	stw	r2,-28(fp)
 400aa34:	e0bff917 	ldw	r2,-28(fp)
 400aa38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400aa3c:	008010c4 	movi	r2,67
 400aa40:	00004306 	br	400ab50 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 400aa44:	e0bff817 	ldw	r2,-32(fp)
 400aa48:	10800c03 	ldbu	r2,48(r2)
 400aa4c:	10803fcc 	andi	r2,r2,255
 400aa50:	1080020c 	andi	r2,r2,8
 400aa54:	10003926 	beq	r2,zero,400ab3c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 400aa58:	e0bff817 	ldw	r2,-32(fp)
 400aa5c:	10c00c03 	ldbu	r3,48(r2)
 400aa60:	00bffdc4 	movi	r2,-9
 400aa64:	1884703a 	and	r2,r3,r2
 400aa68:	1007883a 	mov	r3,r2
 400aa6c:	e0bff817 	ldw	r2,-32(fp)
 400aa70:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 400aa74:	e0bff817 	ldw	r2,-32(fp)
 400aa78:	10800c03 	ldbu	r2,48(r2)
 400aa7c:	10803fcc 	andi	r2,r2,255
 400aa80:	1000281e 	bne	r2,zero,400ab24 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 400aa84:	e0bff817 	ldw	r2,-32(fp)
 400aa88:	10800b8b 	ldhu	r2,46(r2)
 400aa8c:	10bfffcc 	andi	r2,r2,65535
 400aa90:	10001f1e 	bne	r2,zero,400ab10 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 400aa94:	e0bff817 	ldw	r2,-32(fp)
 400aa98:	10c00d83 	ldbu	r3,54(r2)
 400aa9c:	d0a70203 	ldbu	r2,-25592(gp)
 400aaa0:	1884b03a 	or	r2,r3,r2
 400aaa4:	d0a70205 	stb	r2,-25592(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400aaa8:	e0bff817 	ldw	r2,-32(fp)
 400aaac:	10800d03 	ldbu	r2,52(r2)
 400aab0:	10c03fcc 	andi	r3,r2,255
 400aab4:	e0bff817 	ldw	r2,-32(fp)
 400aab8:	10800d03 	ldbu	r2,52(r2)
 400aabc:	11003fcc 	andi	r4,r2,255
 400aac0:	d0a70244 	addi	r2,gp,-25591
 400aac4:	2085883a 	add	r2,r4,r2
 400aac8:	11000003 	ldbu	r4,0(r2)
 400aacc:	e0bff817 	ldw	r2,-32(fp)
 400aad0:	10800d43 	ldbu	r2,53(r2)
 400aad4:	2084b03a 	or	r2,r4,r2
 400aad8:	1009883a 	mov	r4,r2
 400aadc:	d0a70244 	addi	r2,gp,-25591
 400aae0:	1885883a 	add	r2,r3,r2
 400aae4:	11000005 	stb	r4,0(r2)
 400aae8:	e0bff617 	ldw	r2,-40(fp)
 400aaec:	e0bffa15 	stw	r2,-24(fp)
 400aaf0:	e0bffa17 	ldw	r2,-24(fp)
 400aaf4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 400aaf8:	d0a6f643 	ldbu	r2,-25639(gp)
 400aafc:	10803fcc 	andi	r2,r2,255
 400ab00:	10800058 	cmpnei	r2,r2,1
 400ab04:	10000b1e 	bne	r2,zero,400ab34 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 400ab08:	40057000 	call	4005700 <OS_Sched>
 400ab0c:	00000906 	br	400ab34 <OSTaskResume+0x1a4>
 400ab10:	e0bff617 	ldw	r2,-40(fp)
 400ab14:	e0bffb15 	stw	r2,-20(fp)
 400ab18:	e0bffb17 	ldw	r2,-20(fp)
 400ab1c:	1001703a 	wrctl	status,r2
 400ab20:	00000406 	br	400ab34 <OSTaskResume+0x1a4>
 400ab24:	e0bff617 	ldw	r2,-40(fp)
 400ab28:	e0bffc15 	stw	r2,-16(fp)
 400ab2c:	e0bffc17 	ldw	r2,-16(fp)
 400ab30:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 400ab34:	0005883a 	mov	r2,zero
 400ab38:	00000506 	br	400ab50 <OSTaskResume+0x1c0>
 400ab3c:	e0bff617 	ldw	r2,-40(fp)
 400ab40:	e0bffd15 	stw	r2,-12(fp)
 400ab44:	e0bffd17 	ldw	r2,-12(fp)
 400ab48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 400ab4c:	00801104 	movi	r2,68
}
 400ab50:	e037883a 	mov	sp,fp
 400ab54:	dfc00117 	ldw	ra,4(sp)
 400ab58:	df000017 	ldw	fp,0(sp)
 400ab5c:	dec00204 	addi	sp,sp,8
 400ab60:	f800283a 	ret

0400ab64 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 400ab64:	defff304 	addi	sp,sp,-52
 400ab68:	df000c15 	stw	fp,48(sp)
 400ab6c:	df000c04 	addi	fp,sp,48
 400ab70:	2005883a 	mov	r2,r4
 400ab74:	e17fff15 	stw	r5,-4(fp)
 400ab78:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400ab7c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 400ab80:	e0bffe03 	ldbu	r2,-8(fp)
 400ab84:	10800570 	cmpltui	r2,r2,21
 400ab88:	1000051e 	bne	r2,zero,400aba0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 400ab8c:	e0bffe03 	ldbu	r2,-8(fp)
 400ab90:	10803fe0 	cmpeqi	r2,r2,255
 400ab94:	1000021e 	bne	r2,zero,400aba0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 400ab98:	00800a84 	movi	r2,42
 400ab9c:	00005d06 	br	400ad14 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 400aba0:	e0bfff17 	ldw	r2,-4(fp)
 400aba4:	1000021e 	bne	r2,zero,400abb0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 400aba8:	00800244 	movi	r2,9
 400abac:	00005906 	br	400ad14 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 400abb0:	e0bfff17 	ldw	r2,-4(fp)
 400abb4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 400abb8:	e0bfff17 	ldw	r2,-4(fp)
 400abbc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400abc0:	0005303a 	rdctl	r2,status
 400abc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400abc8:	e0fffd17 	ldw	r3,-12(fp)
 400abcc:	00bfff84 	movi	r2,-2
 400abd0:	1884703a 	and	r2,r3,r2
 400abd4:	1001703a 	wrctl	status,r2
  
  return context;
 400abd8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 400abdc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 400abe0:	e0bffe03 	ldbu	r2,-8(fp)
 400abe4:	10803fd8 	cmpnei	r2,r2,255
 400abe8:	1000031e 	bne	r2,zero,400abf8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 400abec:	d0a70517 	ldw	r2,-25580(gp)
 400abf0:	10800c83 	ldbu	r2,50(r2)
 400abf4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400abf8:	e0fffe03 	ldbu	r3,-8(fp)
 400abfc:	008100b4 	movhi	r2,1026
 400ac00:	10a10c04 	addi	r2,r2,-31696
 400ac04:	18c7883a 	add	r3,r3,r3
 400ac08:	18c7883a 	add	r3,r3,r3
 400ac0c:	10c5883a 	add	r2,r2,r3
 400ac10:	10800017 	ldw	r2,0(r2)
 400ac14:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 400ac18:	e0bff817 	ldw	r2,-32(fp)
 400ac1c:	1000061e 	bne	r2,zero,400ac38 <OSTaskStkChk+0xd4>
 400ac20:	e0bff617 	ldw	r2,-40(fp)
 400ac24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ac28:	e0bff717 	ldw	r2,-36(fp)
 400ac2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400ac30:	008010c4 	movi	r2,67
 400ac34:	00003706 	br	400ad14 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 400ac38:	e0bff817 	ldw	r2,-32(fp)
 400ac3c:	10800058 	cmpnei	r2,r2,1
 400ac40:	1000061e 	bne	r2,zero,400ac5c <OSTaskStkChk+0xf8>
 400ac44:	e0bff617 	ldw	r2,-40(fp)
 400ac48:	e0bff915 	stw	r2,-28(fp)
 400ac4c:	e0bff917 	ldw	r2,-28(fp)
 400ac50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400ac54:	008010c4 	movi	r2,67
 400ac58:	00002e06 	br	400ad14 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 400ac5c:	e0bff817 	ldw	r2,-32(fp)
 400ac60:	1080040b 	ldhu	r2,16(r2)
 400ac64:	10bfffcc 	andi	r2,r2,65535
 400ac68:	1080004c 	andi	r2,r2,1
 400ac6c:	1000061e 	bne	r2,zero,400ac88 <OSTaskStkChk+0x124>
 400ac70:	e0bff617 	ldw	r2,-40(fp)
 400ac74:	e0bffa15 	stw	r2,-24(fp)
 400ac78:	e0bffa17 	ldw	r2,-24(fp)
 400ac7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 400ac80:	00801144 	movi	r2,69
 400ac84:	00002306 	br	400ad14 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 400ac88:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 400ac8c:	e0bff817 	ldw	r2,-32(fp)
 400ac90:	10800317 	ldw	r2,12(r2)
 400ac94:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 400ac98:	e0bff817 	ldw	r2,-32(fp)
 400ac9c:	10800217 	ldw	r2,8(r2)
 400aca0:	e0bff415 	stw	r2,-48(fp)
 400aca4:	e0bff617 	ldw	r2,-40(fp)
 400aca8:	e0bffb15 	stw	r2,-20(fp)
 400acac:	e0bffb17 	ldw	r2,-20(fp)
 400acb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 400acb4:	00000306 	br	400acc4 <OSTaskStkChk+0x160>
        nfree++;
 400acb8:	e0bff517 	ldw	r2,-44(fp)
 400acbc:	10800044 	addi	r2,r2,1
 400acc0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 400acc4:	e0bff417 	ldw	r2,-48(fp)
 400acc8:	10c00104 	addi	r3,r2,4
 400accc:	e0fff415 	stw	r3,-48(fp)
 400acd0:	10800017 	ldw	r2,0(r2)
 400acd4:	103ff826 	beq	r2,zero,400acb8 <__alt_mem_onchip_memory2_0+0xfc008cb8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 400acd8:	e0bff517 	ldw	r2,-44(fp)
 400acdc:	1085883a 	add	r2,r2,r2
 400ace0:	1085883a 	add	r2,r2,r2
 400ace4:	1007883a 	mov	r3,r2
 400ace8:	e0bfff17 	ldw	r2,-4(fp)
 400acec:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 400acf0:	e0fffc17 	ldw	r3,-16(fp)
 400acf4:	e0bff517 	ldw	r2,-44(fp)
 400acf8:	1885c83a 	sub	r2,r3,r2
 400acfc:	1085883a 	add	r2,r2,r2
 400ad00:	1085883a 	add	r2,r2,r2
 400ad04:	1007883a 	mov	r3,r2
 400ad08:	e0bfff17 	ldw	r2,-4(fp)
 400ad0c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 400ad10:	0005883a 	mov	r2,zero
}
 400ad14:	e037883a 	mov	sp,fp
 400ad18:	df000017 	ldw	fp,0(sp)
 400ad1c:	dec00104 	addi	sp,sp,4
 400ad20:	f800283a 	ret

0400ad24 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 400ad24:	defff504 	addi	sp,sp,-44
 400ad28:	dfc00a15 	stw	ra,40(sp)
 400ad2c:	df000915 	stw	fp,36(sp)
 400ad30:	df000904 	addi	fp,sp,36
 400ad34:	2005883a 	mov	r2,r4
 400ad38:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ad3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 400ad40:	e0bfff03 	ldbu	r2,-4(fp)
 400ad44:	10800518 	cmpnei	r2,r2,20
 400ad48:	1000021e 	bne	r2,zero,400ad54 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 400ad4c:	008011c4 	movi	r2,71
 400ad50:	00006806 	br	400aef4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 400ad54:	e0bfff03 	ldbu	r2,-4(fp)
 400ad58:	10800530 	cmpltui	r2,r2,20
 400ad5c:	1000051e 	bne	r2,zero,400ad74 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 400ad60:	e0bfff03 	ldbu	r2,-4(fp)
 400ad64:	10803fe0 	cmpeqi	r2,r2,255
 400ad68:	1000021e 	bne	r2,zero,400ad74 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 400ad6c:	00800a84 	movi	r2,42
 400ad70:	00006006 	br	400aef4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad74:	0005303a 	rdctl	r2,status
 400ad78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad7c:	e0fffe17 	ldw	r3,-8(fp)
 400ad80:	00bfff84 	movi	r2,-2
 400ad84:	1884703a 	and	r2,r3,r2
 400ad88:	1001703a 	wrctl	status,r2
  
  return context;
 400ad8c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 400ad90:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 400ad94:	e0bfff03 	ldbu	r2,-4(fp)
 400ad98:	10803fd8 	cmpnei	r2,r2,255
 400ad9c:	1000061e 	bne	r2,zero,400adb8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 400ada0:	d0a70517 	ldw	r2,-25580(gp)
 400ada4:	10800c83 	ldbu	r2,50(r2)
 400ada8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 400adac:	00800044 	movi	r2,1
 400adb0:	e0bff705 	stb	r2,-36(fp)
 400adb4:	00000906 	br	400addc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 400adb8:	d0a70517 	ldw	r2,-25580(gp)
 400adbc:	10800c83 	ldbu	r2,50(r2)
 400adc0:	10c03fcc 	andi	r3,r2,255
 400adc4:	e0bfff03 	ldbu	r2,-4(fp)
 400adc8:	1880031e 	bne	r3,r2,400add8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 400adcc:	00800044 	movi	r2,1
 400add0:	e0bff705 	stb	r2,-36(fp)
 400add4:	00000106 	br	400addc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 400add8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400addc:	e0ffff03 	ldbu	r3,-4(fp)
 400ade0:	008100b4 	movhi	r2,1026
 400ade4:	10a10c04 	addi	r2,r2,-31696
 400ade8:	18c7883a 	add	r3,r3,r3
 400adec:	18c7883a 	add	r3,r3,r3
 400adf0:	10c5883a 	add	r2,r2,r3
 400adf4:	10800017 	ldw	r2,0(r2)
 400adf8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 400adfc:	e0bffa17 	ldw	r2,-24(fp)
 400ae00:	1000061e 	bne	r2,zero,400ae1c <OSTaskSuspend+0xf8>
 400ae04:	e0bff817 	ldw	r2,-32(fp)
 400ae08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ae0c:	e0bff917 	ldw	r2,-28(fp)
 400ae10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 400ae14:	00801204 	movi	r2,72
 400ae18:	00003606 	br	400aef4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 400ae1c:	e0bffa17 	ldw	r2,-24(fp)
 400ae20:	10800058 	cmpnei	r2,r2,1
 400ae24:	1000061e 	bne	r2,zero,400ae40 <OSTaskSuspend+0x11c>
 400ae28:	e0bff817 	ldw	r2,-32(fp)
 400ae2c:	e0bffb15 	stw	r2,-20(fp)
 400ae30:	e0bffb17 	ldw	r2,-20(fp)
 400ae34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400ae38:	008010c4 	movi	r2,67
 400ae3c:	00002d06 	br	400aef4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 400ae40:	e0bffa17 	ldw	r2,-24(fp)
 400ae44:	10800d03 	ldbu	r2,52(r2)
 400ae48:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 400ae4c:	e0fffd03 	ldbu	r3,-12(fp)
 400ae50:	e13ffd03 	ldbu	r4,-12(fp)
 400ae54:	d0a70244 	addi	r2,gp,-25591
 400ae58:	2085883a 	add	r2,r4,r2
 400ae5c:	10800003 	ldbu	r2,0(r2)
 400ae60:	1009883a 	mov	r4,r2
 400ae64:	e0bffa17 	ldw	r2,-24(fp)
 400ae68:	10800d43 	ldbu	r2,53(r2)
 400ae6c:	0084303a 	nor	r2,zero,r2
 400ae70:	2084703a 	and	r2,r4,r2
 400ae74:	1009883a 	mov	r4,r2
 400ae78:	d0a70244 	addi	r2,gp,-25591
 400ae7c:	1885883a 	add	r2,r3,r2
 400ae80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 400ae84:	e0fffd03 	ldbu	r3,-12(fp)
 400ae88:	d0a70244 	addi	r2,gp,-25591
 400ae8c:	1885883a 	add	r2,r3,r2
 400ae90:	10800003 	ldbu	r2,0(r2)
 400ae94:	10803fcc 	andi	r2,r2,255
 400ae98:	1000071e 	bne	r2,zero,400aeb8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 400ae9c:	e0bffa17 	ldw	r2,-24(fp)
 400aea0:	10800d83 	ldbu	r2,54(r2)
 400aea4:	0084303a 	nor	r2,zero,r2
 400aea8:	1007883a 	mov	r3,r2
 400aeac:	d0a70203 	ldbu	r2,-25592(gp)
 400aeb0:	1884703a 	and	r2,r3,r2
 400aeb4:	d0a70205 	stb	r2,-25592(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 400aeb8:	e0bffa17 	ldw	r2,-24(fp)
 400aebc:	10800c03 	ldbu	r2,48(r2)
 400aec0:	10800214 	ori	r2,r2,8
 400aec4:	1007883a 	mov	r3,r2
 400aec8:	e0bffa17 	ldw	r2,-24(fp)
 400aecc:	10c00c05 	stb	r3,48(r2)
 400aed0:	e0bff817 	ldw	r2,-32(fp)
 400aed4:	e0bffc15 	stw	r2,-16(fp)
 400aed8:	e0bffc17 	ldw	r2,-16(fp)
 400aedc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 400aee0:	e0bff703 	ldbu	r2,-36(fp)
 400aee4:	10800058 	cmpnei	r2,r2,1
 400aee8:	1000011e 	bne	r2,zero,400aef0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 400aeec:	40057000 	call	4005700 <OS_Sched>
    }
    return (OS_ERR_NONE);
 400aef0:	0005883a 	mov	r2,zero
}
 400aef4:	e037883a 	mov	sp,fp
 400aef8:	dfc00117 	ldw	ra,4(sp)
 400aefc:	df000017 	ldw	fp,0(sp)
 400af00:	dec00204 	addi	sp,sp,8
 400af04:	f800283a 	ret

0400af08 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 400af08:	defff604 	addi	sp,sp,-40
 400af0c:	dfc00915 	stw	ra,36(sp)
 400af10:	df000815 	stw	fp,32(sp)
 400af14:	df000804 	addi	fp,sp,32
 400af18:	2005883a 	mov	r2,r4
 400af1c:	e17fff15 	stw	r5,-4(fp)
 400af20:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400af24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 400af28:	e0bffe03 	ldbu	r2,-8(fp)
 400af2c:	10800570 	cmpltui	r2,r2,21
 400af30:	1000051e 	bne	r2,zero,400af48 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 400af34:	e0bffe03 	ldbu	r2,-8(fp)
 400af38:	10803fe0 	cmpeqi	r2,r2,255
 400af3c:	1000021e 	bne	r2,zero,400af48 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 400af40:	00800a84 	movi	r2,42
 400af44:	00003406 	br	400b018 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 400af48:	e0bfff17 	ldw	r2,-4(fp)
 400af4c:	1000021e 	bne	r2,zero,400af58 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 400af50:	00800244 	movi	r2,9
 400af54:	00003006 	br	400b018 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400af58:	0005303a 	rdctl	r2,status
 400af5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400af60:	e0fffd17 	ldw	r3,-12(fp)
 400af64:	00bfff84 	movi	r2,-2
 400af68:	1884703a 	and	r2,r3,r2
 400af6c:	1001703a 	wrctl	status,r2
  
  return context;
 400af70:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400af74:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 400af78:	e0bffe03 	ldbu	r2,-8(fp)
 400af7c:	10803fd8 	cmpnei	r2,r2,255
 400af80:	1000031e 	bne	r2,zero,400af90 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 400af84:	d0a70517 	ldw	r2,-25580(gp)
 400af88:	10800c83 	ldbu	r2,50(r2)
 400af8c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 400af90:	e0fffe03 	ldbu	r3,-8(fp)
 400af94:	008100b4 	movhi	r2,1026
 400af98:	10a10c04 	addi	r2,r2,-31696
 400af9c:	18c7883a 	add	r3,r3,r3
 400afa0:	18c7883a 	add	r3,r3,r3
 400afa4:	10c5883a 	add	r2,r2,r3
 400afa8:	10800017 	ldw	r2,0(r2)
 400afac:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 400afb0:	e0bffa17 	ldw	r2,-24(fp)
 400afb4:	1000061e 	bne	r2,zero,400afd0 <OSTaskQuery+0xc8>
 400afb8:	e0bff817 	ldw	r2,-32(fp)
 400afbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400afc0:	e0bff917 	ldw	r2,-28(fp)
 400afc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 400afc8:	00800a44 	movi	r2,41
 400afcc:	00001206 	br	400b018 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 400afd0:	e0bffa17 	ldw	r2,-24(fp)
 400afd4:	10800058 	cmpnei	r2,r2,1
 400afd8:	1000061e 	bne	r2,zero,400aff4 <OSTaskQuery+0xec>
 400afdc:	e0bff817 	ldw	r2,-32(fp)
 400afe0:	e0bffb15 	stw	r2,-20(fp)
 400afe4:	e0bffb17 	ldw	r2,-20(fp)
 400afe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 400afec:	008010c4 	movi	r2,67
 400aff0:	00000906 	br	400b018 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 400aff4:	01801b04 	movi	r6,108
 400aff8:	e17ffa17 	ldw	r5,-24(fp)
 400affc:	e13fff17 	ldw	r4,-4(fp)
 400b000:	40056980 	call	4005698 <OS_MemCopy>
 400b004:	e0bff817 	ldw	r2,-32(fp)
 400b008:	e0bffc15 	stw	r2,-16(fp)
 400b00c:	e0bffc17 	ldw	r2,-16(fp)
 400b010:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400b014:	0005883a 	mov	r2,zero
}
 400b018:	e037883a 	mov	sp,fp
 400b01c:	dfc00117 	ldw	ra,4(sp)
 400b020:	df000017 	ldw	fp,0(sp)
 400b024:	dec00204 	addi	sp,sp,8
 400b028:	f800283a 	ret

0400b02c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 400b02c:	defffc04 	addi	sp,sp,-16
 400b030:	df000315 	stw	fp,12(sp)
 400b034:	df000304 	addi	fp,sp,12
 400b038:	e13ffd15 	stw	r4,-12(fp)
 400b03c:	e17ffe15 	stw	r5,-8(fp)
 400b040:	3005883a 	mov	r2,r6
 400b044:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 400b048:	e0bfff0b 	ldhu	r2,-4(fp)
 400b04c:	1080004c 	andi	r2,r2,1
 400b050:	10000d26 	beq	r2,zero,400b088 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 400b054:	e0bfff0b 	ldhu	r2,-4(fp)
 400b058:	1080008c 	andi	r2,r2,2
 400b05c:	10000a26 	beq	r2,zero,400b088 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 400b060:	00000706 	br	400b080 <OS_TaskStkClr+0x54>
                size--;
 400b064:	e0bffe17 	ldw	r2,-8(fp)
 400b068:	10bfffc4 	addi	r2,r2,-1
 400b06c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 400b070:	e0bffd17 	ldw	r2,-12(fp)
 400b074:	10c00104 	addi	r3,r2,4
 400b078:	e0fffd15 	stw	r3,-12(fp)
 400b07c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 400b080:	e0bffe17 	ldw	r2,-8(fp)
 400b084:	103ff71e 	bne	r2,zero,400b064 <__alt_mem_onchip_memory2_0+0xfc009064>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 400b088:	0001883a 	nop
 400b08c:	e037883a 	mov	sp,fp
 400b090:	df000017 	ldw	fp,0(sp)
 400b094:	dec00104 	addi	sp,sp,4
 400b098:	f800283a 	ret

0400b09c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 400b09c:	defff904 	addi	sp,sp,-28
 400b0a0:	dfc00615 	stw	ra,24(sp)
 400b0a4:	df000515 	stw	fp,20(sp)
 400b0a8:	df000504 	addi	fp,sp,20
 400b0ac:	2005883a 	mov	r2,r4
 400b0b0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b0b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400b0b8:	d0a70403 	ldbu	r2,-25584(gp)
 400b0bc:	10803fcc 	andi	r2,r2,255
 400b0c0:	1000311e 	bne	r2,zero,400b188 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 400b0c4:	e0bfff0b 	ldhu	r2,-4(fp)
 400b0c8:	10003026 	beq	r2,zero,400b18c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b0cc:	0005303a 	rdctl	r2,status
 400b0d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b0d4:	e0fffe17 	ldw	r3,-8(fp)
 400b0d8:	00bfff84 	movi	r2,-2
 400b0dc:	1884703a 	and	r2,r3,r2
 400b0e0:	1001703a 	wrctl	status,r2
  
  return context;
 400b0e4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b0e8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 400b0ec:	d0a70517 	ldw	r2,-25580(gp)
 400b0f0:	10800d03 	ldbu	r2,52(r2)
 400b0f4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400b0f8:	e0fffd03 	ldbu	r3,-12(fp)
 400b0fc:	e13ffd03 	ldbu	r4,-12(fp)
 400b100:	d0a70244 	addi	r2,gp,-25591
 400b104:	2085883a 	add	r2,r4,r2
 400b108:	10800003 	ldbu	r2,0(r2)
 400b10c:	1009883a 	mov	r4,r2
 400b110:	d0a70517 	ldw	r2,-25580(gp)
 400b114:	10800d43 	ldbu	r2,53(r2)
 400b118:	0084303a 	nor	r2,zero,r2
 400b11c:	2084703a 	and	r2,r4,r2
 400b120:	1009883a 	mov	r4,r2
 400b124:	d0a70244 	addi	r2,gp,-25591
 400b128:	1885883a 	add	r2,r3,r2
 400b12c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 400b130:	e0fffd03 	ldbu	r3,-12(fp)
 400b134:	d0a70244 	addi	r2,gp,-25591
 400b138:	1885883a 	add	r2,r3,r2
 400b13c:	10800003 	ldbu	r2,0(r2)
 400b140:	10803fcc 	andi	r2,r2,255
 400b144:	1000071e 	bne	r2,zero,400b164 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400b148:	d0a70517 	ldw	r2,-25580(gp)
 400b14c:	10800d83 	ldbu	r2,54(r2)
 400b150:	0084303a 	nor	r2,zero,r2
 400b154:	1007883a 	mov	r3,r2
 400b158:	d0a70203 	ldbu	r2,-25592(gp)
 400b15c:	1884703a 	and	r2,r3,r2
 400b160:	d0a70205 	stb	r2,-25592(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 400b164:	d0a70517 	ldw	r2,-25580(gp)
 400b168:	e0ffff0b 	ldhu	r3,-4(fp)
 400b16c:	10c00b8d 	sth	r3,46(r2)
 400b170:	e0bffb17 	ldw	r2,-20(fp)
 400b174:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b178:	e0bffc17 	ldw	r2,-16(fp)
 400b17c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 400b180:	40057000 	call	4005700 <OS_Sched>
 400b184:	00000106 	br	400b18c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 400b188:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 400b18c:	e037883a 	mov	sp,fp
 400b190:	dfc00117 	ldw	ra,4(sp)
 400b194:	df000017 	ldw	fp,0(sp)
 400b198:	dec00204 	addi	sp,sp,8
 400b19c:	f800283a 	ret

0400b1a0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 400b1a0:	defff704 	addi	sp,sp,-36
 400b1a4:	dfc00815 	stw	ra,32(sp)
 400b1a8:	df000715 	stw	fp,28(sp)
 400b1ac:	dc000615 	stw	r16,24(sp)
 400b1b0:	df000704 	addi	fp,sp,28
 400b1b4:	2011883a 	mov	r8,r4
 400b1b8:	2809883a 	mov	r4,r5
 400b1bc:	3007883a 	mov	r3,r6
 400b1c0:	3805883a 	mov	r2,r7
 400b1c4:	e23ffb05 	stb	r8,-20(fp)
 400b1c8:	e13ffc05 	stb	r4,-16(fp)
 400b1cc:	e0fffd05 	stb	r3,-12(fp)
 400b1d0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400b1d4:	d0a70403 	ldbu	r2,-25584(gp)
 400b1d8:	10803fcc 	andi	r2,r2,255
 400b1dc:	10000226 	beq	r2,zero,400b1e8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 400b1e0:	00801544 	movi	r2,85
 400b1e4:	00003d06 	br	400b2dc <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 400b1e8:	e0bffb03 	ldbu	r2,-20(fp)
 400b1ec:	1000081e 	bne	r2,zero,400b210 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 400b1f0:	e0bffc03 	ldbu	r2,-16(fp)
 400b1f4:	1000061e 	bne	r2,zero,400b210 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 400b1f8:	e0bffd03 	ldbu	r2,-12(fp)
 400b1fc:	1000041e 	bne	r2,zero,400b210 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 400b200:	e0bffe0b 	ldhu	r2,-8(fp)
 400b204:	1000021e 	bne	r2,zero,400b210 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 400b208:	00801504 	movi	r2,84
 400b20c:	00003306 	br	400b2dc <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 400b210:	e0bffc03 	ldbu	r2,-16(fp)
 400b214:	10800f30 	cmpltui	r2,r2,60
 400b218:	1000021e 	bne	r2,zero,400b224 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 400b21c:	00801444 	movi	r2,81
 400b220:	00002e06 	br	400b2dc <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 400b224:	e0bffd03 	ldbu	r2,-12(fp)
 400b228:	10800f30 	cmpltui	r2,r2,60
 400b22c:	1000021e 	bne	r2,zero,400b238 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 400b230:	00801484 	movi	r2,82
 400b234:	00002906 	br	400b2dc <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 400b238:	e0bffe0b 	ldhu	r2,-8(fp)
 400b23c:	1080fa30 	cmpltui	r2,r2,1000
 400b240:	1000021e 	bne	r2,zero,400b24c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 400b244:	008014c4 	movi	r2,83
 400b248:	00002406 	br	400b2dc <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 400b24c:	e0bffb03 	ldbu	r2,-20(fp)
 400b250:	10c38424 	muli	r3,r2,3600
 400b254:	e0bffc03 	ldbu	r2,-16(fp)
 400b258:	10800f24 	muli	r2,r2,60
 400b25c:	1887883a 	add	r3,r3,r2
 400b260:	e0bffd03 	ldbu	r2,-12(fp)
 400b264:	1885883a 	add	r2,r3,r2
 400b268:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 400b26c:	e0bffe0b 	ldhu	r2,-8(fp)
 400b270:	1080fa24 	muli	r2,r2,1000
 400b274:	0140fa04 	movi	r5,1000
 400b278:	1009883a 	mov	r4,r2
 400b27c:	40030b80 	call	40030b8 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 400b280:	8085883a 	add	r2,r16,r2
 400b284:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 400b288:	e0bffa17 	ldw	r2,-24(fp)
 400b28c:	1004d43a 	srli	r2,r2,16
 400b290:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 400b294:	e0bffa17 	ldw	r2,-24(fp)
 400b298:	10bfffcc 	andi	r2,r2,65535
 400b29c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 400b2a0:	e0bffa17 	ldw	r2,-24(fp)
 400b2a4:	10bfffcc 	andi	r2,r2,65535
 400b2a8:	1009883a 	mov	r4,r2
 400b2ac:	400b09c0 	call	400b09c <OSTimeDly>
    while (loops > 0) {
 400b2b0:	00000706 	br	400b2d0 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 400b2b4:	01200014 	movui	r4,32768
 400b2b8:	400b09c0 	call	400b09c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 400b2bc:	01200014 	movui	r4,32768
 400b2c0:	400b09c0 	call	400b09c <OSTimeDly>
        loops--;
 400b2c4:	e0bff90b 	ldhu	r2,-28(fp)
 400b2c8:	10bfffc4 	addi	r2,r2,-1
 400b2cc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 400b2d0:	e0bff90b 	ldhu	r2,-28(fp)
 400b2d4:	103ff71e 	bne	r2,zero,400b2b4 <__alt_mem_onchip_memory2_0+0xfc0092b4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 400b2d8:	0005883a 	mov	r2,zero
}
 400b2dc:	e6ffff04 	addi	sp,fp,-4
 400b2e0:	dfc00217 	ldw	ra,8(sp)
 400b2e4:	df000117 	ldw	fp,4(sp)
 400b2e8:	dc000017 	ldw	r16,0(sp)
 400b2ec:	dec00304 	addi	sp,sp,12
 400b2f0:	f800283a 	ret

0400b2f4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 400b2f4:	defff504 	addi	sp,sp,-44
 400b2f8:	dfc00a15 	stw	ra,40(sp)
 400b2fc:	df000915 	stw	fp,36(sp)
 400b300:	df000904 	addi	fp,sp,36
 400b304:	2005883a 	mov	r2,r4
 400b308:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400b30c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 400b310:	e0bfff03 	ldbu	r2,-4(fp)
 400b314:	10800530 	cmpltui	r2,r2,20
 400b318:	1000021e 	bne	r2,zero,400b324 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 400b31c:	00800a84 	movi	r2,42
 400b320:	00006406 	br	400b4b4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b324:	0005303a 	rdctl	r2,status
 400b328:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b32c:	e0fffe17 	ldw	r3,-8(fp)
 400b330:	00bfff84 	movi	r2,-2
 400b334:	1884703a 	and	r2,r3,r2
 400b338:	1001703a 	wrctl	status,r2
  
  return context;
 400b33c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 400b340:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 400b344:	e0ffff03 	ldbu	r3,-4(fp)
 400b348:	008100b4 	movhi	r2,1026
 400b34c:	10a10c04 	addi	r2,r2,-31696
 400b350:	18c7883a 	add	r3,r3,r3
 400b354:	18c7883a 	add	r3,r3,r3
 400b358:	10c5883a 	add	r2,r2,r3
 400b35c:	10800017 	ldw	r2,0(r2)
 400b360:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 400b364:	e0bff917 	ldw	r2,-28(fp)
 400b368:	1000061e 	bne	r2,zero,400b384 <OSTimeDlyResume+0x90>
 400b36c:	e0bff717 	ldw	r2,-36(fp)
 400b370:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b374:	e0bff817 	ldw	r2,-32(fp)
 400b378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 400b37c:	008010c4 	movi	r2,67
 400b380:	00004c06 	br	400b4b4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 400b384:	e0bff917 	ldw	r2,-28(fp)
 400b388:	10800058 	cmpnei	r2,r2,1
 400b38c:	1000061e 	bne	r2,zero,400b3a8 <OSTimeDlyResume+0xb4>
 400b390:	e0bff717 	ldw	r2,-36(fp)
 400b394:	e0bffa15 	stw	r2,-24(fp)
 400b398:	e0bffa17 	ldw	r2,-24(fp)
 400b39c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 400b3a0:	008010c4 	movi	r2,67
 400b3a4:	00004306 	br	400b4b4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 400b3a8:	e0bff917 	ldw	r2,-28(fp)
 400b3ac:	10800b8b 	ldhu	r2,46(r2)
 400b3b0:	10bfffcc 	andi	r2,r2,65535
 400b3b4:	1000061e 	bne	r2,zero,400b3d0 <OSTimeDlyResume+0xdc>
 400b3b8:	e0bff717 	ldw	r2,-36(fp)
 400b3bc:	e0bffb15 	stw	r2,-20(fp)
 400b3c0:	e0bffb17 	ldw	r2,-20(fp)
 400b3c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 400b3c8:	00801404 	movi	r2,80
 400b3cc:	00003906 	br	400b4b4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 400b3d0:	e0bff917 	ldw	r2,-28(fp)
 400b3d4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400b3d8:	e0bff917 	ldw	r2,-28(fp)
 400b3dc:	10800c03 	ldbu	r2,48(r2)
 400b3e0:	10803fcc 	andi	r2,r2,255
 400b3e4:	10800dcc 	andi	r2,r2,55
 400b3e8:	10000b26 	beq	r2,zero,400b418 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 400b3ec:	e0bff917 	ldw	r2,-28(fp)
 400b3f0:	10c00c03 	ldbu	r3,48(r2)
 400b3f4:	00bff204 	movi	r2,-56
 400b3f8:	1884703a 	and	r2,r3,r2
 400b3fc:	1007883a 	mov	r3,r2
 400b400:	e0bff917 	ldw	r2,-28(fp)
 400b404:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 400b408:	e0bff917 	ldw	r2,-28(fp)
 400b40c:	00c00044 	movi	r3,1
 400b410:	10c00c45 	stb	r3,49(r2)
 400b414:	00000206 	br	400b420 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 400b418:	e0bff917 	ldw	r2,-28(fp)
 400b41c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 400b420:	e0bff917 	ldw	r2,-28(fp)
 400b424:	10800c03 	ldbu	r2,48(r2)
 400b428:	10803fcc 	andi	r2,r2,255
 400b42c:	1080020c 	andi	r2,r2,8
 400b430:	10001b1e 	bne	r2,zero,400b4a0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 400b434:	e0bff917 	ldw	r2,-28(fp)
 400b438:	10c00d83 	ldbu	r3,54(r2)
 400b43c:	d0a70203 	ldbu	r2,-25592(gp)
 400b440:	1884b03a 	or	r2,r3,r2
 400b444:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400b448:	e0bff917 	ldw	r2,-28(fp)
 400b44c:	10800d03 	ldbu	r2,52(r2)
 400b450:	10c03fcc 	andi	r3,r2,255
 400b454:	e0bff917 	ldw	r2,-28(fp)
 400b458:	10800d03 	ldbu	r2,52(r2)
 400b45c:	11003fcc 	andi	r4,r2,255
 400b460:	d0a70244 	addi	r2,gp,-25591
 400b464:	2085883a 	add	r2,r4,r2
 400b468:	11000003 	ldbu	r4,0(r2)
 400b46c:	e0bff917 	ldw	r2,-28(fp)
 400b470:	10800d43 	ldbu	r2,53(r2)
 400b474:	2084b03a 	or	r2,r4,r2
 400b478:	1009883a 	mov	r4,r2
 400b47c:	d0a70244 	addi	r2,gp,-25591
 400b480:	1885883a 	add	r2,r3,r2
 400b484:	11000005 	stb	r4,0(r2)
 400b488:	e0bff717 	ldw	r2,-36(fp)
 400b48c:	e0bffc15 	stw	r2,-16(fp)
 400b490:	e0bffc17 	ldw	r2,-16(fp)
 400b494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 400b498:	40057000 	call	4005700 <OS_Sched>
 400b49c:	00000406 	br	400b4b0 <OSTimeDlyResume+0x1bc>
 400b4a0:	e0bff717 	ldw	r2,-36(fp)
 400b4a4:	e0bffd15 	stw	r2,-12(fp)
 400b4a8:	e0bffd17 	ldw	r2,-12(fp)
 400b4ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 400b4b0:	0005883a 	mov	r2,zero
}
 400b4b4:	e037883a 	mov	sp,fp
 400b4b8:	dfc00117 	ldw	ra,4(sp)
 400b4bc:	df000017 	ldw	fp,0(sp)
 400b4c0:	dec00204 	addi	sp,sp,8
 400b4c4:	f800283a 	ret

0400b4c8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 400b4c8:	defffb04 	addi	sp,sp,-20
 400b4cc:	df000415 	stw	fp,16(sp)
 400b4d0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b4d4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b4d8:	0005303a 	rdctl	r2,status
 400b4dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b4e0:	e0fffe17 	ldw	r3,-8(fp)
 400b4e4:	00bfff84 	movi	r2,-2
 400b4e8:	1884703a 	and	r2,r3,r2
 400b4ec:	1001703a 	wrctl	status,r2
  
  return context;
 400b4f0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 400b4f4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 400b4f8:	d0a70617 	ldw	r2,-25576(gp)
 400b4fc:	e0bffd15 	stw	r2,-12(fp)
 400b500:	e0bffc17 	ldw	r2,-16(fp)
 400b504:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b508:	e0bfff17 	ldw	r2,-4(fp)
 400b50c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 400b510:	e0bffd17 	ldw	r2,-12(fp)
}
 400b514:	e037883a 	mov	sp,fp
 400b518:	df000017 	ldw	fp,0(sp)
 400b51c:	dec00104 	addi	sp,sp,4
 400b520:	f800283a 	ret

0400b524 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 400b524:	defffb04 	addi	sp,sp,-20
 400b528:	df000415 	stw	fp,16(sp)
 400b52c:	df000404 	addi	fp,sp,16
 400b530:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b534:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b538:	0005303a 	rdctl	r2,status
 400b53c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b540:	e0fffd17 	ldw	r3,-12(fp)
 400b544:	00bfff84 	movi	r2,-2
 400b548:	1884703a 	and	r2,r3,r2
 400b54c:	1001703a 	wrctl	status,r2
  
  return context;
 400b550:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400b554:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 400b558:	e0bfff17 	ldw	r2,-4(fp)
 400b55c:	d0a70615 	stw	r2,-25576(gp)
 400b560:	e0bffc17 	ldw	r2,-16(fp)
 400b564:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b568:	e0bffe17 	ldw	r2,-8(fp)
 400b56c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400b570:	0001883a 	nop
 400b574:	e037883a 	mov	sp,fp
 400b578:	df000017 	ldw	fp,0(sp)
 400b57c:	dec00104 	addi	sp,sp,4
 400b580:	f800283a 	ret

0400b584 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400b584:	defffd04 	addi	sp,sp,-12
 400b588:	dfc00215 	stw	ra,8(sp)
 400b58c:	df000115 	stw	fp,4(sp)
 400b590:	df000104 	addi	fp,sp,4
 400b594:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400b598:	d1600604 	addi	r5,gp,-32744
 400b59c:	e13fff17 	ldw	r4,-4(fp)
 400b5a0:	400c6200 	call	400c620 <alt_dev_llist_insert>
}
 400b5a4:	e037883a 	mov	sp,fp
 400b5a8:	dfc00117 	ldw	ra,4(sp)
 400b5ac:	df000017 	ldw	fp,0(sp)
 400b5b0:	dec00204 	addi	sp,sp,8
 400b5b4:	f800283a 	ret

0400b5b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400b5b8:	defffd04 	addi	sp,sp,-12
 400b5bc:	dfc00215 	stw	ra,8(sp)
 400b5c0:	df000115 	stw	fp,4(sp)
 400b5c4:	df000104 	addi	fp,sp,4
 400b5c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 400b5cc:	400cf900 	call	400cf90 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400b5d0:	00800044 	movi	r2,1
 400b5d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400b5d8:	0001883a 	nop
 400b5dc:	e037883a 	mov	sp,fp
 400b5e0:	dfc00117 	ldw	ra,4(sp)
 400b5e4:	df000017 	ldw	fp,0(sp)
 400b5e8:	dec00204 	addi	sp,sp,8
 400b5ec:	f800283a 	ret

0400b5f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400b5f0:	defffe04 	addi	sp,sp,-8
 400b5f4:	dfc00115 	stw	ra,4(sp)
 400b5f8:	df000015 	stw	fp,0(sp)
 400b5fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 400b600:	01c0fa04 	movi	r7,1000
 400b604:	01800044 	movi	r6,1
 400b608:	000b883a 	mov	r5,zero
 400b60c:	01020034 	movhi	r4,2048
 400b610:	21140004 	addi	r4,r4,20480
 400b614:	400c3f40 	call	400c3f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400b618:	000d883a 	mov	r6,zero
 400b61c:	000b883a 	mov	r5,zero
 400b620:	01010074 	movhi	r4,1025
 400b624:	21396f04 	addi	r4,r4,-6724
 400b628:	400b7b40 	call	400b7b4 <altera_avalon_jtag_uart_init>
 400b62c:	01010074 	movhi	r4,1025
 400b630:	21396504 	addi	r4,r4,-6764
 400b634:	400b5840 	call	400b584 <alt_dev_reg>
}
 400b638:	0001883a 	nop
 400b63c:	e037883a 	mov	sp,fp
 400b640:	dfc00117 	ldw	ra,4(sp)
 400b644:	df000017 	ldw	fp,0(sp)
 400b648:	dec00204 	addi	sp,sp,8
 400b64c:	f800283a 	ret

0400b650 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400b650:	defffa04 	addi	sp,sp,-24
 400b654:	dfc00515 	stw	ra,20(sp)
 400b658:	df000415 	stw	fp,16(sp)
 400b65c:	df000404 	addi	fp,sp,16
 400b660:	e13ffd15 	stw	r4,-12(fp)
 400b664:	e17ffe15 	stw	r5,-8(fp)
 400b668:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b66c:	e0bffd17 	ldw	r2,-12(fp)
 400b670:	10800017 	ldw	r2,0(r2)
 400b674:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400b678:	e0bffc17 	ldw	r2,-16(fp)
 400b67c:	10c00a04 	addi	r3,r2,40
 400b680:	e0bffd17 	ldw	r2,-12(fp)
 400b684:	10800217 	ldw	r2,8(r2)
 400b688:	100f883a 	mov	r7,r2
 400b68c:	e1bfff17 	ldw	r6,-4(fp)
 400b690:	e17ffe17 	ldw	r5,-8(fp)
 400b694:	1809883a 	mov	r4,r3
 400b698:	400bdfc0 	call	400bdfc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400b69c:	e037883a 	mov	sp,fp
 400b6a0:	dfc00117 	ldw	ra,4(sp)
 400b6a4:	df000017 	ldw	fp,0(sp)
 400b6a8:	dec00204 	addi	sp,sp,8
 400b6ac:	f800283a 	ret

0400b6b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400b6b0:	defffa04 	addi	sp,sp,-24
 400b6b4:	dfc00515 	stw	ra,20(sp)
 400b6b8:	df000415 	stw	fp,16(sp)
 400b6bc:	df000404 	addi	fp,sp,16
 400b6c0:	e13ffd15 	stw	r4,-12(fp)
 400b6c4:	e17ffe15 	stw	r5,-8(fp)
 400b6c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b6cc:	e0bffd17 	ldw	r2,-12(fp)
 400b6d0:	10800017 	ldw	r2,0(r2)
 400b6d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400b6d8:	e0bffc17 	ldw	r2,-16(fp)
 400b6dc:	10c00a04 	addi	r3,r2,40
 400b6e0:	e0bffd17 	ldw	r2,-12(fp)
 400b6e4:	10800217 	ldw	r2,8(r2)
 400b6e8:	100f883a 	mov	r7,r2
 400b6ec:	e1bfff17 	ldw	r6,-4(fp)
 400b6f0:	e17ffe17 	ldw	r5,-8(fp)
 400b6f4:	1809883a 	mov	r4,r3
 400b6f8:	400c0b80 	call	400c0b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400b6fc:	e037883a 	mov	sp,fp
 400b700:	dfc00117 	ldw	ra,4(sp)
 400b704:	df000017 	ldw	fp,0(sp)
 400b708:	dec00204 	addi	sp,sp,8
 400b70c:	f800283a 	ret

0400b710 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400b710:	defffc04 	addi	sp,sp,-16
 400b714:	dfc00315 	stw	ra,12(sp)
 400b718:	df000215 	stw	fp,8(sp)
 400b71c:	df000204 	addi	fp,sp,8
 400b720:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b724:	e0bfff17 	ldw	r2,-4(fp)
 400b728:	10800017 	ldw	r2,0(r2)
 400b72c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400b730:	e0bffe17 	ldw	r2,-8(fp)
 400b734:	10c00a04 	addi	r3,r2,40
 400b738:	e0bfff17 	ldw	r2,-4(fp)
 400b73c:	10800217 	ldw	r2,8(r2)
 400b740:	100b883a 	mov	r5,r2
 400b744:	1809883a 	mov	r4,r3
 400b748:	400bca40 	call	400bca4 <altera_avalon_jtag_uart_close>
}
 400b74c:	e037883a 	mov	sp,fp
 400b750:	dfc00117 	ldw	ra,4(sp)
 400b754:	df000017 	ldw	fp,0(sp)
 400b758:	dec00204 	addi	sp,sp,8
 400b75c:	f800283a 	ret

0400b760 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400b760:	defffa04 	addi	sp,sp,-24
 400b764:	dfc00515 	stw	ra,20(sp)
 400b768:	df000415 	stw	fp,16(sp)
 400b76c:	df000404 	addi	fp,sp,16
 400b770:	e13ffd15 	stw	r4,-12(fp)
 400b774:	e17ffe15 	stw	r5,-8(fp)
 400b778:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400b77c:	e0bffd17 	ldw	r2,-12(fp)
 400b780:	10800017 	ldw	r2,0(r2)
 400b784:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400b788:	e0bffc17 	ldw	r2,-16(fp)
 400b78c:	10800a04 	addi	r2,r2,40
 400b790:	e1bfff17 	ldw	r6,-4(fp)
 400b794:	e17ffe17 	ldw	r5,-8(fp)
 400b798:	1009883a 	mov	r4,r2
 400b79c:	400bd0c0 	call	400bd0c <altera_avalon_jtag_uart_ioctl>
}
 400b7a0:	e037883a 	mov	sp,fp
 400b7a4:	dfc00117 	ldw	ra,4(sp)
 400b7a8:	df000017 	ldw	fp,0(sp)
 400b7ac:	dec00204 	addi	sp,sp,8
 400b7b0:	f800283a 	ret

0400b7b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400b7b4:	defff104 	addi	sp,sp,-60
 400b7b8:	dfc00e15 	stw	ra,56(sp)
 400b7bc:	df000d15 	stw	fp,52(sp)
 400b7c0:	df000d04 	addi	fp,sp,52
 400b7c4:	e13ff915 	stw	r4,-28(fp)
 400b7c8:	e17ffa15 	stw	r5,-24(fp)
 400b7cc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 400b7d0:	e0bff917 	ldw	r2,-28(fp)
 400b7d4:	10800c04 	addi	r2,r2,48
 400b7d8:	e0bff415 	stw	r2,-48(fp)
 400b7dc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 400b7e0:	e0bff80b 	ldhu	r2,-32(fp)
 400b7e4:	e0fff884 	addi	r3,fp,-30
 400b7e8:	180b883a 	mov	r5,r3
 400b7ec:	1009883a 	mov	r4,r2
 400b7f0:	400626c0 	call	400626c <OSFlagCreate>
 400b7f4:	1007883a 	mov	r3,r2
 400b7f8:	e0bff417 	ldw	r2,-48(fp)
 400b7fc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 400b800:	e0bff917 	ldw	r2,-28(fp)
 400b804:	10800a04 	addi	r2,r2,40
 400b808:	e0bff515 	stw	r2,-44(fp)
 400b80c:	00800044 	movi	r2,1
 400b810:	e0bff78d 	sth	r2,-34(fp)
 400b814:	e0bff78b 	ldhu	r2,-34(fp)
 400b818:	1009883a 	mov	r4,r2
 400b81c:	4008f800 	call	4008f80 <OSSemCreate>
 400b820:	1007883a 	mov	r3,r2
 400b824:	e0bff517 	ldw	r2,-44(fp)
 400b828:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 400b82c:	e0bff917 	ldw	r2,-28(fp)
 400b830:	10800b04 	addi	r2,r2,44
 400b834:	e0bff615 	stw	r2,-40(fp)
 400b838:	00800044 	movi	r2,1
 400b83c:	e0bff70d 	sth	r2,-36(fp)
 400b840:	e0bff70b 	ldhu	r2,-36(fp)
 400b844:	1009883a 	mov	r4,r2
 400b848:	4008f800 	call	4008f80 <OSSemCreate>
 400b84c:	1007883a 	mov	r3,r2
 400b850:	e0bff617 	ldw	r2,-40(fp)
 400b854:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b858:	e0bff917 	ldw	r2,-28(fp)
 400b85c:	00c00044 	movi	r3,1
 400b860:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400b864:	e0bff917 	ldw	r2,-28(fp)
 400b868:	10800017 	ldw	r2,0(r2)
 400b86c:	10800104 	addi	r2,r2,4
 400b870:	1007883a 	mov	r3,r2
 400b874:	e0bff917 	ldw	r2,-28(fp)
 400b878:	10800817 	ldw	r2,32(r2)
 400b87c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400b880:	e0bffa17 	ldw	r2,-24(fp)
 400b884:	e0fffb17 	ldw	r3,-20(fp)
 400b888:	d8000015 	stw	zero,0(sp)
 400b88c:	e1fff917 	ldw	r7,-28(fp)
 400b890:	01810074 	movhi	r6,1025
 400b894:	31ae3f04 	addi	r6,r6,-18180
 400b898:	180b883a 	mov	r5,r3
 400b89c:	1009883a 	mov	r4,r2
 400b8a0:	400c7b80 	call	400c7b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400b8a4:	e0bff917 	ldw	r2,-28(fp)
 400b8a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400b8ac:	e0bff917 	ldw	r2,-28(fp)
 400b8b0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400b8b4:	d0e70b17 	ldw	r3,-25556(gp)
 400b8b8:	e1fff917 	ldw	r7,-28(fp)
 400b8bc:	01810074 	movhi	r6,1025
 400b8c0:	31aee804 	addi	r6,r6,-17504
 400b8c4:	180b883a 	mov	r5,r3
 400b8c8:	1009883a 	mov	r4,r2
 400b8cc:	400c4700 	call	400c470 <alt_alarm_start>
 400b8d0:	1000040e 	bge	r2,zero,400b8e4 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400b8d4:	e0fff917 	ldw	r3,-28(fp)
 400b8d8:	00a00034 	movhi	r2,32768
 400b8dc:	10bfffc4 	addi	r2,r2,-1
 400b8e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400b8e4:	0001883a 	nop
 400b8e8:	e037883a 	mov	sp,fp
 400b8ec:	dfc00117 	ldw	ra,4(sp)
 400b8f0:	df000017 	ldw	fp,0(sp)
 400b8f4:	dec00204 	addi	sp,sp,8
 400b8f8:	f800283a 	ret

0400b8fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400b8fc:	defff204 	addi	sp,sp,-56
 400b900:	dfc00d15 	stw	ra,52(sp)
 400b904:	df000c15 	stw	fp,48(sp)
 400b908:	df000c04 	addi	fp,sp,48
 400b90c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400b910:	e0bfff17 	ldw	r2,-4(fp)
 400b914:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 400b918:	e0bff617 	ldw	r2,-40(fp)
 400b91c:	10800017 	ldw	r2,0(r2)
 400b920:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b924:	e0bff717 	ldw	r2,-36(fp)
 400b928:	10800104 	addi	r2,r2,4
 400b92c:	10800037 	ldwio	r2,0(r2)
 400b930:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400b934:	e0bff817 	ldw	r2,-32(fp)
 400b938:	1080c00c 	andi	r2,r2,768
 400b93c:	10009126 	beq	r2,zero,400bb84 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400b940:	e0bff817 	ldw	r2,-32(fp)
 400b944:	1080400c 	andi	r2,r2,256
 400b948:	10004726 	beq	r2,zero,400ba68 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400b94c:	00800074 	movhi	r2,1
 400b950:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b954:	e0bff617 	ldw	r2,-40(fp)
 400b958:	10800d17 	ldw	r2,52(r2)
 400b95c:	10800044 	addi	r2,r2,1
 400b960:	1081ffcc 	andi	r2,r2,2047
 400b964:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 400b968:	e0bff617 	ldw	r2,-40(fp)
 400b96c:	10c00e17 	ldw	r3,56(r2)
 400b970:	e0bff917 	ldw	r2,-28(fp)
 400b974:	18802726 	beq	r3,r2,400ba14 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400b978:	e0bff717 	ldw	r2,-36(fp)
 400b97c:	10800037 	ldwio	r2,0(r2)
 400b980:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400b984:	e0bff417 	ldw	r2,-48(fp)
 400b988:	10a0000c 	andi	r2,r2,32768
 400b98c:	10002326 	beq	r2,zero,400ba1c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400b990:	e0bff617 	ldw	r2,-40(fp)
 400b994:	10800d17 	ldw	r2,52(r2)
 400b998:	e0fff417 	ldw	r3,-48(fp)
 400b99c:	1809883a 	mov	r4,r3
 400b9a0:	e0fff617 	ldw	r3,-40(fp)
 400b9a4:	1885883a 	add	r2,r3,r2
 400b9a8:	10801104 	addi	r2,r2,68
 400b9ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b9b0:	e0bff617 	ldw	r2,-40(fp)
 400b9b4:	10800d17 	ldw	r2,52(r2)
 400b9b8:	10800044 	addi	r2,r2,1
 400b9bc:	10c1ffcc 	andi	r3,r2,2047
 400b9c0:	e0bff617 	ldw	r2,-40(fp)
 400b9c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 400b9c8:	e0bff617 	ldw	r2,-40(fp)
 400b9cc:	10800c17 	ldw	r2,48(r2)
 400b9d0:	e0bffb15 	stw	r2,-20(fp)
 400b9d4:	00800044 	movi	r2,1
 400b9d8:	e0bffc0d 	sth	r2,-16(fp)
 400b9dc:	00800044 	movi	r2,1
 400b9e0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400b9e4:	d0a6f643 	ldbu	r2,-25639(gp)
 400b9e8:	10803fcc 	andi	r2,r2,255
 400b9ec:	103fd926 	beq	r2,zero,400b954 <__alt_mem_onchip_memory2_0+0xfc009954>
  {
    OSFlagPost (group, flags, opt, &err);
 400b9f0:	e0bffc0b 	ldhu	r2,-16(fp)
 400b9f4:	e0fffc83 	ldbu	r3,-14(fp)
 400b9f8:	e13ffdc4 	addi	r4,fp,-9
 400b9fc:	200f883a 	mov	r7,r4
 400ba00:	180d883a 	mov	r6,r3
 400ba04:	100b883a 	mov	r5,r2
 400ba08:	e13ffb17 	ldw	r4,-20(fp)
 400ba0c:	4006e480 	call	4006e48 <OSFlagPost>
      }
 400ba10:	003fd006 	br	400b954 <__alt_mem_onchip_memory2_0+0xfc009954>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400ba14:	0001883a 	nop
 400ba18:	00000106 	br	400ba20 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400ba1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400ba20:	e0bff417 	ldw	r2,-48(fp)
 400ba24:	10bfffec 	andhi	r2,r2,65535
 400ba28:	10000f26 	beq	r2,zero,400ba68 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400ba2c:	e0bff617 	ldw	r2,-40(fp)
 400ba30:	10c00817 	ldw	r3,32(r2)
 400ba34:	00bfff84 	movi	r2,-2
 400ba38:	1886703a 	and	r3,r3,r2
 400ba3c:	e0bff617 	ldw	r2,-40(fp)
 400ba40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400ba44:	e0bff717 	ldw	r2,-36(fp)
 400ba48:	10800104 	addi	r2,r2,4
 400ba4c:	1007883a 	mov	r3,r2
 400ba50:	e0bff617 	ldw	r2,-40(fp)
 400ba54:	10800817 	ldw	r2,32(r2)
 400ba58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400ba5c:	e0bff717 	ldw	r2,-36(fp)
 400ba60:	10800104 	addi	r2,r2,4
 400ba64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400ba68:	e0bff817 	ldw	r2,-32(fp)
 400ba6c:	1080800c 	andi	r2,r2,512
 400ba70:	103fac26 	beq	r2,zero,400b924 <__alt_mem_onchip_memory2_0+0xfc009924>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400ba74:	e0bff817 	ldw	r2,-32(fp)
 400ba78:	1004d43a 	srli	r2,r2,16
 400ba7c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400ba80:	00002606 	br	400bb1c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400ba84:	e0bff717 	ldw	r2,-36(fp)
 400ba88:	e0fff617 	ldw	r3,-40(fp)
 400ba8c:	18c01017 	ldw	r3,64(r3)
 400ba90:	e13ff617 	ldw	r4,-40(fp)
 400ba94:	20c7883a 	add	r3,r4,r3
 400ba98:	18c21104 	addi	r3,r3,2116
 400ba9c:	18c00003 	ldbu	r3,0(r3)
 400baa0:	18c03fcc 	andi	r3,r3,255
 400baa4:	18c0201c 	xori	r3,r3,128
 400baa8:	18ffe004 	addi	r3,r3,-128
 400baac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bab0:	e0bff617 	ldw	r2,-40(fp)
 400bab4:	10801017 	ldw	r2,64(r2)
 400bab8:	10800044 	addi	r2,r2,1
 400babc:	10c1ffcc 	andi	r3,r2,2047
 400bac0:	e0bff617 	ldw	r2,-40(fp)
 400bac4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 400bac8:	e0bff617 	ldw	r2,-40(fp)
 400bacc:	10800c17 	ldw	r2,48(r2)
 400bad0:	e0bffa15 	stw	r2,-24(fp)
 400bad4:	00800084 	movi	r2,2
 400bad8:	e0bffd0d 	sth	r2,-12(fp)
 400badc:	00800044 	movi	r2,1
 400bae0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400bae4:	d0a6f643 	ldbu	r2,-25639(gp)
 400bae8:	10803fcc 	andi	r2,r2,255
 400baec:	10000826 	beq	r2,zero,400bb10 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 400baf0:	e0bffd0b 	ldhu	r2,-12(fp)
 400baf4:	e0fffd83 	ldbu	r3,-10(fp)
 400baf8:	e13ffe04 	addi	r4,fp,-8
 400bafc:	200f883a 	mov	r7,r4
 400bb00:	180d883a 	mov	r6,r3
 400bb04:	100b883a 	mov	r5,r2
 400bb08:	e13ffa17 	ldw	r4,-24(fp)
 400bb0c:	4006e480 	call	4006e48 <OSFlagPost>

        space--;
 400bb10:	e0bff517 	ldw	r2,-44(fp)
 400bb14:	10bfffc4 	addi	r2,r2,-1
 400bb18:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400bb1c:	e0bff517 	ldw	r2,-44(fp)
 400bb20:	10000526 	beq	r2,zero,400bb38 <altera_avalon_jtag_uart_irq+0x23c>
 400bb24:	e0bff617 	ldw	r2,-40(fp)
 400bb28:	10c01017 	ldw	r3,64(r2)
 400bb2c:	e0bff617 	ldw	r2,-40(fp)
 400bb30:	10800f17 	ldw	r2,60(r2)
 400bb34:	18bfd31e 	bne	r3,r2,400ba84 <__alt_mem_onchip_memory2_0+0xfc009a84>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400bb38:	e0bff517 	ldw	r2,-44(fp)
 400bb3c:	103f7926 	beq	r2,zero,400b924 <__alt_mem_onchip_memory2_0+0xfc009924>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400bb40:	e0bff617 	ldw	r2,-40(fp)
 400bb44:	10c00817 	ldw	r3,32(r2)
 400bb48:	00bfff44 	movi	r2,-3
 400bb4c:	1886703a 	and	r3,r3,r2
 400bb50:	e0bff617 	ldw	r2,-40(fp)
 400bb54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400bb58:	e0bff617 	ldw	r2,-40(fp)
 400bb5c:	10800017 	ldw	r2,0(r2)
 400bb60:	10800104 	addi	r2,r2,4
 400bb64:	1007883a 	mov	r3,r2
 400bb68:	e0bff617 	ldw	r2,-40(fp)
 400bb6c:	10800817 	ldw	r2,32(r2)
 400bb70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400bb74:	e0bff717 	ldw	r2,-36(fp)
 400bb78:	10800104 	addi	r2,r2,4
 400bb7c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400bb80:	003f6806 	br	400b924 <__alt_mem_onchip_memory2_0+0xfc009924>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400bb84:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400bb88:	0001883a 	nop
 400bb8c:	e037883a 	mov	sp,fp
 400bb90:	dfc00117 	ldw	ra,4(sp)
 400bb94:	df000017 	ldw	fp,0(sp)
 400bb98:	dec00204 	addi	sp,sp,8
 400bb9c:	f800283a 	ret

0400bba0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400bba0:	defff904 	addi	sp,sp,-28
 400bba4:	dfc00615 	stw	ra,24(sp)
 400bba8:	df000515 	stw	fp,20(sp)
 400bbac:	df000504 	addi	fp,sp,20
 400bbb0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400bbb4:	e0bfff17 	ldw	r2,-4(fp)
 400bbb8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400bbbc:	e0bffb17 	ldw	r2,-20(fp)
 400bbc0:	10800017 	ldw	r2,0(r2)
 400bbc4:	10800104 	addi	r2,r2,4
 400bbc8:	10800037 	ldwio	r2,0(r2)
 400bbcc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400bbd0:	e0bffc17 	ldw	r2,-16(fp)
 400bbd4:	1081000c 	andi	r2,r2,1024
 400bbd8:	10000b26 	beq	r2,zero,400bc08 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400bbdc:	e0bffb17 	ldw	r2,-20(fp)
 400bbe0:	10800017 	ldw	r2,0(r2)
 400bbe4:	10800104 	addi	r2,r2,4
 400bbe8:	1007883a 	mov	r3,r2
 400bbec:	e0bffb17 	ldw	r2,-20(fp)
 400bbf0:	10800817 	ldw	r2,32(r2)
 400bbf4:	10810014 	ori	r2,r2,1024
 400bbf8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400bbfc:	e0bffb17 	ldw	r2,-20(fp)
 400bc00:	10000915 	stw	zero,36(r2)
 400bc04:	00002106 	br	400bc8c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400bc08:	e0bffb17 	ldw	r2,-20(fp)
 400bc0c:	10c00917 	ldw	r3,36(r2)
 400bc10:	00a00034 	movhi	r2,32768
 400bc14:	10bfff04 	addi	r2,r2,-4
 400bc18:	10c01c36 	bltu	r2,r3,400bc8c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 400bc1c:	e0bffb17 	ldw	r2,-20(fp)
 400bc20:	10800917 	ldw	r2,36(r2)
 400bc24:	10c00044 	addi	r3,r2,1
 400bc28:	e0bffb17 	ldw	r2,-20(fp)
 400bc2c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 400bc30:	e0bffb17 	ldw	r2,-20(fp)
 400bc34:	10c00917 	ldw	r3,36(r2)
 400bc38:	e0bffb17 	ldw	r2,-20(fp)
 400bc3c:	10800117 	ldw	r2,4(r2)
 400bc40:	18801236 	bltu	r3,r2,400bc8c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 400bc44:	e0bffb17 	ldw	r2,-20(fp)
 400bc48:	10800c17 	ldw	r2,48(r2)
 400bc4c:	e0bffd15 	stw	r2,-12(fp)
 400bc50:	00800104 	movi	r2,4
 400bc54:	e0bffe0d 	sth	r2,-8(fp)
 400bc58:	00800044 	movi	r2,1
 400bc5c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 400bc60:	d0a6f643 	ldbu	r2,-25639(gp)
 400bc64:	10803fcc 	andi	r2,r2,255
 400bc68:	10000826 	beq	r2,zero,400bc8c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 400bc6c:	e0bffe0b 	ldhu	r2,-8(fp)
 400bc70:	e0fffe83 	ldbu	r3,-6(fp)
 400bc74:	e13ffec4 	addi	r4,fp,-5
 400bc78:	200f883a 	mov	r7,r4
 400bc7c:	180d883a 	mov	r6,r3
 400bc80:	100b883a 	mov	r5,r2
 400bc84:	e13ffd17 	ldw	r4,-12(fp)
 400bc88:	4006e480 	call	4006e48 <OSFlagPost>
 400bc8c:	d0a70b17 	ldw	r2,-25556(gp)
    }
  }

  return alt_ticks_per_second();
}
 400bc90:	e037883a 	mov	sp,fp
 400bc94:	dfc00117 	ldw	ra,4(sp)
 400bc98:	df000017 	ldw	fp,0(sp)
 400bc9c:	dec00204 	addi	sp,sp,8
 400bca0:	f800283a 	ret

0400bca4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400bca4:	defffd04 	addi	sp,sp,-12
 400bca8:	df000215 	stw	fp,8(sp)
 400bcac:	df000204 	addi	fp,sp,8
 400bcb0:	e13ffe15 	stw	r4,-8(fp)
 400bcb4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400bcb8:	00000506 	br	400bcd0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400bcbc:	e0bfff17 	ldw	r2,-4(fp)
 400bcc0:	1090000c 	andi	r2,r2,16384
 400bcc4:	10000226 	beq	r2,zero,400bcd0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400bcc8:	00bffd44 	movi	r2,-11
 400bccc:	00000b06 	br	400bcfc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400bcd0:	e0bffe17 	ldw	r2,-8(fp)
 400bcd4:	10c01017 	ldw	r3,64(r2)
 400bcd8:	e0bffe17 	ldw	r2,-8(fp)
 400bcdc:	10800f17 	ldw	r2,60(r2)
 400bce0:	18800526 	beq	r3,r2,400bcf8 <altera_avalon_jtag_uart_close+0x54>
 400bce4:	e0bffe17 	ldw	r2,-8(fp)
 400bce8:	10c00917 	ldw	r3,36(r2)
 400bcec:	e0bffe17 	ldw	r2,-8(fp)
 400bcf0:	10800117 	ldw	r2,4(r2)
 400bcf4:	18bff136 	bltu	r3,r2,400bcbc <__alt_mem_onchip_memory2_0+0xfc009cbc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400bcf8:	0005883a 	mov	r2,zero
}
 400bcfc:	e037883a 	mov	sp,fp
 400bd00:	df000017 	ldw	fp,0(sp)
 400bd04:	dec00104 	addi	sp,sp,4
 400bd08:	f800283a 	ret

0400bd0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400bd0c:	defffa04 	addi	sp,sp,-24
 400bd10:	df000515 	stw	fp,20(sp)
 400bd14:	df000504 	addi	fp,sp,20
 400bd18:	e13ffd15 	stw	r4,-12(fp)
 400bd1c:	e17ffe15 	stw	r5,-8(fp)
 400bd20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400bd24:	00bff9c4 	movi	r2,-25
 400bd28:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400bd2c:	e0bffe17 	ldw	r2,-8(fp)
 400bd30:	10da8060 	cmpeqi	r3,r2,27137
 400bd34:	1800031e 	bne	r3,zero,400bd44 <altera_avalon_jtag_uart_ioctl+0x38>
 400bd38:	109a80a0 	cmpeqi	r2,r2,27138
 400bd3c:	1000181e 	bne	r2,zero,400bda0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400bd40:	00002906 	br	400bde8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400bd44:	e0bffd17 	ldw	r2,-12(fp)
 400bd48:	10c00117 	ldw	r3,4(r2)
 400bd4c:	00a00034 	movhi	r2,32768
 400bd50:	10bfffc4 	addi	r2,r2,-1
 400bd54:	18802126 	beq	r3,r2,400bddc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400bd58:	e0bfff17 	ldw	r2,-4(fp)
 400bd5c:	10800017 	ldw	r2,0(r2)
 400bd60:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400bd64:	e0bffc17 	ldw	r2,-16(fp)
 400bd68:	10800090 	cmplti	r2,r2,2
 400bd6c:	1000061e 	bne	r2,zero,400bd88 <altera_avalon_jtag_uart_ioctl+0x7c>
 400bd70:	e0fffc17 	ldw	r3,-16(fp)
 400bd74:	00a00034 	movhi	r2,32768
 400bd78:	10bfffc4 	addi	r2,r2,-1
 400bd7c:	18800226 	beq	r3,r2,400bd88 <altera_avalon_jtag_uart_ioctl+0x7c>
 400bd80:	e0bffc17 	ldw	r2,-16(fp)
 400bd84:	00000206 	br	400bd90 <altera_avalon_jtag_uart_ioctl+0x84>
 400bd88:	00a00034 	movhi	r2,32768
 400bd8c:	10bfff84 	addi	r2,r2,-2
 400bd90:	e0fffd17 	ldw	r3,-12(fp)
 400bd94:	18800115 	stw	r2,4(r3)
      rc = 0;
 400bd98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400bd9c:	00000f06 	br	400bddc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400bda0:	e0bffd17 	ldw	r2,-12(fp)
 400bda4:	10c00117 	ldw	r3,4(r2)
 400bda8:	00a00034 	movhi	r2,32768
 400bdac:	10bfffc4 	addi	r2,r2,-1
 400bdb0:	18800c26 	beq	r3,r2,400bde4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400bdb4:	e0bffd17 	ldw	r2,-12(fp)
 400bdb8:	10c00917 	ldw	r3,36(r2)
 400bdbc:	e0bffd17 	ldw	r2,-12(fp)
 400bdc0:	10800117 	ldw	r2,4(r2)
 400bdc4:	1885803a 	cmpltu	r2,r3,r2
 400bdc8:	10c03fcc 	andi	r3,r2,255
 400bdcc:	e0bfff17 	ldw	r2,-4(fp)
 400bdd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400bdd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400bdd8:	00000206 	br	400bde4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400bddc:	0001883a 	nop
 400bde0:	00000106 	br	400bde8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400bde4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400bde8:	e0bffb17 	ldw	r2,-20(fp)
}
 400bdec:	e037883a 	mov	sp,fp
 400bdf0:	df000017 	ldw	fp,0(sp)
 400bdf4:	dec00104 	addi	sp,sp,4
 400bdf8:	f800283a 	ret

0400bdfc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400bdfc:	deffed04 	addi	sp,sp,-76
 400be00:	dfc01215 	stw	ra,72(sp)
 400be04:	df001115 	stw	fp,68(sp)
 400be08:	df001104 	addi	fp,sp,68
 400be0c:	e13ffc15 	stw	r4,-16(fp)
 400be10:	e17ffd15 	stw	r5,-12(fp)
 400be14:	e1bffe15 	stw	r6,-8(fp)
 400be18:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400be1c:	e0bffd17 	ldw	r2,-12(fp)
 400be20:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 400be24:	e0bffc17 	ldw	r2,-16(fp)
 400be28:	10800a17 	ldw	r2,40(r2)
 400be2c:	e0bff815 	stw	r2,-32(fp)
 400be30:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 400be34:	e0bff90b 	ldhu	r2,-28(fp)
 400be38:	e0fffb04 	addi	r3,fp,-20
 400be3c:	180d883a 	mov	r6,r3
 400be40:	100b883a 	mov	r5,r2
 400be44:	e13ff817 	ldw	r4,-32(fp)
 400be48:	40092980 	call	4009298 <OSSemPend>

  while (space > 0)
 400be4c:	00006106 	br	400bfd4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400be50:	e0bffc17 	ldw	r2,-16(fp)
 400be54:	10800d17 	ldw	r2,52(r2)
 400be58:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 400be5c:	e0bffc17 	ldw	r2,-16(fp)
 400be60:	10800e17 	ldw	r2,56(r2)
 400be64:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 400be68:	e0fff317 	ldw	r3,-52(fp)
 400be6c:	e0bff417 	ldw	r2,-48(fp)
 400be70:	18800536 	bltu	r3,r2,400be88 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 400be74:	e0fff317 	ldw	r3,-52(fp)
 400be78:	e0bff417 	ldw	r2,-48(fp)
 400be7c:	1885c83a 	sub	r2,r3,r2
 400be80:	e0bff115 	stw	r2,-60(fp)
 400be84:	00000406 	br	400be98 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400be88:	00c20004 	movi	r3,2048
 400be8c:	e0bff417 	ldw	r2,-48(fp)
 400be90:	1885c83a 	sub	r2,r3,r2
 400be94:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 400be98:	e0bff117 	ldw	r2,-60(fp)
 400be9c:	10001e26 	beq	r2,zero,400bf18 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 400bea0:	e0fffe17 	ldw	r3,-8(fp)
 400bea4:	e0bff117 	ldw	r2,-60(fp)
 400bea8:	1880022e 	bgeu	r3,r2,400beb4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 400beac:	e0bffe17 	ldw	r2,-8(fp)
 400beb0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400beb4:	e0bffc17 	ldw	r2,-16(fp)
 400beb8:	10c01104 	addi	r3,r2,68
 400bebc:	e0bff417 	ldw	r2,-48(fp)
 400bec0:	1885883a 	add	r2,r3,r2
 400bec4:	e1bff117 	ldw	r6,-60(fp)
 400bec8:	100b883a 	mov	r5,r2
 400becc:	e13ff017 	ldw	r4,-64(fp)
 400bed0:	40017ec0 	call	40017ec <memcpy>
      ptr   += n;
 400bed4:	e0fff017 	ldw	r3,-64(fp)
 400bed8:	e0bff117 	ldw	r2,-60(fp)
 400bedc:	1885883a 	add	r2,r3,r2
 400bee0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 400bee4:	e0fffe17 	ldw	r3,-8(fp)
 400bee8:	e0bff117 	ldw	r2,-60(fp)
 400beec:	1885c83a 	sub	r2,r3,r2
 400bef0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bef4:	e0fff417 	ldw	r3,-48(fp)
 400bef8:	e0bff117 	ldw	r2,-60(fp)
 400befc:	1885883a 	add	r2,r3,r2
 400bf00:	10c1ffcc 	andi	r3,r2,2047
 400bf04:	e0bffc17 	ldw	r2,-16(fp)
 400bf08:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 400bf0c:	e0bffe17 	ldw	r2,-8(fp)
 400bf10:	00bfcf16 	blt	zero,r2,400be50 <__alt_mem_onchip_memory2_0+0xfc009e50>
 400bf14:	00000106 	br	400bf1c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400bf18:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400bf1c:	e0fff017 	ldw	r3,-64(fp)
 400bf20:	e0bffd17 	ldw	r2,-12(fp)
 400bf24:	18802e1e 	bne	r3,r2,400bfe0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400bf28:	e0bfff17 	ldw	r2,-4(fp)
 400bf2c:	1090000c 	andi	r2,r2,16384
 400bf30:	10002d1e 	bne	r2,zero,400bfe8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 400bf34:	d0a6f643 	ldbu	r2,-25639(gp)
 400bf38:	10803fcc 	andi	r2,r2,255
 400bf3c:	10800058 	cmpnei	r2,r2,1
 400bf40:	1000161e 	bne	r2,zero,400bf9c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 400bf44:	e0bffc17 	ldw	r2,-16(fp)
 400bf48:	10800c17 	ldw	r2,48(r2)
 400bf4c:	e0bff215 	stw	r2,-56(fp)
 400bf50:	00800144 	movi	r2,5
 400bf54:	e0bff98d 	sth	r2,-26(fp)
 400bf58:	00bfe0c4 	movi	r2,-125
 400bf5c:	e0bffa05 	stb	r2,-24(fp)
 400bf60:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 400bf64:	d0a6f643 	ldbu	r2,-25639(gp)
 400bf68:	10803fcc 	andi	r2,r2,255
 400bf6c:	10001526 	beq	r2,zero,400bfc4 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 400bf70:	e0fff98b 	ldhu	r3,-26(fp)
 400bf74:	e13ffa03 	ldbu	r4,-24(fp)
 400bf78:	e17ffa8b 	ldhu	r5,-22(fp)
 400bf7c:	e0bffb44 	addi	r2,fp,-19
 400bf80:	d8800015 	stw	r2,0(sp)
 400bf84:	280f883a 	mov	r7,r5
 400bf88:	200d883a 	mov	r6,r4
 400bf8c:	180b883a 	mov	r5,r3
 400bf90:	e13ff217 	ldw	r4,-56(fp)
 400bf94:	40068300 	call	4006830 <OSFlagPend>
 400bf98:	00000a06 	br	400bfc4 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400bf9c:	0001883a 	nop
 400bfa0:	e0bffc17 	ldw	r2,-16(fp)
 400bfa4:	10c00d17 	ldw	r3,52(r2)
 400bfa8:	e0bff317 	ldw	r2,-52(fp)
 400bfac:	1880051e 	bne	r3,r2,400bfc4 <altera_avalon_jtag_uart_read+0x1c8>
 400bfb0:	e0bffc17 	ldw	r2,-16(fp)
 400bfb4:	10c00917 	ldw	r3,36(r2)
 400bfb8:	e0bffc17 	ldw	r2,-16(fp)
 400bfbc:	10800117 	ldw	r2,4(r2)
 400bfc0:	18bff736 	bltu	r3,r2,400bfa0 <__alt_mem_onchip_memory2_0+0xfc009fa0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400bfc4:	e0bffc17 	ldw	r2,-16(fp)
 400bfc8:	10c00d17 	ldw	r3,52(r2)
 400bfcc:	e0bff317 	ldw	r2,-52(fp)
 400bfd0:	18800726 	beq	r3,r2,400bff0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400bfd4:	e0bffe17 	ldw	r2,-8(fp)
 400bfd8:	00bf9d16 	blt	zero,r2,400be50 <__alt_mem_onchip_memory2_0+0xfc009e50>
 400bfdc:	00000506 	br	400bff4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400bfe0:	0001883a 	nop
 400bfe4:	00000306 	br	400bff4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400bfe8:	0001883a 	nop
 400bfec:	00000106 	br	400bff4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400bff0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 400bff4:	e0bffc17 	ldw	r2,-16(fp)
 400bff8:	10800a17 	ldw	r2,40(r2)
 400bffc:	1009883a 	mov	r4,r2
 400c000:	40096100 	call	4009610 <OSSemPost>

  if (ptr != buffer)
 400c004:	e0fff017 	ldw	r3,-64(fp)
 400c008:	e0bffd17 	ldw	r2,-12(fp)
 400c00c:	18801826 	beq	r3,r2,400c070 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c010:	0005303a 	rdctl	r2,status
 400c014:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c018:	e0fff717 	ldw	r3,-36(fp)
 400c01c:	00bfff84 	movi	r2,-2
 400c020:	1884703a 	and	r2,r3,r2
 400c024:	1001703a 	wrctl	status,r2
  
  return context;
 400c028:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400c02c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400c030:	e0bffc17 	ldw	r2,-16(fp)
 400c034:	10800817 	ldw	r2,32(r2)
 400c038:	10c00054 	ori	r3,r2,1
 400c03c:	e0bffc17 	ldw	r2,-16(fp)
 400c040:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400c044:	e0bffc17 	ldw	r2,-16(fp)
 400c048:	10800017 	ldw	r2,0(r2)
 400c04c:	10800104 	addi	r2,r2,4
 400c050:	1007883a 	mov	r3,r2
 400c054:	e0bffc17 	ldw	r2,-16(fp)
 400c058:	10800817 	ldw	r2,32(r2)
 400c05c:	18800035 	stwio	r2,0(r3)
 400c060:	e0bff617 	ldw	r2,-40(fp)
 400c064:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c068:	e0bff517 	ldw	r2,-44(fp)
 400c06c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400c070:	e0fff017 	ldw	r3,-64(fp)
 400c074:	e0bffd17 	ldw	r2,-12(fp)
 400c078:	18800426 	beq	r3,r2,400c08c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 400c07c:	e0fff017 	ldw	r3,-64(fp)
 400c080:	e0bffd17 	ldw	r2,-12(fp)
 400c084:	1885c83a 	sub	r2,r3,r2
 400c088:	00000606 	br	400c0a4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 400c08c:	e0bfff17 	ldw	r2,-4(fp)
 400c090:	1090000c 	andi	r2,r2,16384
 400c094:	10000226 	beq	r2,zero,400c0a0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 400c098:	00bffd44 	movi	r2,-11
 400c09c:	00000106 	br	400c0a4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 400c0a0:	00bffec4 	movi	r2,-5
}
 400c0a4:	e037883a 	mov	sp,fp
 400c0a8:	dfc00117 	ldw	ra,4(sp)
 400c0ac:	df000017 	ldw	fp,0(sp)
 400c0b0:	dec00204 	addi	sp,sp,8
 400c0b4:	f800283a 	ret

0400c0b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400c0b8:	deffed04 	addi	sp,sp,-76
 400c0bc:	dfc01215 	stw	ra,72(sp)
 400c0c0:	df001115 	stw	fp,68(sp)
 400c0c4:	df001104 	addi	fp,sp,68
 400c0c8:	e13ffc15 	stw	r4,-16(fp)
 400c0cc:	e17ffd15 	stw	r5,-12(fp)
 400c0d0:	e1bffe15 	stw	r6,-8(fp)
 400c0d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400c0d8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400c0dc:	e0bffd17 	ldw	r2,-12(fp)
 400c0e0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 400c0e4:	e0bffc17 	ldw	r2,-16(fp)
 400c0e8:	10800b17 	ldw	r2,44(r2)
 400c0ec:	e0bff815 	stw	r2,-32(fp)
 400c0f0:	e03ff90d 	sth	zero,-28(fp)
 400c0f4:	e0bff90b 	ldhu	r2,-28(fp)
 400c0f8:	e0fffb44 	addi	r3,fp,-19
 400c0fc:	180d883a 	mov	r6,r3
 400c100:	100b883a 	mov	r5,r2
 400c104:	e13ff817 	ldw	r4,-32(fp)
 400c108:	40092980 	call	4009298 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400c10c:	00003706 	br	400c1ec <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400c110:	e0bffc17 	ldw	r2,-16(fp)
 400c114:	10800f17 	ldw	r2,60(r2)
 400c118:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 400c11c:	e0bffc17 	ldw	r2,-16(fp)
 400c120:	10801017 	ldw	r2,64(r2)
 400c124:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 400c128:	e0fff417 	ldw	r3,-48(fp)
 400c12c:	e0bff017 	ldw	r2,-64(fp)
 400c130:	1880062e 	bgeu	r3,r2,400c14c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 400c134:	e0fff017 	ldw	r3,-64(fp)
 400c138:	e0bff417 	ldw	r2,-48(fp)
 400c13c:	1885c83a 	sub	r2,r3,r2
 400c140:	10bfffc4 	addi	r2,r2,-1
 400c144:	e0bff115 	stw	r2,-60(fp)
 400c148:	00000b06 	br	400c178 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 400c14c:	e0bff017 	ldw	r2,-64(fp)
 400c150:	10000526 	beq	r2,zero,400c168 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400c154:	00c20004 	movi	r3,2048
 400c158:	e0bff417 	ldw	r2,-48(fp)
 400c15c:	1885c83a 	sub	r2,r3,r2
 400c160:	e0bff115 	stw	r2,-60(fp)
 400c164:	00000406 	br	400c178 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400c168:	00c1ffc4 	movi	r3,2047
 400c16c:	e0bff417 	ldw	r2,-48(fp)
 400c170:	1885c83a 	sub	r2,r3,r2
 400c174:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 400c178:	e0bff117 	ldw	r2,-60(fp)
 400c17c:	10001e26 	beq	r2,zero,400c1f8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 400c180:	e0fffe17 	ldw	r3,-8(fp)
 400c184:	e0bff117 	ldw	r2,-60(fp)
 400c188:	1880022e 	bgeu	r3,r2,400c194 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 400c18c:	e0bffe17 	ldw	r2,-8(fp)
 400c190:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400c194:	e0bffc17 	ldw	r2,-16(fp)
 400c198:	10c21104 	addi	r3,r2,2116
 400c19c:	e0bff417 	ldw	r2,-48(fp)
 400c1a0:	1885883a 	add	r2,r3,r2
 400c1a4:	e1bff117 	ldw	r6,-60(fp)
 400c1a8:	e17ffd17 	ldw	r5,-12(fp)
 400c1ac:	1009883a 	mov	r4,r2
 400c1b0:	40017ec0 	call	40017ec <memcpy>
      ptr   += n;
 400c1b4:	e0fffd17 	ldw	r3,-12(fp)
 400c1b8:	e0bff117 	ldw	r2,-60(fp)
 400c1bc:	1885883a 	add	r2,r3,r2
 400c1c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400c1c4:	e0fffe17 	ldw	r3,-8(fp)
 400c1c8:	e0bff117 	ldw	r2,-60(fp)
 400c1cc:	1885c83a 	sub	r2,r3,r2
 400c1d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c1d4:	e0fff417 	ldw	r3,-48(fp)
 400c1d8:	e0bff117 	ldw	r2,-60(fp)
 400c1dc:	1885883a 	add	r2,r3,r2
 400c1e0:	10c1ffcc 	andi	r3,r2,2047
 400c1e4:	e0bffc17 	ldw	r2,-16(fp)
 400c1e8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400c1ec:	e0bffe17 	ldw	r2,-8(fp)
 400c1f0:	00bfc716 	blt	zero,r2,400c110 <__alt_mem_onchip_memory2_0+0xfc00a110>
 400c1f4:	00000106 	br	400c1fc <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400c1f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c1fc:	0005303a 	rdctl	r2,status
 400c200:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c204:	e0fff717 	ldw	r3,-36(fp)
 400c208:	00bfff84 	movi	r2,-2
 400c20c:	1884703a 	and	r2,r3,r2
 400c210:	1001703a 	wrctl	status,r2
  
  return context;
 400c214:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400c218:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400c21c:	e0bffc17 	ldw	r2,-16(fp)
 400c220:	10800817 	ldw	r2,32(r2)
 400c224:	10c00094 	ori	r3,r2,2
 400c228:	e0bffc17 	ldw	r2,-16(fp)
 400c22c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400c230:	e0bffc17 	ldw	r2,-16(fp)
 400c234:	10800017 	ldw	r2,0(r2)
 400c238:	10800104 	addi	r2,r2,4
 400c23c:	1007883a 	mov	r3,r2
 400c240:	e0bffc17 	ldw	r2,-16(fp)
 400c244:	10800817 	ldw	r2,32(r2)
 400c248:	18800035 	stwio	r2,0(r3)
 400c24c:	e0bff617 	ldw	r2,-40(fp)
 400c250:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c254:	e0bff317 	ldw	r2,-52(fp)
 400c258:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400c25c:	e0bffe17 	ldw	r2,-8(fp)
 400c260:	00802a0e 	bge	zero,r2,400c30c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 400c264:	e0bfff17 	ldw	r2,-4(fp)
 400c268:	1090000c 	andi	r2,r2,16384
 400c26c:	10002a1e 	bne	r2,zero,400c318 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 400c270:	d0a6f643 	ldbu	r2,-25639(gp)
 400c274:	10803fcc 	andi	r2,r2,255
 400c278:	10800058 	cmpnei	r2,r2,1
 400c27c:	1000161e 	bne	r2,zero,400c2d8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 400c280:	e0bffc17 	ldw	r2,-16(fp)
 400c284:	10800c17 	ldw	r2,48(r2)
 400c288:	e0bff515 	stw	r2,-44(fp)
 400c28c:	00800184 	movi	r2,6
 400c290:	e0bff98d 	sth	r2,-26(fp)
 400c294:	00bfe0c4 	movi	r2,-125
 400c298:	e0bffa05 	stb	r2,-24(fp)
 400c29c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 400c2a0:	d0a6f643 	ldbu	r2,-25639(gp)
 400c2a4:	10803fcc 	andi	r2,r2,255
 400c2a8:	10001526 	beq	r2,zero,400c300 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 400c2ac:	e0fff98b 	ldhu	r3,-26(fp)
 400c2b0:	e13ffa03 	ldbu	r4,-24(fp)
 400c2b4:	e17ffa8b 	ldhu	r5,-22(fp)
 400c2b8:	e0bffb04 	addi	r2,fp,-20
 400c2bc:	d8800015 	stw	r2,0(sp)
 400c2c0:	280f883a 	mov	r7,r5
 400c2c4:	200d883a 	mov	r6,r4
 400c2c8:	180b883a 	mov	r5,r3
 400c2cc:	e13ff517 	ldw	r4,-44(fp)
 400c2d0:	40068300 	call	4006830 <OSFlagPend>
 400c2d4:	00000a06 	br	400c300 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400c2d8:	0001883a 	nop
 400c2dc:	e0bffc17 	ldw	r2,-16(fp)
 400c2e0:	10c01017 	ldw	r3,64(r2)
 400c2e4:	e0bff017 	ldw	r2,-64(fp)
 400c2e8:	1880051e 	bne	r3,r2,400c300 <altera_avalon_jtag_uart_write+0x248>
 400c2ec:	e0bffc17 	ldw	r2,-16(fp)
 400c2f0:	10c00917 	ldw	r3,36(r2)
 400c2f4:	e0bffc17 	ldw	r2,-16(fp)
 400c2f8:	10800117 	ldw	r2,4(r2)
 400c2fc:	18bff736 	bltu	r3,r2,400c2dc <__alt_mem_onchip_memory2_0+0xfc00a2dc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400c300:	e0bffc17 	ldw	r2,-16(fp)
 400c304:	10800917 	ldw	r2,36(r2)
 400c308:	1000051e 	bne	r2,zero,400c320 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 400c30c:	e0bffe17 	ldw	r2,-8(fp)
 400c310:	00bfb616 	blt	zero,r2,400c1ec <__alt_mem_onchip_memory2_0+0xfc00a1ec>
 400c314:	00000306 	br	400c324 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400c318:	0001883a 	nop
 400c31c:	00000106 	br	400c324 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400c320:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 400c324:	e0bffc17 	ldw	r2,-16(fp)
 400c328:	10800b17 	ldw	r2,44(r2)
 400c32c:	1009883a 	mov	r4,r2
 400c330:	40096100 	call	4009610 <OSSemPost>

  if (ptr != start)
 400c334:	e0fffd17 	ldw	r3,-12(fp)
 400c338:	e0bff217 	ldw	r2,-56(fp)
 400c33c:	18800426 	beq	r3,r2,400c350 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 400c340:	e0fffd17 	ldw	r3,-12(fp)
 400c344:	e0bff217 	ldw	r2,-56(fp)
 400c348:	1885c83a 	sub	r2,r3,r2
 400c34c:	00000606 	br	400c368 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 400c350:	e0bfff17 	ldw	r2,-4(fp)
 400c354:	1090000c 	andi	r2,r2,16384
 400c358:	10000226 	beq	r2,zero,400c364 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 400c35c:	00bffd44 	movi	r2,-11
 400c360:	00000106 	br	400c368 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400c364:	00bffec4 	movi	r2,-5
}
 400c368:	e037883a 	mov	sp,fp
 400c36c:	dfc00117 	ldw	ra,4(sp)
 400c370:	df000017 	ldw	fp,0(sp)
 400c374:	dec00204 	addi	sp,sp,8
 400c378:	f800283a 	ret

0400c37c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400c37c:	defffa04 	addi	sp,sp,-24
 400c380:	dfc00515 	stw	ra,20(sp)
 400c384:	df000415 	stw	fp,16(sp)
 400c388:	df000404 	addi	fp,sp,16
 400c38c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400c390:	0007883a 	mov	r3,zero
 400c394:	e0bfff17 	ldw	r2,-4(fp)
 400c398:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400c39c:	e0bfff17 	ldw	r2,-4(fp)
 400c3a0:	10800104 	addi	r2,r2,4
 400c3a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c3a8:	0005303a 	rdctl	r2,status
 400c3ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c3b0:	e0fffd17 	ldw	r3,-12(fp)
 400c3b4:	00bfff84 	movi	r2,-2
 400c3b8:	1884703a 	and	r2,r3,r2
 400c3bc:	1001703a 	wrctl	status,r2
  
  return context;
 400c3c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400c3c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 400c3c8:	400ce880 	call	400ce88 <alt_tick>
 400c3cc:	e0bffc17 	ldw	r2,-16(fp)
 400c3d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c3d4:	e0bffe17 	ldw	r2,-8(fp)
 400c3d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400c3dc:	0001883a 	nop
 400c3e0:	e037883a 	mov	sp,fp
 400c3e4:	dfc00117 	ldw	ra,4(sp)
 400c3e8:	df000017 	ldw	fp,0(sp)
 400c3ec:	dec00204 	addi	sp,sp,8
 400c3f0:	f800283a 	ret

0400c3f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400c3f4:	defff804 	addi	sp,sp,-32
 400c3f8:	dfc00715 	stw	ra,28(sp)
 400c3fc:	df000615 	stw	fp,24(sp)
 400c400:	df000604 	addi	fp,sp,24
 400c404:	e13ffc15 	stw	r4,-16(fp)
 400c408:	e17ffd15 	stw	r5,-12(fp)
 400c40c:	e1bffe15 	stw	r6,-8(fp)
 400c410:	e1ffff15 	stw	r7,-4(fp)
 400c414:	e0bfff17 	ldw	r2,-4(fp)
 400c418:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400c41c:	d0a70b17 	ldw	r2,-25556(gp)
 400c420:	1000021e 	bne	r2,zero,400c42c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 400c424:	e0bffb17 	ldw	r2,-20(fp)
 400c428:	d0a70b15 	stw	r2,-25556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400c42c:	e0bffc17 	ldw	r2,-16(fp)
 400c430:	10800104 	addi	r2,r2,4
 400c434:	00c001c4 	movi	r3,7
 400c438:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400c43c:	d8000015 	stw	zero,0(sp)
 400c440:	e1fffc17 	ldw	r7,-16(fp)
 400c444:	01810074 	movhi	r6,1025
 400c448:	31b0df04 	addi	r6,r6,-15492
 400c44c:	e17ffe17 	ldw	r5,-8(fp)
 400c450:	e13ffd17 	ldw	r4,-12(fp)
 400c454:	400c7b80 	call	400c7b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400c458:	0001883a 	nop
 400c45c:	e037883a 	mov	sp,fp
 400c460:	dfc00117 	ldw	ra,4(sp)
 400c464:	df000017 	ldw	fp,0(sp)
 400c468:	dec00204 	addi	sp,sp,8
 400c46c:	f800283a 	ret

0400c470 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400c470:	defff504 	addi	sp,sp,-44
 400c474:	df000a15 	stw	fp,40(sp)
 400c478:	df000a04 	addi	fp,sp,40
 400c47c:	e13ffc15 	stw	r4,-16(fp)
 400c480:	e17ffd15 	stw	r5,-12(fp)
 400c484:	e1bffe15 	stw	r6,-8(fp)
 400c488:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400c48c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400c490:	d0a70b17 	ldw	r2,-25556(gp)
  
  if (alt_ticks_per_second ())
 400c494:	10003c26 	beq	r2,zero,400c588 <alt_alarm_start+0x118>
  {
    if (alarm)
 400c498:	e0bffc17 	ldw	r2,-16(fp)
 400c49c:	10003826 	beq	r2,zero,400c580 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400c4a0:	e0bffc17 	ldw	r2,-16(fp)
 400c4a4:	e0fffe17 	ldw	r3,-8(fp)
 400c4a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400c4ac:	e0bffc17 	ldw	r2,-16(fp)
 400c4b0:	e0ffff17 	ldw	r3,-4(fp)
 400c4b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c4b8:	0005303a 	rdctl	r2,status
 400c4bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c4c0:	e0fff917 	ldw	r3,-28(fp)
 400c4c4:	00bfff84 	movi	r2,-2
 400c4c8:	1884703a 	and	r2,r3,r2
 400c4cc:	1001703a 	wrctl	status,r2
  
  return context;
 400c4d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400c4d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400c4d8:	d0a70c17 	ldw	r2,-25552(gp)
      
      current_nticks = alt_nticks();
 400c4dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400c4e0:	e0fffd17 	ldw	r3,-12(fp)
 400c4e4:	e0bff617 	ldw	r2,-40(fp)
 400c4e8:	1885883a 	add	r2,r3,r2
 400c4ec:	10c00044 	addi	r3,r2,1
 400c4f0:	e0bffc17 	ldw	r2,-16(fp)
 400c4f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400c4f8:	e0bffc17 	ldw	r2,-16(fp)
 400c4fc:	10c00217 	ldw	r3,8(r2)
 400c500:	e0bff617 	ldw	r2,-40(fp)
 400c504:	1880042e 	bgeu	r3,r2,400c518 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400c508:	e0bffc17 	ldw	r2,-16(fp)
 400c50c:	00c00044 	movi	r3,1
 400c510:	10c00405 	stb	r3,16(r2)
 400c514:	00000206 	br	400c520 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400c518:	e0bffc17 	ldw	r2,-16(fp)
 400c51c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400c520:	e0bffc17 	ldw	r2,-16(fp)
 400c524:	d0e02b04 	addi	r3,gp,-32596
 400c528:	e0fffa15 	stw	r3,-24(fp)
 400c52c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c530:	e0bffb17 	ldw	r2,-20(fp)
 400c534:	e0fffa17 	ldw	r3,-24(fp)
 400c538:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c53c:	e0bffa17 	ldw	r2,-24(fp)
 400c540:	10c00017 	ldw	r3,0(r2)
 400c544:	e0bffb17 	ldw	r2,-20(fp)
 400c548:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c54c:	e0bffa17 	ldw	r2,-24(fp)
 400c550:	10800017 	ldw	r2,0(r2)
 400c554:	e0fffb17 	ldw	r3,-20(fp)
 400c558:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c55c:	e0bffa17 	ldw	r2,-24(fp)
 400c560:	e0fffb17 	ldw	r3,-20(fp)
 400c564:	10c00015 	stw	r3,0(r2)
 400c568:	e0bff817 	ldw	r2,-32(fp)
 400c56c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c570:	e0bff717 	ldw	r2,-36(fp)
 400c574:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400c578:	0005883a 	mov	r2,zero
 400c57c:	00000306 	br	400c58c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400c580:	00bffa84 	movi	r2,-22
 400c584:	00000106 	br	400c58c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400c588:	00bfde84 	movi	r2,-134
  }
}
 400c58c:	e037883a 	mov	sp,fp
 400c590:	df000017 	ldw	fp,0(sp)
 400c594:	dec00104 	addi	sp,sp,4
 400c598:	f800283a 	ret

0400c59c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400c59c:	defffe04 	addi	sp,sp,-8
 400c5a0:	df000115 	stw	fp,4(sp)
 400c5a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400c5a8:	e03fff15 	stw	zero,-4(fp)
 400c5ac:	00000506 	br	400c5c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400c5b0:	e0bfff17 	ldw	r2,-4(fp)
 400c5b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400c5b8:	e0bfff17 	ldw	r2,-4(fp)
 400c5bc:	10800804 	addi	r2,r2,32
 400c5c0:	e0bfff15 	stw	r2,-4(fp)
 400c5c4:	e0bfff17 	ldw	r2,-4(fp)
 400c5c8:	10820030 	cmpltui	r2,r2,2048
 400c5cc:	103ff81e 	bne	r2,zero,400c5b0 <__alt_mem_onchip_memory2_0+0xfc00a5b0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400c5d0:	0001883a 	nop
 400c5d4:	e037883a 	mov	sp,fp
 400c5d8:	df000017 	ldw	fp,0(sp)
 400c5dc:	dec00104 	addi	sp,sp,4
 400c5e0:	f800283a 	ret

0400c5e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c5e4:	defffe04 	addi	sp,sp,-8
 400c5e8:	dfc00115 	stw	ra,4(sp)
 400c5ec:	df000015 	stw	fp,0(sp)
 400c5f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400c5f4:	d0a00917 	ldw	r2,-32732(gp)
 400c5f8:	10000326 	beq	r2,zero,400c608 <alt_get_errno+0x24>
 400c5fc:	d0a00917 	ldw	r2,-32732(gp)
 400c600:	103ee83a 	callr	r2
 400c604:	00000106 	br	400c60c <alt_get_errno+0x28>
 400c608:	d0a6ed04 	addi	r2,gp,-25676
}
 400c60c:	e037883a 	mov	sp,fp
 400c610:	dfc00117 	ldw	ra,4(sp)
 400c614:	df000017 	ldw	fp,0(sp)
 400c618:	dec00204 	addi	sp,sp,8
 400c61c:	f800283a 	ret

0400c620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400c620:	defffa04 	addi	sp,sp,-24
 400c624:	dfc00515 	stw	ra,20(sp)
 400c628:	df000415 	stw	fp,16(sp)
 400c62c:	df000404 	addi	fp,sp,16
 400c630:	e13ffe15 	stw	r4,-8(fp)
 400c634:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400c638:	e0bffe17 	ldw	r2,-8(fp)
 400c63c:	10000326 	beq	r2,zero,400c64c <alt_dev_llist_insert+0x2c>
 400c640:	e0bffe17 	ldw	r2,-8(fp)
 400c644:	10800217 	ldw	r2,8(r2)
 400c648:	1000061e 	bne	r2,zero,400c664 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400c64c:	400c5e40 	call	400c5e4 <alt_get_errno>
 400c650:	1007883a 	mov	r3,r2
 400c654:	00800584 	movi	r2,22
 400c658:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400c65c:	00bffa84 	movi	r2,-22
 400c660:	00001306 	br	400c6b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400c664:	e0bffe17 	ldw	r2,-8(fp)
 400c668:	e0ffff17 	ldw	r3,-4(fp)
 400c66c:	e0fffc15 	stw	r3,-16(fp)
 400c670:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c674:	e0bffd17 	ldw	r2,-12(fp)
 400c678:	e0fffc17 	ldw	r3,-16(fp)
 400c67c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c680:	e0bffc17 	ldw	r2,-16(fp)
 400c684:	10c00017 	ldw	r3,0(r2)
 400c688:	e0bffd17 	ldw	r2,-12(fp)
 400c68c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c690:	e0bffc17 	ldw	r2,-16(fp)
 400c694:	10800017 	ldw	r2,0(r2)
 400c698:	e0fffd17 	ldw	r3,-12(fp)
 400c69c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c6a0:	e0bffc17 	ldw	r2,-16(fp)
 400c6a4:	e0fffd17 	ldw	r3,-12(fp)
 400c6a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 400c6ac:	0005883a 	mov	r2,zero
}
 400c6b0:	e037883a 	mov	sp,fp
 400c6b4:	dfc00117 	ldw	ra,4(sp)
 400c6b8:	df000017 	ldw	fp,0(sp)
 400c6bc:	dec00204 	addi	sp,sp,8
 400c6c0:	f800283a 	ret

0400c6c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400c6c4:	defffd04 	addi	sp,sp,-12
 400c6c8:	dfc00215 	stw	ra,8(sp)
 400c6cc:	df000115 	stw	fp,4(sp)
 400c6d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c6d4:	00810074 	movhi	r2,1025
 400c6d8:	10b68f04 	addi	r2,r2,-9668
 400c6dc:	e0bfff15 	stw	r2,-4(fp)
 400c6e0:	00000606 	br	400c6fc <_do_ctors+0x38>
        (*ctor) (); 
 400c6e4:	e0bfff17 	ldw	r2,-4(fp)
 400c6e8:	10800017 	ldw	r2,0(r2)
 400c6ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c6f0:	e0bfff17 	ldw	r2,-4(fp)
 400c6f4:	10bfff04 	addi	r2,r2,-4
 400c6f8:	e0bfff15 	stw	r2,-4(fp)
 400c6fc:	e0ffff17 	ldw	r3,-4(fp)
 400c700:	00810074 	movhi	r2,1025
 400c704:	10b69004 	addi	r2,r2,-9664
 400c708:	18bff62e 	bgeu	r3,r2,400c6e4 <__alt_mem_onchip_memory2_0+0xfc00a6e4>
        (*ctor) (); 
}
 400c70c:	0001883a 	nop
 400c710:	e037883a 	mov	sp,fp
 400c714:	dfc00117 	ldw	ra,4(sp)
 400c718:	df000017 	ldw	fp,0(sp)
 400c71c:	dec00204 	addi	sp,sp,8
 400c720:	f800283a 	ret

0400c724 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400c724:	defffd04 	addi	sp,sp,-12
 400c728:	dfc00215 	stw	ra,8(sp)
 400c72c:	df000115 	stw	fp,4(sp)
 400c730:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c734:	00810074 	movhi	r2,1025
 400c738:	10b68f04 	addi	r2,r2,-9668
 400c73c:	e0bfff15 	stw	r2,-4(fp)
 400c740:	00000606 	br	400c75c <_do_dtors+0x38>
        (*dtor) (); 
 400c744:	e0bfff17 	ldw	r2,-4(fp)
 400c748:	10800017 	ldw	r2,0(r2)
 400c74c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c750:	e0bfff17 	ldw	r2,-4(fp)
 400c754:	10bfff04 	addi	r2,r2,-4
 400c758:	e0bfff15 	stw	r2,-4(fp)
 400c75c:	e0ffff17 	ldw	r3,-4(fp)
 400c760:	00810074 	movhi	r2,1025
 400c764:	10b69004 	addi	r2,r2,-9664
 400c768:	18bff62e 	bgeu	r3,r2,400c744 <__alt_mem_onchip_memory2_0+0xfc00a744>
        (*dtor) (); 
}
 400c76c:	0001883a 	nop
 400c770:	e037883a 	mov	sp,fp
 400c774:	dfc00117 	ldw	ra,4(sp)
 400c778:	df000017 	ldw	fp,0(sp)
 400c77c:	dec00204 	addi	sp,sp,8
 400c780:	f800283a 	ret

0400c784 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400c784:	defffe04 	addi	sp,sp,-8
 400c788:	dfc00115 	stw	ra,4(sp)
 400c78c:	df000015 	stw	fp,0(sp)
 400c790:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400c794:	01440004 	movi	r5,4096
 400c798:	0009883a 	mov	r4,zero
 400c79c:	400d5800 	call	400d580 <alt_icache_flush>
#endif
}
 400c7a0:	0001883a 	nop
 400c7a4:	e037883a 	mov	sp,fp
 400c7a8:	dfc00117 	ldw	ra,4(sp)
 400c7ac:	df000017 	ldw	fp,0(sp)
 400c7b0:	dec00204 	addi	sp,sp,8
 400c7b4:	f800283a 	ret

0400c7b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c7b8:	defff904 	addi	sp,sp,-28
 400c7bc:	dfc00615 	stw	ra,24(sp)
 400c7c0:	df000515 	stw	fp,20(sp)
 400c7c4:	df000504 	addi	fp,sp,20
 400c7c8:	e13ffc15 	stw	r4,-16(fp)
 400c7cc:	e17ffd15 	stw	r5,-12(fp)
 400c7d0:	e1bffe15 	stw	r6,-8(fp)
 400c7d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400c7d8:	e0800217 	ldw	r2,8(fp)
 400c7dc:	d8800015 	stw	r2,0(sp)
 400c7e0:	e1ffff17 	ldw	r7,-4(fp)
 400c7e4:	e1bffe17 	ldw	r6,-8(fp)
 400c7e8:	e17ffd17 	ldw	r5,-12(fp)
 400c7ec:	e13ffc17 	ldw	r4,-16(fp)
 400c7f0:	400c9680 	call	400c968 <alt_iic_isr_register>
}  
 400c7f4:	e037883a 	mov	sp,fp
 400c7f8:	dfc00117 	ldw	ra,4(sp)
 400c7fc:	df000017 	ldw	fp,0(sp)
 400c800:	dec00204 	addi	sp,sp,8
 400c804:	f800283a 	ret

0400c808 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400c808:	defff904 	addi	sp,sp,-28
 400c80c:	df000615 	stw	fp,24(sp)
 400c810:	df000604 	addi	fp,sp,24
 400c814:	e13ffe15 	stw	r4,-8(fp)
 400c818:	e17fff15 	stw	r5,-4(fp)
 400c81c:	e0bfff17 	ldw	r2,-4(fp)
 400c820:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c824:	0005303a 	rdctl	r2,status
 400c828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c82c:	e0fffb17 	ldw	r3,-20(fp)
 400c830:	00bfff84 	movi	r2,-2
 400c834:	1884703a 	and	r2,r3,r2
 400c838:	1001703a 	wrctl	status,r2
  
  return context;
 400c83c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c840:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400c844:	00c00044 	movi	r3,1
 400c848:	e0bffa17 	ldw	r2,-24(fp)
 400c84c:	1884983a 	sll	r2,r3,r2
 400c850:	1007883a 	mov	r3,r2
 400c854:	d0a70a17 	ldw	r2,-25560(gp)
 400c858:	1884b03a 	or	r2,r3,r2
 400c85c:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c860:	d0a70a17 	ldw	r2,-25560(gp)
 400c864:	100170fa 	wrctl	ienable,r2
 400c868:	e0bffc17 	ldw	r2,-16(fp)
 400c86c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c870:	e0bffd17 	ldw	r2,-12(fp)
 400c874:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c878:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400c87c:	0001883a 	nop
}
 400c880:	e037883a 	mov	sp,fp
 400c884:	df000017 	ldw	fp,0(sp)
 400c888:	dec00104 	addi	sp,sp,4
 400c88c:	f800283a 	ret

0400c890 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400c890:	defff904 	addi	sp,sp,-28
 400c894:	df000615 	stw	fp,24(sp)
 400c898:	df000604 	addi	fp,sp,24
 400c89c:	e13ffe15 	stw	r4,-8(fp)
 400c8a0:	e17fff15 	stw	r5,-4(fp)
 400c8a4:	e0bfff17 	ldw	r2,-4(fp)
 400c8a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c8ac:	0005303a 	rdctl	r2,status
 400c8b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c8b4:	e0fffb17 	ldw	r3,-20(fp)
 400c8b8:	00bfff84 	movi	r2,-2
 400c8bc:	1884703a 	and	r2,r3,r2
 400c8c0:	1001703a 	wrctl	status,r2
  
  return context;
 400c8c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c8c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400c8cc:	00c00044 	movi	r3,1
 400c8d0:	e0bffa17 	ldw	r2,-24(fp)
 400c8d4:	1884983a 	sll	r2,r3,r2
 400c8d8:	0084303a 	nor	r2,zero,r2
 400c8dc:	1007883a 	mov	r3,r2
 400c8e0:	d0a70a17 	ldw	r2,-25560(gp)
 400c8e4:	1884703a 	and	r2,r3,r2
 400c8e8:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c8ec:	d0a70a17 	ldw	r2,-25560(gp)
 400c8f0:	100170fa 	wrctl	ienable,r2
 400c8f4:	e0bffc17 	ldw	r2,-16(fp)
 400c8f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c8fc:	e0bffd17 	ldw	r2,-12(fp)
 400c900:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c904:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400c908:	0001883a 	nop
}
 400c90c:	e037883a 	mov	sp,fp
 400c910:	df000017 	ldw	fp,0(sp)
 400c914:	dec00104 	addi	sp,sp,4
 400c918:	f800283a 	ret

0400c91c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400c91c:	defffc04 	addi	sp,sp,-16
 400c920:	df000315 	stw	fp,12(sp)
 400c924:	df000304 	addi	fp,sp,12
 400c928:	e13ffe15 	stw	r4,-8(fp)
 400c92c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400c930:	000530fa 	rdctl	r2,ienable
 400c934:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400c938:	00c00044 	movi	r3,1
 400c93c:	e0bfff17 	ldw	r2,-4(fp)
 400c940:	1884983a 	sll	r2,r3,r2
 400c944:	1007883a 	mov	r3,r2
 400c948:	e0bffd17 	ldw	r2,-12(fp)
 400c94c:	1884703a 	and	r2,r3,r2
 400c950:	1004c03a 	cmpne	r2,r2,zero
 400c954:	10803fcc 	andi	r2,r2,255
}
 400c958:	e037883a 	mov	sp,fp
 400c95c:	df000017 	ldw	fp,0(sp)
 400c960:	dec00104 	addi	sp,sp,4
 400c964:	f800283a 	ret

0400c968 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c968:	defff504 	addi	sp,sp,-44
 400c96c:	dfc00a15 	stw	ra,40(sp)
 400c970:	df000915 	stw	fp,36(sp)
 400c974:	df000904 	addi	fp,sp,36
 400c978:	e13ffc15 	stw	r4,-16(fp)
 400c97c:	e17ffd15 	stw	r5,-12(fp)
 400c980:	e1bffe15 	stw	r6,-8(fp)
 400c984:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400c988:	00bffa84 	movi	r2,-22
 400c98c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400c990:	e0bffd17 	ldw	r2,-12(fp)
 400c994:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400c998:	e0bff817 	ldw	r2,-32(fp)
 400c99c:	10800808 	cmpgei	r2,r2,32
 400c9a0:	1000271e 	bne	r2,zero,400ca40 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c9a4:	0005303a 	rdctl	r2,status
 400c9a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c9ac:	e0fffb17 	ldw	r3,-20(fp)
 400c9b0:	00bfff84 	movi	r2,-2
 400c9b4:	1884703a 	and	r2,r3,r2
 400c9b8:	1001703a 	wrctl	status,r2
  
  return context;
 400c9bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400c9c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400c9c4:	008100b4 	movhi	r2,1026
 400c9c8:	10a12104 	addi	r2,r2,-31612
 400c9cc:	e0fff817 	ldw	r3,-32(fp)
 400c9d0:	180690fa 	slli	r3,r3,3
 400c9d4:	10c5883a 	add	r2,r2,r3
 400c9d8:	e0fffe17 	ldw	r3,-8(fp)
 400c9dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400c9e0:	008100b4 	movhi	r2,1026
 400c9e4:	10a12104 	addi	r2,r2,-31612
 400c9e8:	e0fff817 	ldw	r3,-32(fp)
 400c9ec:	180690fa 	slli	r3,r3,3
 400c9f0:	10c5883a 	add	r2,r2,r3
 400c9f4:	10800104 	addi	r2,r2,4
 400c9f8:	e0ffff17 	ldw	r3,-4(fp)
 400c9fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400ca00:	e0bffe17 	ldw	r2,-8(fp)
 400ca04:	10000526 	beq	r2,zero,400ca1c <alt_iic_isr_register+0xb4>
 400ca08:	e0bff817 	ldw	r2,-32(fp)
 400ca0c:	100b883a 	mov	r5,r2
 400ca10:	e13ffc17 	ldw	r4,-16(fp)
 400ca14:	400c8080 	call	400c808 <alt_ic_irq_enable>
 400ca18:	00000406 	br	400ca2c <alt_iic_isr_register+0xc4>
 400ca1c:	e0bff817 	ldw	r2,-32(fp)
 400ca20:	100b883a 	mov	r5,r2
 400ca24:	e13ffc17 	ldw	r4,-16(fp)
 400ca28:	400c8900 	call	400c890 <alt_ic_irq_disable>
 400ca2c:	e0bff715 	stw	r2,-36(fp)
 400ca30:	e0bffa17 	ldw	r2,-24(fp)
 400ca34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ca38:	e0bff917 	ldw	r2,-28(fp)
 400ca3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400ca40:	e0bff717 	ldw	r2,-36(fp)
}
 400ca44:	e037883a 	mov	sp,fp
 400ca48:	dfc00117 	ldw	ra,4(sp)
 400ca4c:	df000017 	ldw	fp,0(sp)
 400ca50:	dec00204 	addi	sp,sp,8
 400ca54:	f800283a 	ret

0400ca58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400ca58:	defff904 	addi	sp,sp,-28
 400ca5c:	dfc00615 	stw	ra,24(sp)
 400ca60:	df000515 	stw	fp,20(sp)
 400ca64:	df000504 	addi	fp,sp,20
 400ca68:	e13ffc15 	stw	r4,-16(fp)
 400ca6c:	e17ffd15 	stw	r5,-12(fp)
 400ca70:	e1bffe15 	stw	r6,-8(fp)
 400ca74:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400ca78:	e1bfff17 	ldw	r6,-4(fp)
 400ca7c:	e17ffe17 	ldw	r5,-8(fp)
 400ca80:	e13ffd17 	ldw	r4,-12(fp)
 400ca84:	400cc980 	call	400cc98 <open>
 400ca88:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400ca8c:	e0bffb17 	ldw	r2,-20(fp)
 400ca90:	10001c16 	blt	r2,zero,400cb04 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400ca94:	00810074 	movhi	r2,1025
 400ca98:	10b90504 	addi	r2,r2,-7148
 400ca9c:	e0fffb17 	ldw	r3,-20(fp)
 400caa0:	18c00324 	muli	r3,r3,12
 400caa4:	10c5883a 	add	r2,r2,r3
 400caa8:	10c00017 	ldw	r3,0(r2)
 400caac:	e0bffc17 	ldw	r2,-16(fp)
 400cab0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400cab4:	00810074 	movhi	r2,1025
 400cab8:	10b90504 	addi	r2,r2,-7148
 400cabc:	e0fffb17 	ldw	r3,-20(fp)
 400cac0:	18c00324 	muli	r3,r3,12
 400cac4:	10c5883a 	add	r2,r2,r3
 400cac8:	10800104 	addi	r2,r2,4
 400cacc:	10c00017 	ldw	r3,0(r2)
 400cad0:	e0bffc17 	ldw	r2,-16(fp)
 400cad4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400cad8:	00810074 	movhi	r2,1025
 400cadc:	10b90504 	addi	r2,r2,-7148
 400cae0:	e0fffb17 	ldw	r3,-20(fp)
 400cae4:	18c00324 	muli	r3,r3,12
 400cae8:	10c5883a 	add	r2,r2,r3
 400caec:	10800204 	addi	r2,r2,8
 400caf0:	10c00017 	ldw	r3,0(r2)
 400caf4:	e0bffc17 	ldw	r2,-16(fp)
 400caf8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400cafc:	e13ffb17 	ldw	r4,-20(fp)
 400cb00:	40038680 	call	4003868 <alt_release_fd>
  }
} 
 400cb04:	0001883a 	nop
 400cb08:	e037883a 	mov	sp,fp
 400cb0c:	dfc00117 	ldw	ra,4(sp)
 400cb10:	df000017 	ldw	fp,0(sp)
 400cb14:	dec00204 	addi	sp,sp,8
 400cb18:	f800283a 	ret

0400cb1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400cb1c:	defffb04 	addi	sp,sp,-20
 400cb20:	dfc00415 	stw	ra,16(sp)
 400cb24:	df000315 	stw	fp,12(sp)
 400cb28:	df000304 	addi	fp,sp,12
 400cb2c:	e13ffd15 	stw	r4,-12(fp)
 400cb30:	e17ffe15 	stw	r5,-8(fp)
 400cb34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400cb38:	01c07fc4 	movi	r7,511
 400cb3c:	01800044 	movi	r6,1
 400cb40:	e17ffd17 	ldw	r5,-12(fp)
 400cb44:	01010074 	movhi	r4,1025
 400cb48:	21390804 	addi	r4,r4,-7136
 400cb4c:	400ca580 	call	400ca58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400cb50:	01c07fc4 	movi	r7,511
 400cb54:	000d883a 	mov	r6,zero
 400cb58:	e17ffe17 	ldw	r5,-8(fp)
 400cb5c:	01010074 	movhi	r4,1025
 400cb60:	21390504 	addi	r4,r4,-7148
 400cb64:	400ca580 	call	400ca58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400cb68:	01c07fc4 	movi	r7,511
 400cb6c:	01800044 	movi	r6,1
 400cb70:	e17fff17 	ldw	r5,-4(fp)
 400cb74:	01010074 	movhi	r4,1025
 400cb78:	21390b04 	addi	r4,r4,-7124
 400cb7c:	400ca580 	call	400ca58 <alt_open_fd>
}  
 400cb80:	0001883a 	nop
 400cb84:	e037883a 	mov	sp,fp
 400cb88:	dfc00117 	ldw	ra,4(sp)
 400cb8c:	df000017 	ldw	fp,0(sp)
 400cb90:	dec00204 	addi	sp,sp,8
 400cb94:	f800283a 	ret

0400cb98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cb98:	defffe04 	addi	sp,sp,-8
 400cb9c:	dfc00115 	stw	ra,4(sp)
 400cba0:	df000015 	stw	fp,0(sp)
 400cba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cba8:	d0a00917 	ldw	r2,-32732(gp)
 400cbac:	10000326 	beq	r2,zero,400cbbc <alt_get_errno+0x24>
 400cbb0:	d0a00917 	ldw	r2,-32732(gp)
 400cbb4:	103ee83a 	callr	r2
 400cbb8:	00000106 	br	400cbc0 <alt_get_errno+0x28>
 400cbbc:	d0a6ed04 	addi	r2,gp,-25676
}
 400cbc0:	e037883a 	mov	sp,fp
 400cbc4:	dfc00117 	ldw	ra,4(sp)
 400cbc8:	df000017 	ldw	fp,0(sp)
 400cbcc:	dec00204 	addi	sp,sp,8
 400cbd0:	f800283a 	ret

0400cbd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400cbd4:	defffd04 	addi	sp,sp,-12
 400cbd8:	df000215 	stw	fp,8(sp)
 400cbdc:	df000204 	addi	fp,sp,8
 400cbe0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400cbe4:	e0bfff17 	ldw	r2,-4(fp)
 400cbe8:	10800217 	ldw	r2,8(r2)
 400cbec:	10d00034 	orhi	r3,r2,16384
 400cbf0:	e0bfff17 	ldw	r2,-4(fp)
 400cbf4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400cbf8:	e03ffe15 	stw	zero,-8(fp)
 400cbfc:	00001d06 	br	400cc74 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400cc00:	00810074 	movhi	r2,1025
 400cc04:	10b90504 	addi	r2,r2,-7148
 400cc08:	e0fffe17 	ldw	r3,-8(fp)
 400cc0c:	18c00324 	muli	r3,r3,12
 400cc10:	10c5883a 	add	r2,r2,r3
 400cc14:	10c00017 	ldw	r3,0(r2)
 400cc18:	e0bfff17 	ldw	r2,-4(fp)
 400cc1c:	10800017 	ldw	r2,0(r2)
 400cc20:	1880111e 	bne	r3,r2,400cc68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400cc24:	00810074 	movhi	r2,1025
 400cc28:	10b90504 	addi	r2,r2,-7148
 400cc2c:	e0fffe17 	ldw	r3,-8(fp)
 400cc30:	18c00324 	muli	r3,r3,12
 400cc34:	10c5883a 	add	r2,r2,r3
 400cc38:	10800204 	addi	r2,r2,8
 400cc3c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400cc40:	1000090e 	bge	r2,zero,400cc68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400cc44:	e0bffe17 	ldw	r2,-8(fp)
 400cc48:	10c00324 	muli	r3,r2,12
 400cc4c:	00810074 	movhi	r2,1025
 400cc50:	10b90504 	addi	r2,r2,-7148
 400cc54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400cc58:	e0bfff17 	ldw	r2,-4(fp)
 400cc5c:	18800226 	beq	r3,r2,400cc68 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400cc60:	00bffcc4 	movi	r2,-13
 400cc64:	00000806 	br	400cc88 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400cc68:	e0bffe17 	ldw	r2,-8(fp)
 400cc6c:	10800044 	addi	r2,r2,1
 400cc70:	e0bffe15 	stw	r2,-8(fp)
 400cc74:	d0a00817 	ldw	r2,-32736(gp)
 400cc78:	1007883a 	mov	r3,r2
 400cc7c:	e0bffe17 	ldw	r2,-8(fp)
 400cc80:	18bfdf2e 	bgeu	r3,r2,400cc00 <__alt_mem_onchip_memory2_0+0xfc00ac00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400cc84:	0005883a 	mov	r2,zero
}
 400cc88:	e037883a 	mov	sp,fp
 400cc8c:	df000017 	ldw	fp,0(sp)
 400cc90:	dec00104 	addi	sp,sp,4
 400cc94:	f800283a 	ret

0400cc98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400cc98:	defff604 	addi	sp,sp,-40
 400cc9c:	dfc00915 	stw	ra,36(sp)
 400cca0:	df000815 	stw	fp,32(sp)
 400cca4:	df000804 	addi	fp,sp,32
 400cca8:	e13ffd15 	stw	r4,-12(fp)
 400ccac:	e17ffe15 	stw	r5,-8(fp)
 400ccb0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400ccb4:	00bfffc4 	movi	r2,-1
 400ccb8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400ccbc:	00bffb44 	movi	r2,-19
 400ccc0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400ccc4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400ccc8:	d1600604 	addi	r5,gp,-32744
 400cccc:	e13ffd17 	ldw	r4,-12(fp)
 400ccd0:	400d30c0 	call	400d30c <alt_find_dev>
 400ccd4:	e0bff815 	stw	r2,-32(fp)
 400ccd8:	e0bff817 	ldw	r2,-32(fp)
 400ccdc:	1000051e 	bne	r2,zero,400ccf4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400cce0:	e13ffd17 	ldw	r4,-12(fp)
 400cce4:	400d39c0 	call	400d39c <alt_find_file>
 400cce8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400ccec:	00800044 	movi	r2,1
 400ccf0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400ccf4:	e0bff817 	ldw	r2,-32(fp)
 400ccf8:	10002926 	beq	r2,zero,400cda0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400ccfc:	e13ff817 	ldw	r4,-32(fp)
 400cd00:	400d4a40 	call	400d4a4 <alt_get_fd>
 400cd04:	e0bff915 	stw	r2,-28(fp)
 400cd08:	e0bff917 	ldw	r2,-28(fp)
 400cd0c:	1000030e 	bge	r2,zero,400cd1c <open+0x84>
    {
      status = index;
 400cd10:	e0bff917 	ldw	r2,-28(fp)
 400cd14:	e0bffa15 	stw	r2,-24(fp)
 400cd18:	00002306 	br	400cda8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 400cd1c:	e0bff917 	ldw	r2,-28(fp)
 400cd20:	10c00324 	muli	r3,r2,12
 400cd24:	00810074 	movhi	r2,1025
 400cd28:	10b90504 	addi	r2,r2,-7148
 400cd2c:	1885883a 	add	r2,r3,r2
 400cd30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400cd34:	e0fffe17 	ldw	r3,-8(fp)
 400cd38:	00900034 	movhi	r2,16384
 400cd3c:	10bfffc4 	addi	r2,r2,-1
 400cd40:	1886703a 	and	r3,r3,r2
 400cd44:	e0bffc17 	ldw	r2,-16(fp)
 400cd48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400cd4c:	e0bffb17 	ldw	r2,-20(fp)
 400cd50:	1000051e 	bne	r2,zero,400cd68 <open+0xd0>
 400cd54:	e13ffc17 	ldw	r4,-16(fp)
 400cd58:	400cbd40 	call	400cbd4 <alt_file_locked>
 400cd5c:	e0bffa15 	stw	r2,-24(fp)
 400cd60:	e0bffa17 	ldw	r2,-24(fp)
 400cd64:	10001016 	blt	r2,zero,400cda8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400cd68:	e0bff817 	ldw	r2,-32(fp)
 400cd6c:	10800317 	ldw	r2,12(r2)
 400cd70:	10000826 	beq	r2,zero,400cd94 <open+0xfc>
 400cd74:	e0bff817 	ldw	r2,-32(fp)
 400cd78:	10800317 	ldw	r2,12(r2)
 400cd7c:	e1ffff17 	ldw	r7,-4(fp)
 400cd80:	e1bffe17 	ldw	r6,-8(fp)
 400cd84:	e17ffd17 	ldw	r5,-12(fp)
 400cd88:	e13ffc17 	ldw	r4,-16(fp)
 400cd8c:	103ee83a 	callr	r2
 400cd90:	00000106 	br	400cd98 <open+0x100>
 400cd94:	0005883a 	mov	r2,zero
 400cd98:	e0bffa15 	stw	r2,-24(fp)
 400cd9c:	00000206 	br	400cda8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400cda0:	00bffb44 	movi	r2,-19
 400cda4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400cda8:	e0bffa17 	ldw	r2,-24(fp)
 400cdac:	1000090e 	bge	r2,zero,400cdd4 <open+0x13c>
  {
    alt_release_fd (index);  
 400cdb0:	e13ff917 	ldw	r4,-28(fp)
 400cdb4:	40038680 	call	4003868 <alt_release_fd>
    ALT_ERRNO = -status;
 400cdb8:	400cb980 	call	400cb98 <alt_get_errno>
 400cdbc:	1007883a 	mov	r3,r2
 400cdc0:	e0bffa17 	ldw	r2,-24(fp)
 400cdc4:	0085c83a 	sub	r2,zero,r2
 400cdc8:	18800015 	stw	r2,0(r3)
    return -1;
 400cdcc:	00bfffc4 	movi	r2,-1
 400cdd0:	00000106 	br	400cdd8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 400cdd4:	e0bff917 	ldw	r2,-28(fp)
}
 400cdd8:	e037883a 	mov	sp,fp
 400cddc:	dfc00117 	ldw	ra,4(sp)
 400cde0:	df000017 	ldw	fp,0(sp)
 400cde4:	dec00204 	addi	sp,sp,8
 400cde8:	f800283a 	ret

0400cdec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400cdec:	defffa04 	addi	sp,sp,-24
 400cdf0:	df000515 	stw	fp,20(sp)
 400cdf4:	df000504 	addi	fp,sp,20
 400cdf8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cdfc:	0005303a 	rdctl	r2,status
 400ce00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ce04:	e0fffc17 	ldw	r3,-16(fp)
 400ce08:	00bfff84 	movi	r2,-2
 400ce0c:	1884703a 	and	r2,r3,r2
 400ce10:	1001703a 	wrctl	status,r2
  
  return context;
 400ce14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400ce18:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400ce1c:	e0bfff17 	ldw	r2,-4(fp)
 400ce20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400ce24:	e0bffd17 	ldw	r2,-12(fp)
 400ce28:	10800017 	ldw	r2,0(r2)
 400ce2c:	e0fffd17 	ldw	r3,-12(fp)
 400ce30:	18c00117 	ldw	r3,4(r3)
 400ce34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400ce38:	e0bffd17 	ldw	r2,-12(fp)
 400ce3c:	10800117 	ldw	r2,4(r2)
 400ce40:	e0fffd17 	ldw	r3,-12(fp)
 400ce44:	18c00017 	ldw	r3,0(r3)
 400ce48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400ce4c:	e0bffd17 	ldw	r2,-12(fp)
 400ce50:	e0fffd17 	ldw	r3,-12(fp)
 400ce54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400ce58:	e0bffd17 	ldw	r2,-12(fp)
 400ce5c:	e0fffd17 	ldw	r3,-12(fp)
 400ce60:	10c00015 	stw	r3,0(r2)
 400ce64:	e0bffb17 	ldw	r2,-20(fp)
 400ce68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ce6c:	e0bffe17 	ldw	r2,-8(fp)
 400ce70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400ce74:	0001883a 	nop
 400ce78:	e037883a 	mov	sp,fp
 400ce7c:	df000017 	ldw	fp,0(sp)
 400ce80:	dec00104 	addi	sp,sp,4
 400ce84:	f800283a 	ret

0400ce88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400ce88:	defffb04 	addi	sp,sp,-20
 400ce8c:	dfc00415 	stw	ra,16(sp)
 400ce90:	df000315 	stw	fp,12(sp)
 400ce94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400ce98:	d0a02b17 	ldw	r2,-32596(gp)
 400ce9c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400cea0:	d0a70c17 	ldw	r2,-25552(gp)
 400cea4:	10800044 	addi	r2,r2,1
 400cea8:	d0a70c15 	stw	r2,-25552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400ceac:	00002e06 	br	400cf68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400ceb0:	e0bffd17 	ldw	r2,-12(fp)
 400ceb4:	10800017 	ldw	r2,0(r2)
 400ceb8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400cebc:	e0bffd17 	ldw	r2,-12(fp)
 400cec0:	10800403 	ldbu	r2,16(r2)
 400cec4:	10803fcc 	andi	r2,r2,255
 400cec8:	10000426 	beq	r2,zero,400cedc <alt_tick+0x54>
 400cecc:	d0a70c17 	ldw	r2,-25552(gp)
 400ced0:	1000021e 	bne	r2,zero,400cedc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400ced4:	e0bffd17 	ldw	r2,-12(fp)
 400ced8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400cedc:	e0bffd17 	ldw	r2,-12(fp)
 400cee0:	10800217 	ldw	r2,8(r2)
 400cee4:	d0e70c17 	ldw	r3,-25552(gp)
 400cee8:	18801d36 	bltu	r3,r2,400cf60 <alt_tick+0xd8>
 400ceec:	e0bffd17 	ldw	r2,-12(fp)
 400cef0:	10800403 	ldbu	r2,16(r2)
 400cef4:	10803fcc 	andi	r2,r2,255
 400cef8:	1000191e 	bne	r2,zero,400cf60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400cefc:	e0bffd17 	ldw	r2,-12(fp)
 400cf00:	10800317 	ldw	r2,12(r2)
 400cf04:	e0fffd17 	ldw	r3,-12(fp)
 400cf08:	18c00517 	ldw	r3,20(r3)
 400cf0c:	1809883a 	mov	r4,r3
 400cf10:	103ee83a 	callr	r2
 400cf14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400cf18:	e0bfff17 	ldw	r2,-4(fp)
 400cf1c:	1000031e 	bne	r2,zero,400cf2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400cf20:	e13ffd17 	ldw	r4,-12(fp)
 400cf24:	400cdec0 	call	400cdec <alt_alarm_stop>
 400cf28:	00000d06 	br	400cf60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400cf2c:	e0bffd17 	ldw	r2,-12(fp)
 400cf30:	10c00217 	ldw	r3,8(r2)
 400cf34:	e0bfff17 	ldw	r2,-4(fp)
 400cf38:	1887883a 	add	r3,r3,r2
 400cf3c:	e0bffd17 	ldw	r2,-12(fp)
 400cf40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400cf44:	e0bffd17 	ldw	r2,-12(fp)
 400cf48:	10c00217 	ldw	r3,8(r2)
 400cf4c:	d0a70c17 	ldw	r2,-25552(gp)
 400cf50:	1880032e 	bgeu	r3,r2,400cf60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400cf54:	e0bffd17 	ldw	r2,-12(fp)
 400cf58:	00c00044 	movi	r3,1
 400cf5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400cf60:	e0bffe17 	ldw	r2,-8(fp)
 400cf64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400cf68:	e0fffd17 	ldw	r3,-12(fp)
 400cf6c:	d0a02b04 	addi	r2,gp,-32596
 400cf70:	18bfcf1e 	bne	r3,r2,400ceb0 <__alt_mem_onchip_memory2_0+0xfc00aeb0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400cf74:	4004a540 	call	4004a54 <OSTimeTick>
}
 400cf78:	0001883a 	nop
 400cf7c:	e037883a 	mov	sp,fp
 400cf80:	dfc00117 	ldw	ra,4(sp)
 400cf84:	df000017 	ldw	fp,0(sp)
 400cf88:	dec00204 	addi	sp,sp,8
 400cf8c:	f800283a 	ret

0400cf90 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400cf90:	deffff04 	addi	sp,sp,-4
 400cf94:	df000015 	stw	fp,0(sp)
 400cf98:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400cf9c:	000170fa 	wrctl	ienable,zero
}
 400cfa0:	0001883a 	nop
 400cfa4:	e037883a 	mov	sp,fp
 400cfa8:	df000017 	ldw	fp,0(sp)
 400cfac:	dec00104 	addi	sp,sp,4
 400cfb0:	f800283a 	ret

0400cfb4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 400cfb4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 400cfb8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 400cfbc:	d1270517 	ldw	r4,-25580(gp)

      stw ra,  0(sp)
 400cfc0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 400cfc4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 400cfc8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 400cfcc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 400cfd0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 400cfd4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 400cfd8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 400cfdc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 400cfe0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 400cfe4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 400cfe8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 400cfec:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 400cff0:	400d2280 	call	400d228 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 400cff4:	d1270017 	ldw	r4,-25600(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 400cff8:	d166f807 	ldb	r5,-25632(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 400cffc:	d1270515 	stw	r4,-25580(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 400d000:	d166f845 	stb	r5,-25631(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 400d004:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 400d008:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 400d00c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 400d010:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 400d014:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 400d018:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 400d01c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 400d020:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 400d024:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 400d028:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 400d02c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 400d030:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 400d034:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 400d038:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 400d03c:	f800283a 	ret

0400d040 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 400d040:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 400d044:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 400d048:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 400d04c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 400d050:	400d2280 	call	400d228 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 400d054:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 400d058:	d4a6f645 	stb	r18,-25639(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 400d05c:	003fe506 	br	400cff4 <__alt_mem_onchip_memory2_0+0xfc00aff4>

0400d060 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 400d060:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 400d064:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 400d068:	10800054 	ori	r2,r2,1
      wrctl status, r2
 400d06c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 400d070:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 400d074:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 400d078:	dec00204 	addi	sp,sp,8

      callr r2
 400d07c:	103ee83a 	callr	r2

      nop
 400d080:	0001883a 	nop

0400d084 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 400d084:	defff704 	addi	sp,sp,-36
 400d088:	dfc00815 	stw	ra,32(sp)
 400d08c:	df000715 	stw	fp,28(sp)
 400d090:	df000704 	addi	fp,sp,28
 400d094:	e13ffc15 	stw	r4,-16(fp)
 400d098:	e17ffd15 	stw	r5,-12(fp)
 400d09c:	e1bffe15 	stw	r6,-8(fp)
 400d0a0:	3805883a 	mov	r2,r7
 400d0a4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 400d0a8:	e0fffe17 	ldw	r3,-8(fp)
 400d0ac:	00bfff04 	movi	r2,-4
 400d0b0:	1884703a 	and	r2,r3,r2
 400d0b4:	10bef704 	addi	r2,r2,-1060
 400d0b8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 400d0bc:	01810904 	movi	r6,1060
 400d0c0:	000b883a 	mov	r5,zero
 400d0c4:	e13ff917 	ldw	r4,-28(fp)
 400d0c8:	4001a900 	call	4001a90 <memset>
 400d0cc:	e0bff917 	ldw	r2,-28(fp)
 400d0d0:	10c0bb04 	addi	r3,r2,748
 400d0d4:	e0bff917 	ldw	r2,-28(fp)
 400d0d8:	10c00115 	stw	r3,4(r2)
 400d0dc:	e0bff917 	ldw	r2,-28(fp)
 400d0e0:	10c0d504 	addi	r3,r2,852
 400d0e4:	e0bff917 	ldw	r2,-28(fp)
 400d0e8:	10c00215 	stw	r3,8(r2)
 400d0ec:	e0bff917 	ldw	r2,-28(fp)
 400d0f0:	10c0ef04 	addi	r3,r2,956
 400d0f4:	e0bff917 	ldw	r2,-28(fp)
 400d0f8:	10c00315 	stw	r3,12(r2)
 400d0fc:	e0fff917 	ldw	r3,-28(fp)
 400d100:	00810074 	movhi	r2,1025
 400d104:	10b6ef04 	addi	r2,r2,-9284
 400d108:	18800d15 	stw	r2,52(r3)
 400d10c:	e0bff917 	ldw	r2,-28(fp)
 400d110:	00c00044 	movi	r3,1
 400d114:	10c02915 	stw	r3,164(r2)
 400d118:	10002a15 	stw	zero,168(r2)
 400d11c:	e0bff917 	ldw	r2,-28(fp)
 400d120:	00ccc384 	movi	r3,13070
 400d124:	10c02b0d 	sth	r3,172(r2)
 400d128:	e0bff917 	ldw	r2,-28(fp)
 400d12c:	00eaf344 	movi	r3,-21555
 400d130:	10c02b8d 	sth	r3,174(r2)
 400d134:	e0bff917 	ldw	r2,-28(fp)
 400d138:	00c48d04 	movi	r3,4660
 400d13c:	10c02c0d 	sth	r3,176(r2)
 400d140:	e0bff917 	ldw	r2,-28(fp)
 400d144:	00f99b44 	movi	r3,-6547
 400d148:	10c02c8d 	sth	r3,178(r2)
 400d14c:	e0bff917 	ldw	r2,-28(fp)
 400d150:	00f7bb04 	movi	r3,-8468
 400d154:	10c02d0d 	sth	r3,180(r2)
 400d158:	e0bff917 	ldw	r2,-28(fp)
 400d15c:	00c00144 	movi	r3,5
 400d160:	10c02d8d 	sth	r3,182(r2)
 400d164:	e0bff917 	ldw	r2,-28(fp)
 400d168:	00c002c4 	movi	r3,11
 400d16c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 400d170:	e0bff917 	ldw	r2,-28(fp)
 400d174:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 400d178:	e0bffa17 	ldw	r2,-24(fp)
 400d17c:	10bff304 	addi	r2,r2,-52
 400d180:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 400d184:	e0bffb17 	ldw	r2,-20(fp)
 400d188:	10800c04 	addi	r2,r2,48
 400d18c:	e0fffc17 	ldw	r3,-16(fp)
 400d190:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 400d194:	e0bffb17 	ldw	r2,-20(fp)
 400d198:	10800b04 	addi	r2,r2,44
 400d19c:	e0fffd17 	ldw	r3,-12(fp)
 400d1a0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 400d1a4:	e0bffb17 	ldw	r2,-20(fp)
 400d1a8:	10800a04 	addi	r2,r2,40
 400d1ac:	e0fff917 	ldw	r3,-28(fp)
 400d1b0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 400d1b4:	00810074 	movhi	r2,1025
 400d1b8:	10b41804 	addi	r2,r2,-12192
 400d1bc:	10c00104 	addi	r3,r2,4
 400d1c0:	e0bffb17 	ldw	r2,-20(fp)
 400d1c4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 400d1c8:	e0bffb17 	ldw	r2,-20(fp)
}
 400d1cc:	e037883a 	mov	sp,fp
 400d1d0:	dfc00117 	ldw	ra,4(sp)
 400d1d4:	df000017 	ldw	fp,0(sp)
 400d1d8:	dec00204 	addi	sp,sp,8
 400d1dc:	f800283a 	ret

0400d1e0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 400d1e0:	defffe04 	addi	sp,sp,-8
 400d1e4:	df000115 	stw	fp,4(sp)
 400d1e8:	df000104 	addi	fp,sp,4
 400d1ec:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 400d1f0:	0001883a 	nop
 400d1f4:	e037883a 	mov	sp,fp
 400d1f8:	df000017 	ldw	fp,0(sp)
 400d1fc:	dec00104 	addi	sp,sp,4
 400d200:	f800283a 	ret

0400d204 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 400d204:	defffe04 	addi	sp,sp,-8
 400d208:	df000115 	stw	fp,4(sp)
 400d20c:	df000104 	addi	fp,sp,4
 400d210:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 400d214:	0001883a 	nop
 400d218:	e037883a 	mov	sp,fp
 400d21c:	df000017 	ldw	fp,0(sp)
 400d220:	dec00104 	addi	sp,sp,4
 400d224:	f800283a 	ret

0400d228 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 400d228:	deffff04 	addi	sp,sp,-4
 400d22c:	df000015 	stw	fp,0(sp)
 400d230:	d839883a 	mov	fp,sp
}
 400d234:	0001883a 	nop
 400d238:	e037883a 	mov	sp,fp
 400d23c:	df000017 	ldw	fp,0(sp)
 400d240:	dec00104 	addi	sp,sp,4
 400d244:	f800283a 	ret

0400d248 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 400d248:	deffff04 	addi	sp,sp,-4
 400d24c:	df000015 	stw	fp,0(sp)
 400d250:	d839883a 	mov	fp,sp
}
 400d254:	0001883a 	nop
 400d258:	e037883a 	mov	sp,fp
 400d25c:	df000017 	ldw	fp,0(sp)
 400d260:	dec00104 	addi	sp,sp,4
 400d264:	f800283a 	ret

0400d268 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 400d268:	deffff04 	addi	sp,sp,-4
 400d26c:	df000015 	stw	fp,0(sp)
 400d270:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 400d274:	0001883a 	nop
 400d278:	e037883a 	mov	sp,fp
 400d27c:	df000017 	ldw	fp,0(sp)
 400d280:	dec00104 	addi	sp,sp,4
 400d284:	f800283a 	ret

0400d288 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 400d288:	deffff04 	addi	sp,sp,-4
 400d28c:	df000015 	stw	fp,0(sp)
 400d290:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 400d294:	0001883a 	nop
 400d298:	e037883a 	mov	sp,fp
 400d29c:	df000017 	ldw	fp,0(sp)
 400d2a0:	dec00104 	addi	sp,sp,4
 400d2a4:	f800283a 	ret

0400d2a8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 400d2a8:	deffff04 	addi	sp,sp,-4
 400d2ac:	df000015 	stw	fp,0(sp)
 400d2b0:	d839883a 	mov	fp,sp
}
 400d2b4:	0001883a 	nop
 400d2b8:	e037883a 	mov	sp,fp
 400d2bc:	df000017 	ldw	fp,0(sp)
 400d2c0:	dec00104 	addi	sp,sp,4
 400d2c4:	f800283a 	ret

0400d2c8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 400d2c8:	deffff04 	addi	sp,sp,-4
 400d2cc:	df000015 	stw	fp,0(sp)
 400d2d0:	d839883a 	mov	fp,sp
}
 400d2d4:	0001883a 	nop
 400d2d8:	e037883a 	mov	sp,fp
 400d2dc:	df000017 	ldw	fp,0(sp)
 400d2e0:	dec00104 	addi	sp,sp,4
 400d2e4:	f800283a 	ret

0400d2e8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 400d2e8:	defffe04 	addi	sp,sp,-8
 400d2ec:	df000115 	stw	fp,4(sp)
 400d2f0:	df000104 	addi	fp,sp,4
 400d2f4:	e13fff15 	stw	r4,-4(fp)
}
 400d2f8:	0001883a 	nop
 400d2fc:	e037883a 	mov	sp,fp
 400d300:	df000017 	ldw	fp,0(sp)
 400d304:	dec00104 	addi	sp,sp,4
 400d308:	f800283a 	ret

0400d30c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400d30c:	defffa04 	addi	sp,sp,-24
 400d310:	dfc00515 	stw	ra,20(sp)
 400d314:	df000415 	stw	fp,16(sp)
 400d318:	df000404 	addi	fp,sp,16
 400d31c:	e13ffe15 	stw	r4,-8(fp)
 400d320:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400d324:	e0bfff17 	ldw	r2,-4(fp)
 400d328:	10800017 	ldw	r2,0(r2)
 400d32c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400d330:	e13ffe17 	ldw	r4,-8(fp)
 400d334:	40004800 	call	4000480 <strlen>
 400d338:	10800044 	addi	r2,r2,1
 400d33c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d340:	00000d06 	br	400d378 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400d344:	e0bffc17 	ldw	r2,-16(fp)
 400d348:	10800217 	ldw	r2,8(r2)
 400d34c:	e0fffd17 	ldw	r3,-12(fp)
 400d350:	180d883a 	mov	r6,r3
 400d354:	e17ffe17 	ldw	r5,-8(fp)
 400d358:	1009883a 	mov	r4,r2
 400d35c:	400d6f80 	call	400d6f8 <memcmp>
 400d360:	1000021e 	bne	r2,zero,400d36c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400d364:	e0bffc17 	ldw	r2,-16(fp)
 400d368:	00000706 	br	400d388 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400d36c:	e0bffc17 	ldw	r2,-16(fp)
 400d370:	10800017 	ldw	r2,0(r2)
 400d374:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d378:	e0fffc17 	ldw	r3,-16(fp)
 400d37c:	e0bfff17 	ldw	r2,-4(fp)
 400d380:	18bff01e 	bne	r3,r2,400d344 <__alt_mem_onchip_memory2_0+0xfc00b344>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400d384:	0005883a 	mov	r2,zero
}
 400d388:	e037883a 	mov	sp,fp
 400d38c:	dfc00117 	ldw	ra,4(sp)
 400d390:	df000017 	ldw	fp,0(sp)
 400d394:	dec00204 	addi	sp,sp,8
 400d398:	f800283a 	ret

0400d39c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400d39c:	defffb04 	addi	sp,sp,-20
 400d3a0:	dfc00415 	stw	ra,16(sp)
 400d3a4:	df000315 	stw	fp,12(sp)
 400d3a8:	df000304 	addi	fp,sp,12
 400d3ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400d3b0:	d0a00417 	ldw	r2,-32752(gp)
 400d3b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d3b8:	00003106 	br	400d480 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400d3bc:	e0bffd17 	ldw	r2,-12(fp)
 400d3c0:	10800217 	ldw	r2,8(r2)
 400d3c4:	1009883a 	mov	r4,r2
 400d3c8:	40004800 	call	4000480 <strlen>
 400d3cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400d3d0:	e0bffd17 	ldw	r2,-12(fp)
 400d3d4:	10c00217 	ldw	r3,8(r2)
 400d3d8:	e0bffe17 	ldw	r2,-8(fp)
 400d3dc:	10bfffc4 	addi	r2,r2,-1
 400d3e0:	1885883a 	add	r2,r3,r2
 400d3e4:	10800003 	ldbu	r2,0(r2)
 400d3e8:	10803fcc 	andi	r2,r2,255
 400d3ec:	1080201c 	xori	r2,r2,128
 400d3f0:	10bfe004 	addi	r2,r2,-128
 400d3f4:	10800bd8 	cmpnei	r2,r2,47
 400d3f8:	1000031e 	bne	r2,zero,400d408 <alt_find_file+0x6c>
    {
      len -= 1;
 400d3fc:	e0bffe17 	ldw	r2,-8(fp)
 400d400:	10bfffc4 	addi	r2,r2,-1
 400d404:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d408:	e0bffe17 	ldw	r2,-8(fp)
 400d40c:	e0ffff17 	ldw	r3,-4(fp)
 400d410:	1885883a 	add	r2,r3,r2
 400d414:	10800003 	ldbu	r2,0(r2)
 400d418:	10803fcc 	andi	r2,r2,255
 400d41c:	1080201c 	xori	r2,r2,128
 400d420:	10bfe004 	addi	r2,r2,-128
 400d424:	10800be0 	cmpeqi	r2,r2,47
 400d428:	1000081e 	bne	r2,zero,400d44c <alt_find_file+0xb0>
 400d42c:	e0bffe17 	ldw	r2,-8(fp)
 400d430:	e0ffff17 	ldw	r3,-4(fp)
 400d434:	1885883a 	add	r2,r3,r2
 400d438:	10800003 	ldbu	r2,0(r2)
 400d43c:	10803fcc 	andi	r2,r2,255
 400d440:	1080201c 	xori	r2,r2,128
 400d444:	10bfe004 	addi	r2,r2,-128
 400d448:	10000a1e 	bne	r2,zero,400d474 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400d44c:	e0bffd17 	ldw	r2,-12(fp)
 400d450:	10800217 	ldw	r2,8(r2)
 400d454:	e0fffe17 	ldw	r3,-8(fp)
 400d458:	180d883a 	mov	r6,r3
 400d45c:	e17fff17 	ldw	r5,-4(fp)
 400d460:	1009883a 	mov	r4,r2
 400d464:	400d6f80 	call	400d6f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d468:	1000021e 	bne	r2,zero,400d474 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400d46c:	e0bffd17 	ldw	r2,-12(fp)
 400d470:	00000706 	br	400d490 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400d474:	e0bffd17 	ldw	r2,-12(fp)
 400d478:	10800017 	ldw	r2,0(r2)
 400d47c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d480:	e0fffd17 	ldw	r3,-12(fp)
 400d484:	d0a00404 	addi	r2,gp,-32752
 400d488:	18bfcc1e 	bne	r3,r2,400d3bc <__alt_mem_onchip_memory2_0+0xfc00b3bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400d48c:	0005883a 	mov	r2,zero
}
 400d490:	e037883a 	mov	sp,fp
 400d494:	dfc00117 	ldw	ra,4(sp)
 400d498:	df000017 	ldw	fp,0(sp)
 400d49c:	dec00204 	addi	sp,sp,8
 400d4a0:	f800283a 	ret

0400d4a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400d4a4:	defff904 	addi	sp,sp,-28
 400d4a8:	dfc00615 	stw	ra,24(sp)
 400d4ac:	df000515 	stw	fp,20(sp)
 400d4b0:	df000504 	addi	fp,sp,20
 400d4b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400d4b8:	00bffa04 	movi	r2,-24
 400d4bc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 400d4c0:	d0a6ee17 	ldw	r2,-25672(gp)
 400d4c4:	e0bffd15 	stw	r2,-12(fp)
 400d4c8:	e03ffe0d 	sth	zero,-8(fp)
 400d4cc:	e0bffe0b 	ldhu	r2,-8(fp)
 400d4d0:	e0fffe84 	addi	r3,fp,-6
 400d4d4:	180d883a 	mov	r6,r3
 400d4d8:	100b883a 	mov	r5,r2
 400d4dc:	e13ffd17 	ldw	r4,-12(fp)
 400d4e0:	40092980 	call	4009298 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d4e4:	e03ffb15 	stw	zero,-20(fp)
 400d4e8:	00001906 	br	400d550 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 400d4ec:	00810074 	movhi	r2,1025
 400d4f0:	10b90504 	addi	r2,r2,-7148
 400d4f4:	e0fffb17 	ldw	r3,-20(fp)
 400d4f8:	18c00324 	muli	r3,r3,12
 400d4fc:	10c5883a 	add	r2,r2,r3
 400d500:	10800017 	ldw	r2,0(r2)
 400d504:	10000f1e 	bne	r2,zero,400d544 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 400d508:	00810074 	movhi	r2,1025
 400d50c:	10b90504 	addi	r2,r2,-7148
 400d510:	e0fffb17 	ldw	r3,-20(fp)
 400d514:	18c00324 	muli	r3,r3,12
 400d518:	10c5883a 	add	r2,r2,r3
 400d51c:	e0ffff17 	ldw	r3,-4(fp)
 400d520:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400d524:	d0e00817 	ldw	r3,-32736(gp)
 400d528:	e0bffb17 	ldw	r2,-20(fp)
 400d52c:	1880020e 	bge	r3,r2,400d538 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 400d530:	e0bffb17 	ldw	r2,-20(fp)
 400d534:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 400d538:	e0bffb17 	ldw	r2,-20(fp)
 400d53c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 400d540:	00000606 	br	400d55c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d544:	e0bffb17 	ldw	r2,-20(fp)
 400d548:	10800044 	addi	r2,r2,1
 400d54c:	e0bffb15 	stw	r2,-20(fp)
 400d550:	e0bffb17 	ldw	r2,-20(fp)
 400d554:	10800810 	cmplti	r2,r2,32
 400d558:	103fe41e 	bne	r2,zero,400d4ec <__alt_mem_onchip_memory2_0+0xfc00b4ec>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 400d55c:	d0a6ee17 	ldw	r2,-25672(gp)
 400d560:	1009883a 	mov	r4,r2
 400d564:	40096100 	call	4009610 <OSSemPost>

  return rc;
 400d568:	e0bffc17 	ldw	r2,-16(fp)
}
 400d56c:	e037883a 	mov	sp,fp
 400d570:	dfc00117 	ldw	ra,4(sp)
 400d574:	df000017 	ldw	fp,0(sp)
 400d578:	dec00204 	addi	sp,sp,8
 400d57c:	f800283a 	ret

0400d580 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400d580:	defffb04 	addi	sp,sp,-20
 400d584:	df000415 	stw	fp,16(sp)
 400d588:	df000404 	addi	fp,sp,16
 400d58c:	e13ffe15 	stw	r4,-8(fp)
 400d590:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400d594:	e0bfff17 	ldw	r2,-4(fp)
 400d598:	10840070 	cmpltui	r2,r2,4097
 400d59c:	1000021e 	bne	r2,zero,400d5a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400d5a0:	00840004 	movi	r2,4096
 400d5a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400d5a8:	e0fffe17 	ldw	r3,-8(fp)
 400d5ac:	e0bfff17 	ldw	r2,-4(fp)
 400d5b0:	1885883a 	add	r2,r3,r2
 400d5b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400d5b8:	e0bffe17 	ldw	r2,-8(fp)
 400d5bc:	e0bffc15 	stw	r2,-16(fp)
 400d5c0:	00000506 	br	400d5d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400d5c4:	e0bffc17 	ldw	r2,-16(fp)
 400d5c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400d5cc:	e0bffc17 	ldw	r2,-16(fp)
 400d5d0:	10800804 	addi	r2,r2,32
 400d5d4:	e0bffc15 	stw	r2,-16(fp)
 400d5d8:	e0fffc17 	ldw	r3,-16(fp)
 400d5dc:	e0bffd17 	ldw	r2,-12(fp)
 400d5e0:	18bff836 	bltu	r3,r2,400d5c4 <__alt_mem_onchip_memory2_0+0xfc00b5c4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400d5e4:	e0bffe17 	ldw	r2,-8(fp)
 400d5e8:	108007cc 	andi	r2,r2,31
 400d5ec:	10000226 	beq	r2,zero,400d5f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400d5f0:	e0bffc17 	ldw	r2,-16(fp)
 400d5f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400d5f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400d5fc:	0001883a 	nop
 400d600:	e037883a 	mov	sp,fp
 400d604:	df000017 	ldw	fp,0(sp)
 400d608:	dec00104 	addi	sp,sp,4
 400d60c:	f800283a 	ret

0400d610 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400d610:	defffe04 	addi	sp,sp,-8
 400d614:	df000115 	stw	fp,4(sp)
 400d618:	df000104 	addi	fp,sp,4
 400d61c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400d620:	e0bfff17 	ldw	r2,-4(fp)
 400d624:	10bffe84 	addi	r2,r2,-6
 400d628:	10c00428 	cmpgeui	r3,r2,16
 400d62c:	18001a1e 	bne	r3,zero,400d698 <alt_exception_cause_generated_bad_addr+0x88>
 400d630:	100690ba 	slli	r3,r2,2
 400d634:	00810074 	movhi	r2,1025
 400d638:	10b59204 	addi	r2,r2,-10680
 400d63c:	1885883a 	add	r2,r3,r2
 400d640:	10800017 	ldw	r2,0(r2)
 400d644:	1000683a 	jmp	r2
 400d648:	0400d688 	cmpgei	r16,zero,858
 400d64c:	0400d688 	cmpgei	r16,zero,858
 400d650:	0400d698 	cmpnei	r16,zero,858
 400d654:	0400d698 	cmpnei	r16,zero,858
 400d658:	0400d698 	cmpnei	r16,zero,858
 400d65c:	0400d688 	cmpgei	r16,zero,858
 400d660:	0400d690 	cmplti	r16,zero,858
 400d664:	0400d698 	cmpnei	r16,zero,858
 400d668:	0400d688 	cmpgei	r16,zero,858
 400d66c:	0400d688 	cmpgei	r16,zero,858
 400d670:	0400d698 	cmpnei	r16,zero,858
 400d674:	0400d688 	cmpgei	r16,zero,858
 400d678:	0400d690 	cmplti	r16,zero,858
 400d67c:	0400d698 	cmpnei	r16,zero,858
 400d680:	0400d698 	cmpnei	r16,zero,858
 400d684:	0400d688 	cmpgei	r16,zero,858
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400d688:	00800044 	movi	r2,1
 400d68c:	00000306 	br	400d69c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400d690:	0005883a 	mov	r2,zero
 400d694:	00000106 	br	400d69c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400d698:	0005883a 	mov	r2,zero
  }
}
 400d69c:	e037883a 	mov	sp,fp
 400d6a0:	df000017 	ldw	fp,0(sp)
 400d6a4:	dec00104 	addi	sp,sp,4
 400d6a8:	f800283a 	ret

0400d6ac <atexit>:
 400d6ac:	200b883a 	mov	r5,r4
 400d6b0:	000f883a 	mov	r7,zero
 400d6b4:	000d883a 	mov	r6,zero
 400d6b8:	0009883a 	mov	r4,zero
 400d6bc:	400d7741 	jmpi	400d774 <__register_exitproc>

0400d6c0 <exit>:
 400d6c0:	defffe04 	addi	sp,sp,-8
 400d6c4:	000b883a 	mov	r5,zero
 400d6c8:	dc000015 	stw	r16,0(sp)
 400d6cc:	dfc00115 	stw	ra,4(sp)
 400d6d0:	2021883a 	mov	r16,r4
 400d6d4:	400d88c0 	call	400d88c <__call_exitprocs>
 400d6d8:	00810074 	movhi	r2,1025
 400d6dc:	10bd8004 	addi	r2,r2,-2560
 400d6e0:	11000017 	ldw	r4,0(r2)
 400d6e4:	20800f17 	ldw	r2,60(r4)
 400d6e8:	10000126 	beq	r2,zero,400d6f0 <exit+0x30>
 400d6ec:	103ee83a 	callr	r2
 400d6f0:	8009883a 	mov	r4,r16
 400d6f4:	400da0c0 	call	400da0c <_exit>

0400d6f8 <memcmp>:
 400d6f8:	01c000c4 	movi	r7,3
 400d6fc:	3980192e 	bgeu	r7,r6,400d764 <memcmp+0x6c>
 400d700:	2144b03a 	or	r2,r4,r5
 400d704:	11c4703a 	and	r2,r2,r7
 400d708:	10000f26 	beq	r2,zero,400d748 <memcmp+0x50>
 400d70c:	20800003 	ldbu	r2,0(r4)
 400d710:	28c00003 	ldbu	r3,0(r5)
 400d714:	10c0151e 	bne	r2,r3,400d76c <memcmp+0x74>
 400d718:	31bfff84 	addi	r6,r6,-2
 400d71c:	01ffffc4 	movi	r7,-1
 400d720:	00000406 	br	400d734 <memcmp+0x3c>
 400d724:	20800003 	ldbu	r2,0(r4)
 400d728:	28c00003 	ldbu	r3,0(r5)
 400d72c:	31bfffc4 	addi	r6,r6,-1
 400d730:	10c00e1e 	bne	r2,r3,400d76c <memcmp+0x74>
 400d734:	21000044 	addi	r4,r4,1
 400d738:	29400044 	addi	r5,r5,1
 400d73c:	31fff91e 	bne	r6,r7,400d724 <__alt_mem_onchip_memory2_0+0xfc00b724>
 400d740:	0005883a 	mov	r2,zero
 400d744:	f800283a 	ret
 400d748:	20c00017 	ldw	r3,0(r4)
 400d74c:	28800017 	ldw	r2,0(r5)
 400d750:	18bfee1e 	bne	r3,r2,400d70c <__alt_mem_onchip_memory2_0+0xfc00b70c>
 400d754:	31bfff04 	addi	r6,r6,-4
 400d758:	21000104 	addi	r4,r4,4
 400d75c:	29400104 	addi	r5,r5,4
 400d760:	39bff936 	bltu	r7,r6,400d748 <__alt_mem_onchip_memory2_0+0xfc00b748>
 400d764:	303fe91e 	bne	r6,zero,400d70c <__alt_mem_onchip_memory2_0+0xfc00b70c>
 400d768:	003ff506 	br	400d740 <__alt_mem_onchip_memory2_0+0xfc00b740>
 400d76c:	10c5c83a 	sub	r2,r2,r3
 400d770:	f800283a 	ret

0400d774 <__register_exitproc>:
 400d774:	defffa04 	addi	sp,sp,-24
 400d778:	dc000315 	stw	r16,12(sp)
 400d77c:	04010074 	movhi	r16,1025
 400d780:	843d8004 	addi	r16,r16,-2560
 400d784:	80c00017 	ldw	r3,0(r16)
 400d788:	dc400415 	stw	r17,16(sp)
 400d78c:	dfc00515 	stw	ra,20(sp)
 400d790:	18805217 	ldw	r2,328(r3)
 400d794:	2023883a 	mov	r17,r4
 400d798:	10003726 	beq	r2,zero,400d878 <__register_exitproc+0x104>
 400d79c:	10c00117 	ldw	r3,4(r2)
 400d7a0:	010007c4 	movi	r4,31
 400d7a4:	20c00e16 	blt	r4,r3,400d7e0 <__register_exitproc+0x6c>
 400d7a8:	1a000044 	addi	r8,r3,1
 400d7ac:	8800221e 	bne	r17,zero,400d838 <__register_exitproc+0xc4>
 400d7b0:	18c00084 	addi	r3,r3,2
 400d7b4:	18c7883a 	add	r3,r3,r3
 400d7b8:	18c7883a 	add	r3,r3,r3
 400d7bc:	12000115 	stw	r8,4(r2)
 400d7c0:	10c7883a 	add	r3,r2,r3
 400d7c4:	19400015 	stw	r5,0(r3)
 400d7c8:	0005883a 	mov	r2,zero
 400d7cc:	dfc00517 	ldw	ra,20(sp)
 400d7d0:	dc400417 	ldw	r17,16(sp)
 400d7d4:	dc000317 	ldw	r16,12(sp)
 400d7d8:	dec00604 	addi	sp,sp,24
 400d7dc:	f800283a 	ret
 400d7e0:	00800034 	movhi	r2,0
 400d7e4:	10800004 	addi	r2,r2,0
 400d7e8:	10002626 	beq	r2,zero,400d884 <__register_exitproc+0x110>
 400d7ec:	01006404 	movi	r4,400
 400d7f0:	d9400015 	stw	r5,0(sp)
 400d7f4:	d9800115 	stw	r6,4(sp)
 400d7f8:	d9c00215 	stw	r7,8(sp)
 400d7fc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 400d800:	d9400017 	ldw	r5,0(sp)
 400d804:	d9800117 	ldw	r6,4(sp)
 400d808:	d9c00217 	ldw	r7,8(sp)
 400d80c:	10001d26 	beq	r2,zero,400d884 <__register_exitproc+0x110>
 400d810:	81000017 	ldw	r4,0(r16)
 400d814:	10000115 	stw	zero,4(r2)
 400d818:	02000044 	movi	r8,1
 400d81c:	22405217 	ldw	r9,328(r4)
 400d820:	0007883a 	mov	r3,zero
 400d824:	12400015 	stw	r9,0(r2)
 400d828:	20805215 	stw	r2,328(r4)
 400d82c:	10006215 	stw	zero,392(r2)
 400d830:	10006315 	stw	zero,396(r2)
 400d834:	883fde26 	beq	r17,zero,400d7b0 <__alt_mem_onchip_memory2_0+0xfc00b7b0>
 400d838:	18c9883a 	add	r4,r3,r3
 400d83c:	2109883a 	add	r4,r4,r4
 400d840:	1109883a 	add	r4,r2,r4
 400d844:	21802215 	stw	r6,136(r4)
 400d848:	01800044 	movi	r6,1
 400d84c:	12406217 	ldw	r9,392(r2)
 400d850:	30cc983a 	sll	r6,r6,r3
 400d854:	4992b03a 	or	r9,r9,r6
 400d858:	12406215 	stw	r9,392(r2)
 400d85c:	21c04215 	stw	r7,264(r4)
 400d860:	01000084 	movi	r4,2
 400d864:	893fd21e 	bne	r17,r4,400d7b0 <__alt_mem_onchip_memory2_0+0xfc00b7b0>
 400d868:	11006317 	ldw	r4,396(r2)
 400d86c:	218cb03a 	or	r6,r4,r6
 400d870:	11806315 	stw	r6,396(r2)
 400d874:	003fce06 	br	400d7b0 <__alt_mem_onchip_memory2_0+0xfc00b7b0>
 400d878:	18805304 	addi	r2,r3,332
 400d87c:	18805215 	stw	r2,328(r3)
 400d880:	003fc606 	br	400d79c <__alt_mem_onchip_memory2_0+0xfc00b79c>
 400d884:	00bfffc4 	movi	r2,-1
 400d888:	003fd006 	br	400d7cc <__alt_mem_onchip_memory2_0+0xfc00b7cc>

0400d88c <__call_exitprocs>:
 400d88c:	defff504 	addi	sp,sp,-44
 400d890:	df000915 	stw	fp,36(sp)
 400d894:	dd400615 	stw	r21,24(sp)
 400d898:	dc800315 	stw	r18,12(sp)
 400d89c:	dfc00a15 	stw	ra,40(sp)
 400d8a0:	ddc00815 	stw	r23,32(sp)
 400d8a4:	dd800715 	stw	r22,28(sp)
 400d8a8:	dd000515 	stw	r20,20(sp)
 400d8ac:	dcc00415 	stw	r19,16(sp)
 400d8b0:	dc400215 	stw	r17,8(sp)
 400d8b4:	dc000115 	stw	r16,4(sp)
 400d8b8:	d9000015 	stw	r4,0(sp)
 400d8bc:	2839883a 	mov	fp,r5
 400d8c0:	04800044 	movi	r18,1
 400d8c4:	057fffc4 	movi	r21,-1
 400d8c8:	00810074 	movhi	r2,1025
 400d8cc:	10bd8004 	addi	r2,r2,-2560
 400d8d0:	12000017 	ldw	r8,0(r2)
 400d8d4:	45005217 	ldw	r20,328(r8)
 400d8d8:	44c05204 	addi	r19,r8,328
 400d8dc:	a0001c26 	beq	r20,zero,400d950 <__call_exitprocs+0xc4>
 400d8e0:	a0800117 	ldw	r2,4(r20)
 400d8e4:	15ffffc4 	addi	r23,r2,-1
 400d8e8:	b8000d16 	blt	r23,zero,400d920 <__call_exitprocs+0x94>
 400d8ec:	14000044 	addi	r16,r2,1
 400d8f0:	8421883a 	add	r16,r16,r16
 400d8f4:	8421883a 	add	r16,r16,r16
 400d8f8:	84402004 	addi	r17,r16,128
 400d8fc:	a463883a 	add	r17,r20,r17
 400d900:	a421883a 	add	r16,r20,r16
 400d904:	e0001e26 	beq	fp,zero,400d980 <__call_exitprocs+0xf4>
 400d908:	80804017 	ldw	r2,256(r16)
 400d90c:	e0801c26 	beq	fp,r2,400d980 <__call_exitprocs+0xf4>
 400d910:	bdffffc4 	addi	r23,r23,-1
 400d914:	843fff04 	addi	r16,r16,-4
 400d918:	8c7fff04 	addi	r17,r17,-4
 400d91c:	bd7ff91e 	bne	r23,r21,400d904 <__alt_mem_onchip_memory2_0+0xfc00b904>
 400d920:	00800034 	movhi	r2,0
 400d924:	10800004 	addi	r2,r2,0
 400d928:	10000926 	beq	r2,zero,400d950 <__call_exitprocs+0xc4>
 400d92c:	a0800117 	ldw	r2,4(r20)
 400d930:	1000301e 	bne	r2,zero,400d9f4 <__call_exitprocs+0x168>
 400d934:	a0800017 	ldw	r2,0(r20)
 400d938:	10003226 	beq	r2,zero,400da04 <__call_exitprocs+0x178>
 400d93c:	a009883a 	mov	r4,r20
 400d940:	98800015 	stw	r2,0(r19)
 400d944:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 400d948:	9d000017 	ldw	r20,0(r19)
 400d94c:	a03fe41e 	bne	r20,zero,400d8e0 <__alt_mem_onchip_memory2_0+0xfc00b8e0>
 400d950:	dfc00a17 	ldw	ra,40(sp)
 400d954:	df000917 	ldw	fp,36(sp)
 400d958:	ddc00817 	ldw	r23,32(sp)
 400d95c:	dd800717 	ldw	r22,28(sp)
 400d960:	dd400617 	ldw	r21,24(sp)
 400d964:	dd000517 	ldw	r20,20(sp)
 400d968:	dcc00417 	ldw	r19,16(sp)
 400d96c:	dc800317 	ldw	r18,12(sp)
 400d970:	dc400217 	ldw	r17,8(sp)
 400d974:	dc000117 	ldw	r16,4(sp)
 400d978:	dec00b04 	addi	sp,sp,44
 400d97c:	f800283a 	ret
 400d980:	a0800117 	ldw	r2,4(r20)
 400d984:	80c00017 	ldw	r3,0(r16)
 400d988:	10bfffc4 	addi	r2,r2,-1
 400d98c:	15c01426 	beq	r2,r23,400d9e0 <__call_exitprocs+0x154>
 400d990:	80000015 	stw	zero,0(r16)
 400d994:	183fde26 	beq	r3,zero,400d910 <__alt_mem_onchip_memory2_0+0xfc00b910>
 400d998:	95c8983a 	sll	r4,r18,r23
 400d99c:	a0806217 	ldw	r2,392(r20)
 400d9a0:	a5800117 	ldw	r22,4(r20)
 400d9a4:	2084703a 	and	r2,r4,r2
 400d9a8:	10000b26 	beq	r2,zero,400d9d8 <__call_exitprocs+0x14c>
 400d9ac:	a0806317 	ldw	r2,396(r20)
 400d9b0:	2088703a 	and	r4,r4,r2
 400d9b4:	20000c1e 	bne	r4,zero,400d9e8 <__call_exitprocs+0x15c>
 400d9b8:	89400017 	ldw	r5,0(r17)
 400d9bc:	d9000017 	ldw	r4,0(sp)
 400d9c0:	183ee83a 	callr	r3
 400d9c4:	a0800117 	ldw	r2,4(r20)
 400d9c8:	15bfbf1e 	bne	r2,r22,400d8c8 <__alt_mem_onchip_memory2_0+0xfc00b8c8>
 400d9cc:	98800017 	ldw	r2,0(r19)
 400d9d0:	153fcf26 	beq	r2,r20,400d910 <__alt_mem_onchip_memory2_0+0xfc00b910>
 400d9d4:	003fbc06 	br	400d8c8 <__alt_mem_onchip_memory2_0+0xfc00b8c8>
 400d9d8:	183ee83a 	callr	r3
 400d9dc:	003ff906 	br	400d9c4 <__alt_mem_onchip_memory2_0+0xfc00b9c4>
 400d9e0:	a5c00115 	stw	r23,4(r20)
 400d9e4:	003feb06 	br	400d994 <__alt_mem_onchip_memory2_0+0xfc00b994>
 400d9e8:	89000017 	ldw	r4,0(r17)
 400d9ec:	183ee83a 	callr	r3
 400d9f0:	003ff406 	br	400d9c4 <__alt_mem_onchip_memory2_0+0xfc00b9c4>
 400d9f4:	a0800017 	ldw	r2,0(r20)
 400d9f8:	a027883a 	mov	r19,r20
 400d9fc:	1029883a 	mov	r20,r2
 400da00:	003fb606 	br	400d8dc <__alt_mem_onchip_memory2_0+0xfc00b8dc>
 400da04:	0005883a 	mov	r2,zero
 400da08:	003ffb06 	br	400d9f8 <__alt_mem_onchip_memory2_0+0xfc00b9f8>

0400da0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400da0c:	defffd04 	addi	sp,sp,-12
 400da10:	df000215 	stw	fp,8(sp)
 400da14:	df000204 	addi	fp,sp,8
 400da18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400da1c:	d026f645 	stb	zero,-25639(gp)
 400da20:	e0bfff17 	ldw	r2,-4(fp)
 400da24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400da28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400da2c:	10000226 	beq	r2,zero,400da38 <_exit+0x2c>
    ALT_SIM_FAIL();
 400da30:	002af070 	cmpltui	zero,zero,43969
 400da34:	00000106 	br	400da3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400da38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400da3c:	003fff06 	br	400da3c <__alt_mem_onchip_memory2_0+0xfc00ba3c>
