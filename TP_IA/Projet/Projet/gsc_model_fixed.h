#define SINGLE_FILE
/**
  ******************************************************************************
  * @file    number.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    2 february 2021
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __NUMBER_H__
#define __NUMBER_H__

#include <stdint.h>

#define FIXED_POINT	9	// Fixed point scaling factor, set to 0 when using floating point
#define NUMBER_MIN	-32768	// Max value for this numeric type
#define NUMBER_MAX	32767	// Min value for this numeric type
typedef int16_t number_t;		// Standard size numeric type used for weights and activations
typedef int32_t long_number_t;	// Long numeric type used for intermediate results

#ifndef min
static inline long_number_t min(long_number_t a, long_number_t b) {
	if (a <= b)
		return a;
	return b;
}
#endif

#ifndef max
static inline long_number_t max(long_number_t a, long_number_t b) {
	if (a >= b)
		return a;
	return b;
}
#endif

#if FIXED_POINT > 0 // Scaling/clamping for fixed-point representation
static inline long_number_t scale_number_t(long_number_t number) {
	return number >> FIXED_POINT;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) max(NUMBER_MIN, min(NUMBER_MAX, number));
}
#else // No scaling/clamping required for floating-point
static inline long_number_t scale_number_t(long_number_t number) {
	return number;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) number;
}
#endif


#endif //__NUMBER_H__
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  1
#define INPUT_SAMPLES   16000
#define POOL_SIZE       10
#define POOL_STRIDE     3
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_4_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_4(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      1
#define INPUT_SAMPLES       5331
#define CONV_FILTERS        64
#define CONV_KERNEL_SIZE    80
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_3_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_3(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    1
#define CONV_FILTERS      64
#define CONV_KERNEL_SIZE  80


const int16_t conv1d_3_bias[CONV_FILTERS] = {-10, 7, 0, -7, -2, -37, 0, 1, 0, -4, -1, -1, 3, -24, 1, 0, -8, -24, 2, -2, -32, -23, 7, 27, -5, -60, 2, -2, 4, 1, -48, -46, 0, 0, -2, 10, -36, -17, -2, -22, 9, -1, 7, 2, 0, -5, 5, 1, -39, 0, -41, -1, 1, 0, 20, 2, 0, 1, 2, 3, -26, -22, 0, 0}
;

const int16_t conv1d_3_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{0, -13, -17, -11, -4, 14, -12, -18, 13, 15, 12, -4, 7, 2, -13, -1, -14, -9, 2, 14, -13, -2, -25, 0, 21, 7, -5, -17, -2, -17, -17, -17, 8, 11, -13, 15, 14, 5, 13, 18, -18, 3, 17, 16, -11, 6, 10, 0, -3, 12, 12, -16, 12, -5, 14, 9, 21, 0, 16, -4, -16, 0, 0, 14, 13, 5, -10, -7, 17, 0, -8, 13, -2, -17, 0, -10, 19, 0, 10, -10}
}
, {{-10, -8, -6, 15, -3, -7, -9, 16, 12, -21, -1, -11, -17, 10, 15, 2, 0, -2, -33, -9, 22, -2, 15, 22, -6, -32, -1, -2, 9, 20, -3, 7, -1, -15, 8, 22, -5, 13, -6, -24, -13, -7, 15, 21, 8, -25, -19, 10, -5, 5, 10, -4, -8, -19, 14, -15, -1, -3, -1, -27, -6, 17, 18, -6, -7, -30, 0, 13, -5, -7, 18, -16, -12, 8, 3, 21, 0, 11, 9, -17}
}
, {{-18, -8, 17, 19, 20, -8, -21, -3, -12, -6, 14, 25, 6, -3, -13, -21, 11, 4, 11, 10, 23, 0, -16, -5, -24, -4, 20, 27, 24, 3, -11, -11, -11, -1, 4, 10, -24, 4, 15, 22, 1, -2, -21, -22, -2, 20, 2, 14, -8, -5, 11, -22, -22, 13, 12, 10, 22, -2, 14, -5, -23, -22, 11, 15, 0, 18, -1, -8, -3, -6, 1, 23, 3, -17, -23, 4, 15, 11, -6, 14}
}
, {{16, 9, -2, 8, -1, 8, -1, -7, 19, 4, 12, 14, 22, 11, 21, 18, 15, 15, 10, 7, -7, 9, 8, 6, 0, 22, 15, 3, 7, -1, -1, 3, -4, -9, -14, 13, -5, 1, -12, 3, 0, 11, -5, -5, -6, 10, 8, -2, -2, -1, -4, 3, 5, 9, 7, 16, 14, 23, 0, 18, 2, -3, 5, -10, 0, 18, 3, 14, -5, 12, 22, 21, -6, 2, 17, 15, -4, -9, 10, 8}
}
, {{9, 11, -3, 2, -16, -5, 12, 3, -12, -10, -21, 1, 10, -13, 15, 1, 4, -23, -9, -15, 1, -3, 6, 16, -2, -15, -21, 11, -4, 14, 21, -19, -23, 10, -20, -6, 14, -4, -6, -9, -4, 0, -4, 4, 8, -7, 3, -16, 8, -16, 13, 1, -22, -4, 12, 7, -1, -15, -3, 0, -7, 1, 0, 16, -12, -14, -21, 11, 8, 4, 0, -9, -18, -7, 13, 14, -9, 7, 0, -5}
}
, {{10, 15, 14, 9, 8, 14, 29, 19, 32, 2, 4, 12, -8, -1, 20, 11, 24, 32, 17, 21, -9, -19, 17, 32, 9, 25, 20, 2, -6, 0, 14, 6, 18, 32, -4, -7, 6, -1, 1, 19, -12, -3, -5, -2, 16, 21, -14, -4, -6, 11, 13, 11, 1, -2, 25, 19, 20, -2, -8, -13, 18, 1, 23, 1, 13, 8, 0, 17, -12, -6, 10, 3, -23, 2, 14, 2, 9, 2, -14, 17}
}
, {{21, 13, 7, -7, 1, 21, -2, 2, 2, 26, 5, -4, 2, 2, 20, 0, 10, 1, 15, 7, 9, -18, 6, 11, 0, 14, 1, 0, 18, -9, -2, -2, 13, 4, 15, -3, 20, 22, -13, 7, -8, 10, -15, -10, -4, 19, -7, -12, 7, -19, -19, -11, -1, 3, 9, -7, 0, -19, -14, 15, 19, 0, 18, 10, -5, -15, -24, 13, 7, 8, -6, -3, -13, -17, -29, 8, -15, -8, 8, 2}
}
, {{8, -10, -13, -16, -7, 17, 5, -7, 7, -24, -6, -16, 10, -3, -1, -13, -7, 19, 11, -8, -6, 3, -4, 3, 10, -21, -17, 5, 16, 0, 3, 11, 15, -21, -18, 12, 23, -1, 12, -7, -15, -20, -10, 14, 22, -4, 5, 4, -22, -3, 11, -9, 1, -15, -6, 10, 12, -5, 3, 23, 10, -19, -9, 10, 0, 10, 15, -12, 14, 12, -15, 17, 16, 0, 5, -16, -6, 7, -12, -3}
}
, {{11, -3, -19, -25, -3, 5, 5, -1, -7, -7, -24, -23, 12, -13, 3, 5, -33, -18, -14, -3, 15, 1, -13, -15, -11, 5, -3, -21, 1, 20, 0, 27, 3, -11, 5, 0, 2, -16, -8, -6, 15, 15, 21, 12, -22, -2, 15, 16, -4, -18, 13, -10, -6, 14, -11, -10, -7, 5, 6, 15, -3, 1, 10, 10, 13, 6, 8, -1, 3, 14, 10, -11, 17, 5, 20, 27, 9, -16, -7, 9}
}
, {{-8, 14, 19, -10, -9, -18, 12, 4, -8, 25, 2, 16, -18, -11, -14, 8, 0, 4, 11, -24, -27, 16, 20, -7, -12, -17, 7, -5, -6, -4, 15, -8, 6, 25, 5, 12, -2, 2, -9, -3, 21, 13, 0, 13, -12, -10, -17, -17, 12, 21, -1, 3, -15, -1, 2, 6, -13, 12, -3, -19, 3, 9, 12, -16, 6, -9, -14, 0, -13, 0, -2, 20, 10, 16, -1, -15, -10, 21, 2, -16}
}
, {{-9, 0, 5, 13, 26, 19, -6, -32, -25, 17, 9, 9, 5, 0, -3, -13, 7, -3, -10, -8, 18, 19, 7, 4, -21, -16, 9, 20, -3, -16, -26, 14, 12, -3, 18, 5, -23, -1, -11, -8, 2, 18, -14, 2, -9, -3, -16, 0, 15, 13, 2, -24, -11, 0, 5, -1, 5, 0, -27, -7, -13, 10, 21, 23, 10, -31, -26, -22, 27, 7, 25, -5, -26, -19, -7, 26, 4, 20, -6, -19}
}
, {{-10, 10, -3, -1, 6, -9, 0, 2, 10, 13, 7, -14, -5, 3, -19, -10, 12, 4, 11, 13, 12, -20, -3, 9, -11, 10, 4, -25, 8, -1, 24, 19, -3, 0, -41, -12, 15, 16, 25, 5, 3, -29, 10, 0, 11, -7, -4, -17, -16, 15, 4, -10, 7, 8, 2, 12, -16, -8, -8, -10, -1, 0, 2, 5, -7, 3, 4, -15, 11, 17, -17, -20, -11, 15, 8, -5, 0, -1, -16, -3}
}
, {{-12, -3, -17, -18, -3, 8, -11, 0, 4, -27, -8, 20, 10, 7, -5, -7, -17, 0, 3, 15, 1, 10, 12, -12, -25, -20, 5, -3, 23, 16, -1, -30, -5, -16, 21, 0, 0, 10, -17, -24, -13, 6, 2, 12, -5, -5, 6, -10, -2, 1, 17, -17, 2, 8, 8, -8, 9, 8, 11, 23, 23, -5, 0, 5, 2, 3, 7, 27, 9, 12, 0, -17, -1, 0, 19, 9, 20, -4, -10, -9}
}
, {{-4, -23, -22, -23, -19, -3, -3, -2, -7, -3, 7, 1, -17, 3, -2, 4, -26, 0, 2, -7, -20, 0, 11, 4, 3, 12, 18, -11, 9, 0, 0, 9, 0, 21, 8, 13, 14, 0, 3, 17, 9, 4, 19, 16, 9, 6, 18, 0, 5, -5, 3, 6, 11, 16, 11, 13, 5, -8, 5, 6, -12, 12, 13, 2, 13, -4, 19, 5, -5, 24, 5, -5, 15, 16, 5, 3, 2, 19, -7, -3}
}
, {{3, 3, 10, -2, 13, -9, 13, 10, -10, 4, 12, 15, 17, -14, 5, -22, -7, 18, 17, -7, 13, -6, -15, -11, -13, -20, 15, 19, 17, 7, 11, 5, -6, 0, -10, -12, -4, -7, -4, -6, -2, 13, -20, -14, 0, -2, -18, 2, -5, -6, 11, -20, -26, 8, 16, 2, 17, 11, -4, -33, -19, -6, 9, -8, 6, -9, -18, 8, -9, 0, 17, -4, -6, -22, -18, 14, 6, 2, -12, 0}
}
, {{4, 18, 6, 14, 9, -3, -3, 7, -11, -4, -18, 6, -1, -2, 14, 0, 4, 20, 9, -2, 6, 2, 2, 10, -17, -1, 2, -12, -25, 7, -15, -5, -16, 6, 9, -18, 4, -13, -4, 20, -6, 10, -9, 9, -5, -13, -17, -5, -29, -24, 4, -21, -13, -20, -20, 0, 0, 14, 4, 10, 0, -14, 15, 6, 4, 16, 13, 8, -3, -14, 11, -16, 8, -2, -22, -17, -20, -13, -16, 7}
}
, {{14, -7, -4, -19, -8, 1, -6, 16, 15, 1, -13, 10, -1, 20, 9, 9, 20, -4, -13, 16, -8, -11, 1, 4, 4, 13, 18, 17, 18, 4, -4, -34, -25, 18, -3, 11, 5, 9, 2, 2, -4, -23, 18, 4, 16, -1, -5, 7, -5, -25, 1, 15, 9, 0, 13, 18, -1, -23, -19, 2, 1, 14, 4, 7, -7, -7, 8, -16, -15, -10, 10, 20, 6, -6, 6, -14, 0, -9, -12, -9}
}
, {{-12, 1, -25, -7, -20, -3, 7, 15, 8, -12, 14, -2, -8, -19, -28, -7, -6, -1, -14, -2, -11, -13, -11, 20, 7, 17, 10, 0, -28, -30, -4, -1, 7, -5, 15, -16, -8, -13, -18, 22, 16, 13, 3, 17, 14, 13, -13, 3, -10, 22, 27, 25, 28, 15, 18, 5, -3, 11, -1, 13, 18, 26, 17, -9, 13, -8, 20, 18, 2, 2, 19, 28, 14, 6, 3, 24, 32, 4, 23, 6}
}
, {{-11, 12, -26, 10, 8, 3, 3, 2, -13, -15, -20, 10, -3, 3, 0, -11, -7, -14, 3, -1, 1, 2, -19, 8, 7, 16, -11, -19, -17, 3, 21, 17, 11, 0, 18, 7, 6, 10, -14, 10, 4, 10, 7, 5, 3, 20, 4, 4, -10, -20, 18, 23, 18, -5, -21, -37, 5, 22, -1, 23, -1, -32, -21, 10, 15, 1, 24, -16, 3, -12, -7, 8, 2, -9, -8, 9, 0, 3, 6, 0}
}
, {{-1, -13, 2, -10, -10, -2, -5, -14, 4, -11, 2, -16, 6, -4, -14, 6, -12, -2, 1, 12, -8, 13, 12, -12, 2, -8, 5, -1, -1, -4, 9, 6, 10, 14, -2, 22, 18, 19, 14, 4, 0, 6, -12, -13, -14, -8, 15, -5, 0, 14, 12, 10, 9, -9, 21, 1, 5, 5, -2, 18, 21, 5, 19, 18, 18, 6, 17, 2, 0, 12, 4, 11, 6, 2, 8, 18, 3, 6, 7, 7}
}
, {{-6, 19, 20, 10, 19, 11, -20, -16, 23, 1, 1, 7, -5, -8, -5, 4, 5, 13, 19, 14, -14, -4, -2, 16, -8, 14, 17, -7, -4, 18, 5, 0, 22, -12, 12, 2, -5, 11, 3, 4, 0, 14, -17, 6, -15, 4, 11, 18, 14, 12, -2, 9, 11, 18, 13, 8, 7, -16, 0, 7, 1, 24, -4, 1, -28, -27, 13, 21, 18, 20, -12, -11, -17, -10, 20, -9, -8, -10, -5, 5}
}
, {{-16, -17, -1, 7, -17, -17, -18, -14, -12, -12, -32, -34, -27, -18, -27, -9, -10, -9, 7, 4, 9, 9, 2, 8, -17, -9, -23, -2, 5, -3, -17, -14, 4, 1, -5, -18, -16, 5, -24, -24, -27, -1, -13, -16, 6, 8, 16, -6, 0, 21, -8, 1, -18, -1, -16, -15, -31, -18, -13, -20, -29, -19, -9, -15, 11, 13, 8, 10, 10, 5, 17, -12, 7, -19, -14, -10, -26, -7, -25, -13}
}
, {{-24, -13, -6, -20, 0, -4, -24, -19, -2, -12, -21, -8, -12, -22, -21, -15, -10, -22, -20, -13, -15, -3, -17, 5, -17, -17, 4, 2, -6, 0, 3, 6, -8, 21, -8, 0, 16, 5, 4, -7, 19, 10, 6, -10, 9, 5, -6, -3, -8, 5, 9, -6, -21, -4, 2, -18, -23, -17, -15, -23, -31, -5, -28, -5, -28, -24, -20, -11, -18, -21, -18, -22, -12, -10, -19, -20, 1, -10, -23, -5}
}
, {{-21, -10, 11, 11, -4, 6, -12, -39, -10, -7, -25, -9, -2, -30, -23, -5, -3, 14, -2, 10, -4, -36, -35, -54, -35, -24, -8, -13, 6, -13, -21, 8, 4, -22, -6, -31, -30, -53, -26, -16, -21, -13, 8, -10, -5, 0, 0, -27, -10, -12, -32, -31, -21, -8, 16, 24, 20, 5, -16, -11, -18, 0, -7, -4, -24, -9, -30, -1, 0, 22, 10, 13, -15, -30, -13, -5, 11, 20, 0, -6}
}
, {{-12, -33, -17, -30, -37, -19, -35, -30, -25, -30, -36, -34, -20, -15, -27, -31, -15, -1, -1, -10, -12, -7, 8, 14, 8, 5, 14, 4, -8, 5, 4, -10, -3, 7, -13, -4, 1, 4, 14, -18, -18, -3, -17, -13, 0, -16, 2, -13, 2, -16, -18, -4, -13, -28, -14, -19, -4, 2, -4, -18, 5, -1, 0, 7, -7, 3, -8, 4, 7, -21, -3, 0, -10, -7, -13, 6, -22, -7, 0, -16}
}
, {{-6, -6, -13, 3, -16, 4, -16, 4, -3, -1, 3, -16, -7, -4, 4, 0, -2, -12, -1, 7, 5, 1, -23, -22, 7, -4, 0, 11, 2, -12, 3, -24, 8, -16, 12, -11, 11, 10, 6, -16, -18, 0, -17, 8, 8, -3, -16, -12, -27, -7, -19, -12, 0, -8, -16, -18, 1, -10, -22, -3, -10, -9, 6, -18, 4, -7, -21, -14, 4, -8, -2, 3, 5, -19, -19, -9, 3, -10, 13, 16}
}
, {{-24, -13, -17, -22, -38, -14, -44, -35, -27, -25, 6, 6, -8, 8, 22, 14, -8, 23, 7, 17, 0, 8, 4, 2, 0, -18, -18, -30, -20, -7, -23, -24, -4, 6, 14, 20, 20, 16, 14, 30, 17, 18, -8, -9, -14, -17, -21, -11, -26, -9, -34, -23, -10, -32, -19, -2, -6, -6, -8, 16, 9, 21, 13, 15, 7, 22, 0, 16, -14, 12, -23, -31, -9, -36, -25, -50, -48, -56, -46, -45}
}
, {{21, 12, -13, 8, -7, -1, 0, -3, 11, -3, 20, -9, -17, -11, 21, -4, 25, -6, -11, -18, 23, 10, -6, -9, -2, -16, -5, 13, 29, 1, 10, -19, -29, -9, 10, 6, 24, 17, -14, -7, 11, -19, -14, -2, 16, 10, 0, -9, -5, -6, 1, -9, 4, -12, 11, 8, 20, -5, -8, -24, -8, 7, 1, 22, 13, -12, -14, -22, 0, 23, 21, 13, -9, -6, -3, -9, -9, 8, 11, 5}
}
, {{-10, 1, -16, 0, -17, 4, -19, -3, -22, -7, -20, -14, -3, -21, -5, -27, -8, -1, 8, 0, -1, -14, -4, -10, -9, 17, -15, 15, 1, -2, 28, -1, 7, 26, 9, 15, -4, 9, -11, 9, -4, -13, -6, -3, 2, 8, 22, 14, 21, 23, -5, 21, 33, 11, 4, 16, -6, 15, 10, 6, -1, 9, -9, -2, -28, -11, -21, -35, -12, -17, -20, -9, -21, -12, -22, -20, -5, 2, 3, -6}
}
, {{8, -7, -16, 12, 13, -17, -14, 3, 16, -13, -17, -10, -6, -12, -3, 23, 4, -21, -17, -20, 15, 14, 8, 11, -3, -26, 0, 8, 13, 4, -8, -23, 2, 15, 15, -5, 12, 1, 9, 5, -13, 3, 8, -8, -2, 16, -13, -23, 13, -11, 0, 21, -14, -4, 8, -4, -11, -15, 18, 0, 10, -15, -8, 2, 12, 22, 22, 0, -36, -21, 0, 31, 19, -2, 18, -20, -23, 11, 23, -1}
}
, {{-2, -8, -6, -12, -17, -13, 3, -21, -8, 9, -21, -16, 7, 5, 1, -19, -1, -19, -24, -16, -13, -15, -23, -17, -31, -1, -1, -17, -11, -17, 1, -27, -25, -6, -12, -13, -12, -18, -6, -6, -3, 8, -19, 7, -1, -11, -4, -6, 13, -5, -9, -10, -11, -21, -25, -15, -17, -4, -4, -11, -7, -11, 3, 5, 6, -14, -11, -9, -2, 0, 9, -2, -10, -9, -16, 0, -3, 10, -14, -16}
}
, {{-4, -19, -7, -12, -7, -9, -12, 15, 5, -4, -18, -7, 3, -5, 12, 13, 1, -7, 6, 7, -1, -5, -8, -8, 2, 20, 12, 12, -8, -1, -1, 10, 22, 14, -10, -4, 24, 22, 13, 6, 10, -17, 23, 28, 12, 27, 14, -11, 7, -2, 18, 3, -7, 2, -5, 11, 6, 12, 6, 10, 14, -10, 13, 21, 1, 10, 6, 13, -7, 7, 18, 5, 23, 14, -4, 13, 13, -5, 26, 10}
}
, {{23, 21, -8, -12, -16, 7, 5, 21, -17, -15, -10, -11, 11, 9, 13, 18, 11, -2, -14, -13, 17, -9, -13, 0, 4, -14, -10, 0, -18, 21, 2, 2, 17, 3, -26, -22, 8, -14, 17, 20, -5, -9, 1, -16, -21, -4, 0, 16, 1, 9, -19, -28, 10, -7, -11, 12, 5, -18, -17, -3, 0, 7, 5, 17, -18, -37, -24, 0, 7, 21, 10, 6, -10, -9, -5, -11, 14, -24, -1, -5}
}
, {{5, 6, 1, -12, 11, 4, 5, -11, -3, -10, 14, 5, 10, -3, 2, 12, -21, -18, -3, -3, 17, 16, 8, -8, -9, 3, 7, -15, -7, -10, -18, -14, -7, 3, 7, 0, -20, 0, -24, -2, 0, 3, -14, 0, -11, -20, -27, -11, 5, -1, 0, -2, -12, -8, -7, 10, 9, -2, 3, -1, -17, -10, 4, 16, 0, -9, 6, -5, -5, 5, 7, 8, 0, -4, 9, 3, -19, -17, -2, 6}
}
, {{-3, -25, -2, -21, -27, -19, -23, -15, -10, -4, -22, -20, -6, -31, -14, -26, -15, -20, -9, -7, -29, -16, -26, -24, -11, -3, -16, -2, -12, 7, -4, 1, -2, -10, 0, 18, -4, 6, 19, -7, 10, 5, -3, 21, 17, -10, 4, 13, 14, -14, 7, 8, -1, -15, -16, -8, 11, -8, 5, -16, -5, 5, -5, 4, -18, -9, -15, -8, -6, 5, -12, -12, -17, -13, 9, -16, -3, -13, -2, -20}
}
, {{0, -29, -29, -46, -39, -19, -13, -7, -15, -20, -7, 10, 36, 16, 6, 3, 15, -43, -70, -42, -29, -6, 12, 18, 4, -29, -29, -2, -20, 0, 0, 2, 12, -15, 6, 4, 7, 14, 4, 22, -8, -9, 13, 3, 12, 8, 8, 8, -6, -22, -14, -23, -22, 0, 12, 15, 22, 25, 10, 5, 8, -9, 4, 0, -10, -28, -25, -8, -11, 11, -4, 4, -9, -15, -23, 11, -17, -11, -1, 8}
}
, {{-14, -14, 0, -14, -8, 6, 4, -9, 1, -3, -17, 11, -11, 2, -2, -1, 4, 12, 2, 6, -3, 5, -11, 14, 12, -6, -10, 0, -12, 5, 17, 18, 12, -7, -25, 8, 13, 9, 1, 10, -4, -15, 0, 24, 0, 5, -3, 2, 5, 13, 4, 24, 7, 6, 13, 9, -5, 19, 16, -1, -2, 19, 0, 4, 2, 9, 11, 7, 7, 10, -1, 9, 21, 5, -10, 14, 3, -10, 15, 18}
}
, {{-15, -24, -11, 3, -1, -13, 13, 9, -13, -13, -15, 17, 12, 4, 5, 16, 2, -18, -12, -13, -27, -4, 10, -6, -1, -1, 2, 11, -26, -7, 1, 1, -29, -4, 3, 12, 12, 9, -15, 10, 0, 10, 20, 3, 4, 12, 0, -3, -16, 8, 21, 26, 3, 22, 7, -28, -21, 8, 22, 13, 0, 25, 19, -5, -24, 1, 2, 28, 7, 28, 4, 8, -15, 17, 14, 26, 16, 12, 21, 3}
}
, {{-1, 10, -9, -8, 3, 2, -4, 3, -26, -6, -22, 0, -32, -34, -9, -23, -3, -35, -8, -25, -15, -7, -9, -20, 0, -1, 6, -8, 0, 14, 6, 13, -13, 13, 15, 6, 9, 7, 16, 15, 1, 8, 15, 20, 13, -2, 20, 15, 1, -4, -5, 0, -7, -6, -24, -17, -9, 18, -1, -11, 1, 1, 13, -18, -15, -34, -17, -3, -28, -16, -25, -17, 0, -10, -16, -12, -16, -2, 2, 5}
}
, {{19, 8, -10, 23, 15, 7, 22, 11, -1, 3, 6, 14, 10, 14, 15, -20, 6, 11, 2, 15, 3, 11, 10, -18, 8, -23, 10, -16, -2, 7, -11, -7, -7, 20, 17, 21, 6, 4, 0, 3, -3, -8, 17, -12, -16, -22, 0, -25, -19, -17, -23, -10, -21, -19, -4, 1, -19, -16, 0, 10, 7, -4, -14, 11, 0, 0, -13, -4, -19, -14, 11, 1, -4, -16, -34, -13, -28, -29, -7, -9}
}
, {{-14, 10, -9, -10, -10, 11, 16, -4, 19, -4, -9, -10, -3, -8, 1, 12, 3, 9, -21, -10, 8, -11, 12, 20, 13, 6, -1, -8, -9, 7, 1, 20, 11, -8, -30, -20, 2, 0, 18, 14, -15, -14, 6, -20, 5, 6, -24, 0, 16, -2, -12, 3, 0, -18, 18, 24, 23, -4, -16, -16, -18, 11, 19, 8, 15, 6, 6, -14, -11, -11, 15, 17, -6, -5, -22, -15, 10, 13, 6, 3}
}
, {{-22, -8, -22, -22, -16, -3, -13, 9, 2, -3, 2, 5, -9, -19, -5, 4, -5, -13, -10, -9, -5, 3, 2, -11, 7, -8, -16, 8, -8, -21, 5, 5, -13, -15, -12, -10, 4, -11, -2, -10, 18, 3, 0, 13, 16, 12, 5, -3, 7, 8, -16, 19, -9, 11, -9, 13, -1, 16, 10, 7, 19, 15, 6, -19, -10, 12, 9, -8, 12, 7, 4, 20, 3, -2, 10, 15, -2, -19, -19, 9}
}
, {{-39, -32, -35, -29, -42, -40, -16, -24, -30, -41, -31, -18, -41, -17, -16, -30, -12, -26, -13, -5, -2, -6, -10, -7, -5, -7, 12, -9, 12, -10, -14, 6, 14, -11, 4, -5, 7, -2, 4, -15, -9, -18, 6, -16, -17, -7, -18, -9, -17, -25, -1, -26, -2, -21, -22, -5, -22, 0, -32, -2, -8, -4, -19, -1, -10, -15, 2, -19, -21, -25, -18, -8, -14, -26, -24, -21, -10, -30, -18, -47}
}
, {{-16, -1, 7, 4, -1, -24, -9, 6, -16, -22, 8, 9, 3, 19, -11, 4, -29, -11, -21, -11, -1, 13, 5, -6, 5, -32, -4, 0, 11, 7, -2, -14, -15, -16, 2, -11, -5, 9, -6, 17, 27, 9, -18, -11, -7, -14, -9, 25, 16, 24, 8, 8, -39, -31, 9, 29, 21, 15, -6, -18, -20, -10, 6, 23, 8, 4, 1, 0, -6, -12, 1, 25, 25, 28, 15, 6, -18, 19, 20, 22}
}
, {{13, 14, -21, -14, 0, 5, 17, 13, -13, -27, -8, -3, 12, 3, -1, 2, 10, -18, 0, -14, -21, 19, 19, 6, -22, -7, -14, -4, 21, 24, 15, -24, -38, 0, 17, 27, 24, 11, -29, -22, 6, 8, 16, 5, 6, 7, 0, -17, -15, -2, -7, -2, 15, 3, 1, 7, -9, -21, -10, -11, 0, 4, 14, 12, -19, 11, -7, 10, 12, 10, -2, 11, 21, -4, -12, -3, -6, 2, -3, 15}
}
, {{12, 5, -4, 7, 2, -1, 9, 7, 12, 16, 3, 23, 17, 8, 9, 23, 1, 20, 18, -1, 16, 16, -2, 11, 10, -1, 4, 12, 7, 8, -2, 0, 10, -10, 0, -8, -4, 0, -7, -12, 9, -7, -8, 13, 8, -7, 16, 17, -2, 4, 6, 10, 6, 4, 3, 19, 19, 1, 8, 19, 6, 4, 11, 5, 1, 11, -11, 1, 0, 9, 5, -8, 10, 11, -7, 2, -5, 6, 3, 1}
}
, {{-18, -1, 11, 12, -14, -10, -28, -14, 8, 10, -3, 12, 20, 8, -10, -12, -32, -22, -17, 0, 13, -3, 8, 16, 9, -9, 6, 0, 3, 0, -5, -7, -16, -21, -21, -9, -1, 5, 1, 19, 11, -4, -18, -36, -43, 0, -4, 17, 7, 23, 18, -27, -28, -3, 0, 1, 16, -15, -15, -23, -20, -31, -2, 3, 6, 14, 14, 7, 3, -24, -31, -25, -12, -2, 4, 20, 17, 5, 0, -12}
}
, {{15, -18, 3, -17, 13, -4, 7, 3, 8, -24, -8, -2, 7, -2, 14, -20, 0, 7, -2, -17, -13, 3, -13, -1, 16, 19, 14, -6, -5, -11, -1, -23, 19, 23, 2, -2, -5, -18, -13, 18, -2, -1, 13, 16, -5, -9, -20, -6, -4, 3, 13, 22, -2, -25, -8, 4, -9, 8, 7, 6, -24, -25, -5, -6, 3, 24, 24, 0, -21, -11, 10, -5, 7, -9, -20, -6, 10, 26, 12, -12}
}
, {{4, -21, -8, 2, 6, -1, 1, -14, -1, 5, -18, -28, -12, -14, 0, -27, -25, -4, -27, -4, -24, 3, -10, 7, 9, -14, -5, 0, 6, -7, 17, 13, -1, 11, -15, -14, -13, -26, -31, -27, -27, 0, -24, -28, -16, 1, -14, 13, 0, 17, 0, 10, -8, 10, -10, -3, 0, -15, -12, -10, -27, -31, -7, -26, -29, -15, -2, -13, -21, 0, 10, -14, -10, 4, 13, -11, 9, 7, -4, -19}
}
, {{-4, 8, 13, 2, 8, 0, -1, -29, -7, -13, 13, 12, 20, 19, 1, -21, -27, -11, 4, 14, 15, 22, -12, 9, -14, -18, 3, -18, 15, 11, 9, 3, -14, 2, -8, -10, -7, -11, -9, -10, 20, -6, -3, 11, -12, 1, -30, 5, 1, -11, 15, -11, -9, -22, 2, 4, -7, 20, -6, 6, -15, -21, 3, -3, 15, -2, -7, -12, 2, -21, -6, 14, 18, 21, 3, -16, -8, -17, -7, -11}
}
, {{-16, -17, -1, 7, 11, 8, 4, 0, 19, 27, 17, 28, 14, 12, 20, 18, 10, -21, -26, -17, -21, -33, -37, -44, -19, -42, -21, -16, -22, 14, 5, 5, 22, 13, 27, 30, 25, 9, 8, -3, 3, -24, -4, -26, -22, -35, -23, -32, -28, -11, 0, 0, 0, 0, 4, 13, 6, 13, 21, 24, 0, 28, 21, 6, 9, -4, -12, 1, -20, -27, -30, -13, -30, -13, -18, -20, -10, -10, 4, -6}
}
, {{-7, 0, -3, 19, -19, -18, 17, -3, -4, 7, -12, -25, -11, 21, 20, 16, -6, -42, -19, -8, 24, 11, -2, 3, -22, -3, -6, -6, 0, 19, -10, 13, 19, -17, -1, -22, -17, 15, 8, 7, -4, 0, 7, 8, 8, 11, -14, -27, -17, 1, 17, -7, 16, 8, -25, 1, 15, 16, -9, 9, 0, -18, -4, -8, 11, 17, -7, 1, 0, -4, 12, 27, 15, 2, -6, -11, -10, 12, 5, 8}
}
, {{-6, -19, -7, -10, 5, 6, 7, -20, -22, -22, -2, -1, -11, 0, 20, -2, -21, -8, -14, 15, -2, -7, 12, -17, -18, -8, -20, 2, 2, 0, 3, 13, -6, 4, 0, 0, -18, 0, -18, -3, 13, 3, 25, 0, 20, 5, -3, 18, -10, -16, -10, -4, 16, 10, 23, 27, 19, -20, 16, 24, 4, 0, -7, -10, -8, 17, 9, 20, 19, 35, 13, -12, -7, -8, 1, 17, -3, 12, -4, 17}
}
, {{-5, -6, 0, 9, 6, -12, 3, 2, -2, 15, -12, -11, -9, 4, -15, -20, -7, 3, 7, 14, 0, 19, 18, 23, 13, 4, -1, -8, -25, -15, -25, -21, -10, -3, -1, -2, 0, -1, -1, -3, 19, 5, 13, -4, 2, 7, -13, -21, -2, -1, -29, -32, -5, -18, -14, 1, 3, -4, 9, 0, -6, 18, 7, 21, 5, 3, -7, -10, -10, -5, -10, -8, -8, -24, -17, -27, -29, -26, -31, -21}
}
, {{-6, -14, 2, 15, 20, 7, 10, 18, 11, 7, -8, -2, -19, -3, 4, 15, -7, -10, 12, -2, 10, 1, -10, -3, -14, -19, 0, 0, 3, 8, 5, -5, -18, -20, -20, -21, -30, -40, -27, -9, -16, 2, -10, 16, -7, 6, -11, -13, -40, -46, -11, -22, -12, 2, 10, -14, 5, 16, 0, 6, -23, -49, -47, -67, -60, -38, -19, -8, -7, 7, -6, -9, -15, -26, -12, -17, -50, -39, -8, 0}
}
, {{-4, -8, 13, -5, -13, -5, -5, -29, -22, -17, -30, -10, -10, -19, -13, -8, -4, 11, 10, -6, -13, -15, -24, -35, -28, 10, 13, -7, 9, 11, -2, -25, 3, 9, 13, 0, 13, -2, 4, 8, -26, -30, -13, 12, 17, 31, 32, 33, 18, -12, -24, -11, 7, 2, -14, 12, 16, 7, 0, 12, 10, 16, -22, -23, -7, 19, 2, -6, -4, 9, 21, -6, 6, 14, -7, -21, -8, 4, 17, 19}
}
, {{-6, 12, 8, -1, 6, -17, -6, -5, 9, 0, -1, -3, 11, 9, 0, -15, 7, -6, -16, -10, 14, -13, 0, -7, 7, 4, 0, 19, 13, -17, -16, -9, 0, 12, 19, 7, -19, -31, -20, -10, 22, 2, 31, -13, -10, 6, -18, -20, 16, 0, 5, -18, 9, 3, 2, 10, 3, -12, -33, 0, 12, 15, 0, -5, -24, -28, 6, 16, 25, 11, -15, 12, 0, 5, -1, -14, -19, 1, 3, 21}
}
, {{-12, -8, -6, -1, 17, -4, -3, 5, -1, 4, -8, 6, 7, 12, 10, -17, -16, 8, 9, -1, 17, 11, 2, -36, -7, -12, 21, 17, 13, 10, -5, -6, 8, -11, -20, -15, 0, -13, 4, 21, 14, 8, 11, -18, -6, -11, -14, -13, 3, -19, -16, 9, 15, -5, 15, 11, 6, -14, -35, -34, 4, 14, -15, -9, 14, -7, -11, -14, -2, -8, 14, -5, 7, 4, -28, -35, -1, 15, 17, 2}
}
, {{-2, -7, 18, -13, 4, 27, 19, -11, 12, 10, 0, -4, 9, 13, 0, -3, 6, -8, -12, 10, 8, -11, -19, -27, 16, 18, 9, 24, -3, -23, 8, 4, 0, -14, 10, 10, -9, 23, 18, -5, -6, 0, -28, -16, -24, -3, 0, 23, -3, -17, 4, -18, -4, 16, -2, -19, -10, 8, -18, -12, -43, -34, 8, 7, 2, 11, -19, -1, -15, 0, 8, -19, 2, -19, -28, -7, 1, 13, 12, -21}
}
, {{1, -7, -27, -16, 5, 23, 11, -3, 6, -29, -25, 2, 21, -12, -1, 6, -14, -2, -1, -4, 13, -3, 15, -20, -6, 2, -14, 16, 12, 10, -14, -5, -16, -2, 23, 18, -20, -1, -10, 2, 30, 12, 3, -20, -21, -12, 13, 11, 0, -4, -3, 5, 7, -19, -7, 11, -12, 4, 20, 6, -15, -4, -12, -12, 9, 16, 9, 4, -2, -24, -16, 25, 17, 17, 0, -18, -17, 5, 18, 17}
}
, {{13, 11, -13, 2, 12, -6, 11, 0, -2, 11, 9, 12, -9, -5, 10, 18, 19, 3, -6, 14, -5, 1, 2, -1, -19, -9, 8, 10, -16, 2, -2, -10, 8, 19, 4, -15, -16, 6, 8, 8, -10, 0, -4, 0, -20, -4, 3, -17, 3, -12, -21, -21, 0, -7, 0, 8, 12, -5, -22, 2, -4, -8, -4, -3, -21, -19, -7, -1, -18, 8, 6, -23, -19, -22, 10, 13, -18, 8, 3, 0}
}
, {{7, 12, 4, 11, 16, 7, 10, 20, -8, 2, 9, 21, 16, 5, 5, 20, -9, 12, 20, 11, 21, 14, 2, -8, 2, 10, 1, 12, 6, -4, -1, 5, 3, -3, 14, -6, -2, 3, -21, -13, -5, -8, 12, 3, 1, 10, -11, 9, -9, 10, -16, -8, 0, 10, -3, -5, 11, 13, 11, 8, 5, 5, -2, -3, 9, 11, 3, 5, -14, -6, -1, -10, -10, 10, 4, -9, 16, 0, 0, 10}
}
, {{-6, 15, -5, 13, 3, 2, 2, 6, -5, 12, 5, 6, 1, 26, 4, 20, 14, 19, -1, 7, 20, -5, -1, 5, -10, -17, 9, -6, -9, 6, -15, -8, -11, 8, -3, -7, 1, 5, 0, -16, 2, 11, -6, -1, 9, 1, 2, 0, 6, 1, 0, 9, 9, 2, 10, 17, 22, 17, 16, 13, 4, 13, 3, -1, 12, 4, 5, 10, -5, 2, 0, -8, 2, -12, -17, -4, -18, -16, -12, -12}
}
, {{14, -10, -6, -7, 9, 12, -3, 3, 7, -5, 9, -11, 0, 6, 3, -8, -17, 11, 11, -18, 6, -2, -3, 11, 24, 6, -18, -29, -19, 4, 9, 21, -1, 1, -21, -16, 11, 8, 12, 21, 18, -16, -9, -18, -22, -13, 11, 8, 6, 2, 18, -15, 8, -15, -7, -22, 8, -8, 6, 17, -11, -18, -23, 12, 0, 21, 22, -21, -39, -10, -8, 25, 21, 18, -19, -24, 0, 0, 5, -2}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  64
#define INPUT_SAMPLES   5252
#define POOL_SIZE       4
#define POOL_STRIDE     3
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_5_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_5(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      64
#define INPUT_SAMPLES       1750
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_4_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_4(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    64
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_4_bias[CONV_FILTERS] = {3, 3, 13, 27, 3, 41, -7, -6, -5, -24, -1, 8, 7, -30, 0, -16, 17, -1, -1, -58, -2, 10, 16, -6, -22, -11, -28, -2, -4, 6, 10, 29}
;

const int16_t conv1d_4_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{57, -34, -38}
, {-13, -64, 29}
, {12, 67, 33}
, {-13, -25, -61}
, {-78, -43, -60}
, {-54, -77, 56}
, {-5, 0, -69}
, {30, 31, -73}
, {78, -6, -54}
, {51, 28, -62}
, {-6, -39, 33}
, {86, 17, 48}
, {10, 13, -18}
, {-3, 27, 15}
, {0, 56, -16}
, {12, 69, -16}
, {13, 5, -16}
, {71, -44, -44}
, {-58, -60, 81}
, {-4, -25, 69}
, {-77, -18, 50}
, {42, -34, 63}
, {21, -43, -70}
, {-12, 27, 34}
, {-64, -71, 24}
, {-6, 56, -22}
, {-9, -21, 26}
, {20, 68, 65}
, {37, -65, 51}
, {72, -19, -37}
, {-17, -45, 49}
, {-26, -65, -88}
, {28, 93, 87}
, {-49, -26, -6}
, {-72, -61, -37}
, {40, 18, 43}
, {18, 4, -55}
, {15, 14, -20}
, {-45, -41, -54}
, {-28, 65, -34}
, {-52, -18, 59}
, {108, 42, -46}
, {-70, -46, -71}
, {-5, 2, 4}
, {-33, 47, 8}
, {-6, -1, -54}
, {-65, -53, 45}
, {-37, 69, 84}
, {8, 34, 35}
, {1, 15, -30}
, {68, 89, 7}
, {19, 74, 60}
, {72, -19, 89}
, {67, 0, 17}
, {52, 63, -14}
, {-52, 35, 46}
, {3, 79, 3}
, {102, 81, 62}
, {-64, 78, 84}
, {-10, 26, -33}
, {44, 71, -16}
, {-6, -76, 16}
, {45, 20, 30}
, {-22, 98, 95}
}
, {{-56, -2, -35}
, {-55, 75, -1}
, {-30, 35, 1}
, {-6, -100, -109}
, {-37, 71, -17}
, {-113, -39, -4}
, {6, -49, 5}
, {36, 29, -85}
, {-56, 60, 66}
, {-48, 26, -65}
, {6, 55, 57}
, {4, 83, -44}
, {0, 35, 33}
, {48, -17, -73}
, {59, 60, 62}
, {13, -50, 49}
, {-71, 9, 0}
, {-48, -13, -88}
, {72, 14, 2}
, {-72, 13, 28}
, {-71, -18, 16}
, {-17, -68, -49}
, {32, 47, 70}
, {-20, -14, -23}
, {-18, -30, -88}
, {-42, 38, 53}
, {64, -31, -43}
, {45, -26, 39}
, {-34, -13, 2}
, {-45, -40, 72}
, {-57, -39, 24}
, {54, 47, -77}
, {1, 3, 83}
, {64, 48, 40}
, {18, -76, -4}
, {52, -12, -70}
, {-11, -16, -56}
, {34, -65, -23}
, {-51, -45, 54}
, {-4, -20, -20}
, {-14, -6, 52}
, {-71, -11, -9}
, {-22, -76, -17}
, {65, -36, 4}
, {49, 60, 1}
, {-3, 29, 43}
, {-9, 9, 56}
, {-8, 73, -67}
, {0, -49, 59}
, {6, -62, 27}
, {-85, -16, 53}
, {58, 57, -36}
, {-28, 42, 7}
, {15, 69, -14}
, {56, 0, 79}
, {-36, -75, -24}
, {68, 9, -44}
, {82, 39, -46}
, {37, 55, 11}
, {-45, 15, -19}
, {32, 51, 61}
, {-16, -23, 17}
, {-71, -6, -47}
, {2, -26, -22}
}
, {{-73, -58, -13}
, {-65, -31, 24}
, {-73, 47, 61}
, {0, 14, 41}
, {11, -54, -6}
, {-71, -48, -23}
, {9, 64, -18}
, {-11, -47, -94}
, {39, -56, -31}
, {-65, -8, -34}
, {34, -78, 35}
, {-64, -91, -6}
, {44, -39, 51}
, {-58, -62, -30}
, {-14, 75, 58}
, {-39, -14, 26}
, {65, -15, 43}
, {-7, -45, 58}
, {-90, -3, -90}
, {3, -59, 63}
, {0, 33, 49}
, {-6, -35, 19}
, {-19, 40, 23}
, {-48, -61, 21}
, {-23, -75, 21}
, {9, -24, 2}
, {-32, -3, 5}
, {-67, 0, -10}
, {-86, -55, -68}
, {-59, -38, -10}
, {-39, -58, -46}
, {-57, -78, -19}
, {20, 62, -7}
, {83, 38, -1}
, {20, -19, 61}
, {3, -57, -24}
, {-58, -21, -85}
, {-81, 42, -31}
, {-19, -114, -93}
, {46, 31, -51}
, {-46, 58, 76}
, {38, -45, 48}
, {-38, 6, -25}
, {29, -46, 30}
, {-93, -81, -28}
, {51, 43, 41}
, {-83, 0, -38}
, {-30, -80, -10}
, {-53, -54, 42}
, {49, 13, 53}
, {91, 78, 72}
, {21, -74, 3}
, {-55, -31, 49}
, {-87, 29, -75}
, {-61, -100, 28}
, {-60, 2, -45}
, {-82, 0, -57}
, {-66, -47, 13}
, {-53, 1, -37}
, {-37, 54, -27}
, {-25, -56, -83}
, {48, -65, -72}
, {-34, 67, 68}
, {-71, -48, -44}
}
, {{-43, -72, 42}
, {61, 25, 58}
, {-9, -50, -44}
, {-32, -83, -60}
, {1, -47, -36}
, {-69, -37, -57}
, {0, -30, -49}
, {24, 2, -4}
, {-31, 46, 67}
, {39, -53, -24}
, {35, -9, 16}
, {47, 30, -47}
, {77, -39, 18}
, {-30, -71, -8}
, {45, 15, 55}
, {-22, -22, -50}
, {-78, -4, -62}
, {41, -53, -53}
, {82, 12, 22}
, {6, -50, -8}
, {13, 56, 6}
, {-8, -51, -80}
, {0, 8, 36}
, {36, 56, 16}
, {59, 24, -48}
, {-57, -84, -37}
, {-4, 54, -55}
, {-57, 2, -31}
, {70, 79, 48}
, {48, 23, 82}
, {-44, -71, 40}
, {21, 22, -46}
, {40, 11, -24}
, {48, 23, 70}
, {47, 39, 26}
, {16, 16, -16}
, {17, -30, -50}
, {15, -19, -77}
, {61, 34, 66}
, {-45, 35, 11}
, {40, -5, -40}
, {37, 51, 28}
, {50, 37, -43}
, {46, 11, 40}
, {-14, 34, -43}
, {46, 42, -66}
, {-63, 6, -24}
, {46, -17, -25}
, {-26, -14, -66}
, {16, -42, -23}
, {-30, -63, -56}
, {7, 6, 41}
, {-23, -23, 40}
, {55, -63, -2}
, {-48, -30, 75}
, {-31, -47, -7}
, {-3, -7, -37}
, {-43, 17, 43}
, {-26, 75, 68}
, {-14, -35, 62}
, {-39, -54, -66}
, {8, -32, -36}
, {6, 44, -53}
, {0, -11, 68}
}
, {{-7, -9, 5}
, {21, -25, -24}
, {-28, -79, 30}
, {-44, 62, 38}
, {-55, -18, -69}
, {-47, -16, 31}
, {-37, 15, -5}
, {-38, 19, -77}
, {-69, -62, 52}
, {20, 53, 26}
, {-44, 14, -41}
, {17, -23, -7}
, {-97, -82, 6}
, {-34, 16, 22}
, {-80, -6, -26}
, {-26, 50, 25}
, {6, -60, -46}
, {-15, 56, 20}
, {11, 68, -22}
, {-30, 6, -42}
, {28, -53, -24}
, {86, -35, -62}
, {-21, 45, 48}
, {36, 58, 20}
, {22, 11, -19}
, {-60, 60, -34}
, {25, 67, 37}
, {-47, 5, -61}
, {62, 0, -28}
, {-87, -69, 35}
, {-30, 30, 53}
, {-52, 17, 27}
, {52, 33, -33}
, {-63, 0, -13}
, {-8, 6, 3}
, {44, -66, 45}
, {-49, 64, -46}
, {-35, 39, -45}
, {-29, 14, 21}
, {32, 62, 38}
, {-80, 13, -16}
, {-35, -25, -35}
, {-21, 15, 56}
, {0, 55, -14}
, {-13, 24, 47}
, {13, 48, -44}
, {-17, 43, 21}
, {-57, -63, -43}
, {23, 60, -5}
, {23, -50, 42}
, {75, 85, -18}
, {-9, -95, -49}
, {-2, -73, 19}
, {0, -43, 38}
, {21, 44, 63}
, {-4, -7, 16}
, {-50, -51, -32}
, {-60, 20, -96}
, {32, -77, 12}
, {-5, -70, -22}
, {-32, 59, -72}
, {11, -42, -7}
, {33, -29, -74}
, {-70, 42, 21}
}
, {{2, -67, -90}
, {0, 73, 79}
, {63, -24, 53}
, {-41, 41, 33}
, {-18, -47, 52}
, {-90, -91, -112}
, {22, -17, -26}
, {-55, -14, 48}
, {38, -86, -26}
, {-16, -104, 31}
, {-81, 45, -47}
, {-52, 47, -78}
, {39, 40, -34}
, {-108, 10, -6}
, {-17, 60, 17}
, {28, 9, 65}
, {-45, -48, -69}
, {-83, -101, -79}
, {32, -29, 17}
, {-55, 59, 23}
, {-106, -48, -104}
, {-58, 19, -61}
, {-43, -24, -19}
, {-22, 31, 83}
, {28, -29, -56}
, {-71, 2, -10}
, {60, 41, -28}
, {-2, -24, -15}
, {-18, -7, 17}
, {-38, -3, -45}
, {0, -52, -11}
, {-80, -18, -41}
, {0, -58, 26}
, {-17, 43, -3}
, {50, -1, 69}
, {62, 79, -20}
, {-73, -83, -33}
, {-65, -62, -9}
, {-3, 2, -45}
, {12, -56, -32}
, {71, 39, -3}
, {11, 32, 22}
, {49, -39, -13}
, {-24, -51, 62}
, {0, -34, -11}
, {-36, -21, -65}
, {-7, -26, 54}
, {15, -22, 16}
, {-13, -6, 1}
, {-42, 7, -14}
, {-28, -1, -76}
, {18, 31, -21}
, {-19, 58, -27}
, {20, 10, -41}
, {19, 68, 52}
, {-49, 31, 1}
, {37, 50, 19}
, {-13, -40, 45}
, {15, 37, -87}
, {18, 74, 70}
, {-74, -88, -49}
, {-38, -80, -85}
, {-32, 44, 40}
, {13, 64, 9}
}
, {{-58, -54, -31}
, {37, -6, -53}
, {-40, 28, -40}
, {-58, -84, -35}
, {-19, -6, 60}
, {56, -69, -40}
, {-28, 0, -40}
, {17, 25, 19}
, {9, 17, -13}
, {28, -60, 15}
, {-48, 20, 62}
, {43, -49, -19}
, {-22, 3, -65}
, {4, -19, 47}
, {-22, -93, -71}
, {-35, -40, 45}
, {-63, -92, 19}
, {19, -46, 66}
, {-20, -66, 0}
, {20, -19, 44}
, {-59, -82, -85}
, {55, -10, 23}
, {48, 25, -46}
, {-20, 53, 81}
, {45, -33, 4}
, {-35, -90, -44}
, {48, -42, -65}
, {-76, 56, -11}
, {6, 10, 18}
, {-20, -25, 11}
, {-18, 0, -15}
, {-26, -18, 16}
, {55, -23, -21}
, {-59, -24, -68}
, {-59, 22, 54}
, {31, 33, 7}
, {-45, -74, -10}
, {-58, 42, -39}
, {-51, 19, 0}
, {-66, 25, -75}
, {-15, 47, -38}
, {19, 47, 17}
, {36, 1, -46}
, {21, 65, -29}
, {3, 0, -46}
, {-93, 8, 23}
, {-10, 33, 13}
, {11, -43, -43}
, {-20, -12, -76}
, {-22, -78, -68}
, {23, -29, -26}
, {7, 33, 29}
, {71, -27, 27}
, {-52, -12, 40}
, {-52, 11, -8}
, {58, -52, 35}
, {-70, -58, 2}
, {-48, -68, -13}
, {-53, -17, 29}
, {42, 60, 61}
, {18, -34, 9}
, {-16, 56, 30}
, {1, 4, -57}
, {24, -34, -80}
}
, {{-1, 61, 16}
, {70, -60, 34}
, {-37, 38, -60}
, {-13, -56, -43}
, {-57, 37, -73}
, {-46, -49, 46}
, {25, -69, -64}
, {7, -24, -45}
, {23, -24, 12}
, {34, -60, 3}
, {0, -4, -22}
, {-60, -62, 37}
, {54, -74, -29}
, {57, 68, -62}
, {17, 51, 5}
, {-47, -78, -45}
, {7, -44, 37}
, {36, 20, -31}
, {22, -19, -43}
, {30, 55, -72}
, {-34, -27, 9}
, {22, 37, -19}
, {57, -75, 8}
, {-56, -8, 24}
, {20, -54, 21}
, {6, -53, -21}
, {47, 13, -39}
, {-2, -63, 30}
, {-48, 25, -44}
, {45, 5, -9}
, {58, -29, 1}
, {-8, -55, -49}
, {10, 48, -47}
, {-63, -47, -67}
, {-21, -45, -18}
, {-15, -10, 3}
, {-49, -9, -16}
, {-37, -31, -69}
, {11, -3, -23}
, {-25, 50, -50}
, {-62, 57, -24}
, {4, 20, -18}
, {14, 11, -57}
, {44, 5, -34}
, {-34, 7, -38}
, {-79, 57, 8}
, {-10, 15, -53}
, {17, -7, -48}
, {24, -51, -30}
, {-2, -15, -10}
, {-56, 55, 36}
, {-2, -11, -5}
, {-35, -69, 56}
, {-44, 12, 60}
, {-57, 4, 22}
, {-31, -25, 50}
, {-62, -24, -10}
, {-52, -60, -30}
, {0, 14, 12}
, {-10, -49, 33}
, {57, 43, 47}
, {-15, 29, 38}
, {-53, -12, 1}
, {64, 17, 0}
}
, {{-32, -17, 10}
, {12, 76, -43}
, {64, -68, 10}
, {-38, 49, -55}
, {-28, 78, -26}
, {-55, 60, -37}
, {8, -60, -43}
, {63, -32, -26}
, {86, -51, -2}
, {-69, 44, 18}
, {71, 35, 90}
, {-49, 77, -43}
, {86, 20, 46}
, {53, 35, 32}
, {-41, -2, 69}
, {-24, -3, 30}
, {-17, 51, 22}
, {32, 72, 5}
, {-30, -41, 39}
, {42, -28, 11}
, {62, -49, -47}
, {-12, -50, 37}
, {-65, -88, -46}
, {48, -10, -62}
, {58, -24, -21}
, {-8, 41, -42}
, {62, 20, -45}
, {-58, 60, 82}
, {-32, -24, -34}
, {23, -43, 80}
, {0, 9, 38}
, {34, 65, 10}
, {-30, -4, 65}
, {-24, -2, 69}
, {-80, -69, 36}
, {-52, 71, 47}
, {37, 0, -31}
, {-49, 45, 6}
, {-47, 54, -10}
, {45, -63, -54}
, {36, -31, 63}
, {-48, 57, 15}
, {-83, -94, 48}
, {66, 13, 99}
, {69, -49, 78}
, {-41, -3, -20}
, {-63, 60, 78}
, {6, 16, 97}
, {-68, 24, -46}
, {43, -9, -29}
, {-70, -31, -25}
, {71, -44, 63}
, {38, -19, -13}
, {66, 69, 8}
, {-27, 83, 82}
, {-2, 14, 42}
, {79, 64, 70}
, {32, -83, -8}
, {-50, -49, 55}
, {111, 23, 56}
, {35, 14, 16}
, {27, -76, 34}
, {-34, -67, 38}
, {5, 5, 12}
}
, {{-11, -68, -19}
, {-52, -70, -70}
, {-42, 40, 50}
, {-70, -38, 18}
, {-2, 43, 0}
, {2, 52, -15}
, {25, 5, 14}
, {7, 15, 33}
, {12, 53, 27}
, {56, 72, 61}
, {44, -38, 43}
, {-63, 12, -7}
, {-48, 56, -65}
, {18, 15, 32}
, {13, 57, 61}
, {-22, -2, -43}
, {35, -24, 18}
, {-22, -53, -9}
, {-79, -72, -25}
, {0, -59, -35}
, {68, 18, 0}
, {-39, -60, -39}
, {-45, 62, 24}
, {-42, 25, -23}
, {-51, -42, 45}
, {20, -16, 43}
, {2, 19, -38}
, {-60, -13, 0}
, {-18, -4, -25}
, {-56, -70, 23}
, {29, 64, -56}
, {0, -13, -51}
, {-16, 5, -48}
, {-22, -12, -12}
, {-72, 24, -37}
, {2, 39, -57}
, {-78, -41, -35}
, {-53, 14, 60}
, {-14, -2, 58}
, {-8, 6, 3}
, {-46, -15, -69}
, {-60, 43, 2}
, {19, 50, -33}
, {-13, -67, -67}
, {53, -11, 21}
, {10, -42, -69}
, {-74, 54, -59}
, {-10, -33, -45}
, {-36, -61, 54}
, {21, -73, 51}
, {74, 60, -14}
, {-71, -60, 21}
, {-9, -53, -14}
, {51, 22, -27}
, {54, -34, 52}
, {50, -11, -35}
, {35, -28, 61}
, {7, -28, -87}
, {7, 14, -35}
, {0, -69, -81}
, {30, -19, 0}
, {12, 12, -66}
, {35, -36, -27}
, {-50, -18, 34}
}
, {{48, 43, 19}
, {36, -61, -1}
, {85, 54, 46}
, {-40, 39, 12}
, {29, -9, 3}
, {-1, -22, 11}
, {39, -24, 28}
, {66, 83, -63}
, {2, 50, -20}
, {-53, -8, 37}
, {92, -32, 66}
, {49, 43, 91}
, {68, 35, 18}
, {0, -49, -64}
, {17, 41, 59}
, {34, 80, -13}
, {50, 25, -76}
, {23, 15, -17}
, {10, 53, -74}
, {18, -64, -63}
, {70, 14, 50}
, {-83, -85, -70}
, {-55, 24, -1}
, {80, 98, -12}
, {-88, -41, -25}
, {18, -26, 14}
, {-56, 70, -9}
, {49, -22, 84}
, {-21, -35, -35}
, {0, 63, 58}
, {28, 13, 49}
, {-6, 3, 22}
, {84, 47, 72}
, {-60, 53, -32}
, {-58, 3, -47}
, {-26, 30, 15}
, {14, 13, 38}
, {64, 13, -50}
, {-49, -49, -10}
, {62, 79, -31}
, {-45, 19, 51}
, {-54, -30, -36}
, {-62, -93, -82}
, {-44, 75, 93}
, {91, 68, -43}
, {-45, -29, 30}
, {-58, 29, 89}
, {16, 94, 61}
, {-39, -35, -23}
, {-59, 80, 48}
, {-85, -82, -58}
, {-8, 80, 54}
, {55, -48, -29}
, {-28, 0, -43}
, {67, 90, -46}
, {-29, -11, -29}
, {41, -3, -1}
, {-54, -8, 91}
, {14, -14, 66}
, {-27, 104, -19}
, {29, -57, 55}
, {-59, 33, -10}
, {-5, -48, -32}
, {30, 99, 16}
}
, {{-41, 42, -28}
, {-62, 10, 28}
, {-6, 19, -22}
, {-1, -6, 30}
, {-26, 26, 18}
, {26, 36, 7}
, {33, -20, 16}
, {0, 36, -35}
, {-73, 54, -19}
, {65, -2, -16}
, {68, 25, 30}
, {72, 46, -66}
, {23, -9, 30}
, {-28, -47, -14}
, {-14, 52, -8}
, {74, 27, 0}
, {-52, 31, 46}
, {37, -20, -5}
, {-64, -72, -37}
, {-25, 41, -11}
, {-67, -2, 0}
, {5, -27, -18}
, {-63, 9, -77}
, {-50, -80, -85}
, {0, -50, -52}
, {17, 40, 52}
, {-7, 22, -44}
, {32, 29, -15}
, {48, 57, 20}
, {-42, 22, -1}
, {-11, -52, -45}
, {-73, -13, -73}
, {-41, 5, 59}
, {-45, -39, -42}
, {61, 29, 16}
, {6, 49, 42}
, {-63, -67, -16}
, {-9, 71, 0}
, {-58, -52, 68}
, {27, -40, -28}
, {55, -35, -15}
, {42, 10, -50}
, {36, 2, -13}
, {-30, -61, -56}
, {-69, 43, -32}
, {52, -48, 63}
, {-24, -45, 67}
, {13, 10, -58}
, {-9, 50, -12}
, {-14, 58, 51}
, {94, 61, 52}
, {-64, -102, 2}
, {-14, -36, 8}
, {56, -50, -44}
, {14, -46, 38}
, {-14, -61, 17}
, {61, 43, -30}
, {8, 38, -12}
, {59, 15, -64}
, {-71, 14, -72}
, {43, 53, -3}
, {77, 49, 67}
, {18, 73, -44}
, {46, -44, 40}
}
, {{-23, 15, 11}
, {48, -49, -25}
, {-7, 58, 35}
, {27, -54, 21}
, {-26, -17, 43}
, {30, -31, 8}
, {-36, -3, -21}
, {54, 19, -47}
, {-74, -72, 38}
, {55, -27, 21}
, {21, 0, -6}
, {-8, 47, -22}
, {-5, 66, 20}
, {-5, -3, -16}
, {-11, -10, 45}
, {10, 32, -66}
, {-45, -17, 13}
, {-34, -57, 11}
, {-58, -60, -56}
, {18, 27, -19}
, {-52, -74, 44}
, {0, 16, -7}
, {-13, 38, 17}
, {-10, -71, -86}
, {53, -31, -25}
, {-23, 51, -26}
, {8, 28, -26}
, {23, -38, 72}
, {-7, -4, 5}
, {3, 10, -64}
, {-63, 40, -74}
, {18, 22, -70}
, {-71, -71, -2}
, {65, -8, 48}
, {48, 39, 45}
, {28, -14, 35}
, {-67, 27, 32}
, {-61, -44, -33}
, {-80, -10, -40}
, {-26, -74, 39}
, {19, -66, -2}
, {-38, 48, -72}
, {-56, -2, 63}
, {-23, -72, -78}
, {-62, -39, -38}
, {31, 43, 36}
, {-73, 47, 30}
, {23, -41, 54}
, {-70, 69, 56}
, {-15, -53, 32}
, {-50, 56, 25}
, {49, -63, 60}
, {35, 37, 49}
, {29, 14, -53}
, {-28, -27, 16}
, {-74, -56, -82}
, {-19, -8, -24}
, {-53, -49, 66}
, {-51, -36, 79}
, {-32, -79, 58}
, {24, 24, -48}
, {74, -29, -33}
, {28, 72, 17}
, {-28, -46, -42}
}
, {{-32, -28, 61}
, {70, -76, 48}
, {82, 13, -47}
, {-11, -29, 17}
, {-11, 3, 5}
, {0, -46, 47}
, {-21, -43, -24}
, {51, -72, 41}
, {-64, -6, -7}
, {-72, 47, -62}
, {51, 52, -12}
, {23, 33, -33}
, {-31, -2, 34}
, {-60, 11, 2}
, {60, 54, -15}
, {-22, -41, -35}
, {0, -23, 43}
, {-58, 2, 9}
, {27, -3, 9}
, {13, -31, 69}
, {16, -26, 29}
, {-88, -55, -49}
, {63, -28, 38}
, {-36, -59, -23}
, {27, -5, -29}
, {69, -49, 41}
, {12, -25, 33}
, {27, -33, 67}
, {-76, 36, -82}
, {76, -54, 45}
, {61, -73, -21}
, {61, 26, 48}
, {-36, -50, -39}
, {-6, 39, 50}
, {-68, 0, 21}
, {51, -46, 9}
, {18, 22, 69}
, {-9, -18, -52}
, {30, -68, -42}
, {-4, 4, 1}
, {14, -27, -15}
, {-35, -7, 54}
, {-64, 56, 14}
, {0, -80, 18}
, {-40, 48, 19}
, {-9, 48, 44}
, {49, -50, -46}
, {-3, -47, -9}
, {-89, 23, -9}
, {70, -30, 49}
, {-13, -74, -81}
, {61, 28, 38}
, {44, 60, -55}
, {16, -80, -58}
, {-50, 1, 38}
, {22, -18, 43}
, {68, -11, -12}
, {-15, -5, -32}
, {58, 0, 10}
, {-34, 21, 72}
, {4, -51, 36}
, {-60, -13, 64}
, {-5, -8, 57}
, {-32, 24, -10}
}
, {{-40, -49, 26}
, {2, -11, 75}
, {48, 16, 64}
, {-46, -64, -52}
, {8, -57, 29}
, {8, 8, -11}
, {18, 6, 4}
, {10, -18, 42}
, {12, -32, 19}
, {-23, -24, 86}
, {81, -49, -43}
, {44, 42, 77}
, {24, 44, -56}
, {29, 21, 17}
, {0, -44, -5}
, {-69, -1, -40}
, {31, 42, 52}
, {4, -15, -3}
, {57, -1, 42}
, {12, -52, -19}
, {16, 51, -4}
, {21, -78, -6}
, {21, -72, -22}
, {58, 79, 33}
, {-9, -1, 33}
, {41, 15, 11}
, {-12, -77, -87}
, {77, -61, 40}
, {-47, 1, -25}
, {-47, 43, 29}
, {-43, -17, -5}
, {41, 0, 58}
, {27, 28, 65}
, {54, 32, 10}
, {47, 28, -41}
, {41, -45, 5}
, {0, -63, -25}
, {72, 23, -40}
, {-6, -50, -43}
, {-54, -56, 13}
, {39, -22, 64}
, {5, 52, -53}
, {34, -75, 28}
, {72, 11, -5}
, {71, 66, 0}
, {-35, -69, 29}
, {-68, 8, -27}
, {16, 87, -5}
, {1, 34, 68}
, {56, -39, 26}
, {-19, 9, -25}
, {0, 52, 32}
, {43, 57, -42}
, {-2, -70, -3}
, {40, -68, -33}
, {-30, 12, 28}
, {-40, 9, 37}
, {-4, 25, 26}
, {5, -49, 33}
, {14, 101, 85}
, {5, 61, 11}
, {-54, 76, 62}
, {-16, 33, -9}
, {33, 5, 102}
}
, {{-47, 42, -1}
, {-41, -72, 51}
, {-65, 46, -51}
, {34, 19, 39}
, {-31, -50, 48}
, {33, 15, 8}
, {-48, -24, 12}
, {40, -22, 20}
, {18, 48, 27}
, {-74, 34, 42}
, {20, -52, 47}
, {4, -49, 13}
, {51, -20, -9}
, {-9, -22, -61}
, {-40, 31, -75}
, {73, -9, 1}
, {11, -23, -39}
, {-65, -69, 56}
, {14, -9, 67}
, {-10, 51, -79}
, {-19, -12, 2}
, {86, 77, -52}
, {-15, 54, -74}
, {-1, -73, 47}
, {-46, -14, -17}
, {-19, -21, -5}
, {14, -67, 16}
, {61, 2, 19}
, {-65, -70, 53}
, {31, -7, 48}
, {11, -55, 8}
, {-14, -46, -16}
, {18, -63, 6}
, {-11, -61, 17}
, {41, -62, 69}
, {47, 2, 3}
, {34, -45, -70}
, {-67, -1, -11}
, {65, 58, -12}
, {12, -67, 65}
, {-29, -30, -45}
, {-25, 6, -65}
, {-35, -52, -59}
, {-44, -68, 25}
, {-69, 20, -15}
, {0, -29, 60}
, {-40, 25, -62}
, {24, 37, -71}
, {80, -38, 7}
, {-12, -18, 60}
, {-12, -71, -21}
, {-22, 54, 9}
, {10, 61, 11}
, {-9, -56, -45}
, {-13, 27, 40}
, {36, 40, 40}
, {64, -79, 55}
, {60, 16, 19}
, {-52, 19, 40}
, {49, -68, -75}
, {-42, -23, -10}
, {-3, 0, -70}
, {-61, 32, -37}
, {-24, -67, 60}
}
, {{55, 46, -6}
, {-55, -73, -74}
, {-48, -41, 55}
, {50, 56, 23}
, {1, -7, -71}
, {-15, -48, 37}
, {-51, 44, -9}
, {72, 8, 45}
, {-29, 51, -27}
, {-26, -6, 38}
, {-8, -41, -38}
, {30, -50, -34}
, {79, 81, 6}
, {-30, -37, 47}
, {-59, 41, -49}
, {44, 56, 47}
, {-11, 0, 4}
, {-6, -36, 0}
, {-24, -41, 9}
, {38, -28, 61}
, {-44, -22, -54}
, {-3, 2, -98}
, {-62, -15, -76}
, {-75, -45, -48}
, {-74, -73, -3}
, {34, 33, -2}
, {123, 67, 76}
, {-32, -77, -31}
, {-110, -85, -38}
, {-44, -22, -65}
, {-39, -24, -23}
, {-61, 49, -63}
, {30, 44, -61}
, {-19, -66, -11}
, {-34, 19, -89}
, {-25, 39, 28}
, {-4, -5, 21}
, {-4, 9, 28}
, {27, 0, -25}
, {-12, -15, -40}
, {14, -27, -15}
, {-5, 4, 68}
, {-82, -82, 44}
, {17, -77, -70}
, {60, 40, 14}
, {2, -51, -31}
, {46, -54, -3}
, {-70, 22, -92}
, {57, -45, -54}
, {57, 14, -39}
, {29, 18, 96}
, {2, -1, -54}
, {70, -34, 64}
, {-33, 74, 80}
, {-50, -31, -39}
, {-23, -40, -21}
, {50, -79, -57}
, {-27, 21, -34}
, {4, -67, -4}
, {47, -53, 18}
, {43, 23, 0}
, {-28, 3, 13}
, {22, -15, 49}
, {0, -45, -23}
}
, {{-16, -44, 36}
, {74, 49, -38}
, {31, 84, 46}
, {-60, -1, 15}
, {-9, 22, 3}
, {-20, 69, 6}
, {17, 34, -61}
, {76, -35, 65}
, {-54, -53, -6}
, {-44, 61, 19}
, {-33, 8, 22}
, {20, -10, -31}
, {94, 73, 37}
, {-67, -15, 45}
, {-31, -57, 15}
, {-45, 41, 80}
, {55, 30, -65}
, {-75, -50, 64}
, {-74, 32, 65}
, {0, -64, 30}
, {-59, -12, 30}
, {-7, 69, 29}
, {-7, -68, -26}
, {83, 43, -52}
, {2, -64, -97}
, {-43, 29, 8}
, {-66, -8, 53}
, {11, 2, 65}
, {-65, -81, 62}
, {-41, -15, 81}
, {-58, -24, -6}
, {-64, 32, 35}
, {-35, 62, -37}
, {70, 37, 91}
, {-94, -53, -2}
, {39, -84, 6}
, {42, -75, 34}
, {6, 15, -14}
, {-2, -94, 38}
, {-33, 34, -39}
, {79, -26, 53}
, {-60, 7, -5}
, {-12, 6, -6}
, {-33, -41, 89}
, {45, 23, 61}
, {-73, 50, 10}
, {61, 23, -41}
, {-57, 20, -17}
, {-11, -91, -104}
, {65, -65, -4}
, {10, -72, -35}
, {31, -47, 65}
, {29, -49, -48}
, {-10, 15, 96}
, {82, -6, -69}
, {-9, -36, -50}
, {57, 11, 40}
, {26, -9, -60}
, {-47, 24, 3}
, {8, -4, -43}
, {-65, 25, -64}
, {70, 0, -7}
, {-31, 12, 47}
, {86, 36, 95}
}
, {{-34, 0, -35}
, {-41, -75, 46}
, {-35, -28, -83}
, {-7, 0, 5}
, {10, 19, -12}
, {-66, -16, 32}
, {-47, -69, -44}
, {40, -59, -28}
, {-41, -65, 0}
, {13, -51, -52}
, {-23, -61, 28}
, {-60, -45, 60}
, {62, 66, -22}
, {-82, 24, -25}
, {29, 0, -49}
, {-45, -10, -13}
, {-41, 53, 47}
, {40, -19, -61}
, {20, -5, 20}
, {36, 19, -7}
, {-14, -14, -77}
, {40, 8, 9}
, {-54, -53, -18}
, {-46, -31, -47}
, {46, 7, 26}
, {-43, -69, 0}
, {-56, -17, 27}
, {19, -61, -34}
, {64, 74, 35}
, {-55, 64, -37}
, {-61, 51, -40}
, {-66, -42, -7}
, {-39, -76, -60}
, {30, 30, 0}
, {30, 32, 53}
, {24, 64, 42}
, {-46, 3, 33}
, {15, -52, 12}
, {50, -53, -8}
, {61, -67, 32}
, {-57, 64, -50}
, {10, 46, 49}
, {-10, -13, 27}
, {9, 50, -53}
, {52, -64, 47}
, {-85, -63, 26}
, {-21, -55, 59}
, {23, -12, 23}
, {-6, -53, 31}
, {46, 6, 48}
, {-75, 14, -59}
, {-54, -30, 15}
, {-50, 49, -21}
, {57, 54, 12}
, {-8, 34, -56}
, {68, -1, 68}
, {-38, -87, -37}
, {-69, -79, -25}
, {49, 54, -30}
, {-20, 42, -12}
, {8, -69, -60}
, {6, -58, -12}
, {-82, 22, 28}
, {-72, -88, -36}
}
, {{66, -9, -62}
, {32, -59, -3}
, {-65, 23, -80}
, {-32, 4, 59}
, {-27, 21, -48}
, {-46, -38, 30}
, {2, 35, 12}
, {59, -40, -7}
, {42, -44, -40}
, {-70, 12, -76}
, {35, -22, -19}
, {-39, -57, 22}
, {17, -60, 57}
, {-6, 26, -19}
, {47, -1, 9}
, {-5, 51, 43}
, {-43, -44, -32}
, {21, 65, 37}
, {-68, 11, -67}
, {58, 4, 16}
, {-31, -20, -9}
, {71, 24, -23}
, {11, 9, -18}
, {-33, -57, 59}
, {-19, 3, 79}
, {-7, -60, 63}
, {0, 52, 54}
, {-60, -29, 92}
, {64, -63, 51}
, {-30, 46, 27}
, {47, -27, 3}
, {-9, -8, -28}
, {61, 28, -13}
, {-63, 69, 42}
, {-37, 69, 3}
, {7, 17, 15}
, {-60, -54, 68}
, {62, -73, 65}
, {-54, 16, -16}
, {-24, 57, 53}
, {17, -15, -39}
, {-45, 59, -76}
, {8, 51, 16}
, {-16, -46, 38}
, {29, 13, 11}
, {-56, 62, 0}
, {55, 2, -20}
, {50, 58, -48}
, {53, 38, -6}
, {73, -50, 64}
, {25, -48, 35}
, {-57, -63, -52}
, {-59, -55, -34}
, {-8, -43, 80}
, {-28, -73, 33}
, {-29, 21, -74}
, {19, 66, -59}
, {14, 5, -70}
, {-43, 6, -38}
, {-50, -20, 22}
, {62, -15, -48}
, {-65, 13, 4}
, {40, -49, 72}
, {72, 69, -56}
}
, {{27, -48, -11}
, {61, 12, 20}
, {63, -50, 78}
, {-12, 21, -8}
, {-62, -22, 58}
, {-28, 39, -48}
, {-17, 59, -19}
, {-4, 35, 66}
, {-31, 72, 52}
, {8, -58, -76}
, {25, -37, 13}
, {16, 19, -10}
, {26, -19, -11}
, {-28, 16, -55}
, {69, -77, 87}
, {57, 50, -22}
, {68, -15, -37}
, {-5, 21, -55}
, {-56, 49, -15}
, {47, 33, -17}
, {-80, 2, 15}
, {11, 54, 40}
, {48, -37, -41}
, {-61, -6, 47}
, {-28, 61, 27}
, {19, 17, -42}
, {-6, -11, -31}
, {36, -27, 21}
, {38, -60, -63}
, {88, 57, -12}
, {34, 16, 60}
, {57, -9, -66}
, {-27, -4, 43}
, {23, 51, 15}
, {44, 6, 9}
, {-44, -63, 16}
, {-42, -66, -54}
, {-20, 56, -55}
, {-46, -23, 54}
, {11, -48, 5}
, {4, -19, 13}
, {9, 69, 16}
, {0, -64, -21}
, {54, 23, 105}
, {48, 36, -67}
, {-32, -3, 53}
, {39, -36, 81}
, {44, 35, -43}
, {46, -51, -2}
, {-9, -10, 6}
, {-58, -29, -13}
, {1, 10, 50}
, {35, -8, -38}
, {41, -51, 56}
, {44, 4, -9}
, {8, -71, 55}
, {65, 54, -38}
, {91, 41, -59}
, {-16, -37, -36}
, {71, -53, -51}
, {-75, 42, -32}
, {-56, -71, -29}
, {59, -4, 0}
, {-6, 90, 24}
}
, {{-72, 67, 21}
, {-50, -20, -31}
, {67, 13, 93}
, {-6, 45, 12}
, {-14, 61, -46}
, {-45, -77, 19}
, {7, 2, 3}
, {18, 11, -67}
, {-15, -14, -19}
, {-35, -14, 77}
, {35, 72, -60}
, {9, -25, -15}
, {-37, 65, -35}
, {-34, 59, -14}
, {82, -54, -5}
, {-5, 1, -72}
, {1, 93, -43}
, {-71, 13, 73}
, {-15, -12, 28}
, {55, -33, 24}
, {-55, -54, -71}
, {49, -42, -45}
, {43, -25, -37}
, {44, -57, -43}
, {-29, 56, -31}
, {-14, 69, -4}
, {63, 31, -41}
, {75, 5, 11}
, {35, 3, -4}
, {-43, -4, 32}
, {48, 25, -74}
, {10, 12, -59}
, {66, -31, 81}
, {-65, -60, 59}
, {-28, 51, -15}
, {26, 81, 19}
, {21, 44, -43}
, {-35, 74, -34}
, {48, -23, -35}
, {-64, -9, 49}
, {91, -38, 90}
, {21, -10, -38}
, {-63, -29, 23}
, {54, 10, 32}
, {1, 47, 30}
, {-18, 46, -56}
, {11, 28, 77}
, {8, 60, 24}
, {53, 20, -22}
, {-11, 10, 94}
, {38, 53, -31}
, {-2, 48, 68}
, {16, 19, 63}
, {-62, -20, -18}
, {-63, -43, -58}
, {88, 5, -58}
, {-20, 86, -3}
, {48, -50, 48}
, {63, 51, -43}
, {60, 38, 49}
, {41, 14, -55}
, {-17, 24, -57}
, {-28, -27, -7}
, {-22, -18, 30}
}
, {{-35, -25, -39}
, {70, 22, 76}
, {7, 47, 3}
, {22, 42, 48}
, {-43, -40, 20}
, {-56, 68, -72}
, {-70, -27, 66}
, {-55, -12, -21}
, {-43, -65, 50}
, {-8, 17, 11}
, {-15, 37, 12}
, {25, 15, 49}
, {76, -4, 76}
, {-20, -15, -33}
, {45, 22, 48}
, {-10, 17, -72}
, {-63, -6, 24}
, {-43, 41, -19}
, {39, 71, -42}
, {61, 26, -61}
, {-53, -7, 43}
, {-40, 19, 39}
, {67, 38, 0}
, {-50, -26, -15}
, {-28, -15, -18}
, {-35, 54, -19}
, {-7, -60, 13}
, {-46, 38, 63}
, {-17, -82, 1}
, {33, 74, 40}
, {-49, -17, 38}
, {-75, -39, -16}
, {-8, -9, -14}
, {52, -60, -53}
, {-68, -44, -75}
, {-17, 31, 13}
, {62, -58, 72}
, {-13, -20, 51}
, {52, 20, -58}
, {-28, 58, -55}
, {12, -9, 36}
, {54, 62, -17}
, {34, 12, 62}
, {-46, 2, 0}
, {36, 32, 16}
, {-58, 57, -1}
, {37, 14, -24}
, {63, 34, -51}
, {-86, 44, 55}
, {66, 66, 44}
, {-53, -110, 10}
, {59, 52, -21}
, {5, -62, -34}
, {31, -79, 62}
, {-63, 65, 18}
, {14, -11, 48}
, {2, -8, 16}
, {48, 13, 41}
, {-15, -9, -6}
, {-34, 4, 67}
, {-58, -29, 65}
, {57, 58, -17}
, {71, -25, -56}
, {-26, 99, -16}
}
, {{-5, 17, 47}
, {-51, 28, -69}
, {-68, 54, 88}
, {11, -63, 63}
, {-29, 58, 16}
, {-20, -43, 53}
, {0, -57, 37}
, {-46, 24, -14}
, {67, 25, 32}
, {59, 50, -21}
, {9, 95, 5}
, {70, 2, 49}
, {10, -15, 34}
, {-42, 16, 74}
, {-43, 0, -27}
, {29, 22, 56}
, {-30, 41, -4}
, {0, 0, 60}
, {79, 16, 78}
, {-52, 27, 69}
, {-48, -43, 54}
, {37, 13, -77}
, {-55, -4, 49}
, {71, 43, 35}
, {-37, -46, -77}
, {12, -43, 42}
, {-31, 17, -79}
, {-31, 49, 48}
, {67, 40, 52}
, {78, 103, -63}
, {11, 3, -51}
, {25, -29, -52}
, {-51, 11, 46}
, {-22, -45, -45}
, {41, 14, -42}
, {-51, 42, -28}
, {23, -7, 56}
, {27, 36, 8}
, {38, 65, -40}
, {-25, -29, -33}
, {62, 40, -32}
, {51, 58, 63}
, {-57, -80, 47}
, {-38, 61, 12}
, {46, 47, -14}
, {-72, 1, -29}
, {16, 23, -3}
, {-36, 79, 28}
, {37, -64, 5}
, {-53, -13, -21}
, {-40, -75, 20}
, {8, 14, -21}
, {-35, 59, 54}
, {-12, 25, -28}
, {-13, 8, -7}
, {29, -18, 51}
, {27, 9, 46}
, {-55, -20, 83}
, {20, -10, 29}
, {3, 30, 17}
, {47, 3, -61}
, {-51, 3, 66}
, {30, 73, -69}
, {45, -39, 60}
}
, {{-2, 35, -21}
, {-25, -20, -64}
, {-34, -1, -46}
, {-68, -53, 15}
, {53, 40, -51}
, {-4, 0, -28}
, {-6, -53, 42}
, {-67, 70, 67}
, {91, -25, 87}
, {-28, 68, 21}
, {-28, 31, 45}
, {51, -25, -36}
, {-20, 38, 34}
, {-21, 21, 18}
, {-27, -40, -5}
, {-19, -1, -4}
, {-6, -40, -19}
, {19, 59, -47}
, {63, -22, 61}
, {37, 37, 74}
, {-63, -56, 39}
, {-4, -63, 10}
, {-68, -18, 41}
, {16, -49, -40}
, {-9, 70, 2}
, {-12, -8, -41}
, {39, 7, 67}
, {-54, -57, 41}
, {-20, 32, -38}
, {40, 86, 7}
, {49, 59, -24}
, {-29, 73, 28}
, {-20, -17, 45}
, {26, 16, -22}
, {-50, 76, 13}
, {36, 31, 56}
, {-20, -25, -8}
, {5, -27, 64}
, {-37, 52, 61}
, {-67, 20, 40}
, {-67, 7, -38}
, {6, -34, 58}
, {-37, 39, -32}
, {73, -11, 22}
, {85, 8, 48}
, {47, -61, -25}
, {-84, 24, 61}
, {15, 72, -50}
, {-18, -68, -53}
, {-16, -21, 64}
, {-15, 29, 86}
, {15, 36, 63}
, {57, -18, 47}
, {-45, -32, 63}
, {37, 7, 31}
, {-37, 69, 0}
, {-55, 16, -42}
, {-57, 21, -16}
, {21, 66, 44}
, {-6, 57, -44}
, {4, -41, -38}
, {53, 31, -24}
, {-72, -24, 21}
, {57, -12, 39}
}
, {{23, 30, -55}
, {-7, -46, -64}
, {-42, -66, -37}
, {24, 7, -39}
, {9, 10, -63}
, {-83, 31, -13}
, {-2, 37, 12}
, {-49, 23, 22}
, {-47, 10, 43}
, {12, -16, 21}
, {-68, 40, -52}
, {25, 53, -62}
, {-27, 31, 30}
, {-60, 5, 59}
, {39, 36, -27}
, {-38, -8, 56}
, {-31, -67, 25}
, {-78, 38, -64}
, {49, 33, -56}
, {-45, -80, -39}
, {43, 5, -52}
, {-23, -35, 17}
, {-43, -2, 1}
, {5, -18, 55}
, {-29, -49, 25}
, {-35, 63, -60}
, {39, -40, 15}
, {3, 32, 37}
, {-21, 16, 16}
, {62, 4, -16}
, {-5, 45, -51}
, {-69, -24, -30}
, {3, 0, -77}
, {-73, -11, -67}
, {13, -11, -8}
, {-21, -10, 30}
, {53, -77, 29}
, {32, 0, 30}
, {38, 46, -36}
, {-20, -78, 52}
, {-72, -5, 23}
, {65, 13, 25}
, {-79, 34, 0}
, {-49, 58, -57}
, {57, -35, -54}
, {1, 5, -11}
, {16, 46, 60}
, {-6, 16, 49}
, {-35, -3, 0}
, {52, -8, 52}
, {18, -44, -43}
, {40, -8, -41}
, {-39, 40, 60}
, {62, -13, -61}
, {60, 38, -80}
, {-70, 50, -78}
, {-48, 27, 58}
, {-52, 56, 49}
, {33, -19, -53}
, {48, 32, -21}
, {-19, 40, 4}
, {58, -3, 10}
, {37, -63, 3}
, {29, -48, 0}
}
, {{46, 20, 30}
, {8, -21, 62}
, {7, -5, 25}
, {-57, -28, 17}
, {4, -56, 58}
, {-20, 6, -7}
, {-38, -4, 63}
, {-20, 19, -52}
, {24, -66, -18}
, {-3, 8, -12}
, {-85, -54, -9}
, {-18, 46, -56}
, {-55, 14, -18}
, {-39, 24, 65}
, {-77, 25, -25}
, {64, 42, -27}
, {52, 32, 59}
, {-19, 5, -30}
, {-32, 35, -26}
, {67, 60, -39}
, {30, 31, -1}
, {6, -1, -70}
, {59, -21, 63}
, {39, 18, 7}
, {31, -42, -29}
, {-5, -30, 18}
, {2, -27, 62}
, {-39, -63, -28}
, {2, -14, -32}
, {-39, -57, 17}
, {-3, -19, -57}
, {67, 60, 61}
, {15, 29, 44}
, {42, -16, 27}
, {-9, -25, 24}
, {43, 3, 91}
, {31, 65, 38}
, {26, 29, -13}
, {-65, 30, 49}
, {0, -4, 9}
, {36, -49, 15}
, {-34, 6, 9}
, {-60, 44, 54}
, {-89, -21, -65}
, {-12, -43, -15}
, {31, 7, -39}
, {-15, -40, -74}
, {-37, -61, 27}
, {-61, -21, -57}
, {-11, -8, 37}
, {33, -39, -46}
, {-16, -44, -2}
, {-30, -14, 41}
, {-71, 56, 19}
, {2, -26, -17}
, {7, 41, -10}
, {-48, 49, -9}
, {-71, 19, 51}
, {-21, -13, -17}
, {-5, 17, -32}
, {-75, 44, -31}
, {64, 40, -32}
, {-17, -25, -37}
, {4, 37, 41}
}
, {{39, 49, 62}
, {79, -65, 54}
, {-31, 81, -68}
, {23, 11, -37}
, {32, -24, -8}
, {-72, 47, 66}
, {17, -24, 19}
, {73, 66, -18}
, {35, -66, 0}
, {-36, -23, -44}
, {-42, -61, 17}
, {59, 31, -53}
, {58, -52, 80}
, {-56, -28, -5}
, {50, -37, -34}
, {-18, -55, -12}
, {-75, 39, 27}
, {39, 0, 44}
, {45, -64, -52}
, {-23, 14, -35}
, {-66, -43, 22}
, {-31, 21, -44}
, {33, 44, -34}
, {36, -9, 74}
, {63, -18, 24}
, {-17, -50, 44}
, {-9, -77, -3}
, {-19, 70, -55}
, {-21, -43, -16}
, {-52, -52, 71}
, {-38, -42, -37}
, {-73, -25, -48}
, {71, 38, 45}
, {-48, -61, -36}
, {28, -14, 25}
, {30, -54, 80}
, {39, 35, 52}
, {33, -53, -29}
, {-21, 59, -43}
, {-43, -58, -43}
, {-66, -1, 85}
, {-43, -39, -36}
, {-76, 20, 16}
, {64, -1, 4}
, {76, 71, 19}
, {51, -60, -4}
, {69, -9, -68}
, {66, -3, 17}
, {-22, 21, 65}
, {58, 55, -5}
, {11, -8, 9}
, {-5, -55, 2}
, {11, -6, 78}
, {-70, -60, 38}
, {-66, 3, -56}
, {64, 78, -23}
, {-27, -32, 28}
, {-40, 33, 45}
, {33, -49, -72}
, {56, -22, 17}
, {-51, -43, 69}
, {53, -32, -36}
, {-34, 49, -29}
, {-21, -17, 57}
}
, {{-74, -1, -61}
, {50, -1, -54}
, {39, -23, 24}
, {-32, 23, 33}
, {-2, 37, -50}
, {-43, 0, -55}
, {-17, -47, 15}
, {-10, 12, 59}
, {75, 53, 17}
, {-9, -65, -62}
, {-15, 10, -8}
, {-6, 66, 26}
, {-8, 20, 24}
, {-30, -42, 43}
, {-3, -74, 50}
, {-62, 44, 29}
, {53, -66, 4}
, {-63, 51, -30}
, {68, -40, 50}
, {-35, -35, -42}
, {53, -80, 46}
, {10, 40, 32}
, {41, -85, 30}
, {-18, 15, -51}
, {45, -28, 39}
, {-60, -1, 42}
, {-40, -5, -36}
, {-62, -36, -61}
, {-34, 0, 4}
, {-59, 36, -42}
, {26, 2, -18}
, {-78, 2, 51}
, {64, 49, -37}
, {-18, -68, -57}
, {43, -22, 52}
, {-53, 9, 30}
, {64, -2, 22}
, {56, 53, 26}
, {-7, -18, -76}
, {54, 54, 41}
, {42, -24, -33}
, {-58, -13, 50}
, {57, -1, -6}
, {58, -23, 72}
, {7, 65, 45}
, {-25, 42, -34}
, {-42, 32, -66}
, {50, 25, 69}
, {30, -28, -47}
, {55, 12, -53}
, {56, -62, -35}
, {-46, -9, -2}
, {47, 14, 21}
, {-74, 33, -22}
, {-86, 44, -74}
, {81, 20, -54}
, {-43, 68, 5}
, {53, 33, -40}
, {-49, 2, -36}
, {42, -77, -4}
, {-71, 14, 36}
, {-44, -20, 40}
, {31, 54, -63}
, {-65, -25, 34}
}
, {{-61, 14, 74}
, {-11, -4, -48}
, {18, -52, -60}
, {15, 70, 17}
, {-36, -8, -64}
, {7, 33, -45}
, {-66, 41, -27}
, {-61, 20, -22}
, {51, -40, -60}
, {-50, -68, -8}
, {-15, 33, -53}
, {-9, 4, -73}
, {33, 32, 8}
, {-23, -12, 33}
, {0, -64, 31}
, {23, 5, 68}
, {6, 49, 17}
, {49, 35, 54}
, {-33, -39, -62}
, {0, 0, 30}
, {42, 61, -30}
, {63, -19, 73}
, {47, -19, 39}
, {7, -4, 29}
, {78, -37, 54}
, {70, 28, -40}
, {70, -67, 18}
, {-40, -23, -10}
, {-54, 44, 23}
, {-43, -85, -39}
, {76, 65, 57}
, {-54, 26, 50}
, {16, -34, -6}
, {-54, -58, 23}
, {-2, 65, 77}
, {-47, 33, 79}
, {64, 60, -5}
, {-37, 67, 75}
, {39, 7, -25}
, {-23, 17, -45}
, {51, -6, -63}
, {20, -30, 66}
, {-49, 3, 57}
, {-64, 50, 47}
, {-47, -94, -64}
, {31, 31, 71}
, {2, 65, -23}
, {-60, 3, -89}
, {1, -17, -52}
, {41, 20, 33}
, {27, -31, 32}
, {-11, -18, -68}
, {27, 73, -69}
, {11, -34, -37}
, {-31, 45, -33}
, {30, -7, 9}
, {-60, -25, 28}
, {-34, -17, -82}
, {-20, -33, -3}
, {-73, -71, -12}
, {3, 29, -36}
, {67, 31, 58}
, {-26, 65, 28}
, {-72, -25, -48}
}
, {{-60, -81, -6}
, {23, -4, -10}
, {-65, -88, -90}
, {-11, 41, 37}
, {-34, 20, 50}
, {-5, -52, -18}
, {-57, -51, -63}
, {34, -48, -45}
, {-24, -69, 4}
, {1, 36, -64}
, {-85, -88, -65}
, {16, -71, -86}
, {-11, -90, -56}
, {19, 7, 3}
, {37, 16, -52}
, {25, -48, -40}
, {3, 23, 26}
, {37, 11, -36}
, {-43, -28, 17}
, {-12, 3, -39}
, {20, 0, -74}
, {52, 43, -17}
, {57, -3, 47}
, {-23, 57, 52}
, {10, 8, 60}
, {-57, 4, -2}
, {16, 61, -55}
, {4, 3, -36}
, {6, 4, -3}
, {8, -30, -13}
, {-18, 53, -67}
, {39, 15, -3}
, {-73, 14, -12}
, {-64, -27, 59}
, {63, 32, 37}
, {12, 33, -4}
, {26, 61, 28}
, {-3, 21, -10}
, {-66, -35, -51}
, {-20, -14, -25}
, {6, 31, 6}
, {-1, -16, -27}
, {48, -18, 50}
, {43, -68, 51}
, {-66, -12, 19}
, {-84, -52, -70}
, {-54, -12, 49}
, {35, 25, 4}
, {-69, -42, 27}
, {-64, 51, -14}
, {-24, -57, -69}
, {-36, -83, 28}
, {-27, 6, -24}
, {36, 51, -9}
, {16, 62, 6}
, {-3, -76, 46}
, {39, -20, 38}
, {-24, -55, 29}
, {-53, -24, 14}
, {43, -49, 1}
, {-29, -37, 23}
, {59, -44, 21}
, {-86, -105, 10}
, {-63, -81, -63}
}
, {{-79, 28, -18}
, {-34, -23, -30}
, {47, -26, 32}
, {-67, 6, -58}
, {-41, -21, 60}
, {-50, -5, 15}
, {17, -46, 25}
, {-15, 63, 60}
, {59, -79, -65}
, {8, -22, -20}
, {33, 19, -78}
, {-92, -62, 1}
, {0, -85, 23}
, {-84, -31, 30}
, {-19, -60, -17}
, {-16, 37, 35}
, {33, -47, -42}
, {40, -44, 0}
, {13, 37, -59}
, {9, 10, -28}
, {-61, -50, -52}
, {-68, -74, -15}
, {0, 31, 56}
, {-4, 38, 20}
, {83, -20, -1}
, {-48, -22, -49}
, {-52, -40, 30}
, {-31, -33, -80}
, {10, 50, -30}
, {3, 55, 0}
, {17, 45, -22}
, {22, -94, -74}
, {-36, -8, -68}
, {5, 15, -12}
, {6, -39, 9}
, {-46, -16, 50}
, {-32, 39, -32}
, {-21, -67, -63}
, {19, 52, 47}
, {24, -16, 26}
, {16, 56, -16}
, {-77, -43, -76}
, {0, 62, 50}
, {-15, -54, -59}
, {-68, 37, -24}
, {45, 56, -29}
, {43, 15, 7}
, {3, -69, 52}
, {-15, 11, 57}
, {0, 17, 37}
, {-22, -25, -30}
, {32, 11, 28}
, {-50, -59, -69}
, {-35, -1, 24}
, {68, -35, 1}
, {-56, 1, -53}
, {47, -36, -73}
, {-17, 19, -3}
, {3, 51, 8}
, {-4, 14, -8}
, {-55, -18, -73}
, {54, 48, -54}
, {20, -39, -6}
, {-81, -16, -61}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   1748
#define POOL_SIZE       4
#define POOL_STRIDE     3
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_6_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_6(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       582
#define CONV_FILTERS        16
#define CONV_KERNEL_SIZE    7
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_5_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_5(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      16
#define CONV_KERNEL_SIZE  7


const int16_t conv1d_5_bias[CONV_FILTERS] = {-8, 32, -5, 11, -9, 16, -5, 18, 0, 4, 34, 4, -10, -5, 25, 2}
;

const int16_t conv1d_5_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{-50, 22, -83, -24, -16, -44, -59}
, {-32, -34, 23, -15, -55, -65, 16}
, {26, 31, -50, 49, -4, 29, -65}
, {36, 25, 32, -35, 0, -22, 65}
, {14, -54, 16, 20, -57, 15, 44}
, {-40, -13, 0, 9, 65, -65, -53}
, {-45, -12, -37, 23, 70, 61, 27}
, {-63, 1, -4, 33, 55, -39, 66}
, {-85, -26, -4, -36, -2, -28, -38}
, {-14, 2, -19, 2, -59, -38, 61}
, {-62, 56, -13, 47, -31, 57, -4}
, {58, 57, 21, -18, 19, -12, -65}
, {80, -53, 45, 85, 31, 95, 37}
, {-51, 36, -8, 51, -15, 67, 56}
, {-50, 28, -44, -46, -23, -58, -69}
, {-14, -42, 1, -47, 27, 9, 1}
, {-41, -45, -12, 10, 15, 68, -48}
, {63, 56, 46, -27, 53, -17, -39}
, {0, 15, 23, -44, -38, 5, -28}
, {-21, -35, 46, 68, 29, -28, -26}
, {-53, 37, -47, 2, -84, 28, -22}
, {-63, 21, -43, 26, 0, -16, -6}
, {12, 40, -51, -50, 26, -46, -66}
, {47, -56, 64, 62, -4, -40, -65}
, {19, -47, 35, 11, -53, 47, 1}
, {-26, -57, -20, 33, -32, -25, -26}
, {53, 26, 18, -69, -71, -18, 3}
, {65, 10, -45, 65, 41, -32, -2}
, {-64, 11, 56, -59, 48, -25, -51}
, {1, -64, 59, -13, -67, -47, -32}
, {-20, 36, -45, 55, -2, -36, 47}
, {0, -63, 58, 42, -68, -18, -58}
}
, {{-98, -41, -52, 10, 8, -66, -30}
, {30, -16, -91, -45, -48, -93, -50}
, {57, 86, 45, -18, 32, 64, 96}
, {-31, -34, -57, 20, 20, -6, 48}
, {17, 29, 43, 40, 48, 12, -59}
, {35, 42, -62, 67, -26, 58, -1}
, {4, -32, -4, 1, 55, -69, 33}
, {3, -34, -63, -40, 26, 3, -48}
, {-47, 30, -2, -41, 51, 62, -64}
, {59, -44, -51, 43, 23, -65, 39}
, {3, -89, -57, -84, 17, -50, -48}
, {-57, 57, 37, -26, -20, -57, -20}
, {-22, 23, -5, -54, 24, -30, 27}
, {-12, 49, -56, -12, -50, 31, -49}
, {37, -73, -40, 49, 11, -47, 38}
, {-20, 58, 4, -22, 56, -32, 17}
, {36, 45, -4, -19, -55, 51, 39}
, {42, 53, -16, 12, -76, -5, 51}
, {0, -17, 14, 3, -10, 33, -36}
, {-31, -21, -15, 23, -7, -15, -44}
, {17, 19, 13, -54, 0, -51, 9}
, {-73, 41, -80, -66, 64, -64, -65}
, {-33, -45, 0, 20, 62, 56, 29}
, {63, -55, 29, 10, -53, -65, -16}
, {24, -35, -68, 18, 55, -26, -35}
, {-66, -43, 32, -42, -44, -47, 55}
, {-13, -32, 38, -31, 40, -16, 35}
, {58, -55, -45, -15, -61, 60, 6}
, {30, -61, 27, 13, -46, -14, -6}
, {-22, 39, 15, 12, -70, 17, 19}
, {53, 41, -52, 57, 68, -54, 15}
, {21, -7, 53, -9, 16, 66, -47}
}
, {{-66, -27, 5, 39, -17, -19, -67}
, {-58, 39, 25, -69, -20, -73, -2}
, {59, 35, 24, 57, -7, 11, -44}
, {-75, -33, 36, -23, -19, -11, -47}
, {-21, 42, 32, -11, 24, -62, -8}
, {26, -68, -73, 13, -3, -67, -21}
, {25, 19, 0, -56, -32, 49, 48}
, {51, 40, -24, 12, -35, 30, 12}
, {-18, 10, 54, -28, -7, -69, -46}
, {-2, -67, 30, 17, -38, 30, 28}
, {-39, -62, 30, 25, 35, -34, 63}
, {26, -1, -34, 50, 52, -33, 37}
, {25, 48, -2, 57, 1, -46, 33}
, {-4, 19, 23, 34, 7, 12, 15}
, {77, -30, 22, 73, 61, -19, 13}
, {1, 55, -28, 32, -6, -54, 44}
, {61, -32, 24, -47, 2, -54, -53}
, {-24, -27, 26, 11, -23, -21, 27}
, {-60, 58, -58, 34, 18, 28, -49}
, {44, 35, -82, 8, 45, -51, -77}
, {32, -51, -55, -29, -60, 33, -68}
, {-28, -41, -62, 27, -70, 30, 45}
, {-8, 66, 30, -12, -10, -49, 70}
, {51, 50, 35, 45, -34, -31, 1}
, {33, 4, 14, -63, -9, 16, 20}
, {22, -61, -11, 49, 57, 55, 27}
, {-65, 13, 16, 10, -5, -63, -4}
, {-31, 20, 20, 52, -9, 7, -47}
, {24, 36, -45, 54, -26, 13, 16}
, {-69, 50, 31, -3, -46, 15, -57}
, {32, -6, -45, -40, 54, -60, 18}
, {-25, 6, -35, -39, 44, 11, 46}
}
, {{-10, 10, 11, 19, 28, -23, 81}
, {-10, 0, 79, 33, 55, 51, 13}
, {2, -75, -5, -58, 24, 7, -8}
, {-17, -27, -3, 17, 80, 13, -20}
, {30, 7, 21, -22, 47, -19, 10}
, {-2, -42, -9, 54, -21, -23, -21}
, {-69, -24, 10, -40, 58, 61, -64}
, {49, -67, -56, -68, -4, -31, -8}
, {39, -59, -33, 80, 18, 28, 27}
, {51, 49, 26, 24, 66, 14, -9}
, {-14, 98, 13, 58, 72, 30, 0}
, {8, 15, -75, -46, 45, -51, -21}
, {-43, -37, -66, -26, 0, -9, -59}
, {17, -22, -73, 54, -41, -83, 39}
, {-37, 32, 6, 72, 19, 80, 76}
, {59, -49, 53, -39, 40, 4, 50}
, {-71, -52, -60, -62, -3, -61, 18}
, {-39, 57, -27, -18, 24, 14, 63}
, {59, -26, -63, 29, 13, -45, 35}
, {-38, -13, 71, -13, -38, -5, 52}
, {-7, -26, -6, 4, 38, 6, -29}
, {72, 38, 101, 0, -14, -12, 59}
, {32, 49, 47, 30, 64, -50, 33}
, {17, 64, -59, -43, -26, 59, -51}
, {51, -62, 33, -49, 10, 47, -65}
, {55, 27, 42, -53, 72, -5, -29}
, {-47, 13, -18, -66, -54, -22, -65}
, {60, -16, 6, 101, 29, -23, 39}
, {-31, -13, 62, 41, -57, 26, 31}
, {40, -23, 17, -71, -77, -42, -3}
, {-13, 19, -42, -3, -37, 46, 26}
, {-31, -3, -33, 0, 16, -36, -55}
}
, {{-6, -20, 29, -24, 45, 41, -67}
, {0, 48, 69, -43, 54, -13, 61}
, {-20, 1, -47, -8, -52, -17, 23}
, {20, 23, 4, 77, -20, -10, 21}
, {-6, -44, -13, -40, -33, -63, -63}
, {1, 60, 70, 88, 30, -10, 21}
, {38, -56, 85, 89, 57, -34, -47}
, {44, 48, -11, 67, 63, -9, 2}
, {35, 62, 42, -24, -53, 11, 40}
, {-44, -39, -47, -7, 37, 18, -8}
, {49, 20, 13, 75, 69, 30, 20}
, {-38, -62, -49, -2, 47, -28, 59}
, {-36, -61, 27, -20, 4, 6, 43}
, {-62, 64, -67, -17, 53, 54, 58}
, {49, 60, -10, 39, 10, 23, 11}
, {19, 40, -52, -66, 0, -12, -58}
, {17, 17, 27, 2, -50, 5, 16}
, {26, -35, 42, -17, 52, 65, -32}
, {-54, 34, 9, 62, 37, 54, 60}
, {-58, 31, 66, 61, -10, -40, -58}
, {55, -45, 63, 50, 56, 64, -7}
, {9, -4, 40, 25, 37, 3, 12}
, {-41, 72, 47, 25, 64, -45, -1}
, {26, -69, 56, 66, 67, 17, -56}
, {-60, 59, 13, 21, 40, -27, -39}
, {-31, 13, -53, -41, -25, 59, 2}
, {-62, -35, -29, 16, 10, 48, 2}
, {14, 54, -6, 43, 68, -45, 41}
, {-60, 6, 8, 40, 61, 5, -9}
, {-22, -61, -7, 29, -6, -63, -59}
, {-4, 62, -54, -3, 27, -41, -51}
, {37, 17, 1, -60, 33, -44, -36}
}
, {{26, 18, 26, -13, 74, 108, 81}
, {-17, -23, -47, -56, -49, -55, 56}
, {19, 54, 22, -40, 40, 75, 36}
, {-17, -84, -103, -104, -4, 10, -63}
, {28, -42, 23, -54, -65, -31, 39}
, {-100, -47, -7, 16, -34, -14, -32}
, {-89, -39, 52, 4, 46, -55, -4}
, {-63, 60, 33, -36, 49, 34, 42}
, {-5, -35, -3, 60, -20, 30, -31}
, {16, -23, 43, 9, 16, -12, 84}
, {-38, 24, -67, -40, 20, 52, -54}
, {15, 29, 61, 47, 42, 41, -57}
, {49, -6, -14, -13, -12, -58, 54}
, {-38, 28, -50, 15, 32, -12, 4}
, {32, -67, 12, -20, -28, -61, -30}
, {36, -58, 5, -4, 9, -10, 26}
, {50, -33, 9, 38, -23, 31, 58}
, {-51, 7, -45, -19, -62, 27, -54}
, {-11, -51, -67, -4, -6, -51, 38}
, {43, 13, 28, -50, -47, 45, -64}
, {5, 44, 45, 0, -50, 42, -32}
, {30, 71, -19, 76, 68, 64, 1}
, {48, -14, -7, -32, 4, 19, -51}
, {0, 51, -69, -28, 7, -38, 39}
, {-29, -75, 32, -71, -57, 62, 46}
, {13, -65, 16, -18, 54, 14, 23}
, {-40, -59, 1, -8, 72, -46, 9}
, {-8, 2, -57, 20, -38, -52, 50}
, {42, -54, 70, -39, -54, 55, 13}
, {53, -39, 55, 1, 52, 1, -40}
, {-52, 10, -18, -57, -32, -49, -104}
, {-92, -69, -78, -91, -30, -36, -54}
}
, {{20, -45, 74, 21, -40, -29, 56}
, {-21, 36, 7, -19, 17, -2, 17}
, {-91, -46, -68, 15, -52, -49, -26}
, {-55, 1, -24, 37, -24, 73, 78}
, {-50, 36, 14, 19, -35, -32, 21}
, {-30, -11, 34, 65, 33, 33, -62}
, {17, -57, 12, 38, 21, 32, -20}
, {-6, 0, 42, 12, 6, -64, -9}
, {-64, -55, 11, 56, -21, 6, 2}
, {49, -38, 11, -38, 2, 0, -39}
, {23, -13, 61, -25, 36, -72, -53}
, {21, 21, -43, -85, -73, -67, 41}
, {81, 32, 56, -37, -10, -18, 25}
, {-55, 31, -68, -14, 20, 47, 39}
, {-4, 64, 52, -10, -10, -8, 41}
, {3, -44, 7, -4, -29, -8, -8}
, {-81, -65, -43, -39, 25, -31, -54}
, {-66, -41, -17, 41, 58, 59, 8}
, {-68, -17, 59, -69, -44, 1, 37}
, {-41, 83, 15, 46, 38, 53, -47}
, {37, -30, 70, 10, -26, 65, 46}
, {-43, 32, -74, -31, -52, 51, 47}
, {-42, 35, -53, -71, 19, 27, 16}
, {-64, 0, -56, -38, 19, 38, -25}
, {20, -25, 27, -24, 24, 41, -11}
, {34, 45, 51, -42, -54, 64, 55}
, {-47, 52, -36, 47, 0, 12, -54}
, {32, 22, 29, 45, 11, 40, -11}
, {58, 13, -65, -13, 28, -57, 20}
, {0, -43, 14, -42, 43, 20, -18}
, {32, -11, 56, -40, 58, 44, -25}
, {11, -24, 12, 58, -66, -40, -63}
}
, {{-31, 75, 76, 40, 27, -22, -32}
, {31, -62, -82, -71, -74, -90, 16}
, {-14, -4, -53, -10, -14, -48, -51}
, {-1, -105, -64, -89, -103, -52, -119}
, {19, 0, -8, -62, -49, -13, -24}
, {-5, -72, -89, -119, 0, -34, -111}
, {14, 36, -46, 4, 51, 29, 45}
, {42, 52, 46, -58, -11, -45, -49}
, {10, -41, 29, -9, 10, 43, 6}
, {42, 19, -30, 67, 42, -42, 19}
, {54, -69, -10, 9, 22, 30, 19}
, {26, -60, -19, 25, 13, 63, 57}
, {19, -18, 54, 58, 45, -29, -1}
, {-41, -26, -30, -25, -65, 43, -71}
, {-52, -13, -57, 43, 51, 31, 46}
, {51, -10, -62, -54, -66, 36, -77}
, {5, -20, 2, 60, -31, 60, -27}
, {-40, -62, -1, 53, 2, 42, -20}
, {-3, 41, 39, 2, -51, 43, -93}
, {0, -36, 68, 52, 27, -26, 21}
, {5, 35, 21, 52, 93, 7, 56}
, {-18, -40, -33, 66, 36, 39, 81}
, {65, -32, 58, -49, 8, 16, -52}
, {-67, 30, 18, -16, 0, 60, 20}
, {15, -36, -24, -46, -54, 40, 35}
, {17, 44, 42, -42, 16, 9, -34}
, {-51, -73, -67, -32, -46, -20, 52}
, {38, 65, 91, 22, 19, 19, -47}
, {-18, -32, 52, 73, 14, -54, 23}
, {-1, -63, -18, -36, -26, -10, -28}
, {-11, 28, 3, 56, -26, 24, -34}
, {-11, 10, 9, -37, -37, -89, -31}
}
, {{21, 7, 25, -24, 15, -32, 36}
, {51, -21, -23, -36, -53, 18, -49}
, {4, -59, -31, 0, -97, -35, -27}
, {0, 39, -45, -7, 44, -67, -33}
, {3, 33, -37, -28, -15, 32, -7}
, {-6, 15, -37, -3, -25, 35, -44}
, {-31, -28, 39, 21, -40, 42, -25}
, {-54, 50, -37, 66, -56, -54, 4}
, {-11, 8, 24, 61, -10, -52, -12}
, {69, -14, -16, -3, 40, 44, 61}
, {-43, 50, 26, 39, -42, 1, 3}
, {47, -68, -14, -46, 25, 34, 25}
, {-77, -8, -31, -34, -82, 10, 52}
, {-5, -52, -81, 4, -61, 16, -39}
, {83, -6, 47, 1, -20, 28, -14}
, {-16, 39, 11, 53, 18, 59, 36}
, {-31, -75, -13, 12, 48, 1, -12}
, {64, 9, 32, 48, 34, -20, 41}
, {57, 52, 76, 67, 8, 38, 3}
, {6, 25, -25, 55, 14, -5, -21}
, {62, 38, -31, 66, -17, 9, 2}
, {36, 72, 20, 53, 80, 28, 53}
, {2, -21, 27, 86, -24, 85, -15}
, {45, 49, 7, 8, -10, -4, 10}
, {-27, 29, -76, 41, 35, 59, 28}
, {44, 24, -44, -45, 36, -52, -19}
, {-13, 13, -3, 58, -53, 60, 50}
, {-52, 42, 61, 64, 64, -29, -2}
, {12, 37, 1, 29, 60, 2, 50}
, {-14, 42, -44, -43, -42, -61, -39}
, {46, -27, -2, 46, -61, -38, 19}
, {-47, -17, 49, -58, -6, 36, 20}
}
, {{17, -9, 45, 82, 85, 27, -1}
, {-22, 24, 36, -61, 52, -26, -18}
, {4, 45, 45, 12, -11, -52, 13}
, {-58, 9, 13, -21, 38, 31, -32}
, {19, -46, -7, 52, 25, -11, 3}
, {-34, -36, -75, 17, -116, -107, 14}
, {48, -37, 53, 56, 59, 55, -28}
, {-42, -58, 56, -35, 28, -2, -31}
, {-39, -42, 64, 15, -11, -10, -59}
, {-33, -23, 49, 41, -26, 31, -33}
, {48, -29, -39, 34, -10, -56, -56}
, {54, -11, -37, 22, -54, -5, 35}
, {26, -34, -23, -5, 42, -24, 22}
, {60, 20, 32, -44, 0, 1, 37}
, {-45, 19, -77, 42, 7, -20, 53}
, {-29, 69, -46, -5, -13, 3, -21}
, {-27, 39, 3, 35, -59, 63, 47}
, {-4, 8, -70, -55, 39, -18, 56}
, {-12, -2, 40, -29, 51, 31, 44}
, {-4, 36, 3, -57, -35, 15, -54}
, {71, 55, 31, -36, 64, 44, 70}
, {75, -40, 76, 14, 0, 41, 11}
, {-27, -63, 50, 14, -15, -35, -46}
, {-55, -31, -1, -34, 34, -11, -57}
, {-46, -58, 11, 18, -64, 5, -33}
, {24, -18, -45, 6, 30, -8, 39}
, {4, 4, -19, -41, 41, -28, 22}
, {-45, 6, -2, 56, 30, 20, 67}
, {33, -56, 36, -31, 10, 52, -17}
, {31, 38, 30, -47, 13, -37, 58}
, {41, 2, 48, -14, 29, -8, -38}
, {-43, -38, -29, -48, 39, -16, 33}
}
, {{14, -61, -34, -53, -45, -39, -48}
, {56, 18, 34, -35, -29, 34, -52}
, {-10, 13, 16, 93, 89, 5, -23}
, {-25, 4, 59, 60, 3, 71, 46}
, {-25, 42, 13, -73, -39, -47, -28}
, {72, -6, -5, 13, 83, 39, -23}
, {-41, 38, 20, 3, -47, 39, 14}
, {-61, 0, -56, -19, 25, -14, 28}
, {-66, -85, 9, -64, -56, -67, -70}
, {-22, -62, -19, -8, 12, -79, 35}
, {-85, -74, -44, -92, -25, -82, 0}
, {-53, -18, 31, -28, 14, 47, -79}
, {-37, 8, 18, -57, 41, -20, -21}
, {38, 14, -22, 32, -82, 0, -78}
, {-38, -18, -72, -66, -11, -42, 6}
, {-23, 17, -28, 47, 59, 22, -64}
, {-42, 6, -45, -5, -4, -57, -12}
, {-2, -54, -34, -81, -46, -56, -83}
, {20, -70, 35, 0, -16, -18, -55}
, {39, -33, -28, -35, -73, -43, -59}
, {-43, -48, 20, -76, -55, -63, 41}
, {-43, 28, -27, -92, 31, -58, 3}
, {7, 29, -8, 39, -22, 40, 36}
, {19, -17, -3, -73, 29, -15, -73}
, {-40, -20, -14, -67, -41, 30, -86}
, {54, 56, 64, -24, -55, 9, 8}
, {-21, 12, 2, 21, -2, -76, -49}
, {24, -2, -61, -27, -93, -61, -47}
, {49, 53, 31, -3, -66, -14, -42}
, {25, -84, 20, 50, -8, -39, 44}
, {70, 59, -65, 65, -8, 50, 47}
, {67, 19, 12, 74, 28, 13, 40}
}
, {{53, 18, 73, 51, -11, 76, 78}
, {-13, 16, -28, 33, 0, 30, 45}
, {58, 68, -19, 42, -17, 35, -48}
, {-29, -69, 27, -30, -54, 28, 13}
, {-30, -20, -42, -36, -42, -35, 27}
, {-115, -82, -26, -82, -25, -111, 9}
, {-24, -4, -72, -45, -61, 34, -58}
, {-22, 41, 48, -11, 33, -36, 63}
, {-34, 54, 28, -41, -5, 43, -35}
, {58, 9, 46, 15, 20, 62, 59}
, {-68, -1, 33, 28, -69, -23, -75}
, {-41, -62, -40, 38, -30, 9, -47}
, {7, 23, -36, -1, -30, 41, -5}
, {-32, 49, -18, 22, -40, 13, -16}
, {22, 54, -23, 42, 38, -40, -61}
, {-40, -33, -31, -55, 36, 43, 26}
, {1, 25, 2, -63, 54, 43, 26}
, {-34, -11, -5, 27, 66, 46, 2}
, {-32, -48, -18, -64, 63, 39, 41}
, {-45, 8, -5, -18, 39, 41, 25}
, {-6, -45, -24, 5, 43, 67, 80}
, {92, -36, 34, 36, -10, 56, 20}
, {29, 60, -1, -18, -45, 18, -2}
, {8, 16, -42, 54, -19, -10, -37}
, {32, 56, -38, 15, -38, 14, -43}
, {-15, -59, -30, 47, -35, 49, -25}
, {-5, 43, 46, -65, -34, 50, 10}
, {-11, 12, -2, 39, 69, 0, 23}
, {-21, 39, 47, -9, -11, -10, 0}
, {32, 43, -56, 69, -28, 66, -34}
, {-70, -6, -13, 23, -36, -46, -59}
, {-62, -63, 20, -78, 39, -59, -18}
}
, {{-18, -35, 15, -24, 42, 41, 38}
, {38, 48, 48, 65, -23, 18, 58}
, {-14, -40, -100, -2, -23, -47, 5}
, {57, 2, -40, 54, -47, 45, 50}
, {-67, -70, -25, 52, 35, -59, -76}
, {88, 75, 55, 4, 30, 118, 38}
, {-87, -63, -10, -38, 23, 80, 45}
, {57, 38, 43, -44, 6, -73, 33}
, {-18, 63, -11, 3, 66, 8, 46}
, {-26, -29, -41, -44, 3, -13, -4}
, {27, 4, 33, 45, 0, 48, 64}
, {-55, -20, 4, 5, -22, -34, 11}
, {23, -64, -75, -64, -10, 53, 8}
, {39, -65, 54, 54, -20, 42, 59}
, {-40, 2, -23, 48, 44, -17, -11}
, {47, -12, 32, 45, -31, -24, -52}
, {47, 8, 61, 46, -39, 20, -32}
, {-18, 6, 61, -53, 67, -12, -63}
, {29, -5, -36, 38, 14, -35, 72}
, {-47, -56, -77, -85, -88, 26, -19}
, {-14, 47, 69, 35, -17, -31, -43}
, {54, -7, 22, -55, -48, -26, -60}
, {-1, -11, 2, 73, -7, -18, -50}
, {-44, 41, 51, 65, -1, 5, 74}
, {13, 5, -37, -19, -27, -27, 56}
, {36, 55, 8, 17, -1, 77, 70}
, {-31, 12, -14, -6, -53, -13, -21}
, {-75, -15, 26, -39, 0, 51, -20}
, {-3, -65, -17, -27, -55, -19, 58}
, {-43, -18, -11, -36, -65, 31, 45}
, {-31, -24, -20, -7, -40, -85, -36}
, {-16, -38, 38, 5, 30, 45, 67}
}
, {{59, -11, 17, -16, 7, 19, -6}
, {38, -55, -20, 24, -16, 32, 48}
, {-36, 54, 39, 22, 24, -43, -21}
, {49, -14, -20, 49, 40, -23, -80}
, {40, -12, -14, -47, -71, 32, -48}
, {-50, -30, 45, 69, -1, 49, 6}
, {-17, 88, 77, 2, 27, 28, -4}
, {41, -26, 1, -20, 29, 40, 67}
, {-51, -23, -34, -35, 36, 24, 51}
, {-4, 21, -77, 53, 63, -51, -53}
, {-74, -7, -30, 55, -20, 42, -77}
, {-24, -60, 44, 12, 30, 3, -34}
, {5, 61, -73, -20, 36, -50, 4}
, {44, 52, 26, 15, -60, 30, 43}
, {-13, -78, 45, -34, -44, -66, -45}
, {61, 0, -11, -60, 3, 17, 0}
, {39, 29, -41, 42, -41, -18, -56}
, {-61, -17, -38, -39, -2, 15, 42}
, {39, -27, -14, 57, -20, 16, 37}
, {-43, 58, 53, 3, -54, -39, 7}
, {-9, -16, 44, -3, -50, -61, 9}
, {46, -49, -42, 0, 57, -51, -13}
, {-68, 36, -49, -41, -18, -60, -27}
, {19, 15, 50, 2, -13, 29, 35}
, {4, -13, 15, -51, 48, -69, 43}
, {2, -32, 56, 16, -64, 8, 49}
, {56, 30, -57, 52, -55, -6, 16}
, {-51, 37, 1, -31, 7, -40, -17}
, {54, -60, 53, 47, 47, 58, -4}
, {1, 35, -1, 30, 51, -53, -25}
, {6, 24, -58, -57, 52, -42, 47}
, {21, -55, -37, -38, 33, -21, 6}
}
, {{-14, -70, -74, -28, -22, -59, 33}
, {0, -10, 33, 18, 35, -72, 46}
, {-3, 13, -9, 67, 12, 18, -13}
, {48, -8, -38, 4, -63, 53, 62}
, {3, -23, -2, -47, 4, -31, 25}
, {97, 45, 6, 79, 7, 0, 69}
, {51, -32, -6, -47, 49, -41, -39}
, {9, -60, 63, -60, 45, -17, -61}
, {-44, -66, 5, -3, -92, -6, -48}
, {44, 41, -26, -52, 3, 13, 31}
, {36, -51, 35, -44, -89, -88, 10}
, {51, -72, 23, 62, 5, -36, 40}
, {-46, -71, 29, 21, 22, 57, -62}
, {-20, 53, -24, 5, -35, 6, -45}
, {-26, -15, 29, -72, -29, -66, -64}
, {43, -21, 41, -26, 19, 33, 32}
, {65, 26, 17, -7, 73, 26, 23}
, {-51, -83, 25, 52, -47, -48, -54}
, {16, 34, -12, -51, -59, 20, 40}
, {0, -54, 45, -57, -75, 2, -6}
, {-13, -37, 33, 35, 17, -27, -11}
, {-30, 53, 15, -38, 15, 18, 16}
, {-71, 55, -62, 57, 27, -25, 50}
, {-31, -29, -35, -94, -39, 38, -52}
, {-76, -70, -26, -16, 48, -13, -62}
, {-32, 21, 26, 13, 56, 14, 60}
, {14, -28, -7, 12, -72, -30, 24}
, {-51, -5, -7, -47, 40, 2, 26}
, {54, -24, 3, 3, 5, -54, 53}
, {58, -34, -3, 55, -52, -17, -43}
, {-44, 22, 35, 62, -23, -6, 63}
, {-6, 31, 48, 7, 34, 28, 17}
}
, {{30, 5, 44, -67, 29, 38, 22}
, {30, -44, -22, -40, 26, 81, 29}
, {45, -4, 7, -11, -15, 9, 28}
, {-15, 2, -20, -92, 49, -32, 5}
, {-45, 28, -71, -43, 3, -65, 36}
, {13, 32, -99, 0, -10, -94, 39}
, {-20, -81, 43, 60, -51, -30, -18}
, {-6, -25, -5, 58, 54, 36, -22}
, {-52, 61, 63, -42, 49, -13, 59}
, {4, 21, -62, -4, -67, -14, -15}
, {56, 61, 53, -24, -30, -68, 28}
, {46, 18, -72, 58, -64, -67, -61}
, {61, -83, 23, 55, -16, -62, 27}
, {-48, -22, 44, -9, 22, 21, -15}
, {-64, -25, 18, -57, -62, 34, 48}
, {-46, -25, -10, -52, 52, 57, 66}
, {30, -69, 45, 69, -20, 43, -17}
, {-7, 33, 26, 47, 9, -23, -78}
, {15, -36, -6, 64, 41, 3, -2}
, {-9, 12, 7, -14, -43, -65, -18}
, {-60, -41, 62, 18, -51, -16, -39}
, {-53, 71, 11, -6, 30, -22, -49}
, {-40, 58, -21, 10, 24, -48, -16}
, {-47, -12, -26, 6, -42, 73, 55}
, {16, -35, 69, -51, 18, 64, 60}
, {-11, 11, 15, -65, 54, 30, 25}
, {-36, -56, -61, -51, 42, 56, 30}
, {12, -48, -2, 45, -59, 25, 42}
, {-68, 68, 13, -19, 53, 13, 29}
, {-65, -28, -65, 57, 67, 44, -26}
, {-61, -15, -68, -17, -36, 6, -33}
, {0, 11, -22, -67, 49, -53, -46}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  16
#define INPUT_SAMPLES   576
#define POOL_SIZE       4
#define POOL_STRIDE     3
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_7_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_7(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    averagepool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  16
#define INPUT_SAMPLES   191
#define POOL_SIZE       2
#define POOL_STRIDE     2
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t average_pooling1d_1_output_type[INPUT_CHANNELS][POOL_LENGTH];

void average_pooling1d_1(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned short x;
  long_number_t avg, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
      tmp = 0;
      for (x = 0; x < POOL_SIZE; x++) {
        tmp += input[k][(pos_x*POOL_STRIDE)+x];
      }
#ifdef ACTIVATION_RELU
      if (tmp < 0) {
        tmp = 0;
      }
#endif
      avg = tmp / POOL_SIZE;
      output[k][pos_x] = clamp_to_number_t(avg);
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    flatten.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_DIM [95][16]
#define OUTPUT_DIM 1520

//typedef number_t *flatten_1_output_type;
typedef number_t flatten_1_output_type[OUTPUT_DIM];

#define flatten_1 //noop (IN, OUT)  OUT = (number_t*)IN

#undef INPUT_DIM
#undef OUTPUT_DIM

/**
  ******************************************************************************
  * @file    fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_SAMPLES 1520
#define FC_UNITS 3
#define ACTIVATION_LINEAR

typedef number_t dense_1_output_type[FC_UNITS];

static inline void dense_1(
  const number_t input[INPUT_SAMPLES], 			      // IN
	const number_t kernel[FC_UNITS][INPUT_SAMPLES],  // IN

	const number_t bias[FC_UNITS],			              // IN

	number_t output[FC_UNITS]) {			                // OUT

  unsigned short k, z; 
  long_number_t output_acc; 

  for (k = 0; k < FC_UNITS; k++) { 
    output_acc = 0; 
    for (z = 0; z < INPUT_SAMPLES; z++) 
      output_acc = output_acc + ( kernel[k][z] * input[z] ); 

    output_acc = scale_number_t(output_acc);

    output_acc = output_acc + bias[k]; 


    // Activation function
#ifdef ACTIVATION_LINEAR
    // Linear (MEANS NONE)
    output[k] = clamp_to_number_t(output_acc);
#elif defined(ACTIVATION_RELU)
    // ReLU
    if (output_acc < 0)
      output[k] = 0;
    else
      output[k] = clamp_to_number_t(output_acc);
#endif
  }
}

#undef INPUT_SAMPLES
#undef FC_UNITS
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    weights/fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_SAMPLES 1520
#define FC_UNITS 3


const int16_t dense_1_bias[FC_UNITS] = {3, -13, 11}
;

const int16_t dense_1_kernel[FC_UNITS][INPUT_SAMPLES] = {{14, -21, -9, -41, 6, -11, -6, 22, -2, 13, 18, 11, -24, -32, 36, -29, -28, 23, -9, -29, 13, 20, -37, 4, 16, -23, 13, -57, -15, 11, -44, -36, -41, 11, 16, -33, -17, -26, 12, -12, -18, 11, 2, -32, -30, -20, -38, 17, -16, 19, -7, -11, -11, -32, -6, 12, -3, 13, -44, -42, 13, -33, -26, 3, -18, 0, 12, 14, -22, 20, 35, 0, 3, 24, -29, 6, 0, -19, 0, -8, 15, -23, -27, -11, -3, -2, -21, 17, 8, 4, -13, -17, -4, -23, -27, 21, 39, 24, 6, -8, 36, 4, -16, 19, 14, -14, -24, 13, 20, 13, 7, 22, 21, 43, -16, -11, 15, 0, 42, 39, 14, 24, 32, 8, 3, 16, -36, 12, -21, -11, 0, 27, -9, 13, 24, 17, 3, 0, 11, 1, -5, 21, 0, -34, -11, -37, 18, 17, 18, -21, 19, 29, 39, 24, -15, -38, -39, -14, 26, -24, 7, -10, -17, -10, -2, -21, -23, 14, -17, -32, 0, -34, -3, -48, -51, -9, 20, 2, 5, 0, 14, 13, -35, -1, -17, 4, -27, 27, 8, -25, 3, -28, 6, -34, 9, -40, 14, 13, -27, -42, -8, -20, -12, 10, -3, -15, -33, -5, -40, -10, -14, -7, -17, 0, -30, 8, 24, 7, -29, 22, -32, -7, -14, 23, -14, -28, -30, -2, -38, -13, -4, -14, -2, 3, -32, -39, -9, -9, 11, -18, 0, -15, 0, -27, -20, -33, -41, -2, 7, -26, -29, -18, 16, 18, -49, 15, -3, -22, 0, 9, 12, 0, -26, 13, -44, -20, -6, -15, 20, -46, -31, -35, 17, 13, 20, -15, -13, 12, 2, -14, 9, 4, -1, -15, -42, -11, 0, 6, 25, 2, -6, 55, 43, 32, 30, -25, 18, 33, -17, -14, 6, 2, 55, 11, -1, -3, 23, 40, -11, 7, 33, 26, 27, 55, 26, -8, -5, -4, 24, 16, 44, -3, -6, 29, 47, 11, 29, -8, 43, 8, 36, -14, 1, 34, 18, 9, 38, 47, 1, 1, 26, -10, 40, -7, 19, -23, -16, 34, 30, 35, 41, -14, 0, -25, 16, -23, 19, 12, 7, 39, 31, 0, 7, 29, 36, 37, -28, -21, 1, 16, -13, -27, -13, 3, -10, -12, -27, 0, 1, 6, -34, -1, -9, -5, -10, 16, 6, 0, 7, -18, -42, -22, -37, -38, -11, -26, -16, -25, -9, -27, -13, 18, 1, -11, 11, -17, -9, -1, 37, 7, -23, -18, 12, 32, 12, 16, 29, 30, 20, -1, -32, 17, -10, -18, 7, 11, 15, 12, 44, -12, -8, -1, 3, 5, 11, 11, 7, 0, 15, -7, -13, 6, -11, -13, -1, -23, 14, -6, 23, -37, -31, -13, 8, -1, 1, -18, -33, 0, 7, -10, -22, -10, 3, 1, -1, -28, -10, 20, -22, 6, -20, -19, -31, 0, -29, 25, -3, 13, 0, -9, -13, 0, -18, 14, 12, 3, 15, -6, 0, -8, 42, -21, -2, 24, 16, 2, -1, -6, -16, -5, 16, 40, 34, -20, 28, 21, 31, -21, 16, 0, -29, -9, 12, -10, 21, 14, 19, 14, -4, 33, 9, -1, -12, 12, 10, 18, -16, 0, 20, -17, -5, 13, 1, 26, 10, 7, -10, 41, -11, -7, 25, 9, -7, 22, -19, 10, -21, -10, -7, 0, 9, 6, 4, 25, 16, 0, 29, 14, 26, 23, 11, -9, 26, 32, 16, 5, 33, 6, 34, -1, -1, -2, 25, -8, -19, 3, -7, -11, -38, 19, 16, -32, 20, -16, -2, -35, -30, 22, 21, 3, 9, 14, -11, 33, -3, 8, 20, 36, 34, -2, -27, 19, -22, -7, -33, -21, 7, -3, 17, 24, -23, 0, -9, -32, -3, 27, 14, -15, -14, 0, -16, -20, -22, 13, 4, 24, -33, -2, 15, 8, 18, 4, -5, -24, -21, 30, -28, -30, 15, -11, -3, -8, 3, -45, -40, -23, 1, -17, -4, -25, -3, -23, 2, -14, 2, -7, -1, 9, -8, -18, 22, -18, -13, 7, -27, 9, 0, -15, 12, 12, 26, 77, 26, 50, 16, 15, 36, 25, 44, 8, 24, 15, 35, 0, 58, 54, -30, 56, 28, -9, 30, 44, 21, 46, -8, 41, 15, 43, 58, 34, 18, 5, 45, 37, 20, -5, 25, -7, -7, 39, -14, 0, 8, 16, 18, 5, -17, -19, -18, -18, -6, -19, 2, 25, 38, 15, -9, 11, 35, 61, 23, -9, 28, 2, 38, 12, 15, -12, 2, 35, 32, 20, 27, 41, -8, 50, 11, 32, 45, 42, 27, 54, 58, -7, 29, 17, 33, 23, -17, 39, 0, -9, 25, 13, 19, -7, -7, -5, 42, 1, -17, -17, 14, 7, -3, 30, 14, 24, 15, 26, 26, 6, 17, -8, -13, 8, -6, 18, 45, 44, 9, -16, -14, -10, 11, 26, 12, -16, 28, 32, 40, 35, 10, -12, -14, -13, -10, 20, 40, 14, 11, 5, 35, -5, 28, -8, -20, 41, 12, 42, -7, 23, -18, 18, 14, 45, 46, -3, 1, 20, -22, -7, 22, 0, -5, -22, 30, 26, 25, -15, 22, 0, -22, 2, 35, 28, -7, 6, 19, 24, -16, 28, 20, -6, -28, -16, -6, -10, 5, 22, 21, 20, 17, 5, -19, 17, -26, -9, 23, 0, 29, 0, -20, -2, -9, -30, -16, 32, 33, 0, 28, -3, 15, 35, 22, 15, -10, 9, -24, -4, 18, 25, -20, -20, 19, 37, 20, 34, 29, 1, 11, -13, 35, 1, 1, 13, 8, -16, -16, -2, 31, 6, 0, 43, 37, -27, 18, 19, 4, 7, 19, -10, 28, -16, -24, 18, -12, -11, 11, -18, 30, 12, -10, 4, 27, -2, 29, 14, -12, -29, 18, -26, 26, 14, -9, 12, 27, 2, 28, 30, -15, -1, -1, 21, -20, 43, 2, 20, 14, -1, -13, 0, 35, 35, 29, 18, 6, 27, 42, 37, 23, 21, 34, 42, 0, 38, 3, 37, 37, 12, 12, 37, 6, 26, 3, 27, 35, 19, 7, 0, -3, 16, -10, -17, -2, -17, 13, 7, 7, 38, -8, 22, -11, -17, 12, 32, 39, -18, 27, 38, 23, -4, 21, -3, 3, 43, 42, -2, 33, -6, 30, 1, -9, 40, -7, -10, -17, -5, 12, -6, 33, 0, 7, 38, 9, 4, 28, 4, 0, 12, 1, 9, -4, 4, -16, -4, 30, 22, 23, 4, 32, 18, -6, 22, 22, -18, 15, 1, 16, 25, 5, -8, -9, -1, 29, 0, 29, 23, -6, 0, 27, -8, 10, -18, 32, -15, 17, 19, 4, 18, -9, 19, 32, 25, 6, -19, 27, 3, -22, 2, -5, 20, -13, 5, 1, -11, 16, 28, -6, -18, 0, 12, 11, 4, 5, 16, 23, 20, 19, 16, 22, -19, 24, 20, 18, 17, -8, 10, 14, -21, 0, 26, 35, -17, 18, 26, -13, 6, 5, 28, -14, -15, 35, 32, -22, 29, 1, -20, 25, 40, -31, -34, -16, 4, -6, -33, -24, -16, -27, -28, 0, -8, -10, -7, 5, -14, -35, -23, 4, 6, 2, -42, -8, 10, -3, 21, 24, 8, -11, -26, 19, 22, 14, -34, -30, 7, -6, -25, -20, 0, -16, -45, -23, -39, -20, -39, -11, -34, -23, 2, -30, 29, 16, 6, -22, 9, 15, -5, 3, -36, -33, 7, -29, -33, -37, -31, -15, -2, -30, -14, -24, -20, -41, -26, 3, -45, -24, 8, -29, -1, 2, -26, -28, -18, -37, -45, -10, -14, -9, -4, -4, -8, -23, -31, -35, 28, 24, 13, -20, 28, 27, 26, -27, -20, -32, -29, -9, -8, 6, -12, 0, -11, -27, 29, -24, 3, -28, 9, 20, -25, 13, 11, 21, 11, 9, -1, -11, 11, 17, 10, 18, -22, 19, -18, -1, 9, -13, 0, -12, -16, -4, 7, -14, 0, 9, 22, 3, 23, -2, 6, -21, 41, 37, -6, 29, 11, 31, 16, -27, 4, 10, 16, 6, -7, 25, -21, -20, 4, 21, 8, 30, 20, 4, 23, -6, -12, 12, 31, 28, -23, -27, 9, -15, -26, 16, -25, 27, 2, -17, 41, 1, 15, 18, -3, -18, -27, 23, -17, 11, 25, -1, 9, 23, 12, 18, -5, -6, -17, 30, 1, 2, 3, 27, 16, 0, 24, 14, -5, -8, -27, -26, -26, -4, 3, -31, -12, -35, -48, 8, 9, 24, 1, -32, -16, -27, -41, 9, -33, 13, 0, 4, 11, 2, 14, -9, 14, 6, 20, 22, 15, 18, 16, 11, 21, 16, 16, -35, -14, 4, -28, -1, -23, -37, 0, 20, -17, 9, -44, -30, -25, -24, 9, -26, -28, -6, 17, -8, 19, -19, -14, -12, 0, -12, -4, 11, 0, -19, -22, -26, -32, -42, -36, -18, -10, -35, -36, -30, -21, -26, -48, -35, 13, -28, -46, -8, -40, -16, -42, -6, -44, 3, -7, 2, -62, -34, -29, -56, 4, -53, -54, -9, -40, -39, 5, -48, -38, -40, -38, 0, -23, -42, -37, -49, 3, -18, -24, 15, -27, -46, -22, -53, 5, -12, -54, -45, -4, -7, -48, -39, 0, -19, -66, 2, -23, -4, -38, 17, -23, -48, -10, -35, -24, -61, -36, -54, -42, -27, -27, -32, -25, -9, 19, 1, -16, 6, -36, 17, -32, -41, -62}
, {-5, -6, 22, 22, 28, 23, 22, 21, 37, 29, 35, 3, 25, -13, 10, -23, 2, 21, 0, -19, -32, -6, -37, -15, 20, -38, -27, -1, -22, -3, 11, 0, 12, 5, 31, -19, 31, -21, 1, -4, -28, -12, 28, 22, 14, -16, 12, 25, 15, 40, -49, 28, -7, 10, -6, -1, 29, 29, 23, 32, 10, -41, -20, 14, 18, 34, -1, -20, -10, -2, 7, 24, 11, -8, -28, 15, 11, -19, -32, -22, -18, -1, 0, -19, 5, 10, 50, 18, -13, 11, -19, 4, -18, -9, 6, -35, -46, 5, -1, -43, -61, -20, -21, -59, -9, -12, -13, -46, -25, -61, 1, -42, -28, -13, -12, -5, 0, -4, -64, -62, -21, 8, -8, -1, 0, -1, 7, -47, -4, -44, -18, -39, -9, -27, 7, -28, -30, 6, -27, -43, -16, 6, 22, 3, -16, -44, -14, -23, -11, -63, -40, -52, 0, -4, -17, -3, -40, -53, -33, -39, -37, -40, 2, -37, 6, -16, -27, 20, 17, -11, 8, -54, 6, -28, 3, -42, -61, -64, -27, 13, -11, -56, -33, 2, -22, -24, 2, -32, -26, 9, -4, -6, -19, -12, 3, 2, -4, -20, -16, 15, 30, 25, -19, 4, 20, -10, 14, -5, -17, -18, 1, -3, 2, 16, 29, 10, 20, 11, -24, -21, 7, -9, -10, 18, 23, 8, -6, -3, 9, 27, 4, -1, -21, -2, 19, 23, -20, -12, 11, 2, 1, 3, -31, -14, -1, 18, 10, -4, 20, 23, -25, 5, 10, -9, 16, -16, 10, 25, -3, -20, -16, 32, -17, -11, -17, -20, 27, -3, -34, -3, -25, 7, 2, 30, 19, 2, 27, 28, 9, 20, 21, 5, -5, 9, -7, 37, 43, 41, 25, 39, 14, 19, -40, -32, -11, 2, 43, -1, -2, -15, -29, 19, 6, -5, -7, 18, -41, -1, -4, -2, -27, -39, -27, 5, -26, 22, 0, -5, -32, -9, -8, -27, 17, -31, 13, -29, -34, -11, 15, -13, 22, -3, -27, 4, 18, -27, -48, 2, -7, -10, -30, 5, -11, -19, -6, -17, 26, 30, 1, 41, 15, -30, 30, 22, 40, 0, 33, -21, -7, -5, -13, 34, 8, 12, 9, 15, 18, -6, -5, 4, 28, 34, 10, 10, -2, -16, 52, 41, 56, 52, 59, 59, 44, 53, 24, 39, 32, 5, 7, 11, 26, 5, -2, 10, 25, -10, 34, -12, 36, -20, 14, 24, 7, 23, -16, -9, 22, 9, -11, 28, 24, 8, 20, 1, 5, 22, 31, 16, 33, 24, 16, 2, 28, 8, -21, -14, 11, 14, -28, -28, 7, -32, -26, 16, 26, -2, 34, -16, -19, 13, 23, -6, 25, 30, 8, 36, 12, 30, -2, 14, -14, -19, 32, 9, 0, -5, 21, 13, 37, 42, 37, 35, 1, 27, 36, 48, 34, -16, -9, 47, 4, -9, 44, 41, 40, -44, 2, -37, -35, -32, 12, -30, -25, -29, 10, -26, 19, -41, -10, 0, 3, 5, -48, 3, 2, 11, 19, 10, 0, 20, 9, -20, 11, -12, -24, -34, 0, -19, 15, -25, 1, -26, -20, 17, 4, -35, -7, -13, -21, 18, -22, -12, -6, 3, 1, -2, 10, -5, 19, 12, -27, -1, -10, 10, -43, -42, -35, -47, -5, -23, -31, -16, 3, 28, -2, -18, 0, -7, -14, -48, -12, -19, -15, 4, 17, -4, -7, -27, -27, 19, 11, 18, -20, -35, -21, -7, 14, 9, -11, 2, 35, -16, 24, 0, -1, -31, 17, -12, 12, 20, 20, 6, -29, -19, -6, -23, 18, 20, 22, -11, -2, -20, -31, 18, 8, -28, -24, -21, 7, 35, -10, 10, 1, -5, -33, 7, 29, -14, -11, 41, -30, 7, 24, -10, -32, 35, -22, -10, -13, -14, 0, -34, 16, -14, -11, -11, 19, -5, 14, -1, 27, 20, 35, -25, -28, -3, 22, 3, -10, 23, -7, -7, -12, 30, 15, 23, 27, 24, 37, 19, -20, 14, -19, 25, -9, -10, -1, -26, -12, -21, -10, 26, -3, 39, 21, -42, 33, 1, -16, -55, -28, -30, -14, -56, -20, -4, 0, -54, -1, -47, -53, -12, -29, -47, -17, -47, -15, -52, -33, -45, -42, -10, -28, -71, 1, -20, -46, -3, -43, -49, -65, -21, -16, -42, -45, -36, -11, -39, 25, -7, -28, -25, -70, -6, -6, -21, 9, 21, 16, -1, -33, 6, 0, 0, -18, 0, -11, 2, 15, -20, 11, 7, 3, -11, -4, 10, -40, -29, -50, 10, -40, -20, -31, -2, -25, 4, 9, 18, -22, -50, -17, -21, -31, 8, -36, -52, -2, -13, -36, 13, -8, 32, -4, 26, 30, 3, 8, -2, -3, -1, 12, 21, 28, -17, -3, 0, -23, 8, -35, -31, -33, 3, -3, 19, 0, -19, -25, -41, -30, 6, -26, 8, 19, 11, 16, -22, -27, -1, -34, 27, -24, 14, 9, 7, 24, 19, 4, -36, 13, -21, -17, -9, -16, -13, -1, -2, 4, 12, 8, -14, -34, -20, 20, -29, 11, 14, 4, -24, 27, 39, 10, 24, -7, -11, 35, -29, 5, -15, 13, -4, 39, 29, 6, 8, -19, 31, -6, 17, 5, -20, 19, 3, 9, 37, 17, -2, 0, -25, -9, -15, -47, -22, -30, -12, 3, -12, -16, 15, -7, 7, -14, -25, -4, -22, 0, -32, 19, -4, -20, -25, -14, -17, 0, -11, 7, -21, -1, -12, -34, -30, -17, -24, 13, -24, -29, -5, -30, 6, -43, -8, 8, 19, -27, 2, -6, 35, -19, -16, 12, -4, 2, -24, -34, -2, -44, -14, -38, 24, 8, -13, -25, -16, -19, -9, 24, 24, -12, -19, -17, 15, 14, -2, -33, -2, -12, 21, -4, -20, -29, 5, 12, 1, -6, -31, -2, 0, 19, -39, -15, 6, -3, -41, -36, -16, -54, -15, -11, -27, -10, -32, -32, -14, -29, 0, 1, -24, -49, -45, -21, -27, -60, -42, -25, -38, -19, -5, -17, -30, -59, -24, -57, -64, -42, -69, -45, -10, -43, -6, -21, -42, -41, -55, -67, -27, -18, -63, -4, -49, -20, -15, -4, -9, -47, -54, -19, -23, -52, -5, -26, -57, -18, -3, -45, -69, -57, 2, -58, -24, -38, -39, -43, -47, -52, -34, -27, -41, -64, -28, -12, -41, -33, -30, -48, -50, -32, -32, 0, -22, -29, -46, -48, -17, -56, -18, -48, 11, 1, 25, -9, -38, -32, 11, 7, -14, 13, -18, 14, -19, 1, 22, -25, -29, -34, -8, 10, -6, -17, -25, 9, 25, -6, -27, -35, 7, -38, 11, -2, -39, 1, 3, -12, 13, 0, 17, 13, -29, 13, -11, 6, -26, -26, 20, -25, -9, -19, 25, -16, 1, 23, 5, 23, -14, -25, -29, -8, 18, -35, -10, 12, 21, -24, -4, 10, 3, 30, -21, 19, -25, 8, -36, -31, 0, 24, -25, -3, -20, 24, 22, 16, -18, -14, 5, 10, -7, -11, 28, -29, 7, -5, 15, 55, 27, 6, -3, 43, 16, 0, 31, 25, 49, 50, 0, 9, 25, 3, 36, -10, -1, 37, 24, 3, -11, -9, -17, 29, -6, 9, -28, 30, 43, -12, 28, 37, -5, 28, 26, -6, 33, -21, -19, -8, 8, 13, 38, 46, 43, 35, 14, 36, 18, 35, 5, 7, -15, 28, 12, -18, 17, 37, 7, 2, 27, 14, 38, 2, -4, 33, 1, 41, 0, 3, -11, -7, -21, 35, 6, -11, -6, 32, -22, -4, 13, -9, -7, 33, -7, 28, -24, 45, 50, -8, 31, 7, 48, 17, 15, 12, 19, -8, 4, -10, -28, 14, -25, 32, -12, -13, -3, -13, -24, -19, 22, 11, 22, -31, 7, 2, 10, -5, -18, 20, -24, -1, 9, 1, -2, 19, 26, 12, 2, -15, 1, -12, 31, -4, 25, 17, -27, 16, -25, -17, 0, 12, 10, 17, -1, -13, -15, -3, -19, -6, -20, -28, 9, 9, 11, -26, -30, -15, -23, -32, -19, 14, 15, -24, -34, -25, -14, -42, 17, -31, -21, 21, 21, -24, -12, -11, -20, -1, 1, -10, 24, -16, -6, -17, 12, -32, -27, 26, -3, -18, -32, -41, -12, 18, 4, -22, -28, -12, -1, 11, -17, 0, 4, -18, 5, 19, -42, -37, -22, 23, -5, 5, -30, -31, -4, 13, -7, 8, -5, 17, -2, 10, 19, 23, 21, -15, -27, 4, -14, 23, 7, -16, 7, 24, 0, -36, 13, -34, -16, 14, -24, 8, -15, -1, -10, -10, -8, 0, 17, 8, -16, -13, -11, 7, 31, 13, -11, -12, 30, 17, 1, -24, -21, -24, -1, -26, 2, -34, -15, 4, -35, 21, 10, -6, -29, 13, -8, 30, 12, 8, -21, 17, -19, -19, -6, -30, -32, -21, 7, -24, 13, -25, -21, -23, -19, -18, 1, 15, -44, -14, -2, -17, -20, -39, -33, 38, -21, -8, -41, 0, -11, -38, -25, 20, -24, -42, 8, 23, 3, 26, -43, 9, 1, -22, -32, -5, 21, -2, 18, -2, -44, -7, -35, -20, 12, -3, -28, 6, -39, 19, -26, -5, -23, -39, -2, -2, 5, -1, -9, 11, -15, 5, -3, 22, -16, -5, -38, -28, -20, -11, -44, 21, -44, -19, 7, -39, -14, -3, -16, -16, -54, -47, -56, -14, -38, -4, 0, -22, 1}
, {-1, 19, -19, 25, -11, 19, 4, -14, -6, 18, -17, -33, 36, -8, -4, 17, -5, -34, -14, -8, 13, -9, -7, -2, -9, 7, -2, -22, 5, 20, 31, -27, -26, -21, -14, 33, 12, 14, -9, 34, -10, 40, -7, 2, 10, 10, 3, -33, 5, -20, -13, 13, 21, 5, -13, 12, -8, -29, -10, 42, 1, -1, 36, -30, -20, 2, -31, 19, -2, 12, -13, -16, 6, 0, 27, -3, -12, -22, -1, 9, -28, 23, -2, -17, -14, -14, 9, -31, -5, -31, 18, -12, -18, 12, 24, 4, -1, 16, 3, -2, 11, 16, 8, 10, 7, 33, 31, 44, 48, 32, 9, 46, 36, 4, 2, 35, -13, -6, 29, -28, 4, 7, 5, -37, -5, 6, 17, 40, 53, 34, 5, 4, -3, 46, 21, 7, -27, -13, 14, 13, -6, -9, -26, 17, 2, 40, 45, 21, 10, 10, 14, 0, 24, 21, 39, 49, 24, 32, -19, 7, 2, 40, 30, 38, -3, 7, 25, -8, 22, 32, -9, 27, 55, 20, 18, 10, 17, 19, 60, 33, 43, 29, 16, 41, 12, 31, -9, 1, 31, -5, 6, -23, 28, -25, 14, -28, -22, 42, -5, 35, -2, -13, 23, 21, 26, -20, 21, 18, -17, -9, -12, 37, 12, 52, -4, 33, -9, -15, -27, 5, 20, 43, -7, 4, 12, 28, 14, 29, 5, -1, 35, -17, 25, -22, 15, 0, 2, 10, -4, 27, 1, -14, 16, 19, -23, 33, 20, -23, 13, -4, -10, -19, -16, 26, 35, 17, -12, -16, 22, 33, 5, 25, 42, 38, -2, 3, 27, 30, -9, 55, 4, 38, 43, 22, 39, -8, 44, -4, 26, 46, 24, 36, -12, -14, 32, -89, -56, -67, -49, -56, -59, -26, -52, -28, -28, 18, -37, -18, 4, -25, -49, 6, 4, 17, -2, 7, -8, 12, -15, 23, -2, -10, -51, 9, -13, -2, -15, -16, -25, 18, -35, -43, -30, -42, -36, -44, -31, -21, -3, -43, -17, 15, -28, -3, -28, 21, -33, -2, 7, -27, 3, 6, -5, -10, -25, -34, -11, -38, -61, -49, -56, 0, -8, -43, 7, -38, -33, -11, -5, -27, -28, 1, 0, 22, 0, -1, -26, -37, -19, 6, -13, -55, -23, 1, -30, -65, -15, -53, -10, -30, -17, -16, -25, -13, -21, -44, 7, -12, -23, 13, -9, 0, -21, -15, 4, 12, 24, -12, 5, -17, -20, -28, -1, 12, -17, -3, 17, -43, 11, -24, -20, 5, 3, 19, 3, -27, 19, -10, 6, -21, -35, -9, -14, 5, -15, -49, -17, 0, -20, -18, 3, 23, -28, 12, 15, 0, 16, 11, -25, 10, 2, 0, -20, -42, -1, 9, -52, 3, 6, -9, -43, -22, 8, 21, 9, -27, -19, 18, -36, -16, -5, -29, -28, -17, 11, 15, -9, 16, 6, -16, -20, -13, -32, -22, 1, 4, -3, -6, -19, -22, -5, 13, -30, 13, -1, -29, -8, 0, 5, -17, -17, 10, -20, 12, -13, 27, -25, 29, -14, 3, -8, 17, 8, 20, 0, 30, -1, 4, -25, 8, -28, -1, 17, 5, 3, -4, -18, -32, -17, -24, 12, -3, 14, 17, -2, -12, 22, 17, 8, -20, 0, -6, -30, 6, -12, 12, -9, -27, -1, -2, -17, 12, 3, -28, 0, 14, -20, -10, -26, -26, -25, 1, -25, -8, -20, 27, 14, -27, 15, 0, -15, -1, 21, 18, -10, -27, 14, 30, -2, 31, 24, -23, -13, -12, 6, 15, -1, -15, -19, 27, -16, 40, 28, 47, 32, -11, 14, -13, -1, -5, 7, -2, -21, 10, -21, -23, 3, -43, 13, 8, 15, -15, 15, -9, -5, -4, -11, 21, -2, 17, 1, -14, 19, -10, 20, 11, 28, -9, 27, 1, -18, -4, -22, 22, 29, -4, -15, 2, 35, 7, -18, -20, 12, -6, 16, 10, -6, -3, 13, 4, -18, 1, 34, 13, -5, 5, -16, 6, 25, 15, -3, -23, 6, 31, 6, -7, -1, 17, 23, -3, 30, 4, 11, -31, -9, -30, -90, -4, -6, 0, -16, -17, -10, 9, 8, -38, 38, -38, -25, 8, -12, 0, -32, -45, -8, 12, -3, -7, -11, 4, -13, 15, 7, 17, 17, 7, 10, -1, -44, -15, 10, 17, -20, 21, 32, -1, -2, 15, -16, 13, 2, 52, -25, -19, -27, -4, 5, -7, -12, 17, 11, 17, -31, -26, 19, -5, -12, -1, -26, -15, -3, -24, 2, -54, -8, 3, 9, 12, -20, -14, -52, -41, -36, 0, -25, -31, -18, 10, -28, 22, -24, 10, -45, -56, -17, 3, -38, -30, -11, -40, -47, -34, -41, -14, -43, -18, 17, -27, 11, -26, 4, -22, -38, -7, 13, -8, -22, -9, -32, -24, 18, 26, -6, 26, 15, 10, -23, -4, -18, 8, -35, 22, 6, 13, -9, 3, -1, 5, -34, -34, -30, -13, -5, 16, 11, -34, -23, -7, -20, 21, 16, -22, 15, -25, 19, 4, 29, -2, 9, 9, -21, -15, -8, -7, 8, -23, 1, -45, 5, -39, -3, -16, -33, 1, 9, -33, -27, -17, -33, -32, 20, 31, 8, -39, 18, 18, -27, -44, 13, -18, -22, -17, -37, -6, 4, 3, -18, 14, -17, -15, -3, -4, -2, -21, 27, 8, 5, -12, 23, 9, -12, -33, 18, -4, 25, 23, -1, -29, -23, -30, -35, -47, -18, -25, -47, -30, -4, -6, 14, -16, -14, 1, -24, -26, -9, 17, -4, 16, -7, -14, -13, 1, 13, -32, -25, 16, 16, -21, -18, 7, -13, 12, 9, -27, -8, 3, -2, 5, 11, 17, -6, 0, -15, -34, -15, -40, 21, 0, 0, 15, 10, 26, -11, -30, 27, -1, -1, 10, 14, -20, 27, 14, 16, -29, 10, 22, 4, -26, 9, 28, 24, -1, 37, 27, 33, -2, 6, 43, 32, -2, 37, 28, 34, 32, 18, 28, 55, 12, 21, 48, 55, 1, 38, -9, 17, 13, 21, 41, 2, 26, 16, 18, -4, 31, -1, 8, 21, 17, 24, -3, -4, -4, -5, 4, 52, 38, 33, 2, 35, 13, 45, -3, 1, -6, 25, 18, 39, 0, -6, 36, 24, -8, -2, 3, 2, 39, 34, 8, 33, 30, 1, 19, 20, -3, 1, 9, 47, 18, 9, 17, 2, -3, 28, 22, 37, 29, 8, -8, 19, 16, -2, -9, 23, 31, 32, -3, -2, -36, 5, 26, 2, 13, -21, -10, 12, 28, -22, -11, -36, -22, 30, -8, 10, -19, -1, 0, -26, -1, -3, -19, 30, -5, 0, 2, 12, -19, 3, 0, -13, 5, 4, 26, 12, -9, -8, -19, -25, 4, 35, -5, 32, -4, 27, 1, 5, -26, 4, -35, -1, 12, -14, -39, -1, 25, 25, 9, -3, 22, 8, 7, -18, 19, -25, 12, -1, -11, -22, -11, -12, 10, -13, 0, 15, 10, 0, -6, -12, -10, -32, -29, 17, 31, -15, -17, -27, -7, 17, 26, -12, -32, 0, -32, -6, 28, -5, 9, -1, 8, 8, -26, 5, -4, 16, -25, -7, -16, 18, -7, 31, 0, 32, 25, 0, 26, 23, -5, 3, -12, -10, 24, 30, 33, -19, -12, -20, 17, -6, 32, -1, -17, 26, 13, 26, 2, 22, -25, 16, 6, -32, 11, -28, 24, -8, 7, -29, -5, -24, -5, 8, -17, 22, 7, 15, -20, -33, -12, -10, -27, 0, 5, -2, -18, 14, 26, 43, 12, 2, 30, 18, -4, 13, -14, 12, 1, -8, 27, 28, -5, 7, -27, 28, -14, -12, -24, -22, 17, -29, -16, -14, 23, 25, 20, -29, -3, 2, -1, 2, -10, -20, -48, -24, -8, 32, -27, 22, 11, -20, 8, 0, -39, -21, -1, -19, -7, -12, -10, -25, 0, -6, -16, 30, -22, 9, -15, 4, -7, 19, -15, 3, -27, -2, -26, -3, 10, 16, 15, -1, 10, 0, -13, -29, -2, -42, 8, -22, -6, -3, -21, 25, 14, -11, 20, 0, -33, 14, 20, -21, 6, -3, -14, -5, 29, 15, -1, 8, -6, -25, -29, -15, -17, -24, 33, 3, -9, -5, -30, 23, -19, -7, 16, 43, 32, 27, 1, 10, 42, 10, 29, 6, 2, -12, 3, 30, 42, 43, 43, 37, -1, 41, 21, 5, 41, 12, 35, 40, 6, 19, 38, -3, 51, 20, 39, 45, 6, 41, 18, -6, -7, 36, 20, 32, 11, 17, 20, 52, 21, 9, 6, 5, 24, 19, 4, -15, 15, 48, 23, 37, 11, 45, 0, 6, 14, 24, -16, 36, 16, 29, 21, 24, 5, 43, -2, 35, 31, 17, 5, 44, 12, 53, 21, 38, -2, 0, 44, 3, 41, 28, -11, 14, 21, -6, 33, -8, 35, -4, 35, 31, 7, 40, 1, 46, 19, 50, 11, 42, 54, 54, 14, 46, 61, 71, 24, 27, 15, 66, 45, -6, 39, 23, 77, 32, 11, 40, 29, 17, 55, 51, 0, 50, 31, -18, 50, 73, 45, 69, 59, 48, 26, 18, 48, 47, 10, 41, -10, 29, 47, 2, 5, 67, 63, 41, 39, 30, 28, 14, 10, 44, 17, 26, 22, 18, 18, -8, -7, 41, 42, 35, 30, 20, 40, 45, 38, 37, 40, 48, 39, 9, 53, 48, 21, 50, 29, 22, 3, 2, 44, 21, 35, 47, 32}
}
;

#undef INPUT_SAMPLES
#undef FC_UNITS
/**
  ******************************************************************************
  * @file    model.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    08 july 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __MODEL_H__
#define __MODEL_H__

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define MODEL_OUTPUT_SAMPLES 3
#define MODEL_INPUT_SAMPLES 16000 // node 0 is InputLayer so use its output shape as input shape of the model
#define MODEL_INPUT_CHANNELS 1

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  //dense_1_output_type dense_1_output);
  number_t output[MODEL_OUTPUT_SAMPLES]);

#endif//__MODEL_H__
/**
  ******************************************************************************
  * @file    model.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#include "model.h"

 // InputLayer is excluded
#include "max_pooling1d_4.c" // InputLayer is excluded
#include "conv1d_3.c"
#include "weights/conv1d_3.c" // InputLayer is excluded
#include "max_pooling1d_5.c" // InputLayer is excluded
#include "conv1d_4.c"
#include "weights/conv1d_4.c" // InputLayer is excluded
#include "max_pooling1d_6.c" // InputLayer is excluded
#include "conv1d_5.c"
#include "weights/conv1d_5.c" // InputLayer is excluded
#include "max_pooling1d_7.c" // InputLayer is excluded
#include "average_pooling1d_1.c" // InputLayer is excluded
#include "flatten_1.c" // InputLayer is excluded
#include "dense_1.c"
#include "weights/dense_1.c"
#endif

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  dense_1_output_type dense_1_output) {

  // Output array allocation
  static union {
    max_pooling1d_4_output_type max_pooling1d_4_output;
    max_pooling1d_5_output_type max_pooling1d_5_output;
    max_pooling1d_6_output_type max_pooling1d_6_output;
    max_pooling1d_7_output_type max_pooling1d_7_output;
  } activations1;

  static union {
    conv1d_3_output_type conv1d_3_output;
    conv1d_4_output_type conv1d_4_output;
    conv1d_5_output_type conv1d_5_output;
    average_pooling1d_1_output_type average_pooling1d_1_output;
    flatten_1_output_type flatten_1_output;
  } activations2;


  //static union {
//
//    static input_2_output_type input_2_output;
//
//    static max_pooling1d_4_output_type max_pooling1d_4_output;
//
//    static conv1d_3_output_type conv1d_3_output;
//
//    static max_pooling1d_5_output_type max_pooling1d_5_output;
//
//    static conv1d_4_output_type conv1d_4_output;
//
//    static max_pooling1d_6_output_type max_pooling1d_6_output;
//
//    static conv1d_5_output_type conv1d_5_output;
//
//    static max_pooling1d_7_output_type max_pooling1d_7_output;
//
//    static average_pooling1d_1_output_type average_pooling1d_1_output;
//
//    static flatten_1_output_type flatten_1_output;
//
  //} activations;

  // Model layers call chain
 // InputLayer is excluded 
  max_pooling1d_4(
     // First layer uses input passed as model parameter
    input,
    activations1.max_pooling1d_4_output
  );
 // InputLayer is excluded 
  conv1d_3(
    
    activations1.max_pooling1d_4_output,
    conv1d_3_kernel,
    conv1d_3_bias,
    activations2.conv1d_3_output
  );
 // InputLayer is excluded 
  max_pooling1d_5(
    
    activations2.conv1d_3_output,
    activations1.max_pooling1d_5_output
  );
 // InputLayer is excluded 
  conv1d_4(
    
    activations1.max_pooling1d_5_output,
    conv1d_4_kernel,
    conv1d_4_bias,
    activations2.conv1d_4_output
  );
 // InputLayer is excluded 
  max_pooling1d_6(
    
    activations2.conv1d_4_output,
    activations1.max_pooling1d_6_output
  );
 // InputLayer is excluded 
  conv1d_5(
    
    activations1.max_pooling1d_6_output,
    conv1d_5_kernel,
    conv1d_5_bias,
    activations2.conv1d_5_output
  );
 // InputLayer is excluded 
  max_pooling1d_7(
    
    activations2.conv1d_5_output,
    activations1.max_pooling1d_7_output
  );
 // InputLayer is excluded 
  average_pooling1d_1(
    
    activations1.max_pooling1d_7_output,
    activations2.average_pooling1d_1_output
  );
 // InputLayer is excluded 
  flatten_1(
    
    activations2.average_pooling1d_1_output,
    activations2.flatten_1_output
  );
 // InputLayer is excluded 
  dense_1(
    
    activations2.flatten_1_output,
    dense_1_kernel,
    dense_1_bias, // Last layer uses output passed as model parameter
    dense_1_output
  );

}
